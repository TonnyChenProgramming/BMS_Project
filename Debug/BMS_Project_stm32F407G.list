
BMS_Project_stm32F407G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009704  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001198  08009898  08009898  0000a898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa30  0800aa30  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa30  0800aa30  0000ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa38  0800aa38  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa3c  0800aa3c  0000ba3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aa40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          0000079c  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115ef  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e61  00000000  00000000  0001d7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00020658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7b  00000000  00000000  000217c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024af0  00000000  00000000  00022543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173c0  00000000  00000000  00047033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db885  00000000  00000000  0005e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139c78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b24  00000000  00000000  00139cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0013f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800987c 	.word	0x0800987c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800987c 	.word	0x0800987c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <buzzer_init>:
#include "buzzer.h"

void buzzer_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <buzzer_init+0x60>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <buzzer_init+0x60>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <buzzer_init+0x60>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <buzzer_init+0x64>)
 8000f70:	f003 ff56 	bl	8004e20 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f78:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <buzzer_init+0x64>)
 8000f8c:	f003 fcb0 	bl	80048f0 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <batteryStatusToString>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "stdio.h"
#include "main.h"

const char* batteryStatusToString(BatteryStatus status) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    switch (status) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d00a      	beq.n	8000fc6 <batteryStatusToString+0x26>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	dc0a      	bgt.n	8000fca <batteryStatusToString+0x2a>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <batteryStatusToString+0x1e>
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d002      	beq.n	8000fc2 <batteryStatusToString+0x22>
 8000fbc:	e005      	b.n	8000fca <batteryStatusToString+0x2a>
        case IDLE: return "Idle";
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <batteryStatusToString+0x38>)
 8000fc0:	e004      	b.n	8000fcc <batteryStatusToString+0x2c>
        case CHARGING: return "Charging";
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <batteryStatusToString+0x3c>)
 8000fc4:	e002      	b.n	8000fcc <batteryStatusToString+0x2c>
        case FULL: return "Full";
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <batteryStatusToString+0x40>)
 8000fc8:	e000      	b.n	8000fcc <batteryStatusToString+0x2c>
        default: return "Unknown";
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <batteryStatusToString+0x44>)
    }
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	08009898 	.word	0x08009898
 8000fdc:	080098a0 	.word	0x080098a0
 8000fe0:	080098ac 	.word	0x080098ac
 8000fe4:	080098b4 	.word	0x080098b4

08000fe8 <oled_init>:


// OLED Initialization Function
void oled_init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000fec:	f000 f90c 	bl	8001208 <ssd1306_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <oled_display>:

// OLED Data Display Function
void oled_display(float voltage,float current, int soc, float power, float temperature,
		int soh, BatteryStatus batteryStatus, int hours, int minutes)
 {
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b092      	sub	sp, #72	@ 0x48
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ffe:	edc7 0a06 	vstr	s1, [r7, #24]
 8001002:	6178      	str	r0, [r7, #20]
 8001004:	ed87 1a04 	vstr	s2, [r7, #16]
 8001008:	edc7 1a03 	vstr	s3, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
    char buffer[30];
    ssd1306_Fill(Black);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f961 	bl	80012dc <ssd1306_Fill>
    // **Voltage and Temperature Line**
    //ssd1306_SetCursor(2, 2);
    //sprintf(buffer, "                 "); // Clear previous text
    //ssd1306_WriteString(buffer, Font_6x8, Black);
    if (power<0.5 && batteryStatus==CHARGING)
 800101a:	edd7 7a04 	vldr	s15, [r7, #16]
 800101e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d510      	bpl.n	800104e <oled_display+0x5a>
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10d      	bne.n	800104e <oled_display+0x5a>
    {
    	ssd1306_SetCursor(2, 32);
 8001032:	2120      	movs	r1, #32
 8001034:	2002      	movs	r0, #2
 8001036:	f000 fa9b 	bl	8001570 <ssd1306_SetCursor>
    	ssd1306_WriteString("Initializing", Font_7x10, White);
 800103a:	4b4d      	ldr	r3, [pc, #308]	@ (8001170 <oled_display+0x17c>)
 800103c:	2201      	movs	r2, #1
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001042:	484c      	ldr	r0, [pc, #304]	@ (8001174 <oled_display+0x180>)
 8001044:	f000 fa6e 	bl	8001524 <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 8001048:	f000 f960 	bl	800130c <ssd1306_UpdateScreen>
 800104c:	e08c      	b.n	8001168 <oled_display+0x174>
    	return;

    }
    ssd1306_SetCursor(2, 2);
 800104e:	2102      	movs	r1, #2
 8001050:	2002      	movs	r0, #2
 8001052:	f000 fa8d 	bl	8001570 <ssd1306_SetCursor>
    sprintf(buffer, "V: %.2fV  T: %.1fC", voltage/1000, temperature); // show voltage in V
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001178 <oled_display+0x184>
 800105e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001062:	ee16 0a90 	vmov	r0, s13
 8001066:	f7ff fa6f 	bl	8000548 <__aeabi_f2d>
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f107 0020 	add.w	r0, r7, #32
 800107c:	e9cd 2300 	strd	r2, r3, [sp]
 8001080:	4622      	mov	r2, r4
 8001082:	462b      	mov	r3, r5
 8001084:	493d      	ldr	r1, [pc, #244]	@ (800117c <oled_display+0x188>)
 8001086:	f006 f8cd 	bl	8007224 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800108a:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <oled_display+0x18c>)
 800108c:	f107 0020 	add.w	r0, r7, #32
 8001090:	2201      	movs	r2, #1
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001096:	f000 fa45 	bl	8001524 <ssd1306_WriteString>
    // **Current and Power Line**
    //ssd1306_SetCursor(2, 12);
    //sprintf(buffer, "                 ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 12);
 800109a:	210c      	movs	r1, #12
 800109c:	2002      	movs	r0, #2
 800109e:	f000 fa67 	bl	8001570 <ssd1306_SetCursor>
    sprintf(buffer, "I: %.2fA P: %.2fW", current/1000, power); // Show current in A
 80010a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001178 <oled_display+0x184>
 80010aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ae:	ee16 0a90 	vmov	r0, s13
 80010b2:	f7ff fa49 	bl	8000548 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	6938      	ldr	r0, [r7, #16]
 80010bc:	f7ff fa44 	bl	8000548 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	f107 0020 	add.w	r0, r7, #32
 80010c8:	e9cd 2300 	strd	r2, r3, [sp]
 80010cc:	4622      	mov	r2, r4
 80010ce:	462b      	mov	r3, r5
 80010d0:	492c      	ldr	r1, [pc, #176]	@ (8001184 <oled_display+0x190>)
 80010d2:	f006 f8a7 	bl	8007224 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80010d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <oled_display+0x18c>)
 80010d8:	f107 0020 	add.w	r0, r7, #32
 80010dc:	2201      	movs	r2, #1
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e2:	f000 fa1f 	bl	8001524 <ssd1306_WriteString>
    // **SOC and SOH Line**
    //ssd1306_SetCursor(2, 22);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 22);
 80010e6:	2116      	movs	r1, #22
 80010e8:	2002      	movs	r0, #2
 80010ea:	f000 fa41 	bl	8001570 <ssd1306_SetCursor>
    snprintf(buffer, sizeof(buffer), "SOC: %d%%  SOH: %d%%", soc, soh);
 80010ee:	f107 0020 	add.w	r0, r7, #32
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <oled_display+0x194>)
 80010fa:	211e      	movs	r1, #30
 80010fc:	f006 f85e 	bl	80071bc <sniprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <oled_display+0x18c>)
 8001102:	f107 0020 	add.w	r0, r7, #32
 8001106:	2201      	movs	r2, #1
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110c:	f000 fa0a 	bl	8001524 <ssd1306_WriteString>
    // **Charging/Discharging Status**
    //ssd1306_SetCursor(2, 32);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 32);
 8001110:	2120      	movs	r1, #32
 8001112:	2002      	movs	r0, #2
 8001114:	f000 fa2c 	bl	8001570 <ssd1306_SetCursor>
    sprintf(buffer, "Status: %s", batteryStatusToString(batteryStatus));
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff40 	bl	8000fa0 <batteryStatusToString>
 8001120:	4602      	mov	r2, r0
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	4919      	ldr	r1, [pc, #100]	@ (800118c <oled_display+0x198>)
 8001128:	4618      	mov	r0, r3
 800112a:	f006 f87b 	bl	8007224 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <oled_display+0x18c>)
 8001130:	f107 0020 	add.w	r0, r7, #32
 8001134:	2201      	movs	r2, #1
 8001136:	9200      	str	r2, [sp, #0]
 8001138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113a:	f000 f9f3 	bl	8001524 <ssd1306_WriteString>
    // **Time Remaining**
    //ssd1306_SetCursor(2, 42);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 42);
 800113e:	212a      	movs	r1, #42	@ 0x2a
 8001140:	2002      	movs	r0, #2
 8001142:	f000 fa15 	bl	8001570 <ssd1306_SetCursor>
    sprintf(buffer, "Time Left: %dh %dm", hours, minutes);
 8001146:	f107 0020 	add.w	r0, r7, #32
 800114a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	4910      	ldr	r1, [pc, #64]	@ (8001190 <oled_display+0x19c>)
 8001150:	f006 f868 	bl	8007224 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <oled_display+0x18c>)
 8001156:	f107 0020 	add.w	r0, r7, #32
 800115a:	2201      	movs	r2, #1
 800115c:	9200      	str	r2, [sp, #0]
 800115e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001160:	f000 f9e0 	bl	8001524 <ssd1306_WriteString>

    // **Update OLED screen**
    ssd1306_UpdateScreen();
 8001164:	f000 f8d2 	bl	800130c <ssd1306_UpdateScreen>
}
 8001168:	3740      	adds	r7, #64	@ 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bdb0      	pop	{r4, r5, r7, pc}
 800116e:	bf00      	nop
 8001170:	0800a694 	.word	0x0800a694
 8001174:	080098bc 	.word	0x080098bc
 8001178:	447a0000 	.word	0x447a0000
 800117c:	080098cc 	.word	0x080098cc
 8001180:	0800a688 	.word	0x0800a688
 8001184:	080098e0 	.word	0x080098e0
 8001188:	080098f4 	.word	0x080098f4
 800118c:	0800990c 	.word	0x0800990c
 8001190:	08009918 	.word	0x08009918

08001194 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	2178      	movs	r1, #120	@ 0x78
 80011c2:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <ssd1306_WriteCommand+0x2c>)
 80011c4:	f003 ff8a 	bl	80050dc <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200006e8 	.word	0x200006e8

080011d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	9202      	str	r2, [sp, #8]
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2240      	movs	r2, #64	@ 0x40
 80011f2:	2178      	movs	r1, #120	@ 0x78
 80011f4:	4803      	ldr	r0, [pc, #12]	@ (8001204 <ssd1306_WriteData+0x30>)
 80011f6:	f003 ff71 	bl	80050dc <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200006e8 	.word	0x200006e8

08001208 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800120c:	f7ff ffc2 	bl	8001194 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8001210:	2064      	movs	r0, #100	@ 0x64
 8001212:	f001 ff71 	bl	80030f8 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f9d6 	bl	80015c8 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800121c:	2020      	movs	r0, #32
 800121e:	f7ff ffc1 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffbe 	bl	80011a4 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001228:	20b0      	movs	r0, #176	@ 0xb0
 800122a:	f7ff ffbb 	bl	80011a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800122e:	20c8      	movs	r0, #200	@ 0xc8
 8001230:	f7ff ffb8 	bl	80011a4 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffb5 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800123a:	2010      	movs	r0, #16
 800123c:	f7ff ffb2 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001240:	2040      	movs	r0, #64	@ 0x40
 8001242:	f7ff ffaf 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 8001246:	20ff      	movs	r0, #255	@ 0xff
 8001248:	f000 f9aa 	bl	80015a0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800124c:	20a1      	movs	r0, #161	@ 0xa1
 800124e:	f7ff ffa9 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8001252:	20a6      	movs	r0, #166	@ 0xa6
 8001254:	f7ff ffa6 	bl	80011a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001258:	20a8      	movs	r0, #168	@ 0xa8
 800125a:	f7ff ffa3 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 800125e:	203f      	movs	r0, #63	@ 0x3f
 8001260:	f7ff ffa0 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001264:	20a4      	movs	r0, #164	@ 0xa4
 8001266:	f7ff ff9d 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800126a:	20d3      	movs	r0, #211	@ 0xd3
 800126c:	f7ff ff9a 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff97 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001276:	20d5      	movs	r0, #213	@ 0xd5
 8001278:	f7ff ff94 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800127c:	20f0      	movs	r0, #240	@ 0xf0
 800127e:	f7ff ff91 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001282:	20d9      	movs	r0, #217	@ 0xd9
 8001284:	f7ff ff8e 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001288:	2022      	movs	r0, #34	@ 0x22
 800128a:	f7ff ff8b 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800128e:	20da      	movs	r0, #218	@ 0xda
 8001290:	f7ff ff88 	bl	80011a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 8001294:	2012      	movs	r0, #18
 8001296:	f7ff ff85 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 800129a:	20db      	movs	r0, #219	@ 0xdb
 800129c:	f7ff ff82 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012a0:	2020      	movs	r0, #32
 80012a2:	f7ff ff7f 	bl	80011a4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012a6:	208d      	movs	r0, #141	@ 0x8d
 80012a8:	f7ff ff7c 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff ff79 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 f988 	bl	80015c8 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f80f 	bl	80012dc <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80012be:	f000 f825 	bl	800130c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <ssd1306_Init+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <ssd1306_Init+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80012ce:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <ssd1306_Init+0xd0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	711a      	strb	r2, [r3, #4]
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200005f0 	.word	0x200005f0

080012dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <ssd1306_Fill+0x14>
 80012ec:	2300      	movs	r3, #0
 80012ee:	e000      	b.n	80012f2 <ssd1306_Fill+0x16>
 80012f0:	23ff      	movs	r3, #255	@ 0xff
 80012f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f6:	4619      	mov	r1, r3
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <ssd1306_Fill+0x2c>)
 80012fa:	f005 fff6 	bl	80072ea <memset>
			sizeof(SSD1306_Buffer));
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f0 	.word	0x200001f0

0800130c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	e016      	b.n	8001346 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3b50      	subs	r3, #80	@ 0x50
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff40 	bl	80011a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ff3d 	bl	80011a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132a:	2010      	movs	r0, #16
 800132c:	f7ff ff3a 	bl	80011a4 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <ssd1306_UpdateScreen+0x4c>)
 8001336:	4413      	add	r3, r2
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff4a 	bl	80011d4 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	3301      	adds	r3, #1
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d9e5      	bls.n	8001318 <ssd1306_UpdateScreen+0xc>
	}
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001f0 	.word	0x200001f0

0800135c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	460b      	mov	r3, r1
 8001368:	71bb      	strb	r3, [r7, #6]
 800136a:	4613      	mov	r3, r2
 800136c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db3d      	blt.n	80013f2 <ssd1306_DrawPixel+0x96>
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	2b3f      	cmp	r3, #63	@ 0x3f
 800137a:	d83a      	bhi.n	80013f2 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d11a      	bne.n	80013b8 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	b2d8      	uxtb	r0, r3
 800138a:	4603      	mov	r3, r0
 800138c:	01db      	lsls	r3, r3, #7
 800138e:	4413      	add	r3, r2
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <ssd1306_DrawPixel+0xa4>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b259      	sxtb	r1, r3
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	4603      	mov	r3, r0
 80013ac:	01db      	lsls	r3, r3, #7
 80013ae:	4413      	add	r3, r2
 80013b0:	b2c9      	uxtb	r1, r1
 80013b2:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <ssd1306_DrawPixel+0xa4>)
 80013b4:	54d1      	strb	r1, [r2, r3]
 80013b6:	e01d      	b.n	80013f4 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	b2d8      	uxtb	r0, r3
 80013c0:	4603      	mov	r3, r0
 80013c2:	01db      	lsls	r3, r3, #7
 80013c4:	4413      	add	r3, r2
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <ssd1306_DrawPixel+0xa4>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4013      	ands	r3, r2
 80013e0:	b259      	sxtb	r1, r3
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	4603      	mov	r3, r0
 80013e6:	01db      	lsls	r3, r3, #7
 80013e8:	4413      	add	r3, r2
 80013ea:	b2c9      	uxtb	r1, r1
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <ssd1306_DrawPixel+0xa4>)
 80013ee:	54d1      	strb	r1, [r2, r3]
 80013f0:	e000      	b.n	80013f4 <ssd1306_DrawPixel+0x98>
		return;
 80013f2:	bf00      	nop
	}
}
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001f0 	.word	0x200001f0

08001404 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4604      	mov	r4, r0
 800140c:	4638      	mov	r0, r7
 800140e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001412:	4623      	mov	r3, r4
 8001414:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b1f      	cmp	r3, #31
 800141a:	d902      	bls.n	8001422 <ssd1306_WriteChar+0x1e>
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001420:	d901      	bls.n	8001426 <ssd1306_WriteChar+0x22>
		return 0;
 8001422:	2300      	movs	r3, #0
 8001424:	e077      	b.n	8001516 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	783b      	ldrb	r3, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	2b80      	cmp	r3, #128	@ 0x80
 8001432:	dc06      	bgt.n	8001442 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8001434:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	461a      	mov	r2, r3
 800143a:	787b      	ldrb	r3, [r7, #1]
 800143c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800143e:	2b40      	cmp	r3, #64	@ 0x40
 8001440:	dd01      	ble.n	8001446 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8001442:	2300      	movs	r3, #0
 8001444:	e067      	b.n	8001516 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e04e      	b.n	80014ea <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	3b20      	subs	r3, #32
 8001452:	7879      	ldrb	r1, [r7, #1]
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	4619      	mov	r1, r3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	440b      	add	r3, r1
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	e036      	b.n	80014da <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800147c:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 800148c:	885b      	ldrh	r3, [r3, #2]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff ff5d 	bl	800135c <ssd1306_DrawPixel>
 80014a2:	e017      	b.n	80014d4 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	b2d8      	uxtb	r0, r3
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	f7ff ff44 	bl	800135c <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3301      	adds	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	783b      	ldrb	r3, [r7, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d3c3      	bcc.n	800146c <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	3301      	adds	r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	787b      	ldrb	r3, [r7, #1]
 80014ec:	461a      	mov	r2, r3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d3ab      	bcc.n	800144c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d005      	beq.n	800150a <ssd1306_WriteChar+0x106>
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	3a20      	subs	r2, #32
 8001504:	440a      	add	r2, r1
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	e000      	b.n	800150c <ssd1306_WriteChar+0x108>
 800150a:	783a      	ldrb	r2, [r7, #0]
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <ssd1306_WriteChar+0x11c>)
 8001512:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	200005f0 	.word	0x200005f0

08001524 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	4638      	mov	r0, r7
 800152e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8001532:	e013      	b.n	800155c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7e3b      	ldrb	r3, [r7, #24]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	463b      	mov	r3, r7
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	f7ff ff60 	bl	8001404 <ssd1306_WriteChar>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d002      	beq.n	8001556 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	e008      	b.n	8001568 <ssd1306_WriteString+0x44>
		}
		str++;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e7      	bne.n	8001534 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <ssd1306_SetCursor+0x2c>)
 8001586:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <ssd1306_SetCursor+0x2c>)
 800158e:	805a      	strh	r2, [r3, #2]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	200005f0 	.word	0x200005f0

080015a0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80015aa:	2381      	movs	r3, #129	@ 0x81
 80015ac:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fdf7 	bl	80011a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fdf3 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80015d8:	23af      	movs	r3, #175	@ 0xaf
 80015da:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <ssd1306_SetDisplayOn+0x38>)
 80015de:	2201      	movs	r2, #1
 80015e0:	715a      	strb	r2, [r3, #5]
 80015e2:	e004      	b.n	80015ee <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80015e4:	23ae      	movs	r3, #174	@ 0xae
 80015e6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <ssd1306_SetDisplayOn+0x38>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fdd7 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200005f0 	.word	0x200005f0

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160a:	f001 fd03 	bl	8003014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160e:	f000 f8a7 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001612:	f000 fa5f 	bl	8001ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001616:	f000 fa3d 	bl	8001a94 <MX_DMA_Init>
  MX_I2C1_Init();
 800161a:	f000 f9bf 	bl	800199c <MX_I2C1_Init>
  MX_ADC1_Init();
 800161e:	f000 f909 	bl	8001834 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001622:	f000 f971 	bl	8001908 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001626:	f000 f9e7 	bl	80019f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize OLED and Buzzer*/
  oled_init();
 800162a:	f7ff fcdd 	bl	8000fe8 <oled_init>
  buzzer_init();
 800162e:	f7ff fc83 	bl	8000f38 <buzzer_init>

  /* Start Timer2 to trigger ADC conversions every 100ms */
  HAL_TIM_Base_Start(&htim2);
 8001632:	483a      	ldr	r0, [pc, #232]	@ (800171c <main+0x118>)
 8001634:	f004 fd90 	bl	8006158 <HAL_TIM_Base_Start>

  /* Enable ADC DMA */
  HAL_ADC_Start(&hadc2);
 8001638:	4839      	ldr	r0, [pc, #228]	@ (8001720 <main+0x11c>)
 800163a:	f001 fdf7 	bl	800322c <HAL_ADC_Start>

  HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 8);  //  Capture 8 words
 800163e:	2208      	movs	r2, #8
 8001640:	4938      	ldr	r1, [pc, #224]	@ (8001724 <main+0x120>)
 8001642:	4839      	ldr	r0, [pc, #228]	@ (8001728 <main+0x124>)
 8001644:	f001 ff82 	bl	800354c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (voltage_and_current_reading_flag)
 8001648:	4b38      	ldr	r3, [pc, #224]	@ (800172c <main+0x128>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <main+0xa0>
	    {
	        voltage_and_current_reading_flag = 0;  // Reset flag
 8001652:	4b36      	ldr	r3, [pc, #216]	@ (800172c <main+0x128>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	        process_voltage_and_current_data();
 8001658:	f001 fc4e 	bl	8002ef8 <process_voltage_and_current_data>
	        processing();
 800165c:	f000 fe80 	bl	8002360 <processing>
	        oled_display(voltage, current, soc, power, temperature, soh, batteryStatus, hours, minutes);
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <main+0x12c>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <main+0x130>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <main+0x134>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <main+0x138>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <main+0x13c>)
 8001678:	ed93 6a00 	vldr	s12, [r3]
 800167c:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <main+0x140>)
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <main+0x144>)
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b31      	ldr	r3, [pc, #196]	@ (800174c <main+0x148>)
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <main+0x14c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4623      	mov	r3, r4
 8001690:	eef0 1a46 	vmov.f32	s3, s12
 8001694:	eeb0 1a66 	vmov.f32	s2, s13
 8001698:	eef0 0a47 	vmov.f32	s1, s14
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	f7ff fca8 	bl	8000ff4 <oled_display>
	    }
	    if (temperature_update_flag)
 80016a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <main+0x150>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d02a      	beq.n	8001704 <main+0x100>
	    {
	    	temperature_update_flag = 0;
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <main+0x150>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	    	reconfigure_to_temperature_channel();
 80016b4:	f001 fa40 	bl	8002b38 <reconfigure_to_temperature_channel>
	    	read_temperature();
 80016b8:	f001 faae 	bl	8002c18 <read_temperature>
	    	reconfigure_to_dual_mode();
 80016bc:	f001 fa20 	bl	8002b00 <reconfigure_to_dual_mode>
	    	oled_display(voltage, current, soc, power, temperature, soh, batteryStatus, hours, minutes);
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <main+0x12c>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <main+0x130>)
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <main+0x134>)
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <main+0x138>)
 80016d2:	edd3 6a00 	vldr	s13, [r3]
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <main+0x13c>)
 80016d8:	ed93 6a00 	vldr	s12, [r3]
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <main+0x140>)
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <main+0x144>)
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <main+0x148>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <main+0x14c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4623      	mov	r3, r4
 80016f0:	eef0 1a46 	vmov.f32	s3, s12
 80016f4:	eeb0 1a66 	vmov.f32	s2, s13
 80016f8:	eef0 0a47 	vmov.f32	s1, s14
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f7ff fc78 	bl	8000ff4 <oled_display>
	    }
	    if (fault_flag)
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <main+0x154>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d09d      	beq.n	8001648 <main+0x44>
	    {
	    	buzzer_on();
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001712:	4812      	ldr	r0, [pc, #72]	@ (800175c <main+0x158>)
 8001714:	f003 fb84 	bl	8004e20 <HAL_GPIO_WritePin>
	    if (voltage_and_current_reading_flag)
 8001718:	e796      	b.n	8001648 <main+0x44>
 800171a:	bf00      	nop
 800171c:	2000073c 	.word	0x2000073c
 8001720:	20000640 	.word	0x20000640
 8001724:	200007d8 	.word	0x200007d8
 8001728:	200005f8 	.word	0x200005f8
 800172c:	20000785 	.word	0x20000785
 8001730:	20000814 	.word	0x20000814
 8001734:	20000818 	.word	0x20000818
 8001738:	20000790 	.word	0x20000790
 800173c:	2000078c 	.word	0x2000078c
 8001740:	2000081c 	.word	0x2000081c
 8001744:	20000794 	.word	0x20000794
 8001748:	20000784 	.word	0x20000784
 800174c:	20000798 	.word	0x20000798
 8001750:	2000079c 	.word	0x2000079c
 8001754:	20000786 	.word	0x20000786
 8001758:	200007d4 	.word	0x200007d4
 800175c:	40020800 	.word	0x40020800

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	@ 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	2230      	movs	r2, #48	@ 0x30
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f005 fdbb 	bl	80072ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <SystemClock_Config+0xcc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	4a27      	ldr	r2, [pc, #156]	@ (800182c <SystemClock_Config+0xcc>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <SystemClock_Config+0xcc>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <SystemClock_Config+0xd0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <SystemClock_Config+0xd0>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <SystemClock_Config+0xd0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017bc:	2301      	movs	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c6:	2302      	movs	r3, #2
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017d4:	23a8      	movs	r3, #168	@ 0xa8
 80017d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017dc:	2307      	movs	r3, #7
 80017de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 ffe3 	bl	80057b0 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f0:	f000 fabc 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2105      	movs	r1, #5
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fa44 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800181e:	f000 faa5 	bl	8001d6c <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001854:	4a2b      	ldr	r2, [pc, #172]	@ (8001904 <MX_ADC1_Init+0xd0>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <MX_ADC1_Init+0xcc>)
 800185a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800185e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <MX_ADC1_Init+0xcc>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <MX_ADC1_Init+0xcc>)
 800187c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001884:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <MX_ADC1_Init+0xcc>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001892:	2201      	movs	r2, #1
 8001894:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_ADC1_Init+0xcc>)
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_ADC1_Init+0xcc>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a4:	4816      	ldr	r0, [pc, #88]	@ (8001900 <MX_ADC1_Init+0xcc>)
 80018a6:	f001 fc4b 	bl	8003140 <HAL_ADC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80018b0:	f000 fa5c 	bl	8001d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80018b4:	2306      	movs	r3, #6
 80018b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80018b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018bc:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	480d      	ldr	r0, [pc, #52]	@ (8001900 <MX_ADC1_Init+0xcc>)
 80018ca:	f002 fa7b 	bl	8003dc4 <HAL_ADCEx_MultiModeConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80018d4:	f000 fa4a 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018d8:	2301      	movs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018e0:	2303      	movs	r3, #3
 80018e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_ADC1_Init+0xcc>)
 80018ea:	f001 ffcb 	bl	8003884 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80018f4:	f000 fa3a 	bl	8001d6c <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200005f8 	.word	0x200005f8
 8001904:	40012000 	.word	0x40012000

08001908 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <MX_ADC2_Init+0x90>)
 800191e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001922:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001926:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001936:	2200      	movs	r2, #0
 8001938:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800194a:	2201      	movs	r2, #1
 800194c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_ADC2_Init+0x8c>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800195c:	480d      	ldr	r0, [pc, #52]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800195e:	f001 fbef 	bl	8003140 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001968:	f000 fa00 	bl	8001d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800196c:	2302      	movs	r3, #2
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001974:	2303      	movs	r3, #3
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_ADC2_Init+0x8c>)
 800197e:	f001 ff81 	bl	8003884 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001988:	f000 f9f0 	bl	8001d6c <Error_Handler>
  // Step 2: Start ADC2 in normal mode before enabling ADC1 dual mode


  /* USER CODE END ADC2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000640 	.word	0x20000640
 8001998:	40012100 	.word	0x40012100

0800199c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019a2:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <MX_I2C1_Init+0x54>)
 80019a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019a8:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_I2C1_Init+0x58>)
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019da:	f003 fa3b 	bl	8004e54 <HAL_I2C_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e4:	f000 f9c2 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200006e8 	.word	0x200006e8
 80019f0:	40005400 	.word	0x40005400
 80019f4:	000186a0 	.word	0x000186a0

080019f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a1e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a3e:	4814      	ldr	r0, [pc, #80]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a40:	f004 fb3a 	bl	80060b8 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a4a:	f000 f98f 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a5c:	f004 fc0b 	bl	8006276 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a66:	f000 f981 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <MX_TIM2_Init+0x98>)
 8001a78:	f004 fe0a 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a82:	f000 f973 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000073c 	.word	0x2000073c

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_DMA_Init+0x3c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2038      	movs	r0, #56	@ 0x38
 8001abc:	f002 faa3 	bl	8004006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac0:	2038      	movs	r0, #56	@ 0x38
 8001ac2:	f002 fabc 	bl	800403e <HAL_NVIC_EnableIRQ>

}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	@ 0x30
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	4b99      	ldr	r3, [pc, #612]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a98      	ldr	r2, [pc, #608]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b96      	ldr	r3, [pc, #600]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	4b92      	ldr	r3, [pc, #584]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a91      	ldr	r2, [pc, #580]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b8f      	ldr	r3, [pc, #572]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b8b      	ldr	r3, [pc, #556]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a8a      	ldr	r2, [pc, #552]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b88      	ldr	r3, [pc, #544]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b84      	ldr	r3, [pc, #528]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a83      	ldr	r2, [pc, #524]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b81      	ldr	r3, [pc, #516]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a7c      	ldr	r2, [pc, #496]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a75      	ldr	r2, [pc, #468]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <MX_GPIO_Init+0x280>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2108      	movs	r1, #8
 8001b96:	4870      	ldr	r0, [pc, #448]	@ (8001d58 <MX_GPIO_Init+0x284>)
 8001b98:	f003 f942 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	486e      	ldr	r0, [pc, #440]	@ (8001d5c <MX_GPIO_Init+0x288>)
 8001ba2:	f003 f93d 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001bac:	486c      	ldr	r0, [pc, #432]	@ (8001d60 <MX_GPIO_Init+0x28c>)
 8001bae:	f003 f937 	bl	8004e20 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4863      	ldr	r0, [pc, #396]	@ (8001d58 <MX_GPIO_Init+0x284>)
 8001bca:	f002 fe91 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	485d      	ldr	r0, [pc, #372]	@ (8001d5c <MX_GPIO_Init+0x288>)
 8001be6:	f002 fe83 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bea:	2308      	movs	r3, #8
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4855      	ldr	r0, [pc, #340]	@ (8001d5c <MX_GPIO_Init+0x288>)
 8001c06:	f002 fe73 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4851      	ldr	r0, [pc, #324]	@ (8001d64 <MX_GPIO_Init+0x290>)
 8001c20:	f002 fe66 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c24:	2310      	movs	r3, #16
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c34:	2306      	movs	r3, #6
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4849      	ldr	r0, [pc, #292]	@ (8001d64 <MX_GPIO_Init+0x290>)
 8001c40:	f002 fe56 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c44:	23e0      	movs	r3, #224	@ 0xe0
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c54:	2305      	movs	r3, #5
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4841      	ldr	r0, [pc, #260]	@ (8001d64 <MX_GPIO_Init+0x290>)
 8001c60:	f002 fe46 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c64:	2304      	movs	r3, #4
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	483c      	ldr	r0, [pc, #240]	@ (8001d68 <MX_GPIO_Init+0x294>)
 8001c78:	f002 fe3a 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4833      	ldr	r0, [pc, #204]	@ (8001d68 <MX_GPIO_Init+0x294>)
 8001c9a:	f002 fe29 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c9e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001ca2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482a      	ldr	r0, [pc, #168]	@ (8001d60 <MX_GPIO_Init+0x28c>)
 8001cb8:	f002 fe1a 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cbc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cce:	2306      	movs	r3, #6
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4820      	ldr	r0, [pc, #128]	@ (8001d5c <MX_GPIO_Init+0x288>)
 8001cda:	f002 fe09 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481c      	ldr	r0, [pc, #112]	@ (8001d64 <MX_GPIO_Init+0x290>)
 8001cf4:	f002 fdfc 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001cf8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4813      	ldr	r0, [pc, #76]	@ (8001d64 <MX_GPIO_Init+0x290>)
 8001d16:	f002 fdeb 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <MX_GPIO_Init+0x28c>)
 8001d2e:	f002 fddf 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <MX_GPIO_Init+0x284>)
 8001d48:	f002 fdd2 	bl	80048f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	@ 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <Error_Handler+0x8>

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	@ 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_ADC_MspInit+0x160>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d16c      	bne.n	8001ec4 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	4b4f      	ldr	r3, [pc, #316]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a4e      	ldr	r2, [pc, #312]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	4b48      	ldr	r3, [pc, #288]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a47      	ldr	r2, [pc, #284]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b45      	ldr	r3, [pc, #276]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001e22:	230a      	movs	r3, #10
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	483e      	ldr	r0, [pc, #248]	@ (8001f30 <HAL_ADC_MspInit+0x168>)
 8001e36:	f002 fd5b 	bl	80048f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    if (hadc->Instance == ADC1 && hadc->Init.DMAContinuousRequests == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <HAL_ADC_MspInit+0x160>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d16c      	bne.n	8001f1e <HAL_ADC_MspInit+0x156>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d167      	bne.n	8001f1e <HAL_ADC_MspInit+0x156>
    {
    	hdma_adc1.Instance = DMA2_Stream0;
 8001e4e:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e50:	4a39      	ldr	r2, [pc, #228]	@ (8001f38 <HAL_ADC_MspInit+0x170>)
 8001e52:	601a      	str	r2, [r3, #0]
    	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e54:	4b37      	ldr	r3, [pc, #220]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
    	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6c:	611a      	str	r2, [r3, #16]
    	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e6e:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e74:	615a      	str	r2, [r3, #20]
    	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e76:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7c:	619a      	str	r2, [r3, #24]
    	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e84:	61da      	str	r2, [r3, #28]
    	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
    	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
    	    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
    	    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e98:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
    	    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001ea0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea6:	4823      	ldr	r0, [pc, #140]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001ea8:	f002 f8e4 	bl	8004074 <HAL_DMA_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_ADC_MspInit+0xee>
    	    {
    	      Error_Handler();
 8001eb2:	f7ff ff5b 	bl	8001d6c <Error_Handler>
    	    }

    	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001eba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_ADC_MspInit+0x16c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ec2:	e02c      	b.n	8001f1e <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f3c <HAL_ADC_MspInit+0x174>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d127      	bne.n	8001f1e <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001ed8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_ADC_MspInit+0x164>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f06:	2304      	movs	r3, #4
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <HAL_ADC_MspInit+0x168>)
 8001f1a:	f002 fce9 	bl	80048f0 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	@ 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	20000688 	.word	0x20000688
 8001f38:	40026410 	.word	0x40026410
 8001f3c:	40012100 	.word	0x40012100

08001f40 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <HAL_ADC_MspDeInit+0x58>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10f      	bne.n	8001f72 <HAL_ADC_MspDeInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_ADC_MspDeInit+0x5c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <HAL_ADC_MspDeInit+0x5c>)
 8001f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 8001f5e:	210a      	movs	r1, #10
 8001f60:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <HAL_ADC_MspDeInit+0x60>)
 8001f62:	f002 fe61 	bl	8004c28 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 f930 	bl	80041d0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001f70:	e00e      	b.n	8001f90 <HAL_ADC_MspDeInit+0x50>
  else if(hadc->Instance==ADC2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_ADC_MspDeInit+0x64>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_MspDeInit+0x50>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_ADC_MspDeInit+0x5c>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <HAL_ADC_MspDeInit+0x5c>)
 8001f82:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f86:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8001f88:	2104      	movs	r1, #4
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <HAL_ADC_MspDeInit+0x60>)
 8001f8c:	f002 fe4c 	bl	8004c28 <HAL_GPIO_DeInit>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40012000 	.word	0x40012000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40012100 	.word	0x40012100

08001fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	@ (800202c <HAL_I2C_MspInit+0x84>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12c      	bne.n	8002024 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001fe6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fec:	2312      	movs	r3, #18
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480c      	ldr	r0, [pc, #48]	@ (8002034 <HAL_I2C_MspInit+0x8c>)
 8002004:	f002 fc74 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 8002012:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_I2C_MspInit+0x88>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	@ 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40005400 	.word	0x40005400
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d10d      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <NMI_Handler+0x4>

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <MemManage_Handler+0x4>

08002090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <UsageFault_Handler+0x4>

080020a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ce:	f000 fff3 	bl	80030b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <DMA2_Stream0_IRQHandler+0x10>)
 80020de:	f002 f99d 	bl	800441c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000688 	.word	0x20000688

080020ec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)  // Ensure callback is triggered by ADC1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_ADC_ConvCpltCallback+0x44>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d112      	bne.n	8002124 <HAL_ADC_ConvCpltCallback+0x38>
    {
        voltage_and_current_reading_flag = 1;  // Set flag when DMA transfer is done
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_ADC_ConvCpltCallback+0x48>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
        temperature_counter++;  // Increment temperature counter every 0.4s
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_ADC_ConvCpltCallback+0x4c>)
 800210e:	701a      	strb	r2, [r3, #0]
        if (temperature_counter >= 13)
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d905      	bls.n	8002124 <HAL_ADC_ConvCpltCallback+0x38>
        {
        	temperature_counter = 0; // reset temperature counter
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_ADC_ConvCpltCallback+0x4c>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
        	temperature_update_flag = 1; // set a flag for temperature update
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_ADC_ConvCpltCallback+0x50>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40012000 	.word	0x40012000
 8002134:	20000785 	.word	0x20000785
 8002138:	20000787 	.word	0x20000787
 800213c:	20000786 	.word	0x20000786

08002140 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002148:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800214c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800215c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002160:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002168:	e000      	b.n	800216c <ITM_SendChar+0x2c>
    {
      __NOP();
 800216a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800216c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f9      	beq.n	800216a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002176:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return 1;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_kill>:

int _kill(int pid, int sig)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021a8:	f005 f8f2 	bl	8007390 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2216      	movs	r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
  return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_exit>:

void _exit (int status)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021c6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffe7 	bl	800219e <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <_exit+0x12>

080021d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e00a      	b.n	80021fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e6:	f3af 8000 	nop.w
 80021ea:	4601      	mov	r1, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	b2ca      	uxtb	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf0      	blt.n	80021e6 <_read+0x12>
  }

  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e009      	b.n	8002234 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	60ba      	str	r2, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f840 	bl	80022ae <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	dbf1      	blt.n	8002220 <_write+0x12>
  }
  return len;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_close>:

int _close(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800226e:	605a      	str	r2, [r3, #4]
  return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_isatty>:

int _isatty(int file)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <__io_putchar>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int __io_putchar(int ch) {
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);  // Send character to SWV ITM console
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff41 	bl	8002140 <ITM_SendChar>
    return ch;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f005 f84a 	bl	8007390 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	@ (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20020000 	.word	0x20020000
 8002328:	00000400 	.word	0x00000400
 800232c:	20000788 	.word	0x20000788
 8002330:	20000970 	.word	0x20000970

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    /* FPU settings */
	//printf("[DEBUG] SCB->VTOR: 0x%08lX\n", SCB->VTOR);
    #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* Set CP10 and CP11 Full Access */
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <SystemInit+0x28>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	4a07      	ldr	r2, [pc, #28]	@ (800235c <SystemInit+0x28>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location */
    #if defined (USER_VECT_TAB_ADDRESS)
        SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
    #else
        SCB->VTOR = 0x08000000;  // ✅ Always set VTOR to Flash
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SystemInit+0x28>)
 800234a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800234e:	609a      	str	r2, [r3, #8]
    #endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <processing>:
void update_total_charge_cycle(void);


//soh wrong triggered. soc miscalcualted after the voltage spike.current is 0 A?
void processing(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	determine_status();
 8002364:	f000 f86c 	bl	8002440 <determine_status>
	// oled requires voltage, current, soc, power, temperature, soh, status, hours, minutes
	if ((batteryStatus == IDLE || batteryStatus == FULL)&&power < 0.5)
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <processing+0xc0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <processing+0x18>
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <processing+0xc0>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d10e      	bne.n	8002396 <processing+0x36>
 8002378:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <processing+0xc4>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d504      	bpl.n	8002396 <processing+0x36>
	{
		soc = calculate_soc();
 800238c:	f000 f8e0 	bl	8002550 <calculate_soc>
 8002390:	4603      	mov	r3, r0
 8002392:	4a25      	ldr	r2, [pc, #148]	@ (8002428 <processing+0xc8>)
 8002394:	6013      	str	r3, [r2, #0]
	}
	if (batteryStatus == FULL && (!charge_up_flag))
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <processing+0xc0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d10d      	bne.n	80023ba <processing+0x5a>
 800239e:	4b23      	ldr	r3, [pc, #140]	@ (800242c <processing+0xcc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <processing+0x5a>
	{
		charge_up_flag = 1;
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <processing+0xcc>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
		soh = calculate_soh();
 80023ac:	f000 f900 	bl	80025b0 <calculate_soh>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002430 <processing+0xd0>)
 80023b4:	6013      	str	r3, [r2, #0]
		update_total_charge_cycle();
 80023b6:	f000 fb1d 	bl	80029f4 <update_total_charge_cycle>
	}
	if (batteryStatus == CHARGING  &&  current > 50)
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <processing+0xc0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d129      	bne.n	8002416 <processing+0xb6>
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <processing+0xd4>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002438 <processing+0xd8>
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd1f      	ble.n	8002416 <processing+0xb6>
	{
		power = calculate_power();
 80023d6:	f000 f935 	bl	8002644 <calculate_power>
 80023da:	eef0 7a40 	vmov.f32	s15, s0
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <processing+0xc4>)
 80023e0:	edc3 7a00 	vstr	s15, [r3]
		calculate_average_voltage();
 80023e4:	f000 f9f2 	bl	80027cc <calculate_average_voltage>
		calculate_average_current();
 80023e8:	f000 fa1a 	bl	8002820 <calculate_average_current>
		calculate_average_power();
 80023ec:	f000 fa6c 	bl	80028c8 <calculate_average_power>
		calculate_average_temperature();
 80023f0:	f000 fa40 	bl	8002874 <calculate_average_temperature>
		calculate_total_energy_charged();
 80023f4:	f000 fa94 	bl	8002920 <calculate_total_energy_charged>
		track_maximum_voltage_current_temperature();
 80023f8:	f000 fabe 	bl	8002978 <track_maximum_voltage_current_temperature>
		total_charging_time_counter++;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <processing+0xdc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	4a0e      	ldr	r2, [pc, #56]	@ (800243c <processing+0xdc>)
 8002404:	6013      	str	r3, [r2, #0]
		detect_overvoltage();
 8002406:	f000 fafd 	bl	8002a04 <detect_overvoltage>
		detect_undervoltage();
 800240a:	f000 fb17 	bl	8002a3c <detect_undervoltage>
		detect_overcurrent();
 800240e:	f000 fb31 	bl	8002a74 <detect_overcurrent>
		detect_short_circuit();
 8002412:	f000 fb4b 	bl	8002aac <detect_short_circuit>

	}

	calculate_remaining_time();
 8002416:	f000 f937 	bl	8002688 <calculate_remaining_time>
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000784 	.word	0x20000784
 8002424:	2000078c 	.word	0x2000078c
 8002428:	20000790 	.word	0x20000790
 800242c:	200007d5 	.word	0x200007d5
 8002430:	20000794 	.word	0x20000794
 8002434:	20000818 	.word	0x20000818
 8002438:	42480000 	.word	0x42480000
 800243c:	200007d0 	.word	0x200007d0

08002440 <determine_status>:

void determine_status(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
	// this function is used to determine the status of the battery, either in charging/full/idle
	// if voltage difference is positive, then it is charging, otherwise, idel
	if (voltage - previous_voltage >= 75 ) // current voltage is 0.01V greater than the last voltage
 8002444:	4b3a      	ldr	r3, [pc, #232]	@ (8002530 <determine_status+0xf0>)
 8002446:	ed93 7a00 	vldr	s14, [r3]
 800244a:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <determine_status+0xf4>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002538 <determine_status+0xf8>
 8002458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	db07      	blt.n	8002472 <determine_status+0x32>
	{
		batteryStatus = CHARGING;
 8002462:	4b36      	ldr	r3, [pc, #216]	@ (800253c <determine_status+0xfc>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
		same_voltage_counter = 0;
 8002468:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <determine_status+0x100>)
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e031      	b.n	80024d6 <determine_status+0x96>
	}
	//if no voltage variation, very low power(cause by noise)
	else if (voltage-previous_voltage <50 && previous_voltage - voltage <50 && power < 0.5)//a noise buffer range
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <determine_status+0xf0>)
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <determine_status+0xf4>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002482:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002544 <determine_status+0x104>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	d522      	bpl.n	80024d6 <determine_status+0x96>
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <determine_status+0xf4>)
 8002492:	ed93 7a00 	vldr	s14, [r3]
 8002496:	4b26      	ldr	r3, [pc, #152]	@ (8002530 <determine_status+0xf0>)
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002544 <determine_status+0x104>
 80024a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	d513      	bpl.n	80024d6 <determine_status+0x96>
 80024ae:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <determine_status+0x108>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d509      	bpl.n	80024d6 <determine_status+0x96>
	{
		same_voltage_counter++;// if it is not continuously increasing, reset to zero
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <determine_status+0x100>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <determine_status+0x100>)
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_voltage = voltage;
 80024d6:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <determine_status+0xf0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <determine_status+0xf4>)
 80024dc:	6013      	str	r3, [r2, #0]

	if (same_voltage_counter >=13) // if the same voltage state last for 10s
 80024de:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <determine_status+0x100>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 80024e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	db14      	blt.n	800251c <determine_status+0xdc>
	{
		if (voltage >=4150)
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <determine_status+0xf0>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800254c <determine_status+0x10c>
 80024fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002504:	db03      	blt.n	800250e <determine_status+0xce>
		{
			batteryStatus = FULL;
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <determine_status+0xfc>)
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e002      	b.n	8002514 <determine_status+0xd4>
		}
		else
		{
			batteryStatus = IDLE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <determine_status+0xfc>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
		}
		same_voltage_counter = 0;
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <determine_status+0x100>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
	}
	previous_voltage = voltage;
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <determine_status+0xf0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <determine_status+0xf4>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000814 	.word	0x20000814
 8002534:	200007a4 	.word	0x200007a4
 8002538:	42960000 	.word	0x42960000
 800253c:	20000784 	.word	0x20000784
 8002540:	200007a8 	.word	0x200007a8
 8002544:	42480000 	.word	0x42480000
 8002548:	2000078c 	.word	0x2000078c
 800254c:	4581b000 	.word	0x4581b000

08002550 <calculate_soc>:
static int calculate_soc(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
    int soc = (voltage - MINIMUM_VOLTAGE) * 100 / (MAXIMUM_VOLTAGE - MINIMUM_VOLTAGE);
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <calculate_soc+0x50>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80025a4 <calculate_soc+0x54>
 8002560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002564:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80025a8 <calculate_soc+0x58>
 8002568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800256c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80025ac <calculate_soc+0x5c>
 8002570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002578:	ee17 3a90 	vmov	r3, s15
 800257c:	607b      	str	r3, [r7, #4]
    if (soc < 0) soc = 0;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	da01      	bge.n	8002588 <calculate_soc+0x38>
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
    if (soc > 100) soc = 100;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	dd01      	ble.n	8002592 <calculate_soc+0x42>
 800258e:	2364      	movs	r3, #100	@ 0x64
 8002590:	607b      	str	r3, [r7, #4]
    return soc;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000814 	.word	0x20000814
 80025a4:	452be000 	.word	0x452be000
 80025a8:	42c80000 	.word	0x42c80000
 80025ac:	44b54000 	.word	0x44b54000

080025b0 <calculate_soh>:
static int calculate_soh(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
    if (current == 0.0f && voltage >= 4000.0f)  // Battery fully charged
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <calculate_soh+0x7c>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d129      	bne.n	8002618 <calculate_soh+0x68>
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <calculate_soh+0x80>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002634 <calculate_soh+0x84>
 80025ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	db1f      	blt.n	8002618 <calculate_soh+0x68>
    {
        // Example Formula: Compare maximum voltage with nominal voltage
        soh = (voltage / MAXIMUM_VOLTAGE) * 100;
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <calculate_soh+0x80>)
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002638 <calculate_soh+0x88>
 80025e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800263c <calculate_soh+0x8c>
 80025ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f2:	ee17 2a90 	vmov	r2, s15
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <calculate_soh+0x90>)
 80025f8:	601a      	str	r2, [r3, #0]

        // Ensure SOH is within 0-100%
        if (soh > 100) soh = 100;
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <calculate_soh+0x90>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	dd02      	ble.n	8002608 <calculate_soh+0x58>
 8002602:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <calculate_soh+0x90>)
 8002604:	2264      	movs	r2, #100	@ 0x64
 8002606:	601a      	str	r2, [r3, #0]
        if (soh < 0) soh = 0;
 8002608:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <calculate_soh+0x90>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da06      	bge.n	800261e <calculate_soh+0x6e>
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <calculate_soh+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e002      	b.n	800261e <calculate_soh+0x6e>
    }
    else
    {
        soh = 0;  // Not fully charged, can't measure SOH
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <calculate_soh+0x90>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    }
    return soh;
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <calculate_soh+0x90>)
 8002620:	681b      	ldr	r3, [r3, #0]
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	20000818 	.word	0x20000818
 8002630:	20000814 	.word	0x20000814
 8002634:	457a0000 	.word	0x457a0000
 8002638:	45834000 	.word	0x45834000
 800263c:	42c80000 	.word	0x42c80000
 8002640:	20000794 	.word	0x20000794

08002644 <calculate_power>:

static inline float calculate_power(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
    return voltage/1000 * current/1000; // Convert mV and mA to W
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <calculate_power+0x34>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800267c <calculate_power+0x38>
 8002652:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <calculate_power+0x3c>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002660:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800267c <calculate_power+0x38>
 8002664:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002668:	eef0 7a66 	vmov.f32	s15, s13
}
 800266c:	eeb0 0a67 	vmov.f32	s0, s15
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000814 	.word	0x20000814
 800267c:	447a0000 	.word	0x447a0000
 8002680:	20000818 	.word	0x20000818
 8002684:	00000000 	.word	0x00000000

08002688 <calculate_remaining_time>:
static void calculate_remaining_time(void)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	af00      	add	r7, sp, #0
	if (batteryStatus == CHARGING && power > 0.5)
 800268c:	4b44      	ldr	r3, [pc, #272]	@ (80027a0 <calculate_remaining_time+0x118>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d174      	bne.n	800277e <calculate_remaining_time+0xf6>
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <calculate_remaining_time+0x11c>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800269e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	dd6a      	ble.n	800277e <calculate_remaining_time+0xf6>
	{
		sec = ((1.0-(float)soc/100) *(float)BATTERY_CAPACITY_MWH/1000 * 3600) / power;
 80026a8:	4b3f      	ldr	r3, [pc, #252]	@ (80027a8 <calculate_remaining_time+0x120>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80027ac <calculate_remaining_time+0x124>
 80026b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026bc:	ee16 0a90 	vmov	r0, s13
 80026c0:	f7fd ff42 	bl	8000548 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	4938      	ldr	r1, [pc, #224]	@ (80027b0 <calculate_remaining_time+0x128>)
 80026ce:	f7fd fddb 	bl	8000288 <__aeabi_dsub>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	a32d      	add	r3, pc, #180	@ (adr r3, 8002790 <calculate_remaining_time+0x108>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff8a 	bl	80005f8 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <calculate_remaining_time+0x12c>)
 80026f2:	f7fe f8ab 	bl	800084c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	a326      	add	r3, pc, #152	@ (adr r3, 8002798 <calculate_remaining_time+0x110>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff78 	bl	80005f8 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <calculate_remaining_time+0x11c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff17 	bl	8000548 <__aeabi_f2d>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4620      	mov	r0, r4
 8002720:	4629      	mov	r1, r5
 8002722:	f7fe f893 	bl	800084c <__aeabi_ddiv>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa13 	bl	8000b58 <__aeabi_d2iz>
 8002732:	4603      	mov	r3, r0
 8002734:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <calculate_remaining_time+0x130>)
 8002736:	6013      	str	r3, [r2, #0]
		hours = sec / 3600;
 8002738:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <calculate_remaining_time+0x130>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <calculate_remaining_time+0x134>)
 800273e:	fb82 1203 	smull	r1, r2, r2, r3
 8002742:	441a      	add	r2, r3
 8002744:	12d2      	asrs	r2, r2, #11
 8002746:	17db      	asrs	r3, r3, #31
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <calculate_remaining_time+0x138>)
 800274c:	6013      	str	r3, [r2, #0]
		minutes = sec % 3600 / 60;
 800274e:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <calculate_remaining_time+0x130>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <calculate_remaining_time+0x134>)
 8002754:	fb83 1302 	smull	r1, r3, r3, r2
 8002758:	4413      	add	r3, r2
 800275a:	12d9      	asrs	r1, r3, #11
 800275c:	17d3      	asrs	r3, r2, #31
 800275e:	1acb      	subs	r3, r1, r3
 8002760:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <calculate_remaining_time+0x13c>)
 800276c:	fb82 1203 	smull	r1, r2, r2, r3
 8002770:	441a      	add	r2, r3
 8002772:	1152      	asrs	r2, r2, #5
 8002774:	17db      	asrs	r3, r3, #31
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <calculate_remaining_time+0x140>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e006      	b.n	800278c <calculate_remaining_time+0x104>
	}
	else
	{
		hours = 0;
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <calculate_remaining_time+0x138>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
		minutes = 0;
 8002784:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <calculate_remaining_time+0x140>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
	}

}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	bdb0      	pop	{r4, r5, r7, pc}
 8002790:	00000000 	.word	0x00000000
 8002794:	40b89c00 	.word	0x40b89c00
 8002798:	00000000 	.word	0x00000000
 800279c:	40ac2000 	.word	0x40ac2000
 80027a0:	20000784 	.word	0x20000784
 80027a4:	2000078c 	.word	0x2000078c
 80027a8:	20000790 	.word	0x20000790
 80027ac:	42c80000 	.word	0x42c80000
 80027b0:	3ff00000 	.word	0x3ff00000
 80027b4:	408f4000 	.word	0x408f4000
 80027b8:	200007a0 	.word	0x200007a0
 80027bc:	91a2b3c5 	.word	0x91a2b3c5
 80027c0:	20000798 	.word	0x20000798
 80027c4:	88888889 	.word	0x88888889
 80027c8:	2000079c 	.word	0x2000079c

080027cc <calculate_average_voltage>:
static void calculate_average_voltage(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
	average_voltage = average_voltage + (voltage - average_voltage)/++number_of_sample;
 80027d0:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <calculate_average_voltage+0x48>)
 80027d2:	ed93 7a00 	vldr	s14, [r3]
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <calculate_average_voltage+0x4c>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027e0:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <calculate_average_voltage+0x50>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <calculate_average_voltage+0x50>)
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <calculate_average_voltage+0x50>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <calculate_average_voltage+0x4c>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <calculate_average_voltage+0x4c>)
 8002806:	edc3 7a00 	vstr	s15, [r3]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000814 	.word	0x20000814
 8002818:	200007ac 	.word	0x200007ac
 800281c:	200007bc 	.word	0x200007bc

08002820 <calculate_average_current>:
static void calculate_average_current(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	average_current = average_current + (current - average_current)/++number_of_sample;
 8002824:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <calculate_average_current+0x48>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <calculate_average_current+0x4c>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <calculate_average_current+0x50>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <calculate_average_current+0x50>)
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <calculate_average_current+0x50>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <calculate_average_current+0x4c>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <calculate_average_current+0x4c>)
 800285a:	edc3 7a00 	vstr	s15, [r3]
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	20000818 	.word	0x20000818
 800286c:	200007b0 	.word	0x200007b0
 8002870:	200007bc 	.word	0x200007bc

08002874 <calculate_average_temperature>:
static void calculate_average_temperature(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	average_temperature = average_temperature + (current - average_temperature)/++number_of_sample;
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <calculate_average_temperature+0x48>)
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <calculate_average_temperature+0x4c>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <calculate_average_temperature+0x50>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <calculate_average_temperature+0x50>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <calculate_average_temperature+0x50>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <calculate_average_temperature+0x4c>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <calculate_average_temperature+0x4c>)
 80028ae:	edc3 7a00 	vstr	s15, [r3]
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	20000818 	.word	0x20000818
 80028c0:	200007b4 	.word	0x200007b4
 80028c4:	200007bc 	.word	0x200007bc

080028c8 <calculate_average_power>:
static void calculate_average_power(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	// applying Incremental (Rolling) Average Method
	average_power = average_power + (power - average_power)/++number_of_sample;
 80028cc:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <calculate_average_power+0x48>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <calculate_average_power+0x4c>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <calculate_average_power+0x50>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <calculate_average_power+0x50>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <calculate_average_power+0x50>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <calculate_average_power+0x4c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <calculate_average_power+0x4c>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	2000078c 	.word	0x2000078c
 8002914:	200007b8 	.word	0x200007b8
 8002918:	200007bc 	.word	0x200007bc
 800291c:	00000000 	.word	0x00000000

08002920 <calculate_total_energy_charged>:


static void calculate_total_energy_charged(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	af00      	add	r7, sp, #0
	total_energy_charged += power * TIME_INTERVAL;
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <calculate_total_energy_charged+0x50>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe0d 	bl	8000548 <__aeabi_f2d>
 800292e:	4604      	mov	r4, r0
 8002930:	460d      	mov	r5, r1
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <calculate_total_energy_charged+0x54>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002968 <calculate_total_energy_charged+0x48>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fd fe59 	bl	80005f8 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f7fd fc9d 	bl	800028c <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f925 	bl	8000ba8 <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
 8002960:	4a03      	ldr	r2, [pc, #12]	@ (8002970 <calculate_total_energy_charged+0x50>)
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	bdb0      	pop	{r4, r5, r7, pc}
 8002968:	9999999a 	.word	0x9999999a
 800296c:	3fe99999 	.word	0x3fe99999
 8002970:	200007c0 	.word	0x200007c0
 8002974:	2000078c 	.word	0x2000078c

08002978 <track_maximum_voltage_current_temperature>:
static void track_maximum_voltage_current_temperature(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
	if (voltage>max.voltage)
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <track_maximum_voltage_current_temperature+0x70>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	d503      	bpl.n	800299a <track_maximum_voltage_current_temperature+0x22>
	{
		max.voltage = voltage;
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <track_maximum_voltage_current_temperature+0x70>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a13      	ldr	r2, [pc, #76]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 8002998:	6013      	str	r3, [r2, #0]
	}
	if (current>max.current)
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 800299c:	ed93 7a01 	vldr	s14, [r3, #4]
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <track_maximum_voltage_current_temperature+0x74>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	d503      	bpl.n	80029b8 <track_maximum_voltage_current_temperature+0x40>
	{
		max.current = current;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <track_maximum_voltage_current_temperature+0x74>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 80029b6:	6053      	str	r3, [r2, #4]
	}
	if (temperature>max.temperature)
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 80029ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <track_maximum_voltage_current_temperature+0x78>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	d400      	bmi.n	80029d0 <track_maximum_voltage_current_temperature+0x58>
	{
		max.temperature = temperature;
	}
}
 80029ce:	e003      	b.n	80029d8 <track_maximum_voltage_current_temperature+0x60>
		max.temperature = temperature;
 80029d0:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <track_maximum_voltage_current_temperature+0x78>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <track_maximum_voltage_current_temperature+0x6c>)
 80029d6:	6093      	str	r3, [r2, #8]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200007c4 	.word	0x200007c4
 80029e8:	20000814 	.word	0x20000814
 80029ec:	20000818 	.word	0x20000818
 80029f0:	2000081c 	.word	0x2000081c

080029f4 <update_total_charge_cycle>:
void update_total_charge_cycle(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
	//read the total charged cycles
	//increment the charged cycles and update the eeprom
	return;
 80029f8:	bf00      	nop
}
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <detect_overvoltage>:
void detect_overvoltage(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	if (voltage > MAXIMUM_VOLTAGE)
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <detect_overvoltage+0x2c>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a34 <detect_overvoltage+0x30>
 8002a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	dc00      	bgt.n	8002a1e <detect_overvoltage+0x1a>
	{
		fault_flag = 1;
	}
}
 8002a1c:	e002      	b.n	8002a24 <detect_overvoltage+0x20>
		fault_flag = 1;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <detect_overvoltage+0x34>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000814 	.word	0x20000814
 8002a34:	45834000 	.word	0x45834000
 8002a38:	200007d4 	.word	0x200007d4

08002a3c <detect_undervoltage>:
void detect_undervoltage(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
	if (voltage < MINIMUM_VOLTAGE)
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <detect_undervoltage+0x2c>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a6c <detect_undervoltage+0x30>
 8002a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a52:	d400      	bmi.n	8002a56 <detect_undervoltage+0x1a>
	{
		fault_flag = 1;
	}
}
 8002a54:	e002      	b.n	8002a5c <detect_undervoltage+0x20>
		fault_flag = 1;
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <detect_undervoltage+0x34>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000814 	.word	0x20000814
 8002a6c:	452be000 	.word	0x452be000
 8002a70:	200007d4 	.word	0x200007d4

08002a74 <detect_overcurrent>:
void detect_overcurrent(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
	if (current>MAXIMUM_CHARGE_CURRENT)
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <detect_overcurrent+0x2c>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002aa4 <detect_overcurrent+0x30>
 8002a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	dc00      	bgt.n	8002a8e <detect_overcurrent+0x1a>
	{
		fault_flag = 1;
	}
}
 8002a8c:	e002      	b.n	8002a94 <detect_overcurrent+0x20>
		fault_flag = 1;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <detect_overcurrent+0x34>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000818 	.word	0x20000818
 8002aa4:	44e10000 	.word	0x44e10000
 8002aa8:	200007d4 	.word	0x200007d4

08002aac <detect_short_circuit>:
void detect_short_circuit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD && current>SHORT_CIRCUIT_CURRENT_THRESHOLD)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <detect_short_circuit+0x40>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002af0 <detect_short_circuit+0x44>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	d400      	bmi.n	8002ac6 <detect_short_circuit+0x1a>
	{
		fault_flag = 1;
	}
}
 8002ac4:	e00d      	b.n	8002ae2 <detect_short_circuit+0x36>
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD && current>SHORT_CIRCUIT_CURRENT_THRESHOLD)
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <detect_short_circuit+0x48>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002af8 <detect_short_circuit+0x4c>
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	dc00      	bgt.n	8002adc <detect_short_circuit+0x30>
}
 8002ada:	e002      	b.n	8002ae2 <detect_short_circuit+0x36>
		fault_flag = 1;
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <detect_short_circuit+0x50>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	20000814 	.word	0x20000814
 8002af0:	453b8000 	.word	0x453b8000
 8002af4:	20000818 	.word	0x20000818
 8002af8:	459c4000 	.word	0x459c4000
 8002afc:	200007d4 	.word	0x200007d4

08002b00 <reconfigure_to_dual_mode>:
static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw);
static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw);
void process_voltage_and_current_data(void);

void reconfigure_to_dual_mode(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 8002b04:	4808      	ldr	r0, [pc, #32]	@ (8002b28 <reconfigure_to_dual_mode+0x28>)
 8002b06:	f000 fb5e 	bl	80031c6 <HAL_ADC_DeInit>
	MX_ADC1_Init();
 8002b0a:	f7fe fe93 	bl	8001834 <MX_ADC1_Init>
    //restart dual mode
    HAL_TIM_Base_Start(&htim2);
 8002b0e:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <reconfigure_to_dual_mode+0x2c>)
 8002b10:	f003 fb22 	bl	8006158 <HAL_TIM_Base_Start>
    HAL_ADC_Start(&hadc2);
 8002b14:	4806      	ldr	r0, [pc, #24]	@ (8002b30 <reconfigure_to_dual_mode+0x30>)
 8002b16:	f000 fb89 	bl	800322c <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 8);
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	4905      	ldr	r1, [pc, #20]	@ (8002b34 <reconfigure_to_dual_mode+0x34>)
 8002b1e:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <reconfigure_to_dual_mode+0x28>)
 8002b20:	f000 fd14 	bl	800354c <HAL_ADC_Start_DMA>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200005f8 	.word	0x200005f8
 8002b2c:	2000073c 	.word	0x2000073c
 8002b30:	20000640 	.word	0x20000640
 8002b34:	200007d8 	.word	0x200007d8

08002b38 <reconfigure_to_temperature_channel>:


void reconfigure_to_temperature_channel(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
	// stop dual mode
	HAL_ADC_Stop_DMA(&hadc1);
 8002b3e:	4831      	ldr	r0, [pc, #196]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b40:	f000 fe24 	bl	800378c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop(&hadc2);
 8002b44:	4830      	ldr	r0, [pc, #192]	@ (8002c08 <reconfigure_to_temperature_channel+0xd0>)
 8002b46:	f000 fc43 	bl	80033d0 <HAL_ADC_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8002b4a:	4830      	ldr	r0, [pc, #192]	@ (8002c0c <reconfigure_to_temperature_channel+0xd4>)
 8002b4c:	f003 fb6c 	bl	8006228 <HAL_TIM_Base_Stop>

	//switch ADC1 to independent mode

	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 8002b50:	482c      	ldr	r0, [pc, #176]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b52:	f000 fb38 	bl	80031c6 <HAL_ADC_DeInit>

	hadc1.Instance = ADC1;
 8002b56:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b58:	4a2d      	ldr	r2, [pc, #180]	@ (8002c10 <reconfigure_to_temperature_channel+0xd8>)
 8002b5a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b5c:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b62:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	4b23      	ldr	r3, [pc, #140]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b80:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <reconfigure_to_temperature_channel+0xdc>)
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	615a      	str	r2, [r3, #20]

    HAL_ADC_Init(&hadc1);
 8002ba4:	4817      	ldr	r0, [pc, #92]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002ba6:	f000 facb 	bl	8003140 <HAL_ADC_Init>

    ADC_MultiModeTypeDef multimode = {0};
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4810      	ldr	r0, [pc, #64]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002bc2:	f001 f8ff 	bl	8003dc4 <HAL_ADCEx_MultiModeConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <reconfigure_to_temperature_channel+0x98>
    {
        Error_Handler();
 8002bcc:	f7ff f8ce 	bl	8001d6c <Error_Handler>
    }

    // Switch ADC1 to PA3 (Temperature)
    ADC_ChannelConfTypeDef sConfig1 = {0}; // Use a local struct
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
    sConfig1.Channel = ADC_CHANNEL_3;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	607b      	str	r3, [r7, #4]
    sConfig1.Rank = 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
    sConfig1.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002be4:	2303      	movs	r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig1) != HAL_OK)
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <reconfigure_to_temperature_channel+0xcc>)
 8002bee:	f000 fe49 	bl	8003884 <HAL_ADC_ConfigChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <reconfigure_to_temperature_channel+0xc4>
    {
      Error_Handler();
 8002bf8:	f7ff f8b8 	bl	8001d6c <Error_Handler>
    }

}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200005f8 	.word	0x200005f8
 8002c08:	20000640 	.word	0x20000640
 8002c0c:	2000073c 	.word	0x2000073c
 8002c10:	40012000 	.word	0x40012000
 8002c14:	0f000001 	.word	0x0f000001

08002c18 <read_temperature>:


void read_temperature(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
   adc_temperature_raw = 0;  // Reset previous readings
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <read_temperature+0x44>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

   // Start ADC Conversion
   // ✅ Start ADC Conversion (Software Trigger)
   HAL_ADC_Start(&hadc1);
 8002c22:	480f      	ldr	r0, [pc, #60]	@ (8002c60 <read_temperature+0x48>)
 8002c24:	f000 fb02 	bl	800322c <HAL_ADC_Start>

   // Wait for ADC conversion to complete
   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002c28:	f04f 31ff 	mov.w	r1, #4294967295
 8002c2c:	480c      	ldr	r0, [pc, #48]	@ (8002c60 <read_temperature+0x48>)
 8002c2e:	f000 fc02 	bl	8003436 <HAL_ADC_PollForConversion>

   // Read ADC value
   adc_temperature_raw = HAL_ADC_GetValue(&hadc1);
 8002c32:	480b      	ldr	r0, [pc, #44]	@ (8002c60 <read_temperature+0x48>)
 8002c34:	f000 fe04 	bl	8003840 <HAL_ADC_GetValue>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a08      	ldr	r2, [pc, #32]	@ (8002c5c <read_temperature+0x44>)
 8002c3c:	6013      	str	r3, [r2, #0]

   // Stop ADC after reading
   HAL_ADC_Stop(&hadc1);
 8002c3e:	4808      	ldr	r0, [pc, #32]	@ (8002c60 <read_temperature+0x48>)
 8002c40:	f000 fbc6 	bl	80033d0 <HAL_ADC_Stop>

   //get the temperature value
   temperature = convert_adc_raw_temperature(adc_temperature_raw);
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <read_temperature+0x44>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f8b5 	bl	8002db8 <convert_adc_raw_temperature>
 8002c4e:	eef0 7a40 	vmov.f32	s15, s0
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <read_temperature+0x4c>)
 8002c54:	edc3 7a00 	vstr	s15, [r3]
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000810 	.word	0x20000810
 8002c60:	200005f8 	.word	0x200005f8
 8002c64:	2000081c 	.word	0x2000081c

08002c68 <convert_adc_raw_voltage_in_mV>:
static inline float convert_adc_raw_voltage_in_mV(uint32_t adc_voltage_raw) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    return (((float)adc_voltage_raw * VREF_ACTUAL1) / 4095.0 * 1.5 * 1000);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	ee17 0a90 	vmov	r0, s15
 8002c7e:	f7fd fc63 	bl	8000548 <__aeabi_f2d>
 8002c82:	a319      	add	r3, pc, #100	@ (adr r3, 8002ce8 <convert_adc_raw_voltage_in_mV+0x80>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcb6 	bl	80005f8 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a316      	add	r3, pc, #88	@ (adr r3, 8002cf0 <convert_adc_raw_voltage_in_mV+0x88>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fdd7 	bl	800084c <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <convert_adc_raw_voltage_in_mV+0x78>)
 8002cac:	f7fd fca4 	bl	80005f8 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <convert_adc_raw_voltage_in_mV+0x7c>)
 8002cbe:	f7fd fc9b 	bl	80005f8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd ff6d 	bl	8000ba8 <__aeabi_d2f>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	ee07 3a90 	vmov	s15, r3
}
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	3ff80000 	.word	0x3ff80000
 8002ce4:	408f4000 	.word	0x408f4000
 8002ce8:	b851eb85 	.word	0xb851eb85
 8002cec:	4007851e 	.word	0x4007851e
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	40affe00 	.word	0x40affe00

08002cf8 <convert_adc_raw_current_in_mA>:


static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    float Vout = ((float)adc_current_raw * VREF_ACTUAL1) / 4095.0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	ee17 0a90 	vmov	r0, s15
 8002d0e:	f7fd fc1b 	bl	8000548 <__aeabi_f2d>
 8002d12:	a320      	add	r3, pc, #128	@ (adr r3, 8002d94 <convert_adc_raw_current_in_mA+0x9c>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f7fd fc6e 	bl	80005f8 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	a31d      	add	r3, pc, #116	@ (adr r3, 8002d9c <convert_adc_raw_current_in_mA+0xa4>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fd8f 	bl	800084c <__aeabi_ddiv>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd ff37 	bl	8000ba8 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]
    return (Vout - ZERO_CURRENT_OFFSET) / SENSITIVITY * 1000;  // ✅ Only returns the result, no side effects
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7fd fc02 	bl	8000548 <__aeabi_f2d>
 8002d44:	a317      	add	r3, pc, #92	@ (adr r3, 8002da4 <convert_adc_raw_current_in_mA+0xac>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fa9d 	bl	8000288 <__aeabi_dsub>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	a315      	add	r3, pc, #84	@ (adr r3, 8002dac <convert_adc_raw_current_in_mA+0xb4>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fd76 	bl	800084c <__aeabi_ddiv>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <convert_adc_raw_current_in_mA+0x98>)
 8002d6e:	f7fd fc43 	bl	80005f8 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd ff15 	bl	8000ba8 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	ee07 3a90 	vmov	s15, r3
}
 8002d84:	eeb0 0a67 	vmov.f32	s0, s15
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	408f4000 	.word	0x408f4000
 8002d94:	b851eb85 	.word	0xb851eb85
 8002d98:	4007851e 	.word	0x4007851e
 8002d9c:	00000000 	.word	0x00000000
 8002da0:	40affe00 	.word	0x40affe00
 8002da4:	c28f5c29 	.word	0xc28f5c29
 8002da8:	400428f5 	.word	0x400428f5
 8002dac:	2de00d1b 	.word	0x2de00d1b
 8002db0:	3fc8a090 	.word	0x3fc8a090
 8002db4:	00000000 	.word	0x00000000

08002db8 <convert_adc_raw_temperature>:

static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw) {
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    float Vntc = ((float)adc_temperature_raw * VREF_ACTUAL1) / 4095.0;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	ee17 0a90 	vmov	r0, s15
 8002dce:	f7fd fbbb 	bl	8000548 <__aeabi_f2d>
 8002dd2:	a33d      	add	r3, pc, #244	@ (adr r3, 8002ec8 <convert_adc_raw_temperature+0x110>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fc0e 	bl	80005f8 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	a342      	add	r3, pc, #264	@ (adr r3, 8002ef0 <convert_adc_raw_temperature+0x138>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fd2f 	bl	800084c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fed7 	bl	8000ba8 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60fb      	str	r3, [r7, #12]
    float Rntc = (Vntc * UPPER_RESISTANCE) / (VREF_ACTUAL1 - Vntc);
 8002dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e02:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002ee8 <convert_adc_raw_temperature+0x130>
 8002e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0a:	ee17 0a90 	vmov	r0, s15
 8002e0e:	f7fd fb9b 	bl	8000548 <__aeabi_f2d>
 8002e12:	4604      	mov	r4, r0
 8002e14:	460d      	mov	r5, r1
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7fd fb96 	bl	8000548 <__aeabi_f2d>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	a129      	add	r1, pc, #164	@ (adr r1, 8002ec8 <convert_adc_raw_temperature+0x110>)
 8002e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e26:	f7fd fa2f 	bl	8000288 <__aeabi_dsub>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fd0b 	bl	800084c <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd feb3 	bl	8000ba8 <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
 8002e44:	60bb      	str	r3, [r7, #8]

    return (1.0f / ((log(Rntc / UPPER_RESISTANCE) / BETA_NTC) + (1.0f / ROOM_TEMPERATURE))) - 273.15f;
 8002e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e4a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002ee8 <convert_adc_raw_temperature+0x130>
 8002e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e52:	ee16 0a90 	vmov	r0, s13
 8002e56:	f7fd fb77 	bl	8000548 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	ec43 2b10 	vmov	d0, r2, r3
 8002e62:	f006 fb0d 	bl	8009480 <log>
 8002e66:	ec51 0b10 	vmov	r0, r1, d0
 8002e6a:	a319      	add	r3, pc, #100	@ (adr r3, 8002ed0 <convert_adc_raw_temperature+0x118>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd fcec 	bl	800084c <__aeabi_ddiv>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	a316      	add	r3, pc, #88	@ (adr r3, 8002ed8 <convert_adc_raw_temperature+0x120>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fa03 	bl	800028c <__adddf3>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	f04f 0000 	mov.w	r0, #0
 8002e8e:	4917      	ldr	r1, [pc, #92]	@ (8002eec <convert_adc_raw_temperature+0x134>)
 8002e90:	f7fd fcdc 	bl	800084c <__aeabi_ddiv>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	a310      	add	r3, pc, #64	@ (adr r3, 8002ee0 <convert_adc_raw_temperature+0x128>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd f9f1 	bl	8000288 <__aeabi_dsub>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe7b 	bl	8000ba8 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	ee07 3a90 	vmov	s15, r3
}
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	b851eb85 	.word	0xb851eb85
 8002ecc:	4007851e 	.word	0x4007851e
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	40b00400 	.word	0x40b00400
 8002ed8:	dcb5db83 	.word	0xdcb5db83
 8002edc:	3f6b79e1 	.word	0x3f6b79e1
 8002ee0:	60000000 	.word	0x60000000
 8002ee4:	40711266 	.word	0x40711266
 8002ee8:	461c4000 	.word	0x461c4000
 8002eec:	3ff00000 	.word	0x3ff00000
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40affe00 	.word	0x40affe00

08002ef8 <process_voltage_and_current_data>:

void process_voltage_and_current_data(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
	adc_voltage_raw_sum = 0;
 8002efe:	4b29      	ldr	r3, [pc, #164]	@ (8002fa4 <process_voltage_and_current_data+0xac>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
	adc_current_raw_sum = 0;
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <process_voltage_and_current_data+0xb0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
	//collect voltage and current raw data, add them to sum for averaging

	for (int counter = 0;counter<8;counter++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e016      	b.n	8002f3e <process_voltage_and_current_data+0x46>
	{
		adc_voltage_raw_sum += (dma_adc_buffer[counter] & 0xFFFF);
 8002f10:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <process_voltage_and_current_data+0xb4>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <process_voltage_and_current_data+0xac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <process_voltage_and_current_data+0xac>)
 8002f22:	6013      	str	r3, [r2, #0]
		adc_current_raw_sum += (dma_adc_buffer[counter] >> 16);
 8002f24:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <process_voltage_and_current_data+0xb4>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	0c1a      	lsrs	r2, r3, #16
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <process_voltage_and_current_data+0xb0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <process_voltage_and_current_data+0xb0>)
 8002f36:	6013      	str	r3, [r2, #0]
	for (int counter = 0;counter<8;counter++)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	dde5      	ble.n	8002f10 <process_voltage_and_current_data+0x18>
	}

	adc_voltage_raw = adc_voltage_raw_sum / 8;
 8002f44:	4b17      	ldr	r3, [pc, #92]	@ (8002fa4 <process_voltage_and_current_data+0xac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <process_voltage_and_current_data+0xb8>)
 8002f4c:	6013      	str	r3, [r2, #0]
	adc_current_raw = adc_current_raw_sum / 8;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <process_voltage_and_current_data+0xb0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	4a17      	ldr	r2, [pc, #92]	@ (8002fb4 <process_voltage_and_current_data+0xbc>)
 8002f56:	6013      	str	r3, [r2, #0]
	voltage = convert_adc_raw_voltage_in_mV(adc_voltage_raw);
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <process_voltage_and_current_data+0xb8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe83 	bl	8002c68 <convert_adc_raw_voltage_in_mV>
 8002f62:	eef0 7a40 	vmov.f32	s15, s0
 8002f66:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <process_voltage_and_current_data+0xc0>)
 8002f68:	edc3 7a00 	vstr	s15, [r3]
	current = convert_adc_raw_current_in_mA(adc_current_raw);
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <process_voltage_and_current_data+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fec1 	bl	8002cf8 <convert_adc_raw_current_in_mA>
 8002f76:	eef0 7a40 	vmov.f32	s15, s0
 8002f7a:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <process_voltage_and_current_data+0xc4>)
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
	// the current should never less than zero, if it does, just set it to 0
	if (current <0)
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <process_voltage_and_current_data+0xc4>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	d400      	bmi.n	8002f92 <process_voltage_and_current_data+0x9a>
	{
		current = 0.0;
	}

}
 8002f90:	e003      	b.n	8002f9a <process_voltage_and_current_data+0xa2>
		current = 0.0;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <process_voltage_and_current_data+0xc4>)
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000800 	.word	0x20000800
 8002fa8:	20000804 	.word	0x20000804
 8002fac:	200007d8 	.word	0x200007d8
 8002fb0:	20000808 	.word	0x20000808
 8002fb4:	2000080c 	.word	0x2000080c
 8002fb8:	20000814 	.word	0x20000814
 8002fbc:	20000818 	.word	0x20000818

08002fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ff8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fc4:	f7ff f9b6 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc8:	480c      	ldr	r0, [pc, #48]	@ (8002ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fca:	490d      	ldr	r1, [pc, #52]	@ (8003000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd0:	e002      	b.n	8002fd8 <LoopCopyDataInit>

08002fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd6:	3304      	adds	r3, #4

08002fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fdc:	d3f9      	bcc.n	8002fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800300c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe4:	e001      	b.n	8002fea <LoopFillZerobss>

08002fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe8:	3204      	adds	r2, #4

08002fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fec:	d3fb      	bcc.n	8002fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fee:	f004 f9d5 	bl	800739c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ff2:	f7fe fb07 	bl	8001604 <main>
  bx  lr    
 8002ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003000:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003004:	0800aa40 	.word	0x0800aa40
  ldr r2, =_sbss
 8003008:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800300c:	20000970 	.word	0x20000970

08003010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC_IRQHandler>
	...

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003018:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0d      	ldr	r2, [pc, #52]	@ (8003054 <HAL_Init+0x40>)
 800301e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <HAL_Init+0x40>)
 800302a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800302e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <HAL_Init+0x40>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a07      	ldr	r2, [pc, #28]	@ (8003054 <HAL_Init+0x40>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303c:	2003      	movs	r0, #3
 800303e:	f000 ffd7 	bl	8003ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003042:	200f      	movs	r0, #15
 8003044:	f000 f808 	bl	8003058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003048:	f7fe fe96 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00

08003058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_InitTick+0x54>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_InitTick+0x58>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800306e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ffef 	bl	800405a <HAL_SYSTICK_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00e      	b.n	80030a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d80a      	bhi.n	80030a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800308c:	2200      	movs	r2, #0
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f000 ffb7 	bl	8004006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003098:	4a06      	ldr	r2, [pc, #24]	@ (80030b4 <HAL_InitTick+0x5c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000008 	.word	0x20000008
 80030b4:	20000004 	.word	0x20000004

080030b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_IncTick+0x20>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_IncTick+0x24>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4413      	add	r3, r2
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <HAL_IncTick+0x24>)
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000820 	.word	0x20000820

080030e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return uwTick;
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_GetTick+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000820 	.word	0x20000820

080030f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff ffee 	bl	80030e0 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d005      	beq.n	800311e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003112:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <HAL_Delay+0x44>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800311e:	bf00      	nop
 8003120:	f7ff ffde 	bl	80030e0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d8f7      	bhi.n	8003120 <HAL_Delay+0x28>
  {
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000008 	.word	0x20000008

08003140 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e033      	b.n	80031be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fe32 	bl	8001dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003186:	f023 0302 	bic.w	r3, r3, #2
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fc98 	bl	8003ac8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ae:	e001      	b.n	80031b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e022      	b.n	8003222 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe fe9a 	bl	8001f40 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_ADC_Start+0x1a>
 8003242:	2302      	movs	r3, #2
 8003244:	e0b2      	b.n	80033ac <HAL_ADC_Start+0x180>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d018      	beq.n	800328e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800326c:	4b52      	ldr	r3, [pc, #328]	@ (80033b8 <HAL_ADC_Start+0x18c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a52      	ldr	r2, [pc, #328]	@ (80033bc <HAL_ADC_Start+0x190>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0c9a      	lsrs	r2, r3, #18
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003280:	e002      	b.n	8003288 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d17a      	bne.n	8003392 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032da:	d106      	bne.n	80032ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	f023 0206 	bic.w	r2, r3, #6
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80032e8:	e002      	b.n	80032f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f8:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <HAL_ADC_Start+0x194>)
 80032fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003304:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12a      	bne.n	8003368 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2b      	ldr	r2, [pc, #172]	@ (80033c4 <HAL_ADC_Start+0x198>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d015      	beq.n	8003348 <HAL_ADC_Start+0x11c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_ADC_Start+0x19c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d105      	bne.n	8003332 <HAL_ADC_Start+0x106>
 8003326:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <HAL_ADC_Start+0x194>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a25      	ldr	r2, [pc, #148]	@ (80033cc <HAL_ADC_Start+0x1a0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d136      	bne.n	80033aa <HAL_ADC_Start+0x17e>
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_ADC_Start+0x194>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d130      	bne.n	80033aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d129      	bne.n	80033aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e020      	b.n	80033aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a15      	ldr	r2, [pc, #84]	@ (80033c4 <HAL_ADC_Start+0x198>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d11b      	bne.n	80033aa <HAL_ADC_Start+0x17e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d114      	bne.n	80033aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e00b      	b.n	80033aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	431bde83 	.word	0x431bde83
 80033c0:	40012300 	.word	0x40012300
 80033c4:	40012000 	.word	0x40012000
 80033c8:	40012100 	.word	0x40012100
 80033cc:	40012200 	.word	0x40012200

080033d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Stop+0x16>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e021      	b.n	800342a <HAL_ADC_Stop+0x5a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d113      	bne.n	800347c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d10b      	bne.n	800347c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e063      	b.n	8003544 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800347c:	f7ff fe30 	bl	80030e0 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003482:	e021      	b.n	80034c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d01d      	beq.n	80034c8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_PollForConversion+0x6c>
 8003492:	f7ff fe25 	bl	80030e0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d212      	bcs.n	80034c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d00b      	beq.n	80034c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e03d      	b.n	8003544 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1d6      	bne.n	8003484 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0212 	mvn.w	r2, #18
 80034de:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d123      	bne.n	8003542 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11f      	bne.n	8003542 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d111      	bne.n	8003542 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_ADC_Start_DMA+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e0f7      	b.n	800375a <HAL_ADC_Start_DMA+0x20e>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d018      	beq.n	80035b2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003590:	4b74      	ldr	r3, [pc, #464]	@ (8003764 <HAL_ADC_Start_DMA+0x218>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a74      	ldr	r2, [pc, #464]	@ (8003768 <HAL_ADC_Start_DMA+0x21c>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9a      	lsrs	r2, r3, #18
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035a4:	e002      	b.n	80035ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c0:	d107      	bne.n	80035d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 80af 	bne.w	8003740 <HAL_ADC_Start_DMA+0x1f4>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800360c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003620:	d106      	bne.n	8003630 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f023 0206 	bic.w	r2, r3, #6
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
 800362e:	e002      	b.n	8003636 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800363e:	4b4b      	ldr	r3, [pc, #300]	@ (800376c <HAL_ADC_Start_DMA+0x220>)
 8003640:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	4a4a      	ldr	r2, [pc, #296]	@ (8003770 <HAL_ADC_Start_DMA+0x224>)
 8003648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	4a49      	ldr	r2, [pc, #292]	@ (8003774 <HAL_ADC_Start_DMA+0x228>)
 8003650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	4a48      	ldr	r2, [pc, #288]	@ (8003778 <HAL_ADC_Start_DMA+0x22c>)
 8003658:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003662:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003672:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003682:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    // modification to adjust CDR
        // 🚨 Fix for Dual ADC Mode 🚨
        if (READ_BIT(ADC->CCR, ADC_CCR_MULTI) != 0) {
 8003684:	4b39      	ldr	r3, [pc, #228]	@ (800376c <HAL_ADC_Start_DMA+0x220>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_ADC_Start_DMA+0x154>
            // If ADC is in Dual Mode, use the Common Data Register
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4938      	ldr	r1, [pc, #224]	@ (800377c <HAL_ADC_Start_DMA+0x230>)
 800369a:	f000 fdf7 	bl	800428c <HAL_DMA_Start_IT>
 800369e:	e009      	b.n	80036b4 <HAL_ADC_Start_DMA+0x168>
        } else {
            // Otherwise, use the default single ADC DR
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	334c      	adds	r3, #76	@ 0x4c
 80036aa:	4619      	mov	r1, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f000 fdec 	bl	800428c <HAL_DMA_Start_IT>
        }
    //HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d12a      	bne.n	8003716 <HAL_ADC_Start_DMA+0x1ca>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003780 <HAL_ADC_Start_DMA+0x234>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d015      	beq.n	80036f6 <HAL_ADC_Start_DMA+0x1aa>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <HAL_ADC_Start_DMA+0x238>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d105      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x194>
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_ADC_Start_DMA+0x220>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_ADC_Start_DMA+0x1aa>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <HAL_ADC_Start_DMA+0x23c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d136      	bne.n	8003758 <HAL_ADC_Start_DMA+0x20c>
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_ADC_Start_DMA+0x220>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d130      	bne.n	8003758 <HAL_ADC_Start_DMA+0x20c>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d129      	bne.n	8003758 <HAL_ADC_Start_DMA+0x20c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	e020      	b.n	8003758 <HAL_ADC_Start_DMA+0x20c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_ADC_Start_DMA+0x234>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d11b      	bne.n	8003758 <HAL_ADC_Start_DMA+0x20c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <HAL_ADC_Start_DMA+0x20c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	e00b      	b.n	8003758 <HAL_ADC_Start_DMA+0x20c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000
 8003768:	431bde83 	.word	0x431bde83
 800376c:	40012300 	.word	0x40012300
 8003770:	08003cc1 	.word	0x08003cc1
 8003774:	08003d7b 	.word	0x08003d7b
 8003778:	08003d97 	.word	0x08003d97
 800377c:	40012308 	.word	0x40012308
 8003780:	40012000 	.word	0x40012000
 8003784:	40012100 	.word	0x40012100
 8003788:	40012200 	.word	0x40012200

0800378c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_Stop_DMA+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e048      	b.n	8003838 <HAL_ADC_Stop_DMA+0xac>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d130      	bne.n	800382e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037da:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d10f      	bne.n	800380a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fda4 	bl	800433c <HAL_DMA_Abort>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003818:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1c>
 800389c:	2302      	movs	r3, #2
 800389e:	e105      	b.n	8003aac <HAL_ADC_ConfigChannel+0x228>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d925      	bls.n	80038fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68d9      	ldr	r1, [r3, #12]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	3b1e      	subs	r3, #30
 80038c6:	2207      	movs	r2, #7
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43da      	mvns	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	400a      	ands	r2, r1
 80038d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68d9      	ldr	r1, [r3, #12]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4403      	add	r3, r0
 80038ee:	3b1e      	subs	r3, #30
 80038f0:	409a      	lsls	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e022      	b.n	8003942 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6919      	ldr	r1, [r3, #16]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	2207      	movs	r2, #7
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	400a      	ands	r2, r1
 800391e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	4603      	mov	r3, r0
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4403      	add	r3, r0
 8003938:	409a      	lsls	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d824      	bhi.n	8003994 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	3b05      	subs	r3, #5
 800395c:	221f      	movs	r2, #31
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	400a      	ands	r2, r1
 800396a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	4618      	mov	r0, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	3b05      	subs	r3, #5
 8003986:	fa00 f203 	lsl.w	r2, r0, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
 8003992:	e04c      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d824      	bhi.n	80039e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	3b23      	subs	r3, #35	@ 0x23
 80039ae:	221f      	movs	r2, #31
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	400a      	ands	r2, r1
 80039bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b23      	subs	r3, #35	@ 0x23
 80039d8:	fa00 f203 	lsl.w	r2, r0, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e4:	e023      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	3b41      	subs	r3, #65	@ 0x41
 80039f8:	221f      	movs	r2, #31
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b41      	subs	r3, #65	@ 0x41
 8003a22:	fa00 f203 	lsl.w	r2, r0, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_ADC_ConfigChannel+0x234>)
 8003a30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	@ (8003abc <HAL_ADC_ConfigChannel+0x238>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d109      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x1cc>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d105      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_ADC_ConfigChannel+0x238>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d123      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x21e>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d003      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x1e6>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b11      	cmp	r3, #17
 8003a68:	d11b      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d111      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x23c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a10      	ldr	r2, [pc, #64]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x240>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	0c9a      	lsrs	r2, r3, #18
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a94:	e002      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f9      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40012300 	.word	0x40012300
 8003abc:	40012000 	.word	0x40012000
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	431bde83 	.word	0x431bde83

08003ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad0:	4b79      	ldr	r3, [pc, #484]	@ (8003cb8 <ADC_Init+0x1f0>)
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	4a58      	ldr	r2, [pc, #352]	@ (8003cbc <ADC_Init+0x1f4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6899      	ldr	r1, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	e00f      	b.n	8003bc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0202 	bic.w	r2, r2, #2
 8003bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e1b      	ldrb	r3, [r3, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	035a      	lsls	r2, r3, #13
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e007      	b.n	8003c3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	051a      	lsls	r2, r3, #20
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c7e:	025a      	lsls	r2, r3, #9
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	029a      	lsls	r2, r3, #10
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012300 	.word	0x40012300
 8003cbc:	0f000001 	.word	0x0f000001

08003cc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13c      	bne.n	8003d54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d12b      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d127      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d119      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0220 	bic.w	r2, r2, #32
 8003d26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f9cd 	bl	80020ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d52:	e00e      	b.n	8003d72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fd84 	bl	800386e <HAL_ADC_ErrorCallback>
}
 8003d66:	e004      	b.n	8003d72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fd66 	bl	800385a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fd59 	bl	800386e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e031      	b.n	8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 021f 	bic.w	r2, r3, #31
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40012300 	.word	0x40012300

08003e50 <__NVIC_SetPriorityGrouping>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e60:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e82:	4a04      	ldr	r2, [pc, #16]	@ (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	60d3      	str	r3, [r2, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <__NVIC_GetPriorityGrouping>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 0307 	and.w	r3, r3, #7
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <__NVIC_EnableIRQ>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db0b      	blt.n	8003ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	f003 021f 	and.w	r2, r3, #31
 8003ecc:	4907      	ldr	r1, [pc, #28]	@ (8003eec <__NVIC_EnableIRQ+0x38>)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000e100 	.word	0xe000e100

08003ef0 <__NVIC_SetPriority>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db0a      	blt.n	8003f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	490c      	ldr	r1, [pc, #48]	@ (8003f3c <__NVIC_SetPriority+0x4c>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	440b      	add	r3, r1
 8003f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f18:	e00a      	b.n	8003f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4908      	ldr	r1, [pc, #32]	@ (8003f40 <__NVIC_SetPriority+0x50>)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3b04      	subs	r3, #4
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	761a      	strb	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <NVIC_EncodePriority>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	@ 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f1c3 0307 	rsb	r3, r3, #7
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf28      	it	cs
 8003f62:	2304      	movcs	r3, #4
 8003f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d902      	bls.n	8003f74 <NVIC_EncodePriority+0x30>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3b03      	subs	r3, #3
 8003f72:	e000      	b.n	8003f76 <NVIC_EncodePriority+0x32>
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	401a      	ands	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	43d9      	mvns	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	4313      	orrs	r3, r2
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3724      	adds	r7, #36	@ 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <SysTick_Config>:
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fbc:	d301      	bcc.n	8003fc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00f      	b.n	8003fe2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <SysTick_Config+0x40>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fca:	210f      	movs	r1, #15
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	f7ff ff8e 	bl	8003ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <SysTick_Config+0x40>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <SysTick_Config+0x40>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000e010 	.word	0xe000e010

08003ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff29 	bl	8003e50 <__NVIC_SetPriorityGrouping>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004018:	f7ff ff3e 	bl	8003e98 <__NVIC_GetPriorityGrouping>
 800401c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff ff8e 	bl	8003f44 <NVIC_EncodePriority>
 8004028:	4602      	mov	r2, r0
 800402a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff5d 	bl	8003ef0 <__NVIC_SetPriority>
}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff31 	bl	8003eb4 <__NVIC_EnableIRQ>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ffa2 	bl	8003fac <SysTick_Config>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004080:	f7ff f82e 	bl	80030e0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e099      	b.n	80041c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b0:	e00f      	b.n	80040d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040b2:	f7ff f815 	bl	80030e0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d908      	bls.n	80040d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2203      	movs	r2, #3
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e078      	b.n	80041c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e8      	bne.n	80040b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <HAL_DMA_Init+0x158>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	2b04      	cmp	r3, #4
 800412a:	d107      	bne.n	800413c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	4313      	orrs	r3, r2
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0307 	bic.w	r3, r3, #7
 8004152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	2b04      	cmp	r3, #4
 8004164:	d117      	bne.n	8004196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb3d 	bl	80047f8 <DMA_CheckFifoParam>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2240      	movs	r2, #64	@ 0x40
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004192:	2301      	movs	r3, #1
 8004194:	e016      	b.n	80041c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 faf4 	bl	800478c <DMA_CalcBaseAndBitshift>
 80041a4:	4603      	mov	r3, r0
 80041a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ac:	223f      	movs	r2, #63	@ 0x3f
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	f010803f 	.word	0xf010803f

080041d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e050      	b.n	8004284 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d101      	bne.n	80041f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	e048      	b.n	8004284 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2221      	movs	r2, #33	@ 0x21
 8004230:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 faaa 	bl	800478c <DMA_CalcBaseAndBitshift>
 8004238:	4603      	mov	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004264:	223f      	movs	r2, #63	@ 0x3f
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_DMA_Start_IT+0x26>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e040      	b.n	8004334 <HAL_DMA_Start_IT+0xa8>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d12f      	bne.n	8004326 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fa28 	bl	8004730 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	223f      	movs	r2, #63	@ 0x3f
 80042e6:	409a      	lsls	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0216 	orr.w	r2, r2, #22
 80042fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e005      	b.n	8004332 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800432e:	2302      	movs	r3, #2
 8004330:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800434a:	f7fe fec9 	bl	80030e0 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d008      	beq.n	800436e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e052      	b.n	8004414 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0216 	bic.w	r2, r2, #22
 800437c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800438c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_DMA_Abort+0x62>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0208 	bic.w	r2, r2, #8
 80043ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043be:	e013      	b.n	80043e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c0:	f7fe fe8e 	bl	80030e0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d90c      	bls.n	80043e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2203      	movs	r2, #3
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e015      	b.n	8004414 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e4      	bne.n	80043c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	223f      	movs	r2, #63	@ 0x3f
 80043fc:	409a      	lsls	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004428:	4b8e      	ldr	r3, [pc, #568]	@ (8004664 <HAL_DMA_IRQHandler+0x248>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a8e      	ldr	r2, [pc, #568]	@ (8004668 <HAL_DMA_IRQHandler+0x24c>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	2208      	movs	r2, #8
 8004448:	409a      	lsls	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01a      	beq.n	8004488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	2208      	movs	r2, #8
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	2201      	movs	r2, #1
 80044ac:	409a      	lsls	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f043 0202 	orr.w	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	2204      	movs	r2, #4
 80044c4:	409a      	lsls	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d012      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	2204      	movs	r2, #4
 80044e2:	409a      	lsls	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	f043 0204 	orr.w	r2, r3, #4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	2210      	movs	r2, #16
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d043      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03c      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	2210      	movs	r2, #16
 8004518:	409a      	lsls	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d024      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
 800454a:	e01f      	b.n	800458c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01b      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
 800455c:	e016      	b.n	800458c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0208 	bic.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	2220      	movs	r2, #32
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 808f 	beq.w	80046bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8087 	beq.w	80046bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	2220      	movs	r2, #32
 80045b4:	409a      	lsls	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d136      	bne.n	8004634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0216 	bic.w	r2, r2, #22
 80045d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x1da>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0208 	bic.w	r2, r2, #8
 8004604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	223f      	movs	r2, #63	@ 0x3f
 800460c:	409a      	lsls	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d07e      	beq.n	8004728 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
        }
        return;
 8004632:	e079      	b.n	8004728 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01d      	beq.n	800467e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004654:	2b00      	cmp	r3, #0
 8004656:	d031      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e02c      	b.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
 8004662:	bf00      	nop
 8004664:	20000000 	.word	0x20000000
 8004668:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d023      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	e01e      	b.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0210 	bic.w	r2, r2, #16
 800469a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d032      	beq.n	800472a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2205      	movs	r2, #5
 80046d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d307      	bcc.n	8004704 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x2cc>
 8004702:	e000      	b.n	8004706 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004704:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e000      	b.n	800472a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004728:	bf00      	nop
    }
  }
}
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800474c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d108      	bne.n	8004770 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800476e:	e007      	b.n	8004780 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3b10      	subs	r3, #16
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <DMA_CalcBaseAndBitshift+0x64>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047a6:	4a13      	ldr	r2, [pc, #76]	@ (80047f4 <DMA_CalcBaseAndBitshift+0x68>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d909      	bls.n	80047ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80047cc:	e007      	b.n	80047de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	aaaaaaab 	.word	0xaaaaaaab
 80047f4:	0800a6b8 	.word	0x0800a6b8

080047f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11f      	bne.n	8004852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d856      	bhi.n	80048c6 <DMA_CheckFifoParam+0xce>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <DMA_CheckFifoParam+0x28>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004831 	.word	0x08004831
 8004824:	08004843 	.word	0x08004843
 8004828:	08004831 	.word	0x08004831
 800482c:	080048c7 	.word	0x080048c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d046      	beq.n	80048ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e043      	b.n	80048ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800484a:	d140      	bne.n	80048ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e03d      	b.n	80048ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485a:	d121      	bne.n	80048a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d837      	bhi.n	80048d2 <DMA_CheckFifoParam+0xda>
 8004862:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <DMA_CheckFifoParam+0x70>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004879 	.word	0x08004879
 800486c:	0800487f 	.word	0x0800487f
 8004870:	08004879 	.word	0x08004879
 8004874:	08004891 	.word	0x08004891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	e030      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d025      	beq.n	80048d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488e:	e022      	b.n	80048d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004898:	d11f      	bne.n	80048da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800489e:	e01c      	b.n	80048da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d903      	bls.n	80048ae <DMA_CheckFifoParam+0xb6>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d003      	beq.n	80048b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048ac:	e018      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
      break;
 80048b2:	e015      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	e00b      	b.n	80048de <DMA_CheckFifoParam+0xe6>
      break;
 80048c6:	bf00      	nop
 80048c8:	e00a      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ca:	bf00      	nop
 80048cc:	e008      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ce:	bf00      	nop
 80048d0:	e006      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048d2:	bf00      	nop
 80048d4:	e004      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
    }
  } 
  
  return status; 
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	@ 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e16b      	b.n	8004be4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800490c:	2201      	movs	r2, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 815a 	bne.w	8004bde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d005      	beq.n	8004942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800493e:	2b02      	cmp	r3, #2
 8004940:	d130      	bne.n	80049a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004978:	2201      	movs	r2, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 0201 	and.w	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d017      	beq.n	80049e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d123      	bne.n	8004a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	08da      	lsrs	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3208      	adds	r2, #8
 80049f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	220f      	movs	r2, #15
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	08da      	lsrs	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3208      	adds	r2, #8
 8004a2e:	69b9      	ldr	r1, [r7, #24]
 8004a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0203 	and.w	r2, r3, #3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80b4 	beq.w	8004bde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b60      	ldr	r3, [pc, #384]	@ (8004bfc <HAL_GPIO_Init+0x30c>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bfc <HAL_GPIO_Init+0x30c>)
 8004a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a86:	4b5d      	ldr	r3, [pc, #372]	@ (8004bfc <HAL_GPIO_Init+0x30c>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a92:	4a5b      	ldr	r2, [pc, #364]	@ (8004c00 <HAL_GPIO_Init+0x310>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	@ (8004c04 <HAL_GPIO_Init+0x314>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02b      	beq.n	8004b16 <HAL_GPIO_Init+0x226>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a51      	ldr	r2, [pc, #324]	@ (8004c08 <HAL_GPIO_Init+0x318>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d025      	beq.n	8004b12 <HAL_GPIO_Init+0x222>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a50      	ldr	r2, [pc, #320]	@ (8004c0c <HAL_GPIO_Init+0x31c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <HAL_GPIO_Init+0x21e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8004c10 <HAL_GPIO_Init+0x320>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d019      	beq.n	8004b0a <HAL_GPIO_Init+0x21a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8004c14 <HAL_GPIO_Init+0x324>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_GPIO_Init+0x216>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8004c18 <HAL_GPIO_Init+0x328>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00d      	beq.n	8004b02 <HAL_GPIO_Init+0x212>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8004c1c <HAL_GPIO_Init+0x32c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <HAL_GPIO_Init+0x20e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c20 <HAL_GPIO_Init+0x330>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_GPIO_Init+0x20a>
 8004af6:	2307      	movs	r3, #7
 8004af8:	e00e      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004afa:	2308      	movs	r3, #8
 8004afc:	e00c      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004afe:	2306      	movs	r3, #6
 8004b00:	e00a      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b02:	2305      	movs	r3, #5
 8004b04:	e008      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b06:	2304      	movs	r3, #4
 8004b08:	e006      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e004      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e002      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_GPIO_Init+0x228>
 8004b16:	2300      	movs	r3, #0
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	f002 0203 	and.w	r2, r2, #3
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	4093      	lsls	r3, r2
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b28:	4935      	ldr	r1, [pc, #212]	@ (8004c00 <HAL_GPIO_Init+0x310>)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	3302      	adds	r3, #2
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b36:	4b3b      	ldr	r3, [pc, #236]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b5a:	4a32      	ldr	r2, [pc, #200]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b60:	4b30      	ldr	r3, [pc, #192]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b84:	4a27      	ldr	r2, [pc, #156]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b8a:	4b26      	ldr	r3, [pc, #152]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bae:	4a1d      	ldr	r2, [pc, #116]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bd8:	4a12      	ldr	r2, [pc, #72]	@ (8004c24 <HAL_GPIO_Init+0x334>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3301      	adds	r3, #1
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	f67f ae90 	bls.w	800490c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	3724      	adds	r7, #36	@ 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40013800 	.word	0x40013800
 8004c04:	40020000 	.word	0x40020000
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	40020800 	.word	0x40020800
 8004c10:	40020c00 	.word	0x40020c00
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40021400 	.word	0x40021400
 8004c1c:	40021800 	.word	0x40021800
 8004c20:	40021c00 	.word	0x40021c00
 8004c24:	40013c00 	.word	0x40013c00

08004c28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e0cd      	b.n	8004de0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c44:	2201      	movs	r2, #1
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	f040 80bd 	bne.w	8004dda <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004c60:	4a65      	ldr	r2, [pc, #404]	@ (8004df8 <HAL_GPIO_DeInit+0x1d0>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	220f      	movs	r2, #15
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a5d      	ldr	r2, [pc, #372]	@ (8004dfc <HAL_GPIO_DeInit+0x1d4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02b      	beq.n	8004ce2 <HAL_GPIO_DeInit+0xba>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004e00 <HAL_GPIO_DeInit+0x1d8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d025      	beq.n	8004cde <HAL_GPIO_DeInit+0xb6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a5b      	ldr	r2, [pc, #364]	@ (8004e04 <HAL_GPIO_DeInit+0x1dc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <HAL_GPIO_DeInit+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e08 <HAL_GPIO_DeInit+0x1e0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d019      	beq.n	8004cd6 <HAL_GPIO_DeInit+0xae>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a59      	ldr	r2, [pc, #356]	@ (8004e0c <HAL_GPIO_DeInit+0x1e4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_GPIO_DeInit+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a58      	ldr	r2, [pc, #352]	@ (8004e10 <HAL_GPIO_DeInit+0x1e8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00d      	beq.n	8004cce <HAL_GPIO_DeInit+0xa6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a57      	ldr	r2, [pc, #348]	@ (8004e14 <HAL_GPIO_DeInit+0x1ec>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <HAL_GPIO_DeInit+0xa2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a56      	ldr	r2, [pc, #344]	@ (8004e18 <HAL_GPIO_DeInit+0x1f0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_GPIO_DeInit+0x9e>
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	e00e      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e00c      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cca:	2306      	movs	r3, #6
 8004ccc:	e00a      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cce:	2305      	movs	r3, #5
 8004cd0:	e008      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	e006      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e004      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e002      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_GPIO_DeInit+0xbc>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	f002 0203 	and.w	r2, r2, #3
 8004cea:	0092      	lsls	r2, r2, #2
 8004cec:	4093      	lsls	r3, r2
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d132      	bne.n	8004d5a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	4947      	ldr	r1, [pc, #284]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d02:	4b46      	ldr	r3, [pc, #280]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	4944      	ldr	r1, [pc, #272]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d10:	4b42      	ldr	r3, [pc, #264]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	4940      	ldr	r1, [pc, #256]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	493d      	ldr	r1, [pc, #244]	@ (8004e1c <HAL_GPIO_DeInit+0x1f4>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	220f      	movs	r2, #15
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004df8 <HAL_GPIO_DeInit+0x1d0>)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	3302      	adds	r3, #2
 8004d44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	482a      	ldr	r0, [pc, #168]	@ (8004df8 <HAL_GPIO_DeInit+0x1d0>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	400a      	ands	r2, r1
 8004d54:	3302      	adds	r3, #2
 8004d56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2103      	movs	r1, #3
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	08da      	lsrs	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3208      	adds	r2, #8
 8004d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	220f      	movs	r2, #15
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	08d2      	lsrs	r2, r2, #3
 8004d90:	4019      	ands	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2103      	movs	r1, #3
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	401a      	ands	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	2101      	movs	r1, #1
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2103      	movs	r1, #3
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	f67f af2e 	bls.w	8004c44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40013800 	.word	0x40013800
 8004dfc:	40020000 	.word	0x40020000
 8004e00:	40020400 	.word	0x40020400
 8004e04:	40020800 	.word	0x40020800
 8004e08:	40020c00 	.word	0x40020c00
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40021400 	.word	0x40021400
 8004e14:	40021800 	.word	0x40021800
 8004e18:	40021c00 	.word	0x40021c00
 8004e1c:	40013c00 	.word	0x40013c00

08004e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e30:	787b      	ldrb	r3, [r7, #1]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e3c:	e003      	b.n	8004e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	041a      	lsls	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	619a      	str	r2, [r3, #24]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e12b      	b.n	80050be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd f894 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	@ 0x24
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f001 f8ea 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a81      	ldr	r2, [pc, #516]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d807      	bhi.n	8004ed8 <HAL_I2C_Init+0x84>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a80      	ldr	r2, [pc, #512]	@ (80050cc <HAL_I2C_Init+0x278>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bf94      	ite	ls
 8004ed0:	2301      	movls	r3, #1
 8004ed2:	2300      	movhi	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e006      	b.n	8004ee6 <HAL_I2C_Init+0x92>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a7d      	ldr	r2, [pc, #500]	@ (80050d0 <HAL_I2C_Init+0x27c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0e7      	b.n	80050be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a78      	ldr	r2, [pc, #480]	@ (80050d4 <HAL_I2C_Init+0x280>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <HAL_I2C_Init+0xd4>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e009      	b.n	8004f3c <HAL_I2C_Init+0xe8>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a69      	ldr	r2, [pc, #420]	@ (80050d8 <HAL_I2C_Init+0x284>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	495c      	ldr	r1, [pc, #368]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	d819      	bhi.n	8004f90 <HAL_I2C_Init+0x13c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1e59      	subs	r1, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f70:	400b      	ands	r3, r1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_I2C_Init+0x138>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1e59      	subs	r1, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	e051      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e04f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <HAL_I2C_Init+0x168>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	440b      	add	r3, r1
 8004fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004faa:	3301      	adds	r3, #1
 8004fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e012      	b.n	8004fe2 <HAL_I2C_Init+0x18e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Init+0x196>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e022      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10e      	bne.n	8005010 <HAL_I2C_Init+0x1bc>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1e58      	subs	r0, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	440b      	add	r3, r1
 8005000:	fbb0 f3f3 	udiv	r3, r0, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800500e:	e00f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	6809      	ldr	r1, [r1, #0]
 8005034:	4313      	orrs	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800505e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6911      	ldr	r1, [r2, #16]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	430b      	orrs	r3, r1
 8005072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	000186a0 	.word	0x000186a0
 80050cc:	001e847f 	.word	0x001e847f
 80050d0:	003d08ff 	.word	0x003d08ff
 80050d4:	431bde83 	.word	0x431bde83
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	817b      	strh	r3, [r7, #10]
 80050ee:	460b      	mov	r3, r1
 80050f0:	813b      	strh	r3, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050f6:	f7fd fff3 	bl	80030e0 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b20      	cmp	r3, #32
 8005106:	f040 80d9 	bne.w	80052bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	2319      	movs	r3, #25
 8005110:	2201      	movs	r2, #1
 8005112:	496d      	ldr	r1, [pc, #436]	@ (80052c8 <HAL_I2C_Mem_Write+0x1ec>)
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f971 	bl	80053fc <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	e0cc      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Mem_Write+0x56>
 800512e:	2302      	movs	r3, #2
 8005130:	e0c5      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d007      	beq.n	8005158 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2221      	movs	r2, #33	@ 0x21
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2240      	movs	r2, #64	@ 0x40
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a4d      	ldr	r2, [pc, #308]	@ (80052cc <HAL_I2C_Mem_Write+0x1f0>)
 8005198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800519a:	88f8      	ldrh	r0, [r7, #6]
 800519c:	893a      	ldrh	r2, [r7, #8]
 800519e:	8979      	ldrh	r1, [r7, #10]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4603      	mov	r3, r0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f890 	bl	80052d0 <I2C_RequestMemoryWrite>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d052      	beq.n	800525c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e081      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa36 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d107      	bne.n	80051e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e06b      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d11b      	bne.n	800525c <HAL_I2C_Mem_Write+0x180>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d017      	beq.n	800525c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1aa      	bne.n	80051ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fa29 	bl	80056c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b04      	cmp	r3, #4
 800527a:	d107      	bne.n	800528c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e016      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	00100002 	.word	0x00100002
 80052cc:	ffff0000 	.word	0xffff0000

080052d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	460b      	mov	r3, r1
 80052e4:	813b      	strh	r3, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	2200      	movs	r2, #0
 8005302:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f878 	bl	80053fc <I2C_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005320:	d103      	bne.n	800532a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005328:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e05f      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800533c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	492d      	ldr	r1, [pc, #180]	@ (80053f8 <I2C_RequestMemoryWrite+0x128>)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f8d3 	bl	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e04c      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536c:	6a39      	ldr	r1, [r7, #32]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f95e 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	2b04      	cmp	r3, #4
 8005380:	d107      	bne.n	8005392 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005390:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e02b      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	e021      	b.n	80053ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a8:	893b      	ldrh	r3, [r7, #8]
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b8:	6a39      	ldr	r1, [r7, #32]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f938 	bl	8005630 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d107      	bne.n	80053de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e005      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	00010002 	.word	0x00010002

080053fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800540c:	e048      	b.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d044      	beq.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fd fe63 	bl	80030e0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d139      	bne.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10d      	bne.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	43da      	mvns	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	e00c      	b.n	800546c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	43da      	mvns	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	429a      	cmp	r2, r3
 8005470:	d116      	bne.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e023      	b.n	80054e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10d      	bne.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	43da      	mvns	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	e00c      	b.n	80054e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	43da      	mvns	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4013      	ands	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d093      	beq.n	800540e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054fe:	e071      	b.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800550e:	d123      	bne.n	8005558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	f043 0204 	orr.w	r2, r3, #4
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e067      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d041      	beq.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005560:	f7fd fdbe 	bl	80030e0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d302      	bcc.n	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d136      	bne.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10c      	bne.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	43da      	mvns	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e00b      	b.n	80055b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	43da      	mvns	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e021      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10c      	bne.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	43da      	mvns	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4013      	ands	r3, r2
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e00b      	b.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	43da      	mvns	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f af6d 	bne.w	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800563c:	e034      	b.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f886 	bl	8005750 <I2C_IsAcknowledgeFailed>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e034      	b.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d028      	beq.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fd fd43 	bl	80030e0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11d      	bne.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d016      	beq.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e007      	b.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d1c3      	bne.n	800563e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056cc:	e034      	b.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f83e 	bl	8005750 <I2C_IsAcknowledgeFailed>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e034      	b.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d028      	beq.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fd fcfb 	bl	80030e0 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11d      	bne.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d016      	beq.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e007      	b.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d1c3      	bne.n	80056ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005766:	d11b      	bne.n	80057a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	f043 0204 	orr.w	r2, r3, #4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e267      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d075      	beq.n	80058ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057ce:	4b88      	ldr	r3, [pc, #544]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d00c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057da:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d112      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b82      	ldr	r3, [pc, #520]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057f2:	d10b      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	4b7e      	ldr	r3, [pc, #504]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05b      	beq.n	80058b8 <HAL_RCC_OscConfig+0x108>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d157      	bne.n	80058b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e242      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0x74>
 8005816:	4b76      	ldr	r3, [pc, #472]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a75      	ldr	r2, [pc, #468]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x98>
 800582e:	4b70      	ldr	r3, [pc, #448]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a6f      	ldr	r2, [pc, #444]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b6d      	ldr	r3, [pc, #436]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6c      	ldr	r2, [pc, #432]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005848:	4b69      	ldr	r3, [pc, #420]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a68      	ldr	r2, [pc, #416]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b66      	ldr	r3, [pc, #408]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a65      	ldr	r2, [pc, #404]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800585e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fd fc3a 	bl	80030e0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fd fc36 	bl	80030e0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	@ 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e207      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b5b      	ldr	r3, [pc, #364]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xc0>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fd fc26 	bl	80030e0 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005898:	f7fd fc22 	bl	80030e0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	@ 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1f3      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	4b51      	ldr	r3, [pc, #324]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0xe8>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d063      	beq.n	800598e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058c6:	4b4a      	ldr	r3, [pc, #296]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058d2:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11c      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058de:	4b44      	ldr	r3, [pc, #272]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d116      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e1c7      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005902:	4b3b      	ldr	r3, [pc, #236]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4937      	ldr	r1, [pc, #220]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005916:	e03a      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005920:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <HAL_RCC_OscConfig+0x244>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fd fbdb 	bl	80030e0 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800592e:	f7fd fbd7 	bl	80030e0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e1a8      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	4b2b      	ldr	r3, [pc, #172]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4925      	ldr	r1, [pc, #148]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005962:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_RCC_OscConfig+0x244>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fd fbba 	bl	80030e0 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005970:	f7fd fbb6 	bl	80030e0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e187      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d036      	beq.n	8005a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a2:	4b15      	ldr	r3, [pc, #84]	@ (80059f8 <HAL_RCC_OscConfig+0x248>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fd fb9a 	bl	80030e0 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b0:	f7fd fb96 	bl	80030e0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e167      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <HAL_RCC_OscConfig+0x240>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x200>
 80059ce:	e01b      	b.n	8005a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d0:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <HAL_RCC_OscConfig+0x248>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d6:	f7fd fb83 	bl	80030e0 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	e00e      	b.n	80059fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059de:	f7fd fb7f 	bl	80030e0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d907      	bls.n	80059fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e150      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
 80059f0:	40023800 	.word	0x40023800
 80059f4:	42470000 	.word	0x42470000
 80059f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fc:	4b88      	ldr	r3, [pc, #544]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 80059fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ea      	bne.n	80059de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8097 	beq.w	8005b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1a:	4b81      	ldr	r3, [pc, #516]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10f      	bne.n	8005a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a36:	4b7a      	ldr	r3, [pc, #488]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a46:	4b77      	ldr	r3, [pc, #476]	@ (8005c24 <HAL_RCC_OscConfig+0x474>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d118      	bne.n	8005a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a52:	4b74      	ldr	r3, [pc, #464]	@ (8005c24 <HAL_RCC_OscConfig+0x474>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a73      	ldr	r2, [pc, #460]	@ (8005c24 <HAL_RCC_OscConfig+0x474>)
 8005a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a5e:	f7fd fb3f 	bl	80030e0 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a66:	f7fd fb3b 	bl	80030e0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e10c      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a78:	4b6a      	ldr	r3, [pc, #424]	@ (8005c24 <HAL_RCC_OscConfig+0x474>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_OscConfig+0x2ea>
 8005a8c:	4b64      	ldr	r3, [pc, #400]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a63      	ldr	r2, [pc, #396]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x324>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0x30c>
 8005aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aae:	4b5c      	ldr	r3, [pc, #368]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aba:	e00b      	b.n	8005ad4 <HAL_RCC_OscConfig+0x324>
 8005abc:	4b58      	ldr	r3, [pc, #352]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac0:	4a57      	ldr	r2, [pc, #348]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac8:	4b55      	ldr	r3, [pc, #340]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005acc:	4a54      	ldr	r2, [pc, #336]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005ace:	f023 0304 	bic.w	r3, r3, #4
 8005ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d015      	beq.n	8005b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fd fb00 	bl	80030e0 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fd fafc 	bl	80030e0 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e0cb      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afa:	4b49      	ldr	r3, [pc, #292]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ee      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x334>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b08:	f7fd faea 	bl	80030e0 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fd fae6 	bl	80030e0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e0b5      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b26:	4b3e      	ldr	r3, [pc, #248]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ee      	bne.n	8005b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d105      	bne.n	8005b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b38:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	4a38      	ldr	r2, [pc, #224]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80a1 	beq.w	8005c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b4e:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d05c      	beq.n	8005c14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d141      	bne.n	8005be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b62:	4b31      	ldr	r3, [pc, #196]	@ (8005c28 <HAL_RCC_OscConfig+0x478>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b68:	f7fd faba 	bl	80030e0 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b70:	f7fd fab6 	bl	80030e0 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e087      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b82:	4b27      	ldr	r3, [pc, #156]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	491b      	ldr	r1, [pc, #108]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c28 <HAL_RCC_OscConfig+0x478>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbe:	f7fd fa8f 	bl	80030e0 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fd fa8b 	bl	80030e0 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e05c      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd8:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x416>
 8005be4:	e054      	b.n	8005c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b10      	ldr	r3, [pc, #64]	@ (8005c28 <HAL_RCC_OscConfig+0x478>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fd fa78 	bl	80030e0 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fd fa74 	bl	80030e0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e045      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c06:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <HAL_RCC_OscConfig+0x470>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x444>
 8005c12:	e03d      	b.n	8005c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e038      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40007000 	.word	0x40007000
 8005c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d028      	beq.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d121      	bne.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d11a      	bne.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d111      	bne.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	3b01      	subs	r3, #1
 8005c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cc      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b68      	ldr	r3, [pc, #416]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b63      	ldr	r3, [pc, #396]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b8      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b59      	ldr	r3, [pc, #356]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a58      	ldr	r2, [pc, #352]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b53      	ldr	r3, [pc, #332]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a52      	ldr	r2, [pc, #328]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b50      	ldr	r3, [pc, #320]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494d      	ldr	r1, [pc, #308]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e067      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4934      	ldr	r1, [pc, #208]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fd f9a6 	bl	80030e0 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fd f9a2 	bl	80030e0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2b      	ldr	r3, [pc, #172]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b25      	ldr	r3, [pc, #148]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b22      	ldr	r3, [pc, #136]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b19      	ldr	r3, [pc, #100]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4916      	ldr	r1, [pc, #88]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490e      	ldr	r1, [pc, #56]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f821 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	490a      	ldr	r1, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	5ccb      	ldrb	r3, [r1, r3]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e42:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd f906 	bl	8003058 <HAL_InitTick>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	0800a6a0 	.word	0x0800a6a0
 8005e64:	20000000 	.word	0x20000000
 8005e68:	20000004 	.word	0x20000004

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e70:	b094      	sub	sp, #80	@ 0x50
 8005e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e84:	4b79      	ldr	r3, [pc, #484]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d00d      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x40>
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	f200 80e1 	bhi.w	8006058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e9e:	e0db      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea0:	4b73      	ldr	r3, [pc, #460]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ea4:	e0db      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea6:	4b73      	ldr	r3, [pc, #460]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eaa:	e0d8      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eac:	4b6f      	ldr	r3, [pc, #444]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d063      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	2200      	movs	r2, #0
 8005eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	0159      	lsls	r1, r3, #5
 8005eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ef0:	0150      	lsls	r0, r2, #5
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	1a51      	subs	r1, r2, r1
 8005efa:	6139      	str	r1, [r7, #16]
 8005efc:	4629      	mov	r1, r5
 8005efe:	eb63 0301 	sbc.w	r3, r3, r1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f10:	4659      	mov	r1, fp
 8005f12:	018b      	lsls	r3, r1, #6
 8005f14:	4651      	mov	r1, sl
 8005f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f1a:	4651      	mov	r1, sl
 8005f1c:	018a      	lsls	r2, r1, #6
 8005f1e:	4651      	mov	r1, sl
 8005f20:	ebb2 0801 	subs.w	r8, r2, r1
 8005f24:	4659      	mov	r1, fp
 8005f26:	eb63 0901 	sbc.w	r9, r3, r1
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3e:	4690      	mov	r8, r2
 8005f40:	4699      	mov	r9, r3
 8005f42:	4623      	mov	r3, r4
 8005f44:	eb18 0303 	adds.w	r3, r8, r3
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	eb49 0303 	adc.w	r3, r9, r3
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f5e:	4629      	mov	r1, r5
 8005f60:	024b      	lsls	r3, r1, #9
 8005f62:	4621      	mov	r1, r4
 8005f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f68:	4621      	mov	r1, r4
 8005f6a:	024a      	lsls	r2, r1, #9
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f72:	2200      	movs	r2, #0
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f7c:	f7fa fe64 	bl	8000c48 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f88:	e058      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f8a:	4b38      	ldr	r3, [pc, #224]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	099b      	lsrs	r3, r3, #6
 8005f90:	2200      	movs	r2, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	4611      	mov	r1, r2
 8005f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f9a:	623b      	str	r3, [r7, #32]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	f04f 0000 	mov.w	r0, #0
 8005fac:	f04f 0100 	mov.w	r1, #0
 8005fb0:	0159      	lsls	r1, r3, #5
 8005fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb6:	0150      	lsls	r0, r2, #5
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8005fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	00eb      	lsls	r3, r5, #3
 8005fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ff2:	00e2      	lsls	r2, r4, #3
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	18e3      	adds	r3, r4, r3
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	464b      	mov	r3, r9
 8006000:	eb45 0303 	adc.w	r3, r5, r3
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006012:	4629      	mov	r1, r5
 8006014:	028b      	lsls	r3, r1, #10
 8006016:	4621      	mov	r1, r4
 8006018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800601c:	4621      	mov	r1, r4
 800601e:	028a      	lsls	r2, r1, #10
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006026:	2200      	movs	r2, #0
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	61fa      	str	r2, [r7, #28]
 800602c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006030:	f7fa fe0a 	bl	8000c48 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4613      	mov	r3, r2
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800603c:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <HAL_RCC_GetSysClockFreq+0x200>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	3301      	adds	r3, #1
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800604c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800604e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006056:	e002      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x204>)
 800605a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800605c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800605e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006060:	4618      	mov	r0, r3
 8006062:	3750      	adds	r7, #80	@ 0x50
 8006064:	46bd      	mov	sp, r7
 8006066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606a:	bf00      	nop
 800606c:	40023800 	.word	0x40023800
 8006070:	00f42400 	.word	0x00f42400
 8006074:	007a1200 	.word	0x007a1200

08006078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800607c:	4b03      	ldr	r3, [pc, #12]	@ (800608c <HAL_RCC_GetHCLKFreq+0x14>)
 800607e:	681b      	ldr	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000000 	.word	0x20000000

08006090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006094:	f7ff fff0 	bl	8006078 <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	0a9b      	lsrs	r3, r3, #10
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4903      	ldr	r1, [pc, #12]	@ (80060b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40023800 	.word	0x40023800
 80060b4:	0800a6b0 	.word	0x0800a6b0

080060b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e041      	b.n	800614e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb ffaa 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f000 f984 	bl	8006404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d001      	beq.n	8006170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e046      	b.n	80061fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a23      	ldr	r2, [pc, #140]	@ (800620c <HAL_TIM_Base_Start+0xb4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618a:	d01d      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1f      	ldr	r2, [pc, #124]	@ (8006210 <HAL_TIM_Base_Start+0xb8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1e      	ldr	r2, [pc, #120]	@ (8006214 <HAL_TIM_Base_Start+0xbc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <HAL_TIM_Base_Start+0xc0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <HAL_TIM_Base_Start+0xc4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <HAL_TIM_Base_Start+0xc8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIM_Base_Start+0x70>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a18      	ldr	r2, [pc, #96]	@ (8006224 <HAL_TIM_Base_Start+0xcc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d111      	bne.n	80061ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b06      	cmp	r3, #6
 80061d8:	d010      	beq.n	80061fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ea:	e007      	b.n	80061fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40000400 	.word	0x40000400
 8006214:	40000800 	.word	0x40000800
 8006218:	40000c00 	.word	0x40000c00
 800621c:	40010400 	.word	0x40010400
 8006220:	40014000 	.word	0x40014000
 8006224:	40001800 	.word	0x40001800

08006228 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	f241 1311 	movw	r3, #4369	@ 0x1111
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10f      	bne.n	8006260 <HAL_TIM_Base_Stop+0x38>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	f240 4344 	movw	r3, #1092	@ 0x444
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <HAL_TIM_Base_Stop+0x38>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_TIM_ConfigClockSource+0x1c>
 800628e:	2302      	movs	r3, #2
 8006290:	e0b4      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x186>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ca:	d03e      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xd4>
 80062cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d0:	f200 8087 	bhi.w	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d8:	f000 8086 	beq.w	80063e8 <HAL_TIM_ConfigClockSource+0x172>
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e0:	d87f      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 80062e2:	2b70      	cmp	r3, #112	@ 0x70
 80062e4:	d01a      	beq.n	800631c <HAL_TIM_ConfigClockSource+0xa6>
 80062e6:	2b70      	cmp	r3, #112	@ 0x70
 80062e8:	d87b      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 80062ea:	2b60      	cmp	r3, #96	@ 0x60
 80062ec:	d050      	beq.n	8006390 <HAL_TIM_ConfigClockSource+0x11a>
 80062ee:	2b60      	cmp	r3, #96	@ 0x60
 80062f0:	d877      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 80062f2:	2b50      	cmp	r3, #80	@ 0x50
 80062f4:	d03c      	beq.n	8006370 <HAL_TIM_ConfigClockSource+0xfa>
 80062f6:	2b50      	cmp	r3, #80	@ 0x50
 80062f8:	d873      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d058      	beq.n	80063b0 <HAL_TIM_ConfigClockSource+0x13a>
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d86f      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 8006302:	2b30      	cmp	r3, #48	@ 0x30
 8006304:	d064      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x15a>
 8006306:	2b30      	cmp	r3, #48	@ 0x30
 8006308:	d86b      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d060      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x15a>
 800630e:	2b20      	cmp	r3, #32
 8006310:	d867      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d05c      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x15a>
 8006316:	2b10      	cmp	r3, #16
 8006318:	d05a      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x15a>
 800631a:	e062      	b.n	80063e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632c:	f000 f990 	bl	8006650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800633e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	609a      	str	r2, [r3, #8]
      break;
 8006348:	e04f      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800635a:	f000 f979 	bl	8006650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636c:	609a      	str	r2, [r3, #8]
      break;
 800636e:	e03c      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637c:	461a      	mov	r2, r3
 800637e:	f000 f8ed 	bl	800655c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2150      	movs	r1, #80	@ 0x50
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f946 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 800638e:	e02c      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639c:	461a      	mov	r2, r3
 800639e:	f000 f90c 	bl	80065ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2160      	movs	r1, #96	@ 0x60
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f936 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 80063ae:	e01c      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063bc:	461a      	mov	r2, r3
 80063be:	f000 f8cd 	bl	800655c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2140      	movs	r1, #64	@ 0x40
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f926 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 80063ce:	e00c      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f000 f91d 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 80063e0:	e003      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	e000      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a46      	ldr	r2, [pc, #280]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d013      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006422:	d00f      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <TIM_Base_SetConfig+0x130>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a42      	ldr	r2, [pc, #264]	@ (8006538 <TIM_Base_SetConfig+0x134>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a41      	ldr	r2, [pc, #260]	@ (800653c <TIM_Base_SetConfig+0x138>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d108      	bne.n	8006456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a35      	ldr	r2, [pc, #212]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02b      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006464:	d027      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a32      	ldr	r2, [pc, #200]	@ (8006534 <TIM_Base_SetConfig+0x130>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d023      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a31      	ldr	r2, [pc, #196]	@ (8006538 <TIM_Base_SetConfig+0x134>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01f      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a30      	ldr	r2, [pc, #192]	@ (800653c <TIM_Base_SetConfig+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01b      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d017      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2e      	ldr	r2, [pc, #184]	@ (8006544 <TIM_Base_SetConfig+0x140>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <TIM_Base_SetConfig+0x144>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00f      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2c      	ldr	r2, [pc, #176]	@ (800654c <TIM_Base_SetConfig+0x148>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006550 <TIM_Base_SetConfig+0x14c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006554 <TIM_Base_SetConfig+0x150>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <TIM_Base_SetConfig+0x154>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a10      	ldr	r2, [pc, #64]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0xf8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a12      	ldr	r2, [pc, #72]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d103      	bne.n	8006504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d105      	bne.n	8006522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]
  }
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800
 8006550:	40001800 	.word	0x40001800
 8006554:	40001c00 	.word	0x40001c00
 8006558:	40002000 	.word	0x40002000

0800655c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0201 	bic.w	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	f043 0307 	orr.w	r3, r3, #7
 800663c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800666a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	431a      	orrs	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e05a      	b.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a21      	ldr	r2, [pc, #132]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f4:	d01d      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1b      	ldr	r2, [pc, #108]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1a      	ldr	r2, [pc, #104]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a18      	ldr	r2, [pc, #96]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a17      	ldr	r2, [pc, #92]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10c      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40010400 	.word	0x40010400
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800

08006788 <__cvt>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	ec57 6b10 	vmov	r6, r7, d0
 8006790:	2f00      	cmp	r7, #0
 8006792:	460c      	mov	r4, r1
 8006794:	4619      	mov	r1, r3
 8006796:	463b      	mov	r3, r7
 8006798:	bfbb      	ittet	lt
 800679a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800679e:	461f      	movlt	r7, r3
 80067a0:	2300      	movge	r3, #0
 80067a2:	232d      	movlt	r3, #45	@ 0x2d
 80067a4:	700b      	strb	r3, [r1, #0]
 80067a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067ac:	4691      	mov	r9, r2
 80067ae:	f023 0820 	bic.w	r8, r3, #32
 80067b2:	bfbc      	itt	lt
 80067b4:	4632      	movlt	r2, r6
 80067b6:	4616      	movlt	r6, r2
 80067b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067bc:	d005      	beq.n	80067ca <__cvt+0x42>
 80067be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067c2:	d100      	bne.n	80067c6 <__cvt+0x3e>
 80067c4:	3401      	adds	r4, #1
 80067c6:	2102      	movs	r1, #2
 80067c8:	e000      	b.n	80067cc <__cvt+0x44>
 80067ca:	2103      	movs	r1, #3
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	ab02      	add	r3, sp, #8
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	ec47 6b10 	vmov	d0, r6, r7
 80067d8:	4653      	mov	r3, sl
 80067da:	4622      	mov	r2, r4
 80067dc:	f000 fe9c 	bl	8007518 <_dtoa_r>
 80067e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067e4:	4605      	mov	r5, r0
 80067e6:	d119      	bne.n	800681c <__cvt+0x94>
 80067e8:	f019 0f01 	tst.w	r9, #1
 80067ec:	d00e      	beq.n	800680c <__cvt+0x84>
 80067ee:	eb00 0904 	add.w	r9, r0, r4
 80067f2:	2200      	movs	r2, #0
 80067f4:	2300      	movs	r3, #0
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80067fe:	b108      	cbz	r0, 8006804 <__cvt+0x7c>
 8006800:	f8cd 900c 	str.w	r9, [sp, #12]
 8006804:	2230      	movs	r2, #48	@ 0x30
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	454b      	cmp	r3, r9
 800680a:	d31e      	bcc.n	800684a <__cvt+0xc2>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006810:	1b5b      	subs	r3, r3, r5
 8006812:	4628      	mov	r0, r5
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	b004      	add	sp, #16
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006820:	eb00 0904 	add.w	r9, r0, r4
 8006824:	d1e5      	bne.n	80067f2 <__cvt+0x6a>
 8006826:	7803      	ldrb	r3, [r0, #0]
 8006828:	2b30      	cmp	r3, #48	@ 0x30
 800682a:	d10a      	bne.n	8006842 <__cvt+0xba>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fa f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8006838:	b918      	cbnz	r0, 8006842 <__cvt+0xba>
 800683a:	f1c4 0401 	rsb	r4, r4, #1
 800683e:	f8ca 4000 	str.w	r4, [sl]
 8006842:	f8da 3000 	ldr.w	r3, [sl]
 8006846:	4499      	add	r9, r3
 8006848:	e7d3      	b.n	80067f2 <__cvt+0x6a>
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	9103      	str	r1, [sp, #12]
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e7d9      	b.n	8006806 <__cvt+0x7e>

08006852 <__exponent>:
 8006852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006854:	2900      	cmp	r1, #0
 8006856:	bfba      	itte	lt
 8006858:	4249      	neglt	r1, r1
 800685a:	232d      	movlt	r3, #45	@ 0x2d
 800685c:	232b      	movge	r3, #43	@ 0x2b
 800685e:	2909      	cmp	r1, #9
 8006860:	7002      	strb	r2, [r0, #0]
 8006862:	7043      	strb	r3, [r0, #1]
 8006864:	dd29      	ble.n	80068ba <__exponent+0x68>
 8006866:	f10d 0307 	add.w	r3, sp, #7
 800686a:	461d      	mov	r5, r3
 800686c:	270a      	movs	r7, #10
 800686e:	461a      	mov	r2, r3
 8006870:	fbb1 f6f7 	udiv	r6, r1, r7
 8006874:	fb07 1416 	mls	r4, r7, r6, r1
 8006878:	3430      	adds	r4, #48	@ 0x30
 800687a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800687e:	460c      	mov	r4, r1
 8006880:	2c63      	cmp	r4, #99	@ 0x63
 8006882:	f103 33ff 	add.w	r3, r3, #4294967295
 8006886:	4631      	mov	r1, r6
 8006888:	dcf1      	bgt.n	800686e <__exponent+0x1c>
 800688a:	3130      	adds	r1, #48	@ 0x30
 800688c:	1e94      	subs	r4, r2, #2
 800688e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006892:	1c41      	adds	r1, r0, #1
 8006894:	4623      	mov	r3, r4
 8006896:	42ab      	cmp	r3, r5
 8006898:	d30a      	bcc.n	80068b0 <__exponent+0x5e>
 800689a:	f10d 0309 	add.w	r3, sp, #9
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	42ac      	cmp	r4, r5
 80068a2:	bf88      	it	hi
 80068a4:	2300      	movhi	r3, #0
 80068a6:	3302      	adds	r3, #2
 80068a8:	4403      	add	r3, r0
 80068aa:	1a18      	subs	r0, r3, r0
 80068ac:	b003      	add	sp, #12
 80068ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068b8:	e7ed      	b.n	8006896 <__exponent+0x44>
 80068ba:	2330      	movs	r3, #48	@ 0x30
 80068bc:	3130      	adds	r1, #48	@ 0x30
 80068be:	7083      	strb	r3, [r0, #2]
 80068c0:	70c1      	strb	r1, [r0, #3]
 80068c2:	1d03      	adds	r3, r0, #4
 80068c4:	e7f1      	b.n	80068aa <__exponent+0x58>
	...

080068c8 <_printf_float>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b08d      	sub	sp, #52	@ 0x34
 80068ce:	460c      	mov	r4, r1
 80068d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068d4:	4616      	mov	r6, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	4605      	mov	r5, r0
 80068da:	f000 fd0f 	bl	80072fc <_localeconv_r>
 80068de:	6803      	ldr	r3, [r0, #0]
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7f9 fcc4 	bl	8000270 <strlen>
 80068e8:	2300      	movs	r3, #0
 80068ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ec:	f8d8 3000 	ldr.w	r3, [r8]
 80068f0:	9005      	str	r0, [sp, #20]
 80068f2:	3307      	adds	r3, #7
 80068f4:	f023 0307 	bic.w	r3, r3, #7
 80068f8:	f103 0208 	add.w	r2, r3, #8
 80068fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006900:	f8d4 b000 	ldr.w	fp, [r4]
 8006904:	f8c8 2000 	str.w	r2, [r8]
 8006908:	e9d3 8900 	ldrd	r8, r9, [r3]
 800690c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006910:	9307      	str	r3, [sp, #28]
 8006912:	f8cd 8018 	str.w	r8, [sp, #24]
 8006916:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800691a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691e:	4b9c      	ldr	r3, [pc, #624]	@ (8006b90 <_printf_float+0x2c8>)
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	f7fa f902 	bl	8000b2c <__aeabi_dcmpun>
 8006928:	bb70      	cbnz	r0, 8006988 <_printf_float+0xc0>
 800692a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692e:	4b98      	ldr	r3, [pc, #608]	@ (8006b90 <_printf_float+0x2c8>)
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	f7fa f8dc 	bl	8000af0 <__aeabi_dcmple>
 8006938:	bb30      	cbnz	r0, 8006988 <_printf_float+0xc0>
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7fa f8cb 	bl	8000adc <__aeabi_dcmplt>
 8006946:	b110      	cbz	r0, 800694e <_printf_float+0x86>
 8006948:	232d      	movs	r3, #45	@ 0x2d
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800694e:	4a91      	ldr	r2, [pc, #580]	@ (8006b94 <_printf_float+0x2cc>)
 8006950:	4b91      	ldr	r3, [pc, #580]	@ (8006b98 <_printf_float+0x2d0>)
 8006952:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006956:	bf94      	ite	ls
 8006958:	4690      	movls	r8, r2
 800695a:	4698      	movhi	r8, r3
 800695c:	2303      	movs	r3, #3
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	f02b 0304 	bic.w	r3, fp, #4
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	f04f 0900 	mov.w	r9, #0
 800696a:	9700      	str	r7, [sp, #0]
 800696c:	4633      	mov	r3, r6
 800696e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f9d2 	bl	8006d1c <_printf_common>
 8006978:	3001      	adds	r0, #1
 800697a:	f040 808d 	bne.w	8006a98 <_printf_float+0x1d0>
 800697e:	f04f 30ff 	mov.w	r0, #4294967295
 8006982:	b00d      	add	sp, #52	@ 0x34
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	4640      	mov	r0, r8
 800698e:	4649      	mov	r1, r9
 8006990:	f7fa f8cc 	bl	8000b2c <__aeabi_dcmpun>
 8006994:	b140      	cbz	r0, 80069a8 <_printf_float+0xe0>
 8006996:	464b      	mov	r3, r9
 8006998:	2b00      	cmp	r3, #0
 800699a:	bfbc      	itt	lt
 800699c:	232d      	movlt	r3, #45	@ 0x2d
 800699e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069a2:	4a7e      	ldr	r2, [pc, #504]	@ (8006b9c <_printf_float+0x2d4>)
 80069a4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ba0 <_printf_float+0x2d8>)
 80069a6:	e7d4      	b.n	8006952 <_printf_float+0x8a>
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069ae:	9206      	str	r2, [sp, #24]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	d13b      	bne.n	8006a2c <_printf_float+0x164>
 80069b4:	2306      	movs	r3, #6
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069bc:	2300      	movs	r3, #0
 80069be:	6022      	str	r2, [r4, #0]
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80069c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069c8:	ab09      	add	r3, sp, #36	@ 0x24
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	ec49 8b10 	vmov	d0, r8, r9
 80069d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069d6:	4628      	mov	r0, r5
 80069d8:	f7ff fed6 	bl	8006788 <__cvt>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069e0:	2b47      	cmp	r3, #71	@ 0x47
 80069e2:	4680      	mov	r8, r0
 80069e4:	d129      	bne.n	8006a3a <_printf_float+0x172>
 80069e6:	1cc8      	adds	r0, r1, #3
 80069e8:	db02      	blt.n	80069f0 <_printf_float+0x128>
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	4299      	cmp	r1, r3
 80069ee:	dd41      	ble.n	8006a74 <_printf_float+0x1ac>
 80069f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80069f4:	fa5f fa8a 	uxtb.w	sl, sl
 80069f8:	3901      	subs	r1, #1
 80069fa:	4652      	mov	r2, sl
 80069fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a00:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a02:	f7ff ff26 	bl	8006852 <__exponent>
 8006a06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a08:	1813      	adds	r3, r2, r0
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	dc02      	bgt.n	8006a18 <_printf_float+0x150>
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	07d2      	lsls	r2, r2, #31
 8006a16:	d501      	bpl.n	8006a1c <_printf_float+0x154>
 8006a18:	3301      	adds	r3, #1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0a2      	beq.n	800696a <_printf_float+0xa2>
 8006a24:	232d      	movs	r3, #45	@ 0x2d
 8006a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2a:	e79e      	b.n	800696a <_printf_float+0xa2>
 8006a2c:	9a06      	ldr	r2, [sp, #24]
 8006a2e:	2a47      	cmp	r2, #71	@ 0x47
 8006a30:	d1c2      	bne.n	80069b8 <_printf_float+0xf0>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1c0      	bne.n	80069b8 <_printf_float+0xf0>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e7bd      	b.n	80069b6 <_printf_float+0xee>
 8006a3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a3e:	d9db      	bls.n	80069f8 <_printf_float+0x130>
 8006a40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a44:	d118      	bne.n	8006a78 <_printf_float+0x1b0>
 8006a46:	2900      	cmp	r1, #0
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	dd0b      	ble.n	8006a64 <_printf_float+0x19c>
 8006a4c:	6121      	str	r1, [r4, #16]
 8006a4e:	b913      	cbnz	r3, 8006a56 <_printf_float+0x18e>
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	07d0      	lsls	r0, r2, #31
 8006a54:	d502      	bpl.n	8006a5c <_printf_float+0x194>
 8006a56:	3301      	adds	r3, #1
 8006a58:	440b      	add	r3, r1
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	e7db      	b.n	8006a1c <_printf_float+0x154>
 8006a64:	b913      	cbnz	r3, 8006a6c <_printf_float+0x1a4>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	07d2      	lsls	r2, r2, #31
 8006a6a:	d501      	bpl.n	8006a70 <_printf_float+0x1a8>
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	e7f4      	b.n	8006a5a <_printf_float+0x192>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e7f2      	b.n	8006a5a <_printf_float+0x192>
 8006a74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	db05      	blt.n	8006a8a <_printf_float+0x1c2>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	6121      	str	r1, [r4, #16]
 8006a82:	07d8      	lsls	r0, r3, #31
 8006a84:	d5ea      	bpl.n	8006a5c <_printf_float+0x194>
 8006a86:	1c4b      	adds	r3, r1, #1
 8006a88:	e7e7      	b.n	8006a5a <_printf_float+0x192>
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	bfd4      	ite	le
 8006a8e:	f1c1 0202 	rsble	r2, r1, #2
 8006a92:	2201      	movgt	r2, #1
 8006a94:	4413      	add	r3, r2
 8006a96:	e7e0      	b.n	8006a5a <_printf_float+0x192>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	055a      	lsls	r2, r3, #21
 8006a9c:	d407      	bmi.n	8006aae <_printf_float+0x1e6>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d12b      	bne.n	8006b04 <_printf_float+0x23c>
 8006aac:	e767      	b.n	800697e <_printf_float+0xb6>
 8006aae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ab2:	f240 80dd 	bls.w	8006c70 <_printf_float+0x3a8>
 8006ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	f7fa f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d033      	beq.n	8006b2e <_printf_float+0x266>
 8006ac6:	4a37      	ldr	r2, [pc, #220]	@ (8006ba4 <_printf_float+0x2dc>)
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f af54 	beq.w	800697e <_printf_float+0xb6>
 8006ad6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ada:	4543      	cmp	r3, r8
 8006adc:	db02      	blt.n	8006ae4 <_printf_float+0x21c>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	07d8      	lsls	r0, r3, #31
 8006ae2:	d50f      	bpl.n	8006b04 <_printf_float+0x23c>
 8006ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f af45 	beq.w	800697e <_printf_float+0xb6>
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006afc:	f104 0a1a 	add.w	sl, r4, #26
 8006b00:	45c8      	cmp	r8, r9
 8006b02:	dc09      	bgt.n	8006b18 <_printf_float+0x250>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	079b      	lsls	r3, r3, #30
 8006b08:	f100 8103 	bmi.w	8006d12 <_printf_float+0x44a>
 8006b0c:	68e0      	ldr	r0, [r4, #12]
 8006b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b10:	4298      	cmp	r0, r3
 8006b12:	bfb8      	it	lt
 8006b14:	4618      	movlt	r0, r3
 8006b16:	e734      	b.n	8006982 <_printf_float+0xba>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af2b 	beq.w	800697e <_printf_float+0xb6>
 8006b28:	f109 0901 	add.w	r9, r9, #1
 8006b2c:	e7e8      	b.n	8006b00 <_printf_float+0x238>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dc39      	bgt.n	8006ba8 <_printf_float+0x2e0>
 8006b34:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba4 <_printf_float+0x2dc>)
 8006b36:	2301      	movs	r3, #1
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af1d 	beq.w	800697e <_printf_float+0xb6>
 8006b44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b48:	ea59 0303 	orrs.w	r3, r9, r3
 8006b4c:	d102      	bne.n	8006b54 <_printf_float+0x28c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d5d7      	bpl.n	8006b04 <_printf_float+0x23c>
 8006b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f af0d 	beq.w	800697e <_printf_float+0xb6>
 8006b64:	f04f 0a00 	mov.w	sl, #0
 8006b68:	f104 0b1a 	add.w	fp, r4, #26
 8006b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6e:	425b      	negs	r3, r3
 8006b70:	4553      	cmp	r3, sl
 8006b72:	dc01      	bgt.n	8006b78 <_printf_float+0x2b0>
 8006b74:	464b      	mov	r3, r9
 8006b76:	e793      	b.n	8006aa0 <_printf_float+0x1d8>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	465a      	mov	r2, fp
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f aefb 	beq.w	800697e <_printf_float+0xb6>
 8006b88:	f10a 0a01 	add.w	sl, sl, #1
 8006b8c:	e7ee      	b.n	8006b6c <_printf_float+0x2a4>
 8006b8e:	bf00      	nop
 8006b90:	7fefffff 	.word	0x7fefffff
 8006b94:	0800a6c0 	.word	0x0800a6c0
 8006b98:	0800a6c4 	.word	0x0800a6c4
 8006b9c:	0800a6c8 	.word	0x0800a6c8
 8006ba0:	0800a6cc 	.word	0x0800a6cc
 8006ba4:	0800a6d0 	.word	0x0800a6d0
 8006ba8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006baa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bae:	4553      	cmp	r3, sl
 8006bb0:	bfa8      	it	ge
 8006bb2:	4653      	movge	r3, sl
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	4699      	mov	r9, r3
 8006bb8:	dc36      	bgt.n	8006c28 <_printf_float+0x360>
 8006bba:	f04f 0b00 	mov.w	fp, #0
 8006bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bc2:	f104 021a 	add.w	r2, r4, #26
 8006bc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bc8:	9306      	str	r3, [sp, #24]
 8006bca:	eba3 0309 	sub.w	r3, r3, r9
 8006bce:	455b      	cmp	r3, fp
 8006bd0:	dc31      	bgt.n	8006c36 <_printf_float+0x36e>
 8006bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd4:	459a      	cmp	sl, r3
 8006bd6:	dc3a      	bgt.n	8006c4e <_printf_float+0x386>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d437      	bmi.n	8006c4e <_printf_float+0x386>
 8006bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be0:	ebaa 0903 	sub.w	r9, sl, r3
 8006be4:	9b06      	ldr	r3, [sp, #24]
 8006be6:	ebaa 0303 	sub.w	r3, sl, r3
 8006bea:	4599      	cmp	r9, r3
 8006bec:	bfa8      	it	ge
 8006bee:	4699      	movge	r9, r3
 8006bf0:	f1b9 0f00 	cmp.w	r9, #0
 8006bf4:	dc33      	bgt.n	8006c5e <_printf_float+0x396>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bfe:	f104 0b1a 	add.w	fp, r4, #26
 8006c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c04:	ebaa 0303 	sub.w	r3, sl, r3
 8006c08:	eba3 0309 	sub.w	r3, r3, r9
 8006c0c:	4543      	cmp	r3, r8
 8006c0e:	f77f af79 	ble.w	8006b04 <_printf_float+0x23c>
 8006c12:	2301      	movs	r3, #1
 8006c14:	465a      	mov	r2, fp
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f43f aeae 	beq.w	800697e <_printf_float+0xb6>
 8006c22:	f108 0801 	add.w	r8, r8, #1
 8006c26:	e7ec      	b.n	8006c02 <_printf_float+0x33a>
 8006c28:	4642      	mov	r2, r8
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	d1c2      	bne.n	8006bba <_printf_float+0x2f2>
 8006c34:	e6a3      	b.n	800697e <_printf_float+0xb6>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	9206      	str	r2, [sp, #24]
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f ae9c 	beq.w	800697e <_printf_float+0xb6>
 8006c46:	9a06      	ldr	r2, [sp, #24]
 8006c48:	f10b 0b01 	add.w	fp, fp, #1
 8006c4c:	e7bb      	b.n	8006bc6 <_printf_float+0x2fe>
 8006c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d1c0      	bne.n	8006bde <_printf_float+0x316>
 8006c5c:	e68f      	b.n	800697e <_printf_float+0xb6>
 8006c5e:	9a06      	ldr	r2, [sp, #24]
 8006c60:	464b      	mov	r3, r9
 8006c62:	4442      	add	r2, r8
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b8      	blx	r7
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	d1c3      	bne.n	8006bf6 <_printf_float+0x32e>
 8006c6e:	e686      	b.n	800697e <_printf_float+0xb6>
 8006c70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c74:	f1ba 0f01 	cmp.w	sl, #1
 8006c78:	dc01      	bgt.n	8006c7e <_printf_float+0x3b6>
 8006c7a:	07db      	lsls	r3, r3, #31
 8006c7c:	d536      	bpl.n	8006cec <_printf_float+0x424>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4642      	mov	r2, r8
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f43f ae78 	beq.w	800697e <_printf_float+0xb6>
 8006c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae70 	beq.w	800697e <_printf_float+0xb6>
 8006c9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006caa:	f7f9 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cae:	b9c0      	cbnz	r0, 8006ce2 <_printf_float+0x41a>
 8006cb0:	4653      	mov	r3, sl
 8006cb2:	f108 0201 	add.w	r2, r8, #1
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d10c      	bne.n	8006cda <_printf_float+0x412>
 8006cc0:	e65d      	b.n	800697e <_printf_float+0xb6>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	465a      	mov	r2, fp
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f ae56 	beq.w	800697e <_printf_float+0xb6>
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	45d0      	cmp	r8, sl
 8006cd8:	dbf3      	blt.n	8006cc2 <_printf_float+0x3fa>
 8006cda:	464b      	mov	r3, r9
 8006cdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ce0:	e6df      	b.n	8006aa2 <_printf_float+0x1da>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f104 0b1a 	add.w	fp, r4, #26
 8006cea:	e7f4      	b.n	8006cd6 <_printf_float+0x40e>
 8006cec:	2301      	movs	r3, #1
 8006cee:	4642      	mov	r2, r8
 8006cf0:	e7e1      	b.n	8006cb6 <_printf_float+0x3ee>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	464a      	mov	r2, r9
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b8      	blx	r7
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f43f ae3e 	beq.w	800697e <_printf_float+0xb6>
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d0a:	1a5b      	subs	r3, r3, r1
 8006d0c:	4543      	cmp	r3, r8
 8006d0e:	dcf0      	bgt.n	8006cf2 <_printf_float+0x42a>
 8006d10:	e6fc      	b.n	8006b0c <_printf_float+0x244>
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	f104 0919 	add.w	r9, r4, #25
 8006d1a:	e7f4      	b.n	8006d06 <_printf_float+0x43e>

08006d1c <_printf_common>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	4616      	mov	r6, r2
 8006d22:	4698      	mov	r8, r3
 8006d24:	688a      	ldr	r2, [r1, #8]
 8006d26:	690b      	ldr	r3, [r1, #16]
 8006d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfb8      	it	lt
 8006d30:	4613      	movlt	r3, r2
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_printf_common+0x26>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	6833      	ldrmi	r3, [r6, #0]
 8006d4a:	3302      	addmi	r3, #2
 8006d4c:	6033      	strmi	r3, [r6, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d106      	bne.n	8006d64 <_printf_common+0x48>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	6832      	ldr	r2, [r6, #0]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dc26      	bgt.n	8006db2 <_printf_common+0x96>
 8006d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	3b00      	subs	r3, #0
 8006d6c:	bf18      	it	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d42b      	bmi.n	8006dcc <_printf_common+0xb0>
 8006d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d78:	4641      	mov	r1, r8
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c8      	blx	r9
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d01e      	beq.n	8006dc0 <_printf_common+0xa4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	6922      	ldr	r2, [r4, #16]
 8006d86:	f003 0306 	and.w	r3, r3, #6
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	bf02      	ittt	eq
 8006d8e:	68e5      	ldreq	r5, [r4, #12]
 8006d90:	6833      	ldreq	r3, [r6, #0]
 8006d92:	1aed      	subeq	r5, r5, r3
 8006d94:	68a3      	ldr	r3, [r4, #8]
 8006d96:	bf0c      	ite	eq
 8006d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d9c:	2500      	movne	r5, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bfc4      	itt	gt
 8006da2:	1a9b      	subgt	r3, r3, r2
 8006da4:	18ed      	addgt	r5, r5, r3
 8006da6:	2600      	movs	r6, #0
 8006da8:	341a      	adds	r4, #26
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d11a      	bne.n	8006de4 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e008      	b.n	8006dc4 <_printf_common+0xa8>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	4641      	mov	r1, r8
 8006db8:	4638      	mov	r0, r7
 8006dba:	47c8      	blx	r9
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_printf_common+0xac>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7c6      	b.n	8006d5a <_printf_common+0x3e>
 8006dcc:	18e1      	adds	r1, r4, r3
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	2030      	movs	r0, #48	@ 0x30
 8006dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dd6:	4422      	add	r2, r4
 8006dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006de0:	3302      	adds	r3, #2
 8006de2:	e7c7      	b.n	8006d74 <_printf_common+0x58>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4622      	mov	r2, r4
 8006de8:	4641      	mov	r1, r8
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c8      	blx	r9
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa4>
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7d9      	b.n	8006daa <_printf_common+0x8e>
	...

08006df8 <_printf_i>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	7e0f      	ldrb	r7, [r1, #24]
 8006dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e00:	2f78      	cmp	r7, #120	@ 0x78
 8006e02:	4691      	mov	r9, r2
 8006e04:	4680      	mov	r8, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e0e:	d807      	bhi.n	8006e20 <_printf_i+0x28>
 8006e10:	2f62      	cmp	r7, #98	@ 0x62
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x32>
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	f000 80d2 	beq.w	8006fbe <_printf_i+0x1c6>
 8006e1a:	2f58      	cmp	r7, #88	@ 0x58
 8006e1c:	f000 80b9 	beq.w	8006f92 <_printf_i+0x19a>
 8006e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e28:	e03a      	b.n	8006ea0 <_printf_i+0xa8>
 8006e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e2e:	2b15      	cmp	r3, #21
 8006e30:	d8f6      	bhi.n	8006e20 <_printf_i+0x28>
 8006e32:	a101      	add	r1, pc, #4	@ (adr r1, 8006e38 <_printf_i+0x40>)
 8006e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006e21 	.word	0x08006e21
 8006e44:	08006e21 	.word	0x08006e21
 8006e48:	08006e21 	.word	0x08006e21
 8006e4c:	08006e21 	.word	0x08006e21
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e21 	.word	0x08006e21
 8006e58:	08006e21 	.word	0x08006e21
 8006e5c:	08006e21 	.word	0x08006e21
 8006e60:	08006e21 	.word	0x08006e21
 8006e64:	08006fa5 	.word	0x08006fa5
 8006e68:	08006ecf 	.word	0x08006ecf
 8006e6c:	08006f5f 	.word	0x08006f5f
 8006e70:	08006e21 	.word	0x08006e21
 8006e74:	08006e21 	.word	0x08006e21
 8006e78:	08006fc7 	.word	0x08006fc7
 8006e7c:	08006e21 	.word	0x08006e21
 8006e80:	08006ecf 	.word	0x08006ecf
 8006e84:	08006e21 	.word	0x08006e21
 8006e88:	08006e21 	.word	0x08006e21
 8006e8c:	08006f67 	.word	0x08006f67
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6032      	str	r2, [r6, #0]
 8006e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e09d      	b.n	8006fe0 <_printf_i+0x1e8>
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1d19      	adds	r1, r3, #4
 8006eaa:	6031      	str	r1, [r6, #0]
 8006eac:	0606      	lsls	r6, r0, #24
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0xbc>
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	e003      	b.n	8006ebc <_printf_i+0xc4>
 8006eb4:	0645      	lsls	r5, r0, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0xb8>
 8006eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	da03      	bge.n	8006ec8 <_printf_i+0xd0>
 8006ec0:	232d      	movs	r3, #45	@ 0x2d
 8006ec2:	426d      	negs	r5, r5
 8006ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec8:	4859      	ldr	r0, [pc, #356]	@ (8007030 <_printf_i+0x238>)
 8006eca:	230a      	movs	r3, #10
 8006ecc:	e011      	b.n	8006ef2 <_printf_i+0xfa>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	0608      	lsls	r0, r1, #24
 8006ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ed8:	d402      	bmi.n	8006ee0 <_printf_i+0xe8>
 8006eda:	0649      	lsls	r1, r1, #25
 8006edc:	bf48      	it	mi
 8006ede:	b2ad      	uxthmi	r5, r5
 8006ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ee2:	4853      	ldr	r0, [pc, #332]	@ (8007030 <_printf_i+0x238>)
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	bf14      	ite	ne
 8006ee8:	230a      	movne	r3, #10
 8006eea:	2308      	moveq	r3, #8
 8006eec:	2100      	movs	r1, #0
 8006eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ef2:	6866      	ldr	r6, [r4, #4]
 8006ef4:	60a6      	str	r6, [r4, #8]
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	bfa2      	ittt	ge
 8006efa:	6821      	ldrge	r1, [r4, #0]
 8006efc:	f021 0104 	bicge.w	r1, r1, #4
 8006f00:	6021      	strge	r1, [r4, #0]
 8006f02:	b90d      	cbnz	r5, 8006f08 <_printf_i+0x110>
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	d04b      	beq.n	8006fa0 <_printf_i+0x1a8>
 8006f08:	4616      	mov	r6, r2
 8006f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f12:	5dc7      	ldrb	r7, [r0, r7]
 8006f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f18:	462f      	mov	r7, r5
 8006f1a:	42bb      	cmp	r3, r7
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	d9f4      	bls.n	8006f0a <_printf_i+0x112>
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d10b      	bne.n	8006f3c <_printf_i+0x144>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	07df      	lsls	r7, r3, #31
 8006f28:	d508      	bpl.n	8006f3c <_printf_i+0x144>
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	6861      	ldr	r1, [r4, #4]
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	bfde      	ittt	le
 8006f32:	2330      	movle	r3, #48	@ 0x30
 8006f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f3c:	1b92      	subs	r2, r2, r6
 8006f3e:	6122      	str	r2, [r4, #16]
 8006f40:	f8cd a000 	str.w	sl, [sp]
 8006f44:	464b      	mov	r3, r9
 8006f46:	aa03      	add	r2, sp, #12
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7ff fee6 	bl	8006d1c <_printf_common>
 8006f50:	3001      	adds	r0, #1
 8006f52:	d14a      	bne.n	8006fea <_printf_i+0x1f2>
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	b004      	add	sp, #16
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f043 0320 	orr.w	r3, r3, #32
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	4833      	ldr	r0, [pc, #204]	@ (8007034 <_printf_i+0x23c>)
 8006f68:	2778      	movs	r7, #120	@ 0x78
 8006f6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	6831      	ldr	r1, [r6, #0]
 8006f72:	061f      	lsls	r7, r3, #24
 8006f74:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f78:	d402      	bmi.n	8006f80 <_printf_i+0x188>
 8006f7a:	065f      	lsls	r7, r3, #25
 8006f7c:	bf48      	it	mi
 8006f7e:	b2ad      	uxthmi	r5, r5
 8006f80:	6031      	str	r1, [r6, #0]
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	bf44      	itt	mi
 8006f86:	f043 0320 	orrmi.w	r3, r3, #32
 8006f8a:	6023      	strmi	r3, [r4, #0]
 8006f8c:	b11d      	cbz	r5, 8006f96 <_printf_i+0x19e>
 8006f8e:	2310      	movs	r3, #16
 8006f90:	e7ac      	b.n	8006eec <_printf_i+0xf4>
 8006f92:	4827      	ldr	r0, [pc, #156]	@ (8007030 <_printf_i+0x238>)
 8006f94:	e7e9      	b.n	8006f6a <_printf_i+0x172>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	f023 0320 	bic.w	r3, r3, #32
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	e7f6      	b.n	8006f8e <_printf_i+0x196>
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	e7bd      	b.n	8006f20 <_printf_i+0x128>
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	6961      	ldr	r1, [r4, #20]
 8006faa:	1d18      	adds	r0, r3, #4
 8006fac:	6030      	str	r0, [r6, #0]
 8006fae:	062e      	lsls	r6, r5, #24
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	d501      	bpl.n	8006fb8 <_printf_i+0x1c0>
 8006fb4:	6019      	str	r1, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <_printf_i+0x1c6>
 8006fb8:	0668      	lsls	r0, r5, #25
 8006fba:	d5fb      	bpl.n	8006fb4 <_printf_i+0x1bc>
 8006fbc:	8019      	strh	r1, [r3, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	4616      	mov	r6, r2
 8006fc4:	e7bc      	b.n	8006f40 <_printf_i+0x148>
 8006fc6:	6833      	ldr	r3, [r6, #0]
 8006fc8:	1d1a      	adds	r2, r3, #4
 8006fca:	6032      	str	r2, [r6, #0]
 8006fcc:	681e      	ldr	r6, [r3, #0]
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7f9 f8fc 	bl	80001d0 <memchr>
 8006fd8:	b108      	cbz	r0, 8006fde <_printf_i+0x1e6>
 8006fda:	1b80      	subs	r0, r0, r6
 8006fdc:	6060      	str	r0, [r4, #4]
 8006fde:	6863      	ldr	r3, [r4, #4]
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe8:	e7aa      	b.n	8006f40 <_printf_i+0x148>
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	4632      	mov	r2, r6
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d0ad      	beq.n	8006f54 <_printf_i+0x15c>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	079b      	lsls	r3, r3, #30
 8006ffc:	d413      	bmi.n	8007026 <_printf_i+0x22e>
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	4298      	cmp	r0, r3
 8007004:	bfb8      	it	lt
 8007006:	4618      	movlt	r0, r3
 8007008:	e7a6      	b.n	8006f58 <_printf_i+0x160>
 800700a:	2301      	movs	r3, #1
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d09d      	beq.n	8006f54 <_printf_i+0x15c>
 8007018:	3501      	adds	r5, #1
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	9903      	ldr	r1, [sp, #12]
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	42ab      	cmp	r3, r5
 8007022:	dcf2      	bgt.n	800700a <_printf_i+0x212>
 8007024:	e7eb      	b.n	8006ffe <_printf_i+0x206>
 8007026:	2500      	movs	r5, #0
 8007028:	f104 0619 	add.w	r6, r4, #25
 800702c:	e7f5      	b.n	800701a <_printf_i+0x222>
 800702e:	bf00      	nop
 8007030:	0800a6d2 	.word	0x0800a6d2
 8007034:	0800a6e3 	.word	0x0800a6e3

08007038 <std>:
 8007038:	2300      	movs	r3, #0
 800703a:	b510      	push	{r4, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	e9c0 3300 	strd	r3, r3, [r0]
 8007042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	8181      	strh	r1, [r0, #12]
 800704a:	6643      	str	r3, [r0, #100]	@ 0x64
 800704c:	81c2      	strh	r2, [r0, #14]
 800704e:	6183      	str	r3, [r0, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	2208      	movs	r2, #8
 8007054:	305c      	adds	r0, #92	@ 0x5c
 8007056:	f000 f948 	bl	80072ea <memset>
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x58>)
 800705c:	6263      	str	r3, [r4, #36]	@ 0x24
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <std+0x5c>)
 8007060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <std+0x60>)
 8007064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <std+0x64>)
 8007068:	6323      	str	r3, [r4, #48]	@ 0x30
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <std+0x68>)
 800706c:	6224      	str	r4, [r4, #32]
 800706e:	429c      	cmp	r4, r3
 8007070:	d006      	beq.n	8007080 <std+0x48>
 8007072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007076:	4294      	cmp	r4, r2
 8007078:	d002      	beq.n	8007080 <std+0x48>
 800707a:	33d0      	adds	r3, #208	@ 0xd0
 800707c:	429c      	cmp	r4, r3
 800707e:	d105      	bne.n	800708c <std+0x54>
 8007080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f000 b9ac 	b.w	80073e4 <__retarget_lock_init_recursive>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	08007265 	.word	0x08007265
 8007094:	08007287 	.word	0x08007287
 8007098:	080072bf 	.word	0x080072bf
 800709c:	080072e3 	.word	0x080072e3
 80070a0:	20000824 	.word	0x20000824

080070a4 <stdio_exit_handler>:
 80070a4:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <stdio_exit_handler+0xc>)
 80070a6:	4903      	ldr	r1, [pc, #12]	@ (80070b4 <stdio_exit_handler+0x10>)
 80070a8:	4803      	ldr	r0, [pc, #12]	@ (80070b8 <stdio_exit_handler+0x14>)
 80070aa:	f000 b869 	b.w	8007180 <_fwalk_sglue>
 80070ae:	bf00      	nop
 80070b0:	2000000c 	.word	0x2000000c
 80070b4:	08008d5d 	.word	0x08008d5d
 80070b8:	2000001c 	.word	0x2000001c

080070bc <cleanup_stdio>:
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <cleanup_stdio+0x34>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	b510      	push	{r4, lr}
 80070c4:	4604      	mov	r4, r0
 80070c6:	d001      	beq.n	80070cc <cleanup_stdio+0x10>
 80070c8:	f001 fe48 	bl	8008d5c <_fflush_r>
 80070cc:	68a1      	ldr	r1, [r4, #8]
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <cleanup_stdio+0x38>)
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d002      	beq.n	80070da <cleanup_stdio+0x1e>
 80070d4:	4620      	mov	r0, r4
 80070d6:	f001 fe41 	bl	8008d5c <_fflush_r>
 80070da:	68e1      	ldr	r1, [r4, #12]
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <cleanup_stdio+0x3c>)
 80070de:	4299      	cmp	r1, r3
 80070e0:	d004      	beq.n	80070ec <cleanup_stdio+0x30>
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f001 be38 	b.w	8008d5c <_fflush_r>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	20000824 	.word	0x20000824
 80070f4:	2000088c 	.word	0x2000088c
 80070f8:	200008f4 	.word	0x200008f4

080070fc <global_stdio_init.part.0>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <global_stdio_init.part.0+0x30>)
 8007100:	4c0b      	ldr	r4, [pc, #44]	@ (8007130 <global_stdio_init.part.0+0x34>)
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <global_stdio_init.part.0+0x38>)
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	2200      	movs	r2, #0
 800710a:	2104      	movs	r1, #4
 800710c:	f7ff ff94 	bl	8007038 <std>
 8007110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007114:	2201      	movs	r2, #1
 8007116:	2109      	movs	r1, #9
 8007118:	f7ff ff8e 	bl	8007038 <std>
 800711c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007120:	2202      	movs	r2, #2
 8007122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007126:	2112      	movs	r1, #18
 8007128:	f7ff bf86 	b.w	8007038 <std>
 800712c:	2000095c 	.word	0x2000095c
 8007130:	20000824 	.word	0x20000824
 8007134:	080070a5 	.word	0x080070a5

08007138 <__sfp_lock_acquire>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__sfp_lock_acquire+0x8>)
 800713a:	f000 b954 	b.w	80073e6 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	20000965 	.word	0x20000965

08007144 <__sfp_lock_release>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__sfp_lock_release+0x8>)
 8007146:	f000 b94f 	b.w	80073e8 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	20000965 	.word	0x20000965

08007150 <__sinit>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4604      	mov	r4, r0
 8007154:	f7ff fff0 	bl	8007138 <__sfp_lock_acquire>
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	b11b      	cbz	r3, 8007164 <__sinit+0x14>
 800715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007160:	f7ff bff0 	b.w	8007144 <__sfp_lock_release>
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <__sinit+0x28>)
 8007166:	6223      	str	r3, [r4, #32]
 8007168:	4b04      	ldr	r3, [pc, #16]	@ (800717c <__sinit+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f5      	bne.n	800715c <__sinit+0xc>
 8007170:	f7ff ffc4 	bl	80070fc <global_stdio_init.part.0>
 8007174:	e7f2      	b.n	800715c <__sinit+0xc>
 8007176:	bf00      	nop
 8007178:	080070bd 	.word	0x080070bd
 800717c:	2000095c 	.word	0x2000095c

08007180 <_fwalk_sglue>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	4607      	mov	r7, r0
 8007186:	4688      	mov	r8, r1
 8007188:	4614      	mov	r4, r2
 800718a:	2600      	movs	r6, #0
 800718c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007190:	f1b9 0901 	subs.w	r9, r9, #1
 8007194:	d505      	bpl.n	80071a2 <_fwalk_sglue+0x22>
 8007196:	6824      	ldr	r4, [r4, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d1f7      	bne.n	800718c <_fwalk_sglue+0xc>
 800719c:	4630      	mov	r0, r6
 800719e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d907      	bls.n	80071b8 <_fwalk_sglue+0x38>
 80071a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ac:	3301      	adds	r3, #1
 80071ae:	d003      	beq.n	80071b8 <_fwalk_sglue+0x38>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	4306      	orrs	r6, r0
 80071b8:	3568      	adds	r5, #104	@ 0x68
 80071ba:	e7e9      	b.n	8007190 <_fwalk_sglue+0x10>

080071bc <sniprintf>:
 80071bc:	b40c      	push	{r2, r3}
 80071be:	b530      	push	{r4, r5, lr}
 80071c0:	4b17      	ldr	r3, [pc, #92]	@ (8007220 <sniprintf+0x64>)
 80071c2:	1e0c      	subs	r4, r1, #0
 80071c4:	681d      	ldr	r5, [r3, #0]
 80071c6:	b09d      	sub	sp, #116	@ 0x74
 80071c8:	da08      	bge.n	80071dc <sniprintf+0x20>
 80071ca:	238b      	movs	r3, #139	@ 0x8b
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	b01d      	add	sp, #116	@ 0x74
 80071d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071d8:	b002      	add	sp, #8
 80071da:	4770      	bx	lr
 80071dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80071e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80071e4:	bf14      	ite	ne
 80071e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071ea:	4623      	moveq	r3, r4
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071f4:	9002      	str	r0, [sp, #8]
 80071f6:	9006      	str	r0, [sp, #24]
 80071f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071fe:	ab21      	add	r3, sp, #132	@ 0x84
 8007200:	a902      	add	r1, sp, #8
 8007202:	4628      	mov	r0, r5
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	f001 fc29 	bl	8008a5c <_svfiprintf_r>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	bfbc      	itt	lt
 800720e:	238b      	movlt	r3, #139	@ 0x8b
 8007210:	602b      	strlt	r3, [r5, #0]
 8007212:	2c00      	cmp	r4, #0
 8007214:	d0dd      	beq.n	80071d2 <sniprintf+0x16>
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e7d9      	b.n	80071d2 <sniprintf+0x16>
 800721e:	bf00      	nop
 8007220:	20000018 	.word	0x20000018

08007224 <siprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	b500      	push	{lr}
 8007228:	b09c      	sub	sp, #112	@ 0x70
 800722a:	ab1d      	add	r3, sp, #116	@ 0x74
 800722c:	9002      	str	r0, [sp, #8]
 800722e:	9006      	str	r0, [sp, #24]
 8007230:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007234:	4809      	ldr	r0, [pc, #36]	@ (800725c <siprintf+0x38>)
 8007236:	9107      	str	r1, [sp, #28]
 8007238:	9104      	str	r1, [sp, #16]
 800723a:	4909      	ldr	r1, [pc, #36]	@ (8007260 <siprintf+0x3c>)
 800723c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007240:	9105      	str	r1, [sp, #20]
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	a902      	add	r1, sp, #8
 8007248:	f001 fc08 	bl	8008a5c <_svfiprintf_r>
 800724c:	9b02      	ldr	r3, [sp, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	b01c      	add	sp, #112	@ 0x70
 8007254:	f85d eb04 	ldr.w	lr, [sp], #4
 8007258:	b003      	add	sp, #12
 800725a:	4770      	bx	lr
 800725c:	20000018 	.word	0x20000018
 8007260:	ffff0208 	.word	0xffff0208

08007264 <__sread>:
 8007264:	b510      	push	{r4, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	f000 f86c 	bl	8007348 <_read_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	bfab      	itete	ge
 8007274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007276:	89a3      	ldrhlt	r3, [r4, #12]
 8007278:	181b      	addge	r3, r3, r0
 800727a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800727e:	bfac      	ite	ge
 8007280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007282:	81a3      	strhlt	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__swrite>:
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	461f      	mov	r7, r3
 800728c:	898b      	ldrh	r3, [r1, #12]
 800728e:	05db      	lsls	r3, r3, #23
 8007290:	4605      	mov	r5, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d505      	bpl.n	80072a4 <__swrite+0x1e>
 8007298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729c:	2302      	movs	r3, #2
 800729e:	2200      	movs	r2, #0
 80072a0:	f000 f840 	bl	8007324 <_lseek_r>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	f000 b857 	b.w	800736c <_write_r>

080072be <__sseek>:
 80072be:	b510      	push	{r4, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c6:	f000 f82d 	bl	8007324 <_lseek_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	bf15      	itete	ne
 80072d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072da:	81a3      	strheq	r3, [r4, #12]
 80072dc:	bf18      	it	ne
 80072de:	81a3      	strhne	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__sclose>:
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 b80d 	b.w	8007304 <_close_r>

080072ea <memset>:
 80072ea:	4402      	add	r2, r0
 80072ec:	4603      	mov	r3, r0
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d100      	bne.n	80072f4 <memset+0xa>
 80072f2:	4770      	bx	lr
 80072f4:	f803 1b01 	strb.w	r1, [r3], #1
 80072f8:	e7f9      	b.n	80072ee <memset+0x4>
	...

080072fc <_localeconv_r>:
 80072fc:	4800      	ldr	r0, [pc, #0]	@ (8007300 <_localeconv_r+0x4>)
 80072fe:	4770      	bx	lr
 8007300:	20000158 	.word	0x20000158

08007304 <_close_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d06      	ldr	r5, [pc, #24]	@ (8007320 <_close_r+0x1c>)
 8007308:	2300      	movs	r3, #0
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7fa ff99 	bl	8002246 <_close>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_close_r+0x1a>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_close_r+0x1a>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20000960 	.word	0x20000960

08007324 <_lseek_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d07      	ldr	r5, [pc, #28]	@ (8007344 <_lseek_r+0x20>)
 8007328:	4604      	mov	r4, r0
 800732a:	4608      	mov	r0, r1
 800732c:	4611      	mov	r1, r2
 800732e:	2200      	movs	r2, #0
 8007330:	602a      	str	r2, [r5, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	f7fa ffae 	bl	8002294 <_lseek>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_lseek_r+0x1e>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	b103      	cbz	r3, 8007342 <_lseek_r+0x1e>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	20000960 	.word	0x20000960

08007348 <_read_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4d07      	ldr	r5, [pc, #28]	@ (8007368 <_read_r+0x20>)
 800734c:	4604      	mov	r4, r0
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	2200      	movs	r2, #0
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7fa ff3c 	bl	80021d4 <_read>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_read_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_read_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000960 	.word	0x20000960

0800736c <_write_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	@ (800738c <_write_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7fa ff47 	bl	800220e <_write>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_write_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_write_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000960 	.word	0x20000960

08007390 <__errno>:
 8007390:	4b01      	ldr	r3, [pc, #4]	@ (8007398 <__errno+0x8>)
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20000018 	.word	0x20000018

0800739c <__libc_init_array>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4d0d      	ldr	r5, [pc, #52]	@ (80073d4 <__libc_init_array+0x38>)
 80073a0:	4c0d      	ldr	r4, [pc, #52]	@ (80073d8 <__libc_init_array+0x3c>)
 80073a2:	1b64      	subs	r4, r4, r5
 80073a4:	10a4      	asrs	r4, r4, #2
 80073a6:	2600      	movs	r6, #0
 80073a8:	42a6      	cmp	r6, r4
 80073aa:	d109      	bne.n	80073c0 <__libc_init_array+0x24>
 80073ac:	4d0b      	ldr	r5, [pc, #44]	@ (80073dc <__libc_init_array+0x40>)
 80073ae:	4c0c      	ldr	r4, [pc, #48]	@ (80073e0 <__libc_init_array+0x44>)
 80073b0:	f002 fa64 	bl	800987c <_init>
 80073b4:	1b64      	subs	r4, r4, r5
 80073b6:	10a4      	asrs	r4, r4, #2
 80073b8:	2600      	movs	r6, #0
 80073ba:	42a6      	cmp	r6, r4
 80073bc:	d105      	bne.n	80073ca <__libc_init_array+0x2e>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c4:	4798      	blx	r3
 80073c6:	3601      	adds	r6, #1
 80073c8:	e7ee      	b.n	80073a8 <__libc_init_array+0xc>
 80073ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ce:	4798      	blx	r3
 80073d0:	3601      	adds	r6, #1
 80073d2:	e7f2      	b.n	80073ba <__libc_init_array+0x1e>
 80073d4:	0800aa38 	.word	0x0800aa38
 80073d8:	0800aa38 	.word	0x0800aa38
 80073dc:	0800aa38 	.word	0x0800aa38
 80073e0:	0800aa3c 	.word	0x0800aa3c

080073e4 <__retarget_lock_init_recursive>:
 80073e4:	4770      	bx	lr

080073e6 <__retarget_lock_acquire_recursive>:
 80073e6:	4770      	bx	lr

080073e8 <__retarget_lock_release_recursive>:
 80073e8:	4770      	bx	lr

080073ea <memcpy>:
 80073ea:	440a      	add	r2, r1
 80073ec:	4291      	cmp	r1, r2
 80073ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f2:	d100      	bne.n	80073f6 <memcpy+0xc>
 80073f4:	4770      	bx	lr
 80073f6:	b510      	push	{r4, lr}
 80073f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007400:	4291      	cmp	r1, r2
 8007402:	d1f9      	bne.n	80073f8 <memcpy+0xe>
 8007404:	bd10      	pop	{r4, pc}

08007406 <quorem>:
 8007406:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	6903      	ldr	r3, [r0, #16]
 800740c:	690c      	ldr	r4, [r1, #16]
 800740e:	42a3      	cmp	r3, r4
 8007410:	4607      	mov	r7, r0
 8007412:	db7e      	blt.n	8007512 <quorem+0x10c>
 8007414:	3c01      	subs	r4, #1
 8007416:	f101 0814 	add.w	r8, r1, #20
 800741a:	00a3      	lsls	r3, r4, #2
 800741c:	f100 0514 	add.w	r5, r0, #20
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800742c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007430:	3301      	adds	r3, #1
 8007432:	429a      	cmp	r2, r3
 8007434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007438:	fbb2 f6f3 	udiv	r6, r2, r3
 800743c:	d32e      	bcc.n	800749c <quorem+0x96>
 800743e:	f04f 0a00 	mov.w	sl, #0
 8007442:	46c4      	mov	ip, r8
 8007444:	46ae      	mov	lr, r5
 8007446:	46d3      	mov	fp, sl
 8007448:	f85c 3b04 	ldr.w	r3, [ip], #4
 800744c:	b298      	uxth	r0, r3
 800744e:	fb06 a000 	mla	r0, r6, r0, sl
 8007452:	0c02      	lsrs	r2, r0, #16
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	fb06 2303 	mla	r3, r6, r3, r2
 800745a:	f8de 2000 	ldr.w	r2, [lr]
 800745e:	b280      	uxth	r0, r0
 8007460:	b292      	uxth	r2, r2
 8007462:	1a12      	subs	r2, r2, r0
 8007464:	445a      	add	r2, fp
 8007466:	f8de 0000 	ldr.w	r0, [lr]
 800746a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800746e:	b29b      	uxth	r3, r3
 8007470:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007474:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007478:	b292      	uxth	r2, r2
 800747a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800747e:	45e1      	cmp	r9, ip
 8007480:	f84e 2b04 	str.w	r2, [lr], #4
 8007484:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007488:	d2de      	bcs.n	8007448 <quorem+0x42>
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	58eb      	ldr	r3, [r5, r3]
 800748e:	b92b      	cbnz	r3, 800749c <quorem+0x96>
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	3b04      	subs	r3, #4
 8007494:	429d      	cmp	r5, r3
 8007496:	461a      	mov	r2, r3
 8007498:	d32f      	bcc.n	80074fa <quorem+0xf4>
 800749a:	613c      	str	r4, [r7, #16]
 800749c:	4638      	mov	r0, r7
 800749e:	f001 f979 	bl	8008794 <__mcmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	db25      	blt.n	80074f2 <quorem+0xec>
 80074a6:	4629      	mov	r1, r5
 80074a8:	2000      	movs	r0, #0
 80074aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80074ae:	f8d1 c000 	ldr.w	ip, [r1]
 80074b2:	fa1f fe82 	uxth.w	lr, r2
 80074b6:	fa1f f38c 	uxth.w	r3, ip
 80074ba:	eba3 030e 	sub.w	r3, r3, lr
 80074be:	4403      	add	r3, r0
 80074c0:	0c12      	lsrs	r2, r2, #16
 80074c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80074c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d0:	45c1      	cmp	r9, r8
 80074d2:	f841 3b04 	str.w	r3, [r1], #4
 80074d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074da:	d2e6      	bcs.n	80074aa <quorem+0xa4>
 80074dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074e4:	b922      	cbnz	r2, 80074f0 <quorem+0xea>
 80074e6:	3b04      	subs	r3, #4
 80074e8:	429d      	cmp	r5, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	d30b      	bcc.n	8007506 <quorem+0x100>
 80074ee:	613c      	str	r4, [r7, #16]
 80074f0:	3601      	adds	r6, #1
 80074f2:	4630      	mov	r0, r6
 80074f4:	b003      	add	sp, #12
 80074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	3b04      	subs	r3, #4
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d1cb      	bne.n	800749a <quorem+0x94>
 8007502:	3c01      	subs	r4, #1
 8007504:	e7c6      	b.n	8007494 <quorem+0x8e>
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	3b04      	subs	r3, #4
 800750a:	2a00      	cmp	r2, #0
 800750c:	d1ef      	bne.n	80074ee <quorem+0xe8>
 800750e:	3c01      	subs	r4, #1
 8007510:	e7ea      	b.n	80074e8 <quorem+0xe2>
 8007512:	2000      	movs	r0, #0
 8007514:	e7ee      	b.n	80074f4 <quorem+0xee>
	...

08007518 <_dtoa_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	69c7      	ldr	r7, [r0, #28]
 800751e:	b099      	sub	sp, #100	@ 0x64
 8007520:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007524:	ec55 4b10 	vmov	r4, r5, d0
 8007528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800752a:	9109      	str	r1, [sp, #36]	@ 0x24
 800752c:	4683      	mov	fp, r0
 800752e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007532:	b97f      	cbnz	r7, 8007554 <_dtoa_r+0x3c>
 8007534:	2010      	movs	r0, #16
 8007536:	f000 fdfd 	bl	8008134 <malloc>
 800753a:	4602      	mov	r2, r0
 800753c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007540:	b920      	cbnz	r0, 800754c <_dtoa_r+0x34>
 8007542:	4ba7      	ldr	r3, [pc, #668]	@ (80077e0 <_dtoa_r+0x2c8>)
 8007544:	21ef      	movs	r1, #239	@ 0xef
 8007546:	48a7      	ldr	r0, [pc, #668]	@ (80077e4 <_dtoa_r+0x2cc>)
 8007548:	f001 fc5a 	bl	8008e00 <__assert_func>
 800754c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007550:	6007      	str	r7, [r0, #0]
 8007552:	60c7      	str	r7, [r0, #12]
 8007554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	b159      	cbz	r1, 8007574 <_dtoa_r+0x5c>
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	604a      	str	r2, [r1, #4]
 8007560:	2301      	movs	r3, #1
 8007562:	4093      	lsls	r3, r2
 8007564:	608b      	str	r3, [r1, #8]
 8007566:	4658      	mov	r0, fp
 8007568:	f000 feda 	bl	8008320 <_Bfree>
 800756c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	1e2b      	subs	r3, r5, #0
 8007576:	bfb9      	ittee	lt
 8007578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800757c:	9303      	strlt	r3, [sp, #12]
 800757e:	2300      	movge	r3, #0
 8007580:	6033      	strge	r3, [r6, #0]
 8007582:	9f03      	ldr	r7, [sp, #12]
 8007584:	4b98      	ldr	r3, [pc, #608]	@ (80077e8 <_dtoa_r+0x2d0>)
 8007586:	bfbc      	itt	lt
 8007588:	2201      	movlt	r2, #1
 800758a:	6032      	strlt	r2, [r6, #0]
 800758c:	43bb      	bics	r3, r7
 800758e:	d112      	bne.n	80075b6 <_dtoa_r+0x9e>
 8007590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800759c:	4323      	orrs	r3, r4
 800759e:	f000 854d 	beq.w	800803c <_dtoa_r+0xb24>
 80075a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80077fc <_dtoa_r+0x2e4>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 854f 	beq.w	800804c <_dtoa_r+0xb34>
 80075ae:	f10a 0303 	add.w	r3, sl, #3
 80075b2:	f000 bd49 	b.w	8008048 <_dtoa_r+0xb30>
 80075b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	ec51 0b17 	vmov	r0, r1, d7
 80075c0:	2300      	movs	r3, #0
 80075c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80075c6:	f7f9 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ca:	4680      	mov	r8, r0
 80075cc:	b158      	cbz	r0, 80075e6 <_dtoa_r+0xce>
 80075ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075d0:	2301      	movs	r3, #1
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075d6:	b113      	cbz	r3, 80075de <_dtoa_r+0xc6>
 80075d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075da:	4b84      	ldr	r3, [pc, #528]	@ (80077ec <_dtoa_r+0x2d4>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007800 <_dtoa_r+0x2e8>
 80075e2:	f000 bd33 	b.w	800804c <_dtoa_r+0xb34>
 80075e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80075ea:	aa16      	add	r2, sp, #88	@ 0x58
 80075ec:	a917      	add	r1, sp, #92	@ 0x5c
 80075ee:	4658      	mov	r0, fp
 80075f0:	f001 f980 	bl	80088f4 <__d2b>
 80075f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075f8:	4681      	mov	r9, r0
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	d077      	beq.n	80076ee <_dtoa_r+0x1d6>
 80075fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800760c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007618:	4619      	mov	r1, r3
 800761a:	2200      	movs	r2, #0
 800761c:	4b74      	ldr	r3, [pc, #464]	@ (80077f0 <_dtoa_r+0x2d8>)
 800761e:	f7f8 fe33 	bl	8000288 <__aeabi_dsub>
 8007622:	a369      	add	r3, pc, #420	@ (adr r3, 80077c8 <_dtoa_r+0x2b0>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	a368      	add	r3, pc, #416	@ (adr r3, 80077d0 <_dtoa_r+0x2b8>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f8 fe2b 	bl	800028c <__adddf3>
 8007636:	4604      	mov	r4, r0
 8007638:	4630      	mov	r0, r6
 800763a:	460d      	mov	r5, r1
 800763c:	f7f8 ff72 	bl	8000524 <__aeabi_i2d>
 8007640:	a365      	add	r3, pc, #404	@ (adr r3, 80077d8 <_dtoa_r+0x2c0>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 ffd7 	bl	80005f8 <__aeabi_dmul>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f8 fe1b 	bl	800028c <__adddf3>
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	f7f9 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800765e:	2200      	movs	r2, #0
 8007660:	4607      	mov	r7, r0
 8007662:	2300      	movs	r3, #0
 8007664:	4620      	mov	r0, r4
 8007666:	4629      	mov	r1, r5
 8007668:	f7f9 fa38 	bl	8000adc <__aeabi_dcmplt>
 800766c:	b140      	cbz	r0, 8007680 <_dtoa_r+0x168>
 800766e:	4638      	mov	r0, r7
 8007670:	f7f8 ff58 	bl	8000524 <__aeabi_i2d>
 8007674:	4622      	mov	r2, r4
 8007676:	462b      	mov	r3, r5
 8007678:	f7f9 fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800767c:	b900      	cbnz	r0, 8007680 <_dtoa_r+0x168>
 800767e:	3f01      	subs	r7, #1
 8007680:	2f16      	cmp	r7, #22
 8007682:	d851      	bhi.n	8007728 <_dtoa_r+0x210>
 8007684:	4b5b      	ldr	r3, [pc, #364]	@ (80077f4 <_dtoa_r+0x2dc>)
 8007686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007692:	f7f9 fa23 	bl	8000adc <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d048      	beq.n	800772c <_dtoa_r+0x214>
 800769a:	3f01      	subs	r7, #1
 800769c:	2300      	movs	r3, #0
 800769e:	9312      	str	r3, [sp, #72]	@ 0x48
 80076a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076a2:	1b9b      	subs	r3, r3, r6
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	bf44      	itt	mi
 80076a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80076ac:	2300      	movmi	r3, #0
 80076ae:	9208      	str	r2, [sp, #32]
 80076b0:	bf54      	ite	pl
 80076b2:	f04f 0800 	movpl.w	r8, #0
 80076b6:	9308      	strmi	r3, [sp, #32]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	db39      	blt.n	8007730 <_dtoa_r+0x218>
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80076c0:	443b      	add	r3, r7
 80076c2:	9308      	str	r3, [sp, #32]
 80076c4:	2300      	movs	r3, #0
 80076c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d864      	bhi.n	8007798 <_dtoa_r+0x280>
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	bfc4      	itt	gt
 80076d2:	3b04      	subgt	r3, #4
 80076d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	f1a3 0302 	sub.w	r3, r3, #2
 80076dc:	bfcc      	ite	gt
 80076de:	2400      	movgt	r4, #0
 80076e0:	2401      	movle	r4, #1
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d863      	bhi.n	80077ae <_dtoa_r+0x296>
 80076e6:	e8df f003 	tbb	[pc, r3]
 80076ea:	372a      	.short	0x372a
 80076ec:	5535      	.short	0x5535
 80076ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80076f2:	441e      	add	r6, r3
 80076f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	bfc1      	itttt	gt
 80076fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007700:	409f      	lslgt	r7, r3
 8007702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007706:	fa24 f303 	lsrgt.w	r3, r4, r3
 800770a:	bfd6      	itet	le
 800770c:	f1c3 0320 	rsble	r3, r3, #32
 8007710:	ea47 0003 	orrgt.w	r0, r7, r3
 8007714:	fa04 f003 	lslle.w	r0, r4, r3
 8007718:	f7f8 fef4 	bl	8000504 <__aeabi_ui2d>
 800771c:	2201      	movs	r2, #1
 800771e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007722:	3e01      	subs	r6, #1
 8007724:	9214      	str	r2, [sp, #80]	@ 0x50
 8007726:	e777      	b.n	8007618 <_dtoa_r+0x100>
 8007728:	2301      	movs	r3, #1
 800772a:	e7b8      	b.n	800769e <_dtoa_r+0x186>
 800772c:	9012      	str	r0, [sp, #72]	@ 0x48
 800772e:	e7b7      	b.n	80076a0 <_dtoa_r+0x188>
 8007730:	427b      	negs	r3, r7
 8007732:	930a      	str	r3, [sp, #40]	@ 0x28
 8007734:	2300      	movs	r3, #0
 8007736:	eba8 0807 	sub.w	r8, r8, r7
 800773a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800773c:	e7c4      	b.n	80076c8 <_dtoa_r+0x1b0>
 800773e:	2300      	movs	r3, #0
 8007740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc35      	bgt.n	80077b4 <_dtoa_r+0x29c>
 8007748:	2301      	movs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	9307      	str	r3, [sp, #28]
 800774e:	461a      	mov	r2, r3
 8007750:	920e      	str	r2, [sp, #56]	@ 0x38
 8007752:	e00b      	b.n	800776c <_dtoa_r+0x254>
 8007754:	2301      	movs	r3, #1
 8007756:	e7f3      	b.n	8007740 <_dtoa_r+0x228>
 8007758:	2300      	movs	r3, #0
 800775a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	bfb8      	it	lt
 800776a:	2301      	movlt	r3, #1
 800776c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007770:	2100      	movs	r1, #0
 8007772:	2204      	movs	r2, #4
 8007774:	f102 0514 	add.w	r5, r2, #20
 8007778:	429d      	cmp	r5, r3
 800777a:	d91f      	bls.n	80077bc <_dtoa_r+0x2a4>
 800777c:	6041      	str	r1, [r0, #4]
 800777e:	4658      	mov	r0, fp
 8007780:	f000 fd8e 	bl	80082a0 <_Balloc>
 8007784:	4682      	mov	sl, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d13c      	bne.n	8007804 <_dtoa_r+0x2ec>
 800778a:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <_dtoa_r+0x2e0>)
 800778c:	4602      	mov	r2, r0
 800778e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007792:	e6d8      	b.n	8007546 <_dtoa_r+0x2e>
 8007794:	2301      	movs	r3, #1
 8007796:	e7e0      	b.n	800775a <_dtoa_r+0x242>
 8007798:	2401      	movs	r4, #1
 800779a:	2300      	movs	r3, #0
 800779c:	9309      	str	r3, [sp, #36]	@ 0x24
 800779e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2312      	movs	r3, #18
 80077ac:	e7d0      	b.n	8007750 <_dtoa_r+0x238>
 80077ae:	2301      	movs	r3, #1
 80077b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077b2:	e7f5      	b.n	80077a0 <_dtoa_r+0x288>
 80077b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	e7d7      	b.n	800776c <_dtoa_r+0x254>
 80077bc:	3101      	adds	r1, #1
 80077be:	0052      	lsls	r2, r2, #1
 80077c0:	e7d8      	b.n	8007774 <_dtoa_r+0x25c>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	636f4361 	.word	0x636f4361
 80077cc:	3fd287a7 	.word	0x3fd287a7
 80077d0:	8b60c8b3 	.word	0x8b60c8b3
 80077d4:	3fc68a28 	.word	0x3fc68a28
 80077d8:	509f79fb 	.word	0x509f79fb
 80077dc:	3fd34413 	.word	0x3fd34413
 80077e0:	0800a701 	.word	0x0800a701
 80077e4:	0800a718 	.word	0x0800a718
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	0800a6d1 	.word	0x0800a6d1
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	0800a810 	.word	0x0800a810
 80077f8:	0800a770 	.word	0x0800a770
 80077fc:	0800a6fd 	.word	0x0800a6fd
 8007800:	0800a6d0 	.word	0x0800a6d0
 8007804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007808:	6018      	str	r0, [r3, #0]
 800780a:	9b07      	ldr	r3, [sp, #28]
 800780c:	2b0e      	cmp	r3, #14
 800780e:	f200 80a4 	bhi.w	800795a <_dtoa_r+0x442>
 8007812:	2c00      	cmp	r4, #0
 8007814:	f000 80a1 	beq.w	800795a <_dtoa_r+0x442>
 8007818:	2f00      	cmp	r7, #0
 800781a:	dd33      	ble.n	8007884 <_dtoa_r+0x36c>
 800781c:	4bad      	ldr	r3, [pc, #692]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800781e:	f007 020f 	and.w	r2, r7, #15
 8007822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007826:	ed93 7b00 	vldr	d7, [r3]
 800782a:	05f8      	lsls	r0, r7, #23
 800782c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007830:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007834:	d516      	bpl.n	8007864 <_dtoa_r+0x34c>
 8007836:	4ba8      	ldr	r3, [pc, #672]	@ (8007ad8 <_dtoa_r+0x5c0>)
 8007838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800783c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007840:	f7f9 f804 	bl	800084c <__aeabi_ddiv>
 8007844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007848:	f004 040f 	and.w	r4, r4, #15
 800784c:	2603      	movs	r6, #3
 800784e:	4da2      	ldr	r5, [pc, #648]	@ (8007ad8 <_dtoa_r+0x5c0>)
 8007850:	b954      	cbnz	r4, 8007868 <_dtoa_r+0x350>
 8007852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785a:	f7f8 fff7 	bl	800084c <__aeabi_ddiv>
 800785e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007862:	e028      	b.n	80078b6 <_dtoa_r+0x39e>
 8007864:	2602      	movs	r6, #2
 8007866:	e7f2      	b.n	800784e <_dtoa_r+0x336>
 8007868:	07e1      	lsls	r1, r4, #31
 800786a:	d508      	bpl.n	800787e <_dtoa_r+0x366>
 800786c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007870:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787c:	3601      	adds	r6, #1
 800787e:	1064      	asrs	r4, r4, #1
 8007880:	3508      	adds	r5, #8
 8007882:	e7e5      	b.n	8007850 <_dtoa_r+0x338>
 8007884:	f000 80d2 	beq.w	8007a2c <_dtoa_r+0x514>
 8007888:	427c      	negs	r4, r7
 800788a:	4b92      	ldr	r3, [pc, #584]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800788c:	4d92      	ldr	r5, [pc, #584]	@ (8007ad8 <_dtoa_r+0x5c0>)
 800788e:	f004 020f 	and.w	r2, r4, #15
 8007892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a6:	1124      	asrs	r4, r4, #4
 80078a8:	2300      	movs	r3, #0
 80078aa:	2602      	movs	r6, #2
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	f040 80b2 	bne.w	8007a16 <_dtoa_r+0x4fe>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1d3      	bne.n	800785e <_dtoa_r+0x346>
 80078b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80b7 	beq.w	8007a30 <_dtoa_r+0x518>
 80078c2:	4b86      	ldr	r3, [pc, #536]	@ (8007adc <_dtoa_r+0x5c4>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 f907 	bl	8000adc <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f000 80ae 	beq.w	8007a30 <_dtoa_r+0x518>
 80078d4:	9b07      	ldr	r3, [sp, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80aa 	beq.w	8007a30 <_dtoa_r+0x518>
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd37      	ble.n	8007952 <_dtoa_r+0x43a>
 80078e2:	1e7b      	subs	r3, r7, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	4620      	mov	r0, r4
 80078e8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ae0 <_dtoa_r+0x5c8>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f6:	9c00      	ldr	r4, [sp, #0]
 80078f8:	3601      	adds	r6, #1
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7f8 fe12 	bl	8000524 <__aeabi_i2d>
 8007900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	4b76      	ldr	r3, [pc, #472]	@ (8007ae4 <_dtoa_r+0x5cc>)
 800790a:	2200      	movs	r2, #0
 800790c:	f7f8 fcbe 	bl	800028c <__adddf3>
 8007910:	4605      	mov	r5, r0
 8007912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007916:	2c00      	cmp	r4, #0
 8007918:	f040 808d 	bne.w	8007a36 <_dtoa_r+0x51e>
 800791c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007920:	4b71      	ldr	r3, [pc, #452]	@ (8007ae8 <_dtoa_r+0x5d0>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007930:	462a      	mov	r2, r5
 8007932:	4633      	mov	r3, r6
 8007934:	f7f9 f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 8007938:	2800      	cmp	r0, #0
 800793a:	f040 828b 	bne.w	8007e54 <_dtoa_r+0x93c>
 800793e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007942:	462a      	mov	r2, r5
 8007944:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007948:	f7f9 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 8128 	bne.w	8007ba2 <_dtoa_r+0x68a>
 8007952:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007956:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800795a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800795c:	2b00      	cmp	r3, #0
 800795e:	f2c0 815a 	blt.w	8007c16 <_dtoa_r+0x6fe>
 8007962:	2f0e      	cmp	r7, #14
 8007964:	f300 8157 	bgt.w	8007c16 <_dtoa_r+0x6fe>
 8007968:	4b5a      	ldr	r3, [pc, #360]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800796a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800796e:	ed93 7b00 	vldr	d7, [r3]
 8007972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	ed8d 7b00 	vstr	d7, [sp]
 800797a:	da03      	bge.n	8007984 <_dtoa_r+0x46c>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f340 8101 	ble.w	8007b86 <_dtoa_r+0x66e>
 8007984:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007988:	4656      	mov	r6, sl
 800798a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 ff5b 	bl	800084c <__aeabi_ddiv>
 8007996:	f7f9 f8df 	bl	8000b58 <__aeabi_d2iz>
 800799a:	4680      	mov	r8, r0
 800799c:	f7f8 fdc2 	bl	8000524 <__aeabi_i2d>
 80079a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079a4:	f7f8 fe28 	bl	80005f8 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	f806 4b01 	strb.w	r4, [r6], #1
 80079bc:	9d07      	ldr	r5, [sp, #28]
 80079be:	eba6 040a 	sub.w	r4, r6, sl
 80079c2:	42a5      	cmp	r5, r4
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	f040 8117 	bne.w	8007bfa <_dtoa_r+0x6e2>
 80079cc:	f7f8 fc5e 	bl	800028c <__adddf3>
 80079d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	f7f9 f89e 	bl	8000b18 <__aeabi_dcmpgt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f040 80f9 	bne.w	8007bd4 <_dtoa_r+0x6bc>
 80079e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f9 f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ee:	b118      	cbz	r0, 80079f8 <_dtoa_r+0x4e0>
 80079f0:	f018 0f01 	tst.w	r8, #1
 80079f4:	f040 80ee 	bne.w	8007bd4 <_dtoa_r+0x6bc>
 80079f8:	4649      	mov	r1, r9
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fc90 	bl	8008320 <_Bfree>
 8007a00:	2300      	movs	r3, #0
 8007a02:	7033      	strb	r3, [r6, #0]
 8007a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a06:	3701      	adds	r7, #1
 8007a08:	601f      	str	r7, [r3, #0]
 8007a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 831d 	beq.w	800804c <_dtoa_r+0xb34>
 8007a12:	601e      	str	r6, [r3, #0]
 8007a14:	e31a      	b.n	800804c <_dtoa_r+0xb34>
 8007a16:	07e2      	lsls	r2, r4, #31
 8007a18:	d505      	bpl.n	8007a26 <_dtoa_r+0x50e>
 8007a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a1e:	f7f8 fdeb 	bl	80005f8 <__aeabi_dmul>
 8007a22:	3601      	adds	r6, #1
 8007a24:	2301      	movs	r3, #1
 8007a26:	1064      	asrs	r4, r4, #1
 8007a28:	3508      	adds	r5, #8
 8007a2a:	e73f      	b.n	80078ac <_dtoa_r+0x394>
 8007a2c:	2602      	movs	r6, #2
 8007a2e:	e742      	b.n	80078b6 <_dtoa_r+0x39e>
 8007a30:	9c07      	ldr	r4, [sp, #28]
 8007a32:	9704      	str	r7, [sp, #16]
 8007a34:	e761      	b.n	80078fa <_dtoa_r+0x3e2>
 8007a36:	4b27      	ldr	r3, [pc, #156]	@ (8007ad4 <_dtoa_r+0x5bc>)
 8007a38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a42:	4454      	add	r4, sl
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d053      	beq.n	8007af0 <_dtoa_r+0x5d8>
 8007a48:	4928      	ldr	r1, [pc, #160]	@ (8007aec <_dtoa_r+0x5d4>)
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7f8 fefe 	bl	800084c <__aeabi_ddiv>
 8007a50:	4633      	mov	r3, r6
 8007a52:	462a      	mov	r2, r5
 8007a54:	f7f8 fc18 	bl	8000288 <__aeabi_dsub>
 8007a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a5c:	4656      	mov	r6, sl
 8007a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a62:	f7f9 f879 	bl	8000b58 <__aeabi_d2iz>
 8007a66:	4605      	mov	r5, r0
 8007a68:	f7f8 fd5c 	bl	8000524 <__aeabi_i2d>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a74:	f7f8 fc08 	bl	8000288 <__aeabi_dsub>
 8007a78:	3530      	adds	r5, #48	@ 0x30
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a82:	f806 5b01 	strb.w	r5, [r6], #1
 8007a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a8a:	f7f9 f827 	bl	8000adc <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d171      	bne.n	8007b76 <_dtoa_r+0x65e>
 8007a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a96:	4911      	ldr	r1, [pc, #68]	@ (8007adc <_dtoa_r+0x5c4>)
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7f8 fbf5 	bl	8000288 <__aeabi_dsub>
 8007a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007aa2:	f7f9 f81b 	bl	8000adc <__aeabi_dcmplt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f040 8095 	bne.w	8007bd6 <_dtoa_r+0x6be>
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	f43f af50 	beq.w	8007952 <_dtoa_r+0x43a>
 8007ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <_dtoa_r+0x5c8>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fd9d 	bl	80005f8 <__aeabi_dmul>
 8007abe:	4b08      	ldr	r3, [pc, #32]	@ (8007ae0 <_dtoa_r+0x5c8>)
 8007ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aca:	f7f8 fd95 	bl	80005f8 <__aeabi_dmul>
 8007ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad2:	e7c4      	b.n	8007a5e <_dtoa_r+0x546>
 8007ad4:	0800a810 	.word	0x0800a810
 8007ad8:	0800a7e8 	.word	0x0800a7e8
 8007adc:	3ff00000 	.word	0x3ff00000
 8007ae0:	40240000 	.word	0x40240000
 8007ae4:	401c0000 	.word	0x401c0000
 8007ae8:	40140000 	.word	0x40140000
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007afc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007afe:	4656      	mov	r6, sl
 8007b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b04:	f7f9 f828 	bl	8000b58 <__aeabi_d2iz>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f7f8 fd0b 	bl	8000524 <__aeabi_i2d>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	3530      	adds	r5, #48	@ 0x30
 8007b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	d124      	bne.n	8007b7a <_dtoa_r+0x662>
 8007b30:	4bac      	ldr	r3, [pc, #688]	@ (8007de4 <_dtoa_r+0x8cc>)
 8007b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b36:	f7f8 fba9 	bl	800028c <__adddf3>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b42:	f7f8 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d145      	bne.n	8007bd6 <_dtoa_r+0x6be>
 8007b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b4e:	49a5      	ldr	r1, [pc, #660]	@ (8007de4 <_dtoa_r+0x8cc>)
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f8 fb99 	bl	8000288 <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5e:	f7f8 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f43f aef5 	beq.w	8007952 <_dtoa_r+0x43a>
 8007b68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b6a:	1e73      	subs	r3, r6, #1
 8007b6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b72:	2b30      	cmp	r3, #48	@ 0x30
 8007b74:	d0f8      	beq.n	8007b68 <_dtoa_r+0x650>
 8007b76:	9f04      	ldr	r7, [sp, #16]
 8007b78:	e73e      	b.n	80079f8 <_dtoa_r+0x4e0>
 8007b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8007de8 <_dtoa_r+0x8d0>)
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b84:	e7bc      	b.n	8007b00 <_dtoa_r+0x5e8>
 8007b86:	d10c      	bne.n	8007ba2 <_dtoa_r+0x68a>
 8007b88:	4b98      	ldr	r3, [pc, #608]	@ (8007dec <_dtoa_r+0x8d4>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b90:	f7f8 fd32 	bl	80005f8 <__aeabi_dmul>
 8007b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b98:	f7f8 ffb4 	bl	8000b04 <__aeabi_dcmpge>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f000 8157 	beq.w	8007e50 <_dtoa_r+0x938>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	4625      	mov	r5, r4
 8007ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	4656      	mov	r6, sl
 8007bae:	2700      	movs	r7, #0
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fbb4 	bl	8008320 <_Bfree>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	d0dc      	beq.n	8007b76 <_dtoa_r+0x65e>
 8007bbc:	b12f      	cbz	r7, 8007bca <_dtoa_r+0x6b2>
 8007bbe:	42af      	cmp	r7, r5
 8007bc0:	d003      	beq.n	8007bca <_dtoa_r+0x6b2>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 fbab 	bl	8008320 <_Bfree>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f000 fba7 	bl	8008320 <_Bfree>
 8007bd2:	e7d0      	b.n	8007b76 <_dtoa_r+0x65e>
 8007bd4:	9704      	str	r7, [sp, #16]
 8007bd6:	4633      	mov	r3, r6
 8007bd8:	461e      	mov	r6, r3
 8007bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bde:	2a39      	cmp	r2, #57	@ 0x39
 8007be0:	d107      	bne.n	8007bf2 <_dtoa_r+0x6da>
 8007be2:	459a      	cmp	sl, r3
 8007be4:	d1f8      	bne.n	8007bd8 <_dtoa_r+0x6c0>
 8007be6:	9a04      	ldr	r2, [sp, #16]
 8007be8:	3201      	adds	r2, #1
 8007bea:	9204      	str	r2, [sp, #16]
 8007bec:	2230      	movs	r2, #48	@ 0x30
 8007bee:	f88a 2000 	strb.w	r2, [sl]
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	3201      	adds	r2, #1
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e7bd      	b.n	8007b76 <_dtoa_r+0x65e>
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8007de8 <_dtoa_r+0x8d0>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	460d      	mov	r5, r1
 8007c0a:	f7f8 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f aebb 	beq.w	800798a <_dtoa_r+0x472>
 8007c14:	e6f0      	b.n	80079f8 <_dtoa_r+0x4e0>
 8007c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	f000 80db 	beq.w	8007dd4 <_dtoa_r+0x8bc>
 8007c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c20:	2a01      	cmp	r2, #1
 8007c22:	f300 80bf 	bgt.w	8007da4 <_dtoa_r+0x88c>
 8007c26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	f000 80b7 	beq.w	8007d9c <_dtoa_r+0x884>
 8007c2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c34:	4646      	mov	r6, r8
 8007c36:	9a08      	ldr	r2, [sp, #32]
 8007c38:	2101      	movs	r1, #1
 8007c3a:	441a      	add	r2, r3
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	4498      	add	r8, r3
 8007c40:	9208      	str	r2, [sp, #32]
 8007c42:	f000 fc21 	bl	8008488 <__i2b>
 8007c46:	4605      	mov	r5, r0
 8007c48:	b15e      	cbz	r6, 8007c62 <_dtoa_r+0x74a>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd08      	ble.n	8007c62 <_dtoa_r+0x74a>
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	9a08      	ldr	r2, [sp, #32]
 8007c54:	bfa8      	it	ge
 8007c56:	4633      	movge	r3, r6
 8007c58:	eba8 0803 	sub.w	r8, r8, r3
 8007c5c:	1af6      	subs	r6, r6, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c64:	b1f3      	cbz	r3, 8007ca4 <_dtoa_r+0x78c>
 8007c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80b7 	beq.w	8007ddc <_dtoa_r+0x8c4>
 8007c6e:	b18c      	cbz	r4, 8007c94 <_dtoa_r+0x77c>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4622      	mov	r2, r4
 8007c74:	4658      	mov	r0, fp
 8007c76:	f000 fcc7 	bl	8008608 <__pow5mult>
 8007c7a:	464a      	mov	r2, r9
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4605      	mov	r5, r0
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fc17 	bl	80084b4 <__multiply>
 8007c86:	4649      	mov	r1, r9
 8007c88:	9004      	str	r0, [sp, #16]
 8007c8a:	4658      	mov	r0, fp
 8007c8c:	f000 fb48 	bl	8008320 <_Bfree>
 8007c90:	9b04      	ldr	r3, [sp, #16]
 8007c92:	4699      	mov	r9, r3
 8007c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c96:	1b1a      	subs	r2, r3, r4
 8007c98:	d004      	beq.n	8007ca4 <_dtoa_r+0x78c>
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fcb3 	bl	8008608 <__pow5mult>
 8007ca2:	4681      	mov	r9, r0
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	f000 fbee 	bl	8008488 <__i2b>
 8007cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 81cf 	beq.w	8008054 <_dtoa_r+0xb3c>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4601      	mov	r1, r0
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fca4 	bl	8008608 <__pow5mult>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	f300 8095 	bgt.w	8007df4 <_dtoa_r+0x8dc>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8087 	bne.w	8007de0 <_dtoa_r+0x8c8>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f040 8089 	bne.w	8007df0 <_dtoa_r+0x8d8>
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	0d1b      	lsrs	r3, r3, #20
 8007ce6:	051b      	lsls	r3, r3, #20
 8007ce8:	b12b      	cbz	r3, 8007cf6 <_dtoa_r+0x7de>
 8007cea:	9b08      	ldr	r3, [sp, #32]
 8007cec:	3301      	adds	r3, #1
 8007cee:	9308      	str	r3, [sp, #32]
 8007cf0:	f108 0801 	add.w	r8, r8, #1
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 81b0 	beq.w	8008060 <_dtoa_r+0xb48>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d06:	6918      	ldr	r0, [r3, #16]
 8007d08:	f000 fb72 	bl	80083f0 <__hi0bits>
 8007d0c:	f1c0 0020 	rsb	r0, r0, #32
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	4418      	add	r0, r3
 8007d14:	f010 001f 	ands.w	r0, r0, #31
 8007d18:	d077      	beq.n	8007e0a <_dtoa_r+0x8f2>
 8007d1a:	f1c0 0320 	rsb	r3, r0, #32
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	dd6b      	ble.n	8007dfa <_dtoa_r+0x8e2>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	f1c0 001c 	rsb	r0, r0, #28
 8007d28:	4403      	add	r3, r0
 8007d2a:	4480      	add	r8, r0
 8007d2c:	4406      	add	r6, r0
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	dd05      	ble.n	8007d42 <_dtoa_r+0x82a>
 8007d36:	4649      	mov	r1, r9
 8007d38:	4642      	mov	r2, r8
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f000 fcbe 	bl	80086bc <__lshift>
 8007d40:	4681      	mov	r9, r0
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dd05      	ble.n	8007d54 <_dtoa_r+0x83c>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f000 fcb5 	bl	80086bc <__lshift>
 8007d52:	4604      	mov	r4, r0
 8007d54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d059      	beq.n	8007e0e <_dtoa_r+0x8f6>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f000 fd19 	bl	8008794 <__mcmp>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	da53      	bge.n	8007e0e <_dtoa_r+0x8f6>
 8007d66:	1e7b      	subs	r3, r7, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4658      	mov	r0, fp
 8007d72:	f000 faf7 	bl	8008364 <__multadd>
 8007d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d78:	4681      	mov	r9, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8172 	beq.w	8008064 <_dtoa_r+0xb4c>
 8007d80:	2300      	movs	r3, #0
 8007d82:	4629      	mov	r1, r5
 8007d84:	220a      	movs	r2, #10
 8007d86:	4658      	mov	r0, fp
 8007d88:	f000 faec 	bl	8008364 <__multadd>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	4605      	mov	r5, r0
 8007d92:	dc67      	bgt.n	8007e64 <_dtoa_r+0x94c>
 8007d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	dc41      	bgt.n	8007e1e <_dtoa_r+0x906>
 8007d9a:	e063      	b.n	8007e64 <_dtoa_r+0x94c>
 8007d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007da2:	e746      	b.n	8007c32 <_dtoa_r+0x71a>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	1e5c      	subs	r4, r3, #1
 8007da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	bfbf      	itttt	lt
 8007dae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007db0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007db2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007db4:	1ae3      	sublt	r3, r4, r3
 8007db6:	bfb4      	ite	lt
 8007db8:	18d2      	addlt	r2, r2, r3
 8007dba:	1b1c      	subge	r4, r3, r4
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	bfbc      	itt	lt
 8007dc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007dc2:	2400      	movlt	r4, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfb5      	itete	lt
 8007dc8:	eba8 0603 	sublt.w	r6, r8, r3
 8007dcc:	9b07      	ldrge	r3, [sp, #28]
 8007dce:	2300      	movlt	r3, #0
 8007dd0:	4646      	movge	r6, r8
 8007dd2:	e730      	b.n	8007c36 <_dtoa_r+0x71e>
 8007dd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007dd8:	4646      	mov	r6, r8
 8007dda:	e735      	b.n	8007c48 <_dtoa_r+0x730>
 8007ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dde:	e75c      	b.n	8007c9a <_dtoa_r+0x782>
 8007de0:	2300      	movs	r3, #0
 8007de2:	e788      	b.n	8007cf6 <_dtoa_r+0x7de>
 8007de4:	3fe00000 	.word	0x3fe00000
 8007de8:	40240000 	.word	0x40240000
 8007dec:	40140000 	.word	0x40140000
 8007df0:	9b02      	ldr	r3, [sp, #8]
 8007df2:	e780      	b.n	8007cf6 <_dtoa_r+0x7de>
 8007df4:	2300      	movs	r3, #0
 8007df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007df8:	e782      	b.n	8007d00 <_dtoa_r+0x7e8>
 8007dfa:	d099      	beq.n	8007d30 <_dtoa_r+0x818>
 8007dfc:	9a08      	ldr	r2, [sp, #32]
 8007dfe:	331c      	adds	r3, #28
 8007e00:	441a      	add	r2, r3
 8007e02:	4498      	add	r8, r3
 8007e04:	441e      	add	r6, r3
 8007e06:	9208      	str	r2, [sp, #32]
 8007e08:	e792      	b.n	8007d30 <_dtoa_r+0x818>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	e7f6      	b.n	8007dfc <_dtoa_r+0x8e4>
 8007e0e:	9b07      	ldr	r3, [sp, #28]
 8007e10:	9704      	str	r7, [sp, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dc20      	bgt.n	8007e58 <_dtoa_r+0x940>
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	dd1e      	ble.n	8007e5c <_dtoa_r+0x944>
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f aec0 	bne.w	8007ba6 <_dtoa_r+0x68e>
 8007e26:	4621      	mov	r1, r4
 8007e28:	2205      	movs	r2, #5
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fa9a 	bl	8008364 <__multadd>
 8007e30:	4601      	mov	r1, r0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4648      	mov	r0, r9
 8007e36:	f000 fcad 	bl	8008794 <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f77f aeb3 	ble.w	8007ba6 <_dtoa_r+0x68e>
 8007e40:	4656      	mov	r6, sl
 8007e42:	2331      	movs	r3, #49	@ 0x31
 8007e44:	f806 3b01 	strb.w	r3, [r6], #1
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	e6ae      	b.n	8007bae <_dtoa_r+0x696>
 8007e50:	9c07      	ldr	r4, [sp, #28]
 8007e52:	9704      	str	r7, [sp, #16]
 8007e54:	4625      	mov	r5, r4
 8007e56:	e7f3      	b.n	8007e40 <_dtoa_r+0x928>
 8007e58:	9b07      	ldr	r3, [sp, #28]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8104 	beq.w	800806c <_dtoa_r+0xb54>
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	dd05      	ble.n	8007e74 <_dtoa_r+0x95c>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fc25 	bl	80086bc <__lshift>
 8007e72:	4605      	mov	r5, r0
 8007e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d05a      	beq.n	8007f30 <_dtoa_r+0xa18>
 8007e7a:	6869      	ldr	r1, [r5, #4]
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f000 fa0f 	bl	80082a0 <_Balloc>
 8007e82:	4606      	mov	r6, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <_dtoa_r+0x97a>
 8007e86:	4b84      	ldr	r3, [pc, #528]	@ (8008098 <_dtoa_r+0xb80>)
 8007e88:	4602      	mov	r2, r0
 8007e8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e8e:	f7ff bb5a 	b.w	8007546 <_dtoa_r+0x2e>
 8007e92:	692a      	ldr	r2, [r5, #16]
 8007e94:	3202      	adds	r2, #2
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	f105 010c 	add.w	r1, r5, #12
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	f7ff faa4 	bl	80073ea <memcpy>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	f000 fc08 	bl	80086bc <__lshift>
 8007eac:	f10a 0301 	add.w	r3, sl, #1
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	9b00      	ldr	r3, [sp, #0]
 8007eb4:	4453      	add	r3, sl
 8007eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	462f      	mov	r7, r5
 8007ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	4648      	mov	r0, r9
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	f7ff fa9a 	bl	8007406 <quorem>
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007eda:	4648      	mov	r0, r9
 8007edc:	f000 fc5a 	bl	8008794 <__mcmp>
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	9008      	str	r0, [sp, #32]
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fc70 	bl	80087cc <__mdiff>
 8007eec:	68c2      	ldr	r2, [r0, #12]
 8007eee:	4606      	mov	r6, r0
 8007ef0:	bb02      	cbnz	r2, 8007f34 <_dtoa_r+0xa1c>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4648      	mov	r0, r9
 8007ef6:	f000 fc4d 	bl	8008794 <__mcmp>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4631      	mov	r1, r6
 8007efe:	4658      	mov	r0, fp
 8007f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f02:	f000 fa0d 	bl	8008320 <_Bfree>
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f0a:	9e07      	ldr	r6, [sp, #28]
 8007f0c:	ea43 0102 	orr.w	r1, r3, r2
 8007f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f12:	4319      	orrs	r1, r3
 8007f14:	d110      	bne.n	8007f38 <_dtoa_r+0xa20>
 8007f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f1a:	d029      	beq.n	8007f70 <_dtoa_r+0xa58>
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd02      	ble.n	8007f28 <_dtoa_r+0xa10>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	f883 8000 	strb.w	r8, [r3]
 8007f2e:	e63f      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f30:	4628      	mov	r0, r5
 8007f32:	e7bb      	b.n	8007eac <_dtoa_r+0x994>
 8007f34:	2201      	movs	r2, #1
 8007f36:	e7e1      	b.n	8007efc <_dtoa_r+0x9e4>
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db04      	blt.n	8007f48 <_dtoa_r+0xa30>
 8007f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f40:	430b      	orrs	r3, r1
 8007f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f44:	430b      	orrs	r3, r1
 8007f46:	d120      	bne.n	8007f8a <_dtoa_r+0xa72>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	dded      	ble.n	8007f28 <_dtoa_r+0xa10>
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4658      	mov	r0, fp
 8007f52:	f000 fbb3 	bl	80086bc <__lshift>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4681      	mov	r9, r0
 8007f5a:	f000 fc1b 	bl	8008794 <__mcmp>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	dc03      	bgt.n	8007f6a <_dtoa_r+0xa52>
 8007f62:	d1e1      	bne.n	8007f28 <_dtoa_r+0xa10>
 8007f64:	f018 0f01 	tst.w	r8, #1
 8007f68:	d0de      	beq.n	8007f28 <_dtoa_r+0xa10>
 8007f6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f6e:	d1d8      	bne.n	8007f22 <_dtoa_r+0xa0a>
 8007f70:	9a00      	ldr	r2, [sp, #0]
 8007f72:	2339      	movs	r3, #57	@ 0x39
 8007f74:	7013      	strb	r3, [r2, #0]
 8007f76:	4633      	mov	r3, r6
 8007f78:	461e      	mov	r6, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f80:	2a39      	cmp	r2, #57	@ 0x39
 8007f82:	d052      	beq.n	800802a <_dtoa_r+0xb12>
 8007f84:	3201      	adds	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	e612      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	dd07      	ble.n	8007f9e <_dtoa_r+0xa86>
 8007f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f92:	d0ed      	beq.n	8007f70 <_dtoa_r+0xa58>
 8007f94:	9a00      	ldr	r2, [sp, #0]
 8007f96:	f108 0301 	add.w	r3, r8, #1
 8007f9a:	7013      	strb	r3, [r2, #0]
 8007f9c:	e608      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f9e:	9b07      	ldr	r3, [sp, #28]
 8007fa0:	9a07      	ldr	r2, [sp, #28]
 8007fa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d028      	beq.n	8007ffe <_dtoa_r+0xae6>
 8007fac:	4649      	mov	r1, r9
 8007fae:	2300      	movs	r3, #0
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 f9d6 	bl	8008364 <__multadd>
 8007fb8:	42af      	cmp	r7, r5
 8007fba:	4681      	mov	r9, r0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	f04f 020a 	mov.w	r2, #10
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4658      	mov	r0, fp
 8007fc8:	d107      	bne.n	8007fda <_dtoa_r+0xac2>
 8007fca:	f000 f9cb 	bl	8008364 <__multadd>
 8007fce:	4607      	mov	r7, r0
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	e774      	b.n	8007ec4 <_dtoa_r+0x9ac>
 8007fda:	f000 f9c3 	bl	8008364 <__multadd>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 f9bc 	bl	8008364 <__multadd>
 8007fec:	4605      	mov	r5, r0
 8007fee:	e7f0      	b.n	8007fd2 <_dtoa_r+0xaba>
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfcc      	ite	gt
 8007ff6:	461e      	movgt	r6, r3
 8007ff8:	2601      	movle	r6, #1
 8007ffa:	4456      	add	r6, sl
 8007ffc:	2700      	movs	r7, #0
 8007ffe:	4649      	mov	r1, r9
 8008000:	2201      	movs	r2, #1
 8008002:	4658      	mov	r0, fp
 8008004:	f000 fb5a 	bl	80086bc <__lshift>
 8008008:	4621      	mov	r1, r4
 800800a:	4681      	mov	r9, r0
 800800c:	f000 fbc2 	bl	8008794 <__mcmp>
 8008010:	2800      	cmp	r0, #0
 8008012:	dcb0      	bgt.n	8007f76 <_dtoa_r+0xa5e>
 8008014:	d102      	bne.n	800801c <_dtoa_r+0xb04>
 8008016:	f018 0f01 	tst.w	r8, #1
 800801a:	d1ac      	bne.n	8007f76 <_dtoa_r+0xa5e>
 800801c:	4633      	mov	r3, r6
 800801e:	461e      	mov	r6, r3
 8008020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008024:	2a30      	cmp	r2, #48	@ 0x30
 8008026:	d0fa      	beq.n	800801e <_dtoa_r+0xb06>
 8008028:	e5c2      	b.n	8007bb0 <_dtoa_r+0x698>
 800802a:	459a      	cmp	sl, r3
 800802c:	d1a4      	bne.n	8007f78 <_dtoa_r+0xa60>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	3301      	adds	r3, #1
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	2331      	movs	r3, #49	@ 0x31
 8008036:	f88a 3000 	strb.w	r3, [sl]
 800803a:	e5b9      	b.n	8007bb0 <_dtoa_r+0x698>
 800803c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800803e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800809c <_dtoa_r+0xb84>
 8008042:	b11b      	cbz	r3, 800804c <_dtoa_r+0xb34>
 8008044:	f10a 0308 	add.w	r3, sl, #8
 8008048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	4650      	mov	r0, sl
 800804e:	b019      	add	sp, #100	@ 0x64
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008056:	2b01      	cmp	r3, #1
 8008058:	f77f ae37 	ble.w	8007cca <_dtoa_r+0x7b2>
 800805c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800805e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008060:	2001      	movs	r0, #1
 8008062:	e655      	b.n	8007d10 <_dtoa_r+0x7f8>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f77f aed6 	ble.w	8007e18 <_dtoa_r+0x900>
 800806c:	4656      	mov	r6, sl
 800806e:	4621      	mov	r1, r4
 8008070:	4648      	mov	r0, r9
 8008072:	f7ff f9c8 	bl	8007406 <quorem>
 8008076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800807a:	f806 8b01 	strb.w	r8, [r6], #1
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	eba6 020a 	sub.w	r2, r6, sl
 8008084:	4293      	cmp	r3, r2
 8008086:	ddb3      	ble.n	8007ff0 <_dtoa_r+0xad8>
 8008088:	4649      	mov	r1, r9
 800808a:	2300      	movs	r3, #0
 800808c:	220a      	movs	r2, #10
 800808e:	4658      	mov	r0, fp
 8008090:	f000 f968 	bl	8008364 <__multadd>
 8008094:	4681      	mov	r9, r0
 8008096:	e7ea      	b.n	800806e <_dtoa_r+0xb56>
 8008098:	0800a770 	.word	0x0800a770
 800809c:	0800a6f4 	.word	0x0800a6f4

080080a0 <_free_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4605      	mov	r5, r0
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d041      	beq.n	800812c <_free_r+0x8c>
 80080a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ac:	1f0c      	subs	r4, r1, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfb8      	it	lt
 80080b2:	18e4      	addlt	r4, r4, r3
 80080b4:	f000 f8e8 	bl	8008288 <__malloc_lock>
 80080b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <_free_r+0x90>)
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	b933      	cbnz	r3, 80080cc <_free_r+0x2c>
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	6014      	str	r4, [r2, #0]
 80080c2:	4628      	mov	r0, r5
 80080c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c8:	f000 b8e4 	b.w	8008294 <__malloc_unlock>
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d908      	bls.n	80080e2 <_free_r+0x42>
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	1821      	adds	r1, r4, r0
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf01      	itttt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	1809      	addeq	r1, r1, r0
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	e7ed      	b.n	80080be <_free_r+0x1e>
 80080e2:	461a      	mov	r2, r3
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b10b      	cbz	r3, 80080ec <_free_r+0x4c>
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d9fa      	bls.n	80080e2 <_free_r+0x42>
 80080ec:	6811      	ldr	r1, [r2, #0]
 80080ee:	1850      	adds	r0, r2, r1
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d10b      	bne.n	800810c <_free_r+0x6c>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	4401      	add	r1, r0
 80080f8:	1850      	adds	r0, r2, r1
 80080fa:	4283      	cmp	r3, r0
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	d1e0      	bne.n	80080c2 <_free_r+0x22>
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6053      	str	r3, [r2, #4]
 8008106:	4408      	add	r0, r1
 8008108:	6010      	str	r0, [r2, #0]
 800810a:	e7da      	b.n	80080c2 <_free_r+0x22>
 800810c:	d902      	bls.n	8008114 <_free_r+0x74>
 800810e:	230c      	movs	r3, #12
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	e7d6      	b.n	80080c2 <_free_r+0x22>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	1821      	adds	r1, r4, r0
 8008118:	428b      	cmp	r3, r1
 800811a:	bf04      	itt	eq
 800811c:	6819      	ldreq	r1, [r3, #0]
 800811e:	685b      	ldreq	r3, [r3, #4]
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	bf04      	itt	eq
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	6054      	str	r4, [r2, #4]
 800812a:	e7ca      	b.n	80080c2 <_free_r+0x22>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	2000096c 	.word	0x2000096c

08008134 <malloc>:
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <malloc+0xc>)
 8008136:	4601      	mov	r1, r0
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	f000 b825 	b.w	8008188 <_malloc_r>
 800813e:	bf00      	nop
 8008140:	20000018 	.word	0x20000018

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0f      	ldr	r6, [pc, #60]	@ (8008184 <sbrk_aligned+0x40>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 fe46 	bl	8008de0 <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fe41 	bl	8008de0 <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d103      	bne.n	800816a <sbrk_aligned+0x26>
 8008162:	f04f 34ff 	mov.w	r4, #4294967295
 8008166:	4620      	mov	r0, r4
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	1cc4      	adds	r4, r0, #3
 800816c:	f024 0403 	bic.w	r4, r4, #3
 8008170:	42a0      	cmp	r0, r4
 8008172:	d0f8      	beq.n	8008166 <sbrk_aligned+0x22>
 8008174:	1a21      	subs	r1, r4, r0
 8008176:	4628      	mov	r0, r5
 8008178:	f000 fe32 	bl	8008de0 <_sbrk_r>
 800817c:	3001      	adds	r0, #1
 800817e:	d1f2      	bne.n	8008166 <sbrk_aligned+0x22>
 8008180:	e7ef      	b.n	8008162 <sbrk_aligned+0x1e>
 8008182:	bf00      	nop
 8008184:	20000968 	.word	0x20000968

08008188 <_malloc_r>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	1ccd      	adds	r5, r1, #3
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	2d00      	cmp	r5, #0
 800819c:	4606      	mov	r6, r0
 800819e:	db01      	blt.n	80081a4 <_malloc_r+0x1c>
 80081a0:	42a9      	cmp	r1, r5
 80081a2:	d904      	bls.n	80081ae <_malloc_r+0x26>
 80081a4:	230c      	movs	r3, #12
 80081a6:	6033      	str	r3, [r6, #0]
 80081a8:	2000      	movs	r0, #0
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008284 <_malloc_r+0xfc>
 80081b2:	f000 f869 	bl	8008288 <__malloc_lock>
 80081b6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ba:	461c      	mov	r4, r3
 80081bc:	bb44      	cbnz	r4, 8008210 <_malloc_r+0x88>
 80081be:	4629      	mov	r1, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff ffbf 	bl	8008144 <sbrk_aligned>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	4604      	mov	r4, r0
 80081ca:	d158      	bne.n	800827e <_malloc_r+0xf6>
 80081cc:	f8d8 4000 	ldr.w	r4, [r8]
 80081d0:	4627      	mov	r7, r4
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	d143      	bne.n	800825e <_malloc_r+0xd6>
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	d04b      	beq.n	8008272 <_malloc_r+0xea>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	4639      	mov	r1, r7
 80081de:	4630      	mov	r0, r6
 80081e0:	eb04 0903 	add.w	r9, r4, r3
 80081e4:	f000 fdfc 	bl	8008de0 <_sbrk_r>
 80081e8:	4581      	cmp	r9, r0
 80081ea:	d142      	bne.n	8008272 <_malloc_r+0xea>
 80081ec:	6821      	ldr	r1, [r4, #0]
 80081ee:	1a6d      	subs	r5, r5, r1
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffa6 	bl	8008144 <sbrk_aligned>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d03a      	beq.n	8008272 <_malloc_r+0xea>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	442b      	add	r3, r5
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	f8d8 3000 	ldr.w	r3, [r8]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	bb62      	cbnz	r2, 8008264 <_malloc_r+0xdc>
 800820a:	f8c8 7000 	str.w	r7, [r8]
 800820e:	e00f      	b.n	8008230 <_malloc_r+0xa8>
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	1b52      	subs	r2, r2, r5
 8008214:	d420      	bmi.n	8008258 <_malloc_r+0xd0>
 8008216:	2a0b      	cmp	r2, #11
 8008218:	d917      	bls.n	800824a <_malloc_r+0xc2>
 800821a:	1961      	adds	r1, r4, r5
 800821c:	42a3      	cmp	r3, r4
 800821e:	6025      	str	r5, [r4, #0]
 8008220:	bf18      	it	ne
 8008222:	6059      	strne	r1, [r3, #4]
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	bf08      	it	eq
 8008228:	f8c8 1000 	streq.w	r1, [r8]
 800822c:	5162      	str	r2, [r4, r5]
 800822e:	604b      	str	r3, [r1, #4]
 8008230:	4630      	mov	r0, r6
 8008232:	f000 f82f 	bl	8008294 <__malloc_unlock>
 8008236:	f104 000b 	add.w	r0, r4, #11
 800823a:	1d23      	adds	r3, r4, #4
 800823c:	f020 0007 	bic.w	r0, r0, #7
 8008240:	1ac2      	subs	r2, r0, r3
 8008242:	bf1c      	itt	ne
 8008244:	1a1b      	subne	r3, r3, r0
 8008246:	50a3      	strne	r3, [r4, r2]
 8008248:	e7af      	b.n	80081aa <_malloc_r+0x22>
 800824a:	6862      	ldr	r2, [r4, #4]
 800824c:	42a3      	cmp	r3, r4
 800824e:	bf0c      	ite	eq
 8008250:	f8c8 2000 	streq.w	r2, [r8]
 8008254:	605a      	strne	r2, [r3, #4]
 8008256:	e7eb      	b.n	8008230 <_malloc_r+0xa8>
 8008258:	4623      	mov	r3, r4
 800825a:	6864      	ldr	r4, [r4, #4]
 800825c:	e7ae      	b.n	80081bc <_malloc_r+0x34>
 800825e:	463c      	mov	r4, r7
 8008260:	687f      	ldr	r7, [r7, #4]
 8008262:	e7b6      	b.n	80081d2 <_malloc_r+0x4a>
 8008264:	461a      	mov	r2, r3
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	42a3      	cmp	r3, r4
 800826a:	d1fb      	bne.n	8008264 <_malloc_r+0xdc>
 800826c:	2300      	movs	r3, #0
 800826e:	6053      	str	r3, [r2, #4]
 8008270:	e7de      	b.n	8008230 <_malloc_r+0xa8>
 8008272:	230c      	movs	r3, #12
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	4630      	mov	r0, r6
 8008278:	f000 f80c 	bl	8008294 <__malloc_unlock>
 800827c:	e794      	b.n	80081a8 <_malloc_r+0x20>
 800827e:	6005      	str	r5, [r0, #0]
 8008280:	e7d6      	b.n	8008230 <_malloc_r+0xa8>
 8008282:	bf00      	nop
 8008284:	2000096c 	.word	0x2000096c

08008288 <__malloc_lock>:
 8008288:	4801      	ldr	r0, [pc, #4]	@ (8008290 <__malloc_lock+0x8>)
 800828a:	f7ff b8ac 	b.w	80073e6 <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	20000964 	.word	0x20000964

08008294 <__malloc_unlock>:
 8008294:	4801      	ldr	r0, [pc, #4]	@ (800829c <__malloc_unlock+0x8>)
 8008296:	f7ff b8a7 	b.w	80073e8 <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	20000964 	.word	0x20000964

080082a0 <_Balloc>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	69c6      	ldr	r6, [r0, #28]
 80082a4:	4604      	mov	r4, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	b976      	cbnz	r6, 80082c8 <_Balloc+0x28>
 80082aa:	2010      	movs	r0, #16
 80082ac:	f7ff ff42 	bl	8008134 <malloc>
 80082b0:	4602      	mov	r2, r0
 80082b2:	61e0      	str	r0, [r4, #28]
 80082b4:	b920      	cbnz	r0, 80082c0 <_Balloc+0x20>
 80082b6:	4b18      	ldr	r3, [pc, #96]	@ (8008318 <_Balloc+0x78>)
 80082b8:	4818      	ldr	r0, [pc, #96]	@ (800831c <_Balloc+0x7c>)
 80082ba:	216b      	movs	r1, #107	@ 0x6b
 80082bc:	f000 fda0 	bl	8008e00 <__assert_func>
 80082c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c4:	6006      	str	r6, [r0, #0]
 80082c6:	60c6      	str	r6, [r0, #12]
 80082c8:	69e6      	ldr	r6, [r4, #28]
 80082ca:	68f3      	ldr	r3, [r6, #12]
 80082cc:	b183      	cbz	r3, 80082f0 <_Balloc+0x50>
 80082ce:	69e3      	ldr	r3, [r4, #28]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082d6:	b9b8      	cbnz	r0, 8008308 <_Balloc+0x68>
 80082d8:	2101      	movs	r1, #1
 80082da:	fa01 f605 	lsl.w	r6, r1, r5
 80082de:	1d72      	adds	r2, r6, #5
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fdaa 	bl	8008e3c <_calloc_r>
 80082e8:	b160      	cbz	r0, 8008304 <_Balloc+0x64>
 80082ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082ee:	e00e      	b.n	800830e <_Balloc+0x6e>
 80082f0:	2221      	movs	r2, #33	@ 0x21
 80082f2:	2104      	movs	r1, #4
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fda1 	bl	8008e3c <_calloc_r>
 80082fa:	69e3      	ldr	r3, [r4, #28]
 80082fc:	60f0      	str	r0, [r6, #12]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e4      	bne.n	80082ce <_Balloc+0x2e>
 8008304:	2000      	movs	r0, #0
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	6802      	ldr	r2, [r0, #0]
 800830a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800830e:	2300      	movs	r3, #0
 8008310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008314:	e7f7      	b.n	8008306 <_Balloc+0x66>
 8008316:	bf00      	nop
 8008318:	0800a701 	.word	0x0800a701
 800831c:	0800a781 	.word	0x0800a781

08008320 <_Bfree>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	69c6      	ldr	r6, [r0, #28]
 8008324:	4605      	mov	r5, r0
 8008326:	460c      	mov	r4, r1
 8008328:	b976      	cbnz	r6, 8008348 <_Bfree+0x28>
 800832a:	2010      	movs	r0, #16
 800832c:	f7ff ff02 	bl	8008134 <malloc>
 8008330:	4602      	mov	r2, r0
 8008332:	61e8      	str	r0, [r5, #28]
 8008334:	b920      	cbnz	r0, 8008340 <_Bfree+0x20>
 8008336:	4b09      	ldr	r3, [pc, #36]	@ (800835c <_Bfree+0x3c>)
 8008338:	4809      	ldr	r0, [pc, #36]	@ (8008360 <_Bfree+0x40>)
 800833a:	218f      	movs	r1, #143	@ 0x8f
 800833c:	f000 fd60 	bl	8008e00 <__assert_func>
 8008340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008344:	6006      	str	r6, [r0, #0]
 8008346:	60c6      	str	r6, [r0, #12]
 8008348:	b13c      	cbz	r4, 800835a <_Bfree+0x3a>
 800834a:	69eb      	ldr	r3, [r5, #28]
 800834c:	6862      	ldr	r2, [r4, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008354:	6021      	str	r1, [r4, #0]
 8008356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	0800a701 	.word	0x0800a701
 8008360:	0800a781 	.word	0x0800a781

08008364 <__multadd>:
 8008364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008368:	690d      	ldr	r5, [r1, #16]
 800836a:	4607      	mov	r7, r0
 800836c:	460c      	mov	r4, r1
 800836e:	461e      	mov	r6, r3
 8008370:	f101 0c14 	add.w	ip, r1, #20
 8008374:	2000      	movs	r0, #0
 8008376:	f8dc 3000 	ldr.w	r3, [ip]
 800837a:	b299      	uxth	r1, r3
 800837c:	fb02 6101 	mla	r1, r2, r1, r6
 8008380:	0c1e      	lsrs	r6, r3, #16
 8008382:	0c0b      	lsrs	r3, r1, #16
 8008384:	fb02 3306 	mla	r3, r2, r6, r3
 8008388:	b289      	uxth	r1, r1
 800838a:	3001      	adds	r0, #1
 800838c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008390:	4285      	cmp	r5, r0
 8008392:	f84c 1b04 	str.w	r1, [ip], #4
 8008396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800839a:	dcec      	bgt.n	8008376 <__multadd+0x12>
 800839c:	b30e      	cbz	r6, 80083e2 <__multadd+0x7e>
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc19      	bgt.n	80083d8 <__multadd+0x74>
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	4638      	mov	r0, r7
 80083a8:	3101      	adds	r1, #1
 80083aa:	f7ff ff79 	bl	80082a0 <_Balloc>
 80083ae:	4680      	mov	r8, r0
 80083b0:	b928      	cbnz	r0, 80083be <__multadd+0x5a>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <__multadd+0x84>)
 80083b6:	480d      	ldr	r0, [pc, #52]	@ (80083ec <__multadd+0x88>)
 80083b8:	21ba      	movs	r1, #186	@ 0xba
 80083ba:	f000 fd21 	bl	8008e00 <__assert_func>
 80083be:	6922      	ldr	r2, [r4, #16]
 80083c0:	3202      	adds	r2, #2
 80083c2:	f104 010c 	add.w	r1, r4, #12
 80083c6:	0092      	lsls	r2, r2, #2
 80083c8:	300c      	adds	r0, #12
 80083ca:	f7ff f80e 	bl	80073ea <memcpy>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff ffa5 	bl	8008320 <_Bfree>
 80083d6:	4644      	mov	r4, r8
 80083d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083dc:	3501      	adds	r5, #1
 80083de:	615e      	str	r6, [r3, #20]
 80083e0:	6125      	str	r5, [r4, #16]
 80083e2:	4620      	mov	r0, r4
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	0800a770 	.word	0x0800a770
 80083ec:	0800a781 	.word	0x0800a781

080083f0 <__hi0bits>:
 80083f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083f4:	4603      	mov	r3, r0
 80083f6:	bf36      	itet	cc
 80083f8:	0403      	lslcc	r3, r0, #16
 80083fa:	2000      	movcs	r0, #0
 80083fc:	2010      	movcc	r0, #16
 80083fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008402:	bf3c      	itt	cc
 8008404:	021b      	lslcc	r3, r3, #8
 8008406:	3008      	addcc	r0, #8
 8008408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800840c:	bf3c      	itt	cc
 800840e:	011b      	lslcc	r3, r3, #4
 8008410:	3004      	addcc	r0, #4
 8008412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008416:	bf3c      	itt	cc
 8008418:	009b      	lslcc	r3, r3, #2
 800841a:	3002      	addcc	r0, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	db05      	blt.n	800842c <__hi0bits+0x3c>
 8008420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008424:	f100 0001 	add.w	r0, r0, #1
 8008428:	bf08      	it	eq
 800842a:	2020      	moveq	r0, #32
 800842c:	4770      	bx	lr

0800842e <__lo0bits>:
 800842e:	6803      	ldr	r3, [r0, #0]
 8008430:	4602      	mov	r2, r0
 8008432:	f013 0007 	ands.w	r0, r3, #7
 8008436:	d00b      	beq.n	8008450 <__lo0bits+0x22>
 8008438:	07d9      	lsls	r1, r3, #31
 800843a:	d421      	bmi.n	8008480 <__lo0bits+0x52>
 800843c:	0798      	lsls	r0, r3, #30
 800843e:	bf49      	itett	mi
 8008440:	085b      	lsrmi	r3, r3, #1
 8008442:	089b      	lsrpl	r3, r3, #2
 8008444:	2001      	movmi	r0, #1
 8008446:	6013      	strmi	r3, [r2, #0]
 8008448:	bf5c      	itt	pl
 800844a:	6013      	strpl	r3, [r2, #0]
 800844c:	2002      	movpl	r0, #2
 800844e:	4770      	bx	lr
 8008450:	b299      	uxth	r1, r3
 8008452:	b909      	cbnz	r1, 8008458 <__lo0bits+0x2a>
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	2010      	movs	r0, #16
 8008458:	b2d9      	uxtb	r1, r3
 800845a:	b909      	cbnz	r1, 8008460 <__lo0bits+0x32>
 800845c:	3008      	adds	r0, #8
 800845e:	0a1b      	lsrs	r3, r3, #8
 8008460:	0719      	lsls	r1, r3, #28
 8008462:	bf04      	itt	eq
 8008464:	091b      	lsreq	r3, r3, #4
 8008466:	3004      	addeq	r0, #4
 8008468:	0799      	lsls	r1, r3, #30
 800846a:	bf04      	itt	eq
 800846c:	089b      	lsreq	r3, r3, #2
 800846e:	3002      	addeq	r0, #2
 8008470:	07d9      	lsls	r1, r3, #31
 8008472:	d403      	bmi.n	800847c <__lo0bits+0x4e>
 8008474:	085b      	lsrs	r3, r3, #1
 8008476:	f100 0001 	add.w	r0, r0, #1
 800847a:	d003      	beq.n	8008484 <__lo0bits+0x56>
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	4770      	bx	lr
 8008480:	2000      	movs	r0, #0
 8008482:	4770      	bx	lr
 8008484:	2020      	movs	r0, #32
 8008486:	4770      	bx	lr

08008488 <__i2b>:
 8008488:	b510      	push	{r4, lr}
 800848a:	460c      	mov	r4, r1
 800848c:	2101      	movs	r1, #1
 800848e:	f7ff ff07 	bl	80082a0 <_Balloc>
 8008492:	4602      	mov	r2, r0
 8008494:	b928      	cbnz	r0, 80084a2 <__i2b+0x1a>
 8008496:	4b05      	ldr	r3, [pc, #20]	@ (80084ac <__i2b+0x24>)
 8008498:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <__i2b+0x28>)
 800849a:	f240 1145 	movw	r1, #325	@ 0x145
 800849e:	f000 fcaf 	bl	8008e00 <__assert_func>
 80084a2:	2301      	movs	r3, #1
 80084a4:	6144      	str	r4, [r0, #20]
 80084a6:	6103      	str	r3, [r0, #16]
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	bf00      	nop
 80084ac:	0800a770 	.word	0x0800a770
 80084b0:	0800a781 	.word	0x0800a781

080084b4 <__multiply>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4614      	mov	r4, r2
 80084ba:	690a      	ldr	r2, [r1, #16]
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	429a      	cmp	r2, r3
 80084c0:	bfa8      	it	ge
 80084c2:	4623      	movge	r3, r4
 80084c4:	460f      	mov	r7, r1
 80084c6:	bfa4      	itt	ge
 80084c8:	460c      	movge	r4, r1
 80084ca:	461f      	movge	r7, r3
 80084cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	6861      	ldr	r1, [r4, #4]
 80084d8:	eb0a 0609 	add.w	r6, sl, r9
 80084dc:	42b3      	cmp	r3, r6
 80084de:	b085      	sub	sp, #20
 80084e0:	bfb8      	it	lt
 80084e2:	3101      	addlt	r1, #1
 80084e4:	f7ff fedc 	bl	80082a0 <_Balloc>
 80084e8:	b930      	cbnz	r0, 80084f8 <__multiply+0x44>
 80084ea:	4602      	mov	r2, r0
 80084ec:	4b44      	ldr	r3, [pc, #272]	@ (8008600 <__multiply+0x14c>)
 80084ee:	4845      	ldr	r0, [pc, #276]	@ (8008604 <__multiply+0x150>)
 80084f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084f4:	f000 fc84 	bl	8008e00 <__assert_func>
 80084f8:	f100 0514 	add.w	r5, r0, #20
 80084fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008500:	462b      	mov	r3, r5
 8008502:	2200      	movs	r2, #0
 8008504:	4543      	cmp	r3, r8
 8008506:	d321      	bcc.n	800854c <__multiply+0x98>
 8008508:	f107 0114 	add.w	r1, r7, #20
 800850c:	f104 0214 	add.w	r2, r4, #20
 8008510:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008514:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008518:	9302      	str	r3, [sp, #8]
 800851a:	1b13      	subs	r3, r2, r4
 800851c:	3b15      	subs	r3, #21
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	3304      	adds	r3, #4
 8008524:	f104 0715 	add.w	r7, r4, #21
 8008528:	42ba      	cmp	r2, r7
 800852a:	bf38      	it	cc
 800852c:	2304      	movcc	r3, #4
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	9103      	str	r1, [sp, #12]
 8008534:	428b      	cmp	r3, r1
 8008536:	d80c      	bhi.n	8008552 <__multiply+0x9e>
 8008538:	2e00      	cmp	r6, #0
 800853a:	dd03      	ble.n	8008544 <__multiply+0x90>
 800853c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05b      	beq.n	80085fc <__multiply+0x148>
 8008544:	6106      	str	r6, [r0, #16]
 8008546:	b005      	add	sp, #20
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	f843 2b04 	str.w	r2, [r3], #4
 8008550:	e7d8      	b.n	8008504 <__multiply+0x50>
 8008552:	f8b1 a000 	ldrh.w	sl, [r1]
 8008556:	f1ba 0f00 	cmp.w	sl, #0
 800855a:	d024      	beq.n	80085a6 <__multiply+0xf2>
 800855c:	f104 0e14 	add.w	lr, r4, #20
 8008560:	46a9      	mov	r9, r5
 8008562:	f04f 0c00 	mov.w	ip, #0
 8008566:	f85e 7b04 	ldr.w	r7, [lr], #4
 800856a:	f8d9 3000 	ldr.w	r3, [r9]
 800856e:	fa1f fb87 	uxth.w	fp, r7
 8008572:	b29b      	uxth	r3, r3
 8008574:	fb0a 330b 	mla	r3, sl, fp, r3
 8008578:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800857c:	f8d9 7000 	ldr.w	r7, [r9]
 8008580:	4463      	add	r3, ip
 8008582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008586:	fb0a c70b 	mla	r7, sl, fp, ip
 800858a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800858e:	b29b      	uxth	r3, r3
 8008590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008594:	4572      	cmp	r2, lr
 8008596:	f849 3b04 	str.w	r3, [r9], #4
 800859a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800859e:	d8e2      	bhi.n	8008566 <__multiply+0xb2>
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	f845 c003 	str.w	ip, [r5, r3]
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085ac:	3104      	adds	r1, #4
 80085ae:	f1b9 0f00 	cmp.w	r9, #0
 80085b2:	d021      	beq.n	80085f8 <__multiply+0x144>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	f104 0c14 	add.w	ip, r4, #20
 80085ba:	46ae      	mov	lr, r5
 80085bc:	f04f 0a00 	mov.w	sl, #0
 80085c0:	f8bc b000 	ldrh.w	fp, [ip]
 80085c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80085c8:	fb09 770b 	mla	r7, r9, fp, r7
 80085cc:	4457      	add	r7, sl
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085d4:	f84e 3b04 	str.w	r3, [lr], #4
 80085d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085e0:	f8be 3000 	ldrh.w	r3, [lr]
 80085e4:	fb09 330a 	mla	r3, r9, sl, r3
 80085e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80085ec:	4562      	cmp	r2, ip
 80085ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085f2:	d8e5      	bhi.n	80085c0 <__multiply+0x10c>
 80085f4:	9f01      	ldr	r7, [sp, #4]
 80085f6:	51eb      	str	r3, [r5, r7]
 80085f8:	3504      	adds	r5, #4
 80085fa:	e799      	b.n	8008530 <__multiply+0x7c>
 80085fc:	3e01      	subs	r6, #1
 80085fe:	e79b      	b.n	8008538 <__multiply+0x84>
 8008600:	0800a770 	.word	0x0800a770
 8008604:	0800a781 	.word	0x0800a781

08008608 <__pow5mult>:
 8008608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800860c:	4615      	mov	r5, r2
 800860e:	f012 0203 	ands.w	r2, r2, #3
 8008612:	4607      	mov	r7, r0
 8008614:	460e      	mov	r6, r1
 8008616:	d007      	beq.n	8008628 <__pow5mult+0x20>
 8008618:	4c25      	ldr	r4, [pc, #148]	@ (80086b0 <__pow5mult+0xa8>)
 800861a:	3a01      	subs	r2, #1
 800861c:	2300      	movs	r3, #0
 800861e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008622:	f7ff fe9f 	bl	8008364 <__multadd>
 8008626:	4606      	mov	r6, r0
 8008628:	10ad      	asrs	r5, r5, #2
 800862a:	d03d      	beq.n	80086a8 <__pow5mult+0xa0>
 800862c:	69fc      	ldr	r4, [r7, #28]
 800862e:	b97c      	cbnz	r4, 8008650 <__pow5mult+0x48>
 8008630:	2010      	movs	r0, #16
 8008632:	f7ff fd7f 	bl	8008134 <malloc>
 8008636:	4602      	mov	r2, r0
 8008638:	61f8      	str	r0, [r7, #28]
 800863a:	b928      	cbnz	r0, 8008648 <__pow5mult+0x40>
 800863c:	4b1d      	ldr	r3, [pc, #116]	@ (80086b4 <__pow5mult+0xac>)
 800863e:	481e      	ldr	r0, [pc, #120]	@ (80086b8 <__pow5mult+0xb0>)
 8008640:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008644:	f000 fbdc 	bl	8008e00 <__assert_func>
 8008648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800864c:	6004      	str	r4, [r0, #0]
 800864e:	60c4      	str	r4, [r0, #12]
 8008650:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008658:	b94c      	cbnz	r4, 800866e <__pow5mult+0x66>
 800865a:	f240 2171 	movw	r1, #625	@ 0x271
 800865e:	4638      	mov	r0, r7
 8008660:	f7ff ff12 	bl	8008488 <__i2b>
 8008664:	2300      	movs	r3, #0
 8008666:	f8c8 0008 	str.w	r0, [r8, #8]
 800866a:	4604      	mov	r4, r0
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	f04f 0900 	mov.w	r9, #0
 8008672:	07eb      	lsls	r3, r5, #31
 8008674:	d50a      	bpl.n	800868c <__pow5mult+0x84>
 8008676:	4631      	mov	r1, r6
 8008678:	4622      	mov	r2, r4
 800867a:	4638      	mov	r0, r7
 800867c:	f7ff ff1a 	bl	80084b4 <__multiply>
 8008680:	4631      	mov	r1, r6
 8008682:	4680      	mov	r8, r0
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff fe4b 	bl	8008320 <_Bfree>
 800868a:	4646      	mov	r6, r8
 800868c:	106d      	asrs	r5, r5, #1
 800868e:	d00b      	beq.n	80086a8 <__pow5mult+0xa0>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	b938      	cbnz	r0, 80086a4 <__pow5mult+0x9c>
 8008694:	4622      	mov	r2, r4
 8008696:	4621      	mov	r1, r4
 8008698:	4638      	mov	r0, r7
 800869a:	f7ff ff0b 	bl	80084b4 <__multiply>
 800869e:	6020      	str	r0, [r4, #0]
 80086a0:	f8c0 9000 	str.w	r9, [r0]
 80086a4:	4604      	mov	r4, r0
 80086a6:	e7e4      	b.n	8008672 <__pow5mult+0x6a>
 80086a8:	4630      	mov	r0, r6
 80086aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ae:	bf00      	nop
 80086b0:	0800a7dc 	.word	0x0800a7dc
 80086b4:	0800a701 	.word	0x0800a701
 80086b8:	0800a781 	.word	0x0800a781

080086bc <__lshift>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	6849      	ldr	r1, [r1, #4]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	4607      	mov	r7, r0
 80086ce:	4691      	mov	r9, r2
 80086d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086d4:	f108 0601 	add.w	r6, r8, #1
 80086d8:	42b3      	cmp	r3, r6
 80086da:	db0b      	blt.n	80086f4 <__lshift+0x38>
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff fddf 	bl	80082a0 <_Balloc>
 80086e2:	4605      	mov	r5, r0
 80086e4:	b948      	cbnz	r0, 80086fa <__lshift+0x3e>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b28      	ldr	r3, [pc, #160]	@ (800878c <__lshift+0xd0>)
 80086ea:	4829      	ldr	r0, [pc, #164]	@ (8008790 <__lshift+0xd4>)
 80086ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086f0:	f000 fb86 	bl	8008e00 <__assert_func>
 80086f4:	3101      	adds	r1, #1
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	e7ee      	b.n	80086d8 <__lshift+0x1c>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f100 0114 	add.w	r1, r0, #20
 8008700:	f100 0210 	add.w	r2, r0, #16
 8008704:	4618      	mov	r0, r3
 8008706:	4553      	cmp	r3, sl
 8008708:	db33      	blt.n	8008772 <__lshift+0xb6>
 800870a:	6920      	ldr	r0, [r4, #16]
 800870c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008710:	f104 0314 	add.w	r3, r4, #20
 8008714:	f019 091f 	ands.w	r9, r9, #31
 8008718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800871c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008720:	d02b      	beq.n	800877a <__lshift+0xbe>
 8008722:	f1c9 0e20 	rsb	lr, r9, #32
 8008726:	468a      	mov	sl, r1
 8008728:	2200      	movs	r2, #0
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	fa00 f009 	lsl.w	r0, r0, r9
 8008730:	4310      	orrs	r0, r2
 8008732:	f84a 0b04 	str.w	r0, [sl], #4
 8008736:	f853 2b04 	ldr.w	r2, [r3], #4
 800873a:	459c      	cmp	ip, r3
 800873c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008740:	d8f3      	bhi.n	800872a <__lshift+0x6e>
 8008742:	ebac 0304 	sub.w	r3, ip, r4
 8008746:	3b15      	subs	r3, #21
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	3304      	adds	r3, #4
 800874e:	f104 0015 	add.w	r0, r4, #21
 8008752:	4584      	cmp	ip, r0
 8008754:	bf38      	it	cc
 8008756:	2304      	movcc	r3, #4
 8008758:	50ca      	str	r2, [r1, r3]
 800875a:	b10a      	cbz	r2, 8008760 <__lshift+0xa4>
 800875c:	f108 0602 	add.w	r6, r8, #2
 8008760:	3e01      	subs	r6, #1
 8008762:	4638      	mov	r0, r7
 8008764:	612e      	str	r6, [r5, #16]
 8008766:	4621      	mov	r1, r4
 8008768:	f7ff fdda 	bl	8008320 <_Bfree>
 800876c:	4628      	mov	r0, r5
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	f842 0f04 	str.w	r0, [r2, #4]!
 8008776:	3301      	adds	r3, #1
 8008778:	e7c5      	b.n	8008706 <__lshift+0x4a>
 800877a:	3904      	subs	r1, #4
 800877c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008780:	f841 2f04 	str.w	r2, [r1, #4]!
 8008784:	459c      	cmp	ip, r3
 8008786:	d8f9      	bhi.n	800877c <__lshift+0xc0>
 8008788:	e7ea      	b.n	8008760 <__lshift+0xa4>
 800878a:	bf00      	nop
 800878c:	0800a770 	.word	0x0800a770
 8008790:	0800a781 	.word	0x0800a781

08008794 <__mcmp>:
 8008794:	690a      	ldr	r2, [r1, #16]
 8008796:	4603      	mov	r3, r0
 8008798:	6900      	ldr	r0, [r0, #16]
 800879a:	1a80      	subs	r0, r0, r2
 800879c:	b530      	push	{r4, r5, lr}
 800879e:	d10e      	bne.n	80087be <__mcmp+0x2a>
 80087a0:	3314      	adds	r3, #20
 80087a2:	3114      	adds	r1, #20
 80087a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087b4:	4295      	cmp	r5, r2
 80087b6:	d003      	beq.n	80087c0 <__mcmp+0x2c>
 80087b8:	d205      	bcs.n	80087c6 <__mcmp+0x32>
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	bd30      	pop	{r4, r5, pc}
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d3f3      	bcc.n	80087ac <__mcmp+0x18>
 80087c4:	e7fb      	b.n	80087be <__mcmp+0x2a>
 80087c6:	2001      	movs	r0, #1
 80087c8:	e7f9      	b.n	80087be <__mcmp+0x2a>
	...

080087cc <__mdiff>:
 80087cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4689      	mov	r9, r1
 80087d2:	4606      	mov	r6, r0
 80087d4:	4611      	mov	r1, r2
 80087d6:	4648      	mov	r0, r9
 80087d8:	4614      	mov	r4, r2
 80087da:	f7ff ffdb 	bl	8008794 <__mcmp>
 80087de:	1e05      	subs	r5, r0, #0
 80087e0:	d112      	bne.n	8008808 <__mdiff+0x3c>
 80087e2:	4629      	mov	r1, r5
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff fd5b 	bl	80082a0 <_Balloc>
 80087ea:	4602      	mov	r2, r0
 80087ec:	b928      	cbnz	r0, 80087fa <__mdiff+0x2e>
 80087ee:	4b3f      	ldr	r3, [pc, #252]	@ (80088ec <__mdiff+0x120>)
 80087f0:	f240 2137 	movw	r1, #567	@ 0x237
 80087f4:	483e      	ldr	r0, [pc, #248]	@ (80088f0 <__mdiff+0x124>)
 80087f6:	f000 fb03 	bl	8008e00 <__assert_func>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008800:	4610      	mov	r0, r2
 8008802:	b003      	add	sp, #12
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	bfbc      	itt	lt
 800880a:	464b      	movlt	r3, r9
 800880c:	46a1      	movlt	r9, r4
 800880e:	4630      	mov	r0, r6
 8008810:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008814:	bfba      	itte	lt
 8008816:	461c      	movlt	r4, r3
 8008818:	2501      	movlt	r5, #1
 800881a:	2500      	movge	r5, #0
 800881c:	f7ff fd40 	bl	80082a0 <_Balloc>
 8008820:	4602      	mov	r2, r0
 8008822:	b918      	cbnz	r0, 800882c <__mdiff+0x60>
 8008824:	4b31      	ldr	r3, [pc, #196]	@ (80088ec <__mdiff+0x120>)
 8008826:	f240 2145 	movw	r1, #581	@ 0x245
 800882a:	e7e3      	b.n	80087f4 <__mdiff+0x28>
 800882c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008830:	6926      	ldr	r6, [r4, #16]
 8008832:	60c5      	str	r5, [r0, #12]
 8008834:	f109 0310 	add.w	r3, r9, #16
 8008838:	f109 0514 	add.w	r5, r9, #20
 800883c:	f104 0e14 	add.w	lr, r4, #20
 8008840:	f100 0b14 	add.w	fp, r0, #20
 8008844:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008848:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	46d9      	mov	r9, fp
 8008850:	f04f 0c00 	mov.w	ip, #0
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	f85e 0b04 	ldr.w	r0, [lr], #4
 800885a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	fa1f f38a 	uxth.w	r3, sl
 8008864:	4619      	mov	r1, r3
 8008866:	b283      	uxth	r3, r0
 8008868:	1acb      	subs	r3, r1, r3
 800886a:	0c00      	lsrs	r0, r0, #16
 800886c:	4463      	add	r3, ip
 800886e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008872:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008876:	b29b      	uxth	r3, r3
 8008878:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800887c:	4576      	cmp	r6, lr
 800887e:	f849 3b04 	str.w	r3, [r9], #4
 8008882:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008886:	d8e5      	bhi.n	8008854 <__mdiff+0x88>
 8008888:	1b33      	subs	r3, r6, r4
 800888a:	3b15      	subs	r3, #21
 800888c:	f023 0303 	bic.w	r3, r3, #3
 8008890:	3415      	adds	r4, #21
 8008892:	3304      	adds	r3, #4
 8008894:	42a6      	cmp	r6, r4
 8008896:	bf38      	it	cc
 8008898:	2304      	movcc	r3, #4
 800889a:	441d      	add	r5, r3
 800889c:	445b      	add	r3, fp
 800889e:	461e      	mov	r6, r3
 80088a0:	462c      	mov	r4, r5
 80088a2:	4544      	cmp	r4, r8
 80088a4:	d30e      	bcc.n	80088c4 <__mdiff+0xf8>
 80088a6:	f108 0103 	add.w	r1, r8, #3
 80088aa:	1b49      	subs	r1, r1, r5
 80088ac:	f021 0103 	bic.w	r1, r1, #3
 80088b0:	3d03      	subs	r5, #3
 80088b2:	45a8      	cmp	r8, r5
 80088b4:	bf38      	it	cc
 80088b6:	2100      	movcc	r1, #0
 80088b8:	440b      	add	r3, r1
 80088ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088be:	b191      	cbz	r1, 80088e6 <__mdiff+0x11a>
 80088c0:	6117      	str	r7, [r2, #16]
 80088c2:	e79d      	b.n	8008800 <__mdiff+0x34>
 80088c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80088c8:	46e6      	mov	lr, ip
 80088ca:	0c08      	lsrs	r0, r1, #16
 80088cc:	fa1c fc81 	uxtah	ip, ip, r1
 80088d0:	4471      	add	r1, lr
 80088d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088d6:	b289      	uxth	r1, r1
 80088d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088dc:	f846 1b04 	str.w	r1, [r6], #4
 80088e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088e4:	e7dd      	b.n	80088a2 <__mdiff+0xd6>
 80088e6:	3f01      	subs	r7, #1
 80088e8:	e7e7      	b.n	80088ba <__mdiff+0xee>
 80088ea:	bf00      	nop
 80088ec:	0800a770 	.word	0x0800a770
 80088f0:	0800a781 	.word	0x0800a781

080088f4 <__d2b>:
 80088f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088f8:	460f      	mov	r7, r1
 80088fa:	2101      	movs	r1, #1
 80088fc:	ec59 8b10 	vmov	r8, r9, d0
 8008900:	4616      	mov	r6, r2
 8008902:	f7ff fccd 	bl	80082a0 <_Balloc>
 8008906:	4604      	mov	r4, r0
 8008908:	b930      	cbnz	r0, 8008918 <__d2b+0x24>
 800890a:	4602      	mov	r2, r0
 800890c:	4b23      	ldr	r3, [pc, #140]	@ (800899c <__d2b+0xa8>)
 800890e:	4824      	ldr	r0, [pc, #144]	@ (80089a0 <__d2b+0xac>)
 8008910:	f240 310f 	movw	r1, #783	@ 0x30f
 8008914:	f000 fa74 	bl	8008e00 <__assert_func>
 8008918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800891c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008920:	b10d      	cbz	r5, 8008926 <__d2b+0x32>
 8008922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	f1b8 0300 	subs.w	r3, r8, #0
 800892c:	d023      	beq.n	8008976 <__d2b+0x82>
 800892e:	4668      	mov	r0, sp
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	f7ff fd7c 	bl	800842e <__lo0bits>
 8008936:	e9dd 1200 	ldrd	r1, r2, [sp]
 800893a:	b1d0      	cbz	r0, 8008972 <__d2b+0x7e>
 800893c:	f1c0 0320 	rsb	r3, r0, #32
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	430b      	orrs	r3, r1
 8008946:	40c2      	lsrs	r2, r0
 8008948:	6163      	str	r3, [r4, #20]
 800894a:	9201      	str	r2, [sp, #4]
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	61a3      	str	r3, [r4, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	bf0c      	ite	eq
 8008954:	2201      	moveq	r2, #1
 8008956:	2202      	movne	r2, #2
 8008958:	6122      	str	r2, [r4, #16]
 800895a:	b1a5      	cbz	r5, 8008986 <__d2b+0x92>
 800895c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008960:	4405      	add	r5, r0
 8008962:	603d      	str	r5, [r7, #0]
 8008964:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008968:	6030      	str	r0, [r6, #0]
 800896a:	4620      	mov	r0, r4
 800896c:	b003      	add	sp, #12
 800896e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008972:	6161      	str	r1, [r4, #20]
 8008974:	e7ea      	b.n	800894c <__d2b+0x58>
 8008976:	a801      	add	r0, sp, #4
 8008978:	f7ff fd59 	bl	800842e <__lo0bits>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	6163      	str	r3, [r4, #20]
 8008980:	3020      	adds	r0, #32
 8008982:	2201      	movs	r2, #1
 8008984:	e7e8      	b.n	8008958 <__d2b+0x64>
 8008986:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800898a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800898e:	6038      	str	r0, [r7, #0]
 8008990:	6918      	ldr	r0, [r3, #16]
 8008992:	f7ff fd2d 	bl	80083f0 <__hi0bits>
 8008996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800899a:	e7e5      	b.n	8008968 <__d2b+0x74>
 800899c:	0800a770 	.word	0x0800a770
 80089a0:	0800a781 	.word	0x0800a781

080089a4 <__ssputs_r>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	688e      	ldr	r6, [r1, #8]
 80089aa:	461f      	mov	r7, r3
 80089ac:	42be      	cmp	r6, r7
 80089ae:	680b      	ldr	r3, [r1, #0]
 80089b0:	4682      	mov	sl, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4690      	mov	r8, r2
 80089b6:	d82d      	bhi.n	8008a14 <__ssputs_r+0x70>
 80089b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089c0:	d026      	beq.n	8008a10 <__ssputs_r+0x6c>
 80089c2:	6965      	ldr	r5, [r4, #20]
 80089c4:	6909      	ldr	r1, [r1, #16]
 80089c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089ca:	eba3 0901 	sub.w	r9, r3, r1
 80089ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089d2:	1c7b      	adds	r3, r7, #1
 80089d4:	444b      	add	r3, r9
 80089d6:	106d      	asrs	r5, r5, #1
 80089d8:	429d      	cmp	r5, r3
 80089da:	bf38      	it	cc
 80089dc:	461d      	movcc	r5, r3
 80089de:	0553      	lsls	r3, r2, #21
 80089e0:	d527      	bpl.n	8008a32 <__ssputs_r+0x8e>
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7ff fbd0 	bl	8008188 <_malloc_r>
 80089e8:	4606      	mov	r6, r0
 80089ea:	b360      	cbz	r0, 8008a46 <__ssputs_r+0xa2>
 80089ec:	6921      	ldr	r1, [r4, #16]
 80089ee:	464a      	mov	r2, r9
 80089f0:	f7fe fcfb 	bl	80073ea <memcpy>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	6126      	str	r6, [r4, #16]
 8008a02:	6165      	str	r5, [r4, #20]
 8008a04:	444e      	add	r6, r9
 8008a06:	eba5 0509 	sub.w	r5, r5, r9
 8008a0a:	6026      	str	r6, [r4, #0]
 8008a0c:	60a5      	str	r5, [r4, #8]
 8008a0e:	463e      	mov	r6, r7
 8008a10:	42be      	cmp	r6, r7
 8008a12:	d900      	bls.n	8008a16 <__ssputs_r+0x72>
 8008a14:	463e      	mov	r6, r7
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	4632      	mov	r2, r6
 8008a1a:	4641      	mov	r1, r8
 8008a1c:	f000 f9c6 	bl	8008dac <memmove>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	1b9b      	subs	r3, r3, r6
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	4433      	add	r3, r6
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	462a      	mov	r2, r5
 8008a34:	f000 fa28 	bl	8008e88 <_realloc_r>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1e0      	bne.n	8008a00 <__ssputs_r+0x5c>
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	4650      	mov	r0, sl
 8008a42:	f7ff fb2d 	bl	80080a0 <_free_r>
 8008a46:	230c      	movs	r3, #12
 8008a48:	f8ca 3000 	str.w	r3, [sl]
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e7e9      	b.n	8008a2e <__ssputs_r+0x8a>
	...

08008a5c <_svfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	4698      	mov	r8, r3
 8008a62:	898b      	ldrh	r3, [r1, #12]
 8008a64:	061b      	lsls	r3, r3, #24
 8008a66:	b09d      	sub	sp, #116	@ 0x74
 8008a68:	4607      	mov	r7, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	d510      	bpl.n	8008a92 <_svfiprintf_r+0x36>
 8008a70:	690b      	ldr	r3, [r1, #16]
 8008a72:	b973      	cbnz	r3, 8008a92 <_svfiprintf_r+0x36>
 8008a74:	2140      	movs	r1, #64	@ 0x40
 8008a76:	f7ff fb87 	bl	8008188 <_malloc_r>
 8008a7a:	6028      	str	r0, [r5, #0]
 8008a7c:	6128      	str	r0, [r5, #16]
 8008a7e:	b930      	cbnz	r0, 8008a8e <_svfiprintf_r+0x32>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b01d      	add	sp, #116	@ 0x74
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	2340      	movs	r3, #64	@ 0x40
 8008a90:	616b      	str	r3, [r5, #20]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a96:	2320      	movs	r3, #32
 8008a98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa0:	2330      	movs	r3, #48	@ 0x30
 8008aa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c40 <_svfiprintf_r+0x1e4>
 8008aa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aaa:	f04f 0901 	mov.w	r9, #1
 8008aae:	4623      	mov	r3, r4
 8008ab0:	469a      	mov	sl, r3
 8008ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab6:	b10a      	cbz	r2, 8008abc <_svfiprintf_r+0x60>
 8008ab8:	2a25      	cmp	r2, #37	@ 0x25
 8008aba:	d1f9      	bne.n	8008ab0 <_svfiprintf_r+0x54>
 8008abc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac0:	d00b      	beq.n	8008ada <_svfiprintf_r+0x7e>
 8008ac2:	465b      	mov	r3, fp
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff ff6b 	bl	80089a4 <__ssputs_r>
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f000 80a7 	beq.w	8008c22 <_svfiprintf_r+0x1c6>
 8008ad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ad6:	445a      	add	r2, fp
 8008ad8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ada:	f89a 3000 	ldrb.w	r3, [sl]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 809f 	beq.w	8008c22 <_svfiprintf_r+0x1c6>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aee:	f10a 0a01 	add.w	sl, sl, #1
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	9307      	str	r3, [sp, #28]
 8008af6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008afa:	931a      	str	r3, [sp, #104]	@ 0x68
 8008afc:	4654      	mov	r4, sl
 8008afe:	2205      	movs	r2, #5
 8008b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b04:	484e      	ldr	r0, [pc, #312]	@ (8008c40 <_svfiprintf_r+0x1e4>)
 8008b06:	f7f7 fb63 	bl	80001d0 <memchr>
 8008b0a:	9a04      	ldr	r2, [sp, #16]
 8008b0c:	b9d8      	cbnz	r0, 8008b46 <_svfiprintf_r+0xea>
 8008b0e:	06d0      	lsls	r0, r2, #27
 8008b10:	bf44      	itt	mi
 8008b12:	2320      	movmi	r3, #32
 8008b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b18:	0711      	lsls	r1, r2, #28
 8008b1a:	bf44      	itt	mi
 8008b1c:	232b      	movmi	r3, #43	@ 0x2b
 8008b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b22:	f89a 3000 	ldrb.w	r3, [sl]
 8008b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b28:	d015      	beq.n	8008b56 <_svfiprintf_r+0xfa>
 8008b2a:	9a07      	ldr	r2, [sp, #28]
 8008b2c:	4654      	mov	r4, sl
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f04f 0c0a 	mov.w	ip, #10
 8008b34:	4621      	mov	r1, r4
 8008b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b3a:	3b30      	subs	r3, #48	@ 0x30
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	d94b      	bls.n	8008bd8 <_svfiprintf_r+0x17c>
 8008b40:	b1b0      	cbz	r0, 8008b70 <_svfiprintf_r+0x114>
 8008b42:	9207      	str	r2, [sp, #28]
 8008b44:	e014      	b.n	8008b70 <_svfiprintf_r+0x114>
 8008b46:	eba0 0308 	sub.w	r3, r0, r8
 8008b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	46a2      	mov	sl, r4
 8008b54:	e7d2      	b.n	8008afc <_svfiprintf_r+0xa0>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	1d19      	adds	r1, r3, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	9103      	str	r1, [sp, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfbb      	ittet	lt
 8008b62:	425b      	neglt	r3, r3
 8008b64:	f042 0202 	orrlt.w	r2, r2, #2
 8008b68:	9307      	strge	r3, [sp, #28]
 8008b6a:	9307      	strlt	r3, [sp, #28]
 8008b6c:	bfb8      	it	lt
 8008b6e:	9204      	strlt	r2, [sp, #16]
 8008b70:	7823      	ldrb	r3, [r4, #0]
 8008b72:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b74:	d10a      	bne.n	8008b8c <_svfiprintf_r+0x130>
 8008b76:	7863      	ldrb	r3, [r4, #1]
 8008b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b7a:	d132      	bne.n	8008be2 <_svfiprintf_r+0x186>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	1d1a      	adds	r2, r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	9203      	str	r2, [sp, #12]
 8008b84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b88:	3402      	adds	r4, #2
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c50 <_svfiprintf_r+0x1f4>
 8008b90:	7821      	ldrb	r1, [r4, #0]
 8008b92:	2203      	movs	r2, #3
 8008b94:	4650      	mov	r0, sl
 8008b96:	f7f7 fb1b 	bl	80001d0 <memchr>
 8008b9a:	b138      	cbz	r0, 8008bac <_svfiprintf_r+0x150>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	eba0 000a 	sub.w	r0, r0, sl
 8008ba2:	2240      	movs	r2, #64	@ 0x40
 8008ba4:	4082      	lsls	r2, r0
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	3401      	adds	r4, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb0:	4824      	ldr	r0, [pc, #144]	@ (8008c44 <_svfiprintf_r+0x1e8>)
 8008bb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bb6:	2206      	movs	r2, #6
 8008bb8:	f7f7 fb0a 	bl	80001d0 <memchr>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d036      	beq.n	8008c2e <_svfiprintf_r+0x1d2>
 8008bc0:	4b21      	ldr	r3, [pc, #132]	@ (8008c48 <_svfiprintf_r+0x1ec>)
 8008bc2:	bb1b      	cbnz	r3, 8008c0c <_svfiprintf_r+0x1b0>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	3307      	adds	r3, #7
 8008bc8:	f023 0307 	bic.w	r3, r3, #7
 8008bcc:	3308      	adds	r3, #8
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd2:	4433      	add	r3, r6
 8008bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd6:	e76a      	b.n	8008aae <_svfiprintf_r+0x52>
 8008bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bdc:	460c      	mov	r4, r1
 8008bde:	2001      	movs	r0, #1
 8008be0:	e7a8      	b.n	8008b34 <_svfiprintf_r+0xd8>
 8008be2:	2300      	movs	r3, #0
 8008be4:	3401      	adds	r4, #1
 8008be6:	9305      	str	r3, [sp, #20]
 8008be8:	4619      	mov	r1, r3
 8008bea:	f04f 0c0a 	mov.w	ip, #10
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf4:	3a30      	subs	r2, #48	@ 0x30
 8008bf6:	2a09      	cmp	r2, #9
 8008bf8:	d903      	bls.n	8008c02 <_svfiprintf_r+0x1a6>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0c6      	beq.n	8008b8c <_svfiprintf_r+0x130>
 8008bfe:	9105      	str	r1, [sp, #20]
 8008c00:	e7c4      	b.n	8008b8c <_svfiprintf_r+0x130>
 8008c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c06:	4604      	mov	r4, r0
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e7f0      	b.n	8008bee <_svfiprintf_r+0x192>
 8008c0c:	ab03      	add	r3, sp, #12
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	462a      	mov	r2, r5
 8008c12:	4b0e      	ldr	r3, [pc, #56]	@ (8008c4c <_svfiprintf_r+0x1f0>)
 8008c14:	a904      	add	r1, sp, #16
 8008c16:	4638      	mov	r0, r7
 8008c18:	f7fd fe56 	bl	80068c8 <_printf_float>
 8008c1c:	1c42      	adds	r2, r0, #1
 8008c1e:	4606      	mov	r6, r0
 8008c20:	d1d6      	bne.n	8008bd0 <_svfiprintf_r+0x174>
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	065b      	lsls	r3, r3, #25
 8008c26:	f53f af2d 	bmi.w	8008a84 <_svfiprintf_r+0x28>
 8008c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c2c:	e72c      	b.n	8008a88 <_svfiprintf_r+0x2c>
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <_svfiprintf_r+0x1f0>)
 8008c36:	a904      	add	r1, sp, #16
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7fe f8dd 	bl	8006df8 <_printf_i>
 8008c3e:	e7ed      	b.n	8008c1c <_svfiprintf_r+0x1c0>
 8008c40:	0800a8d8 	.word	0x0800a8d8
 8008c44:	0800a8e2 	.word	0x0800a8e2
 8008c48:	080068c9 	.word	0x080068c9
 8008c4c:	080089a5 	.word	0x080089a5
 8008c50:	0800a8de 	.word	0x0800a8de

08008c54 <__sflush_r>:
 8008c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	0716      	lsls	r6, r2, #28
 8008c5e:	4605      	mov	r5, r0
 8008c60:	460c      	mov	r4, r1
 8008c62:	d454      	bmi.n	8008d0e <__sflush_r+0xba>
 8008c64:	684b      	ldr	r3, [r1, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dc02      	bgt.n	8008c70 <__sflush_r+0x1c>
 8008c6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dd48      	ble.n	8008d02 <__sflush_r+0xae>
 8008c70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d045      	beq.n	8008d02 <__sflush_r+0xae>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c7c:	682f      	ldr	r7, [r5, #0]
 8008c7e:	6a21      	ldr	r1, [r4, #32]
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	d030      	beq.n	8008ce6 <__sflush_r+0x92>
 8008c84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	0759      	lsls	r1, r3, #29
 8008c8a:	d505      	bpl.n	8008c98 <__sflush_r+0x44>
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c92:	b10b      	cbz	r3, 8008c98 <__sflush_r+0x44>
 8008c94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c9c:	6a21      	ldr	r1, [r4, #32]
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b0      	blx	r6
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	d106      	bne.n	8008cb6 <__sflush_r+0x62>
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	291d      	cmp	r1, #29
 8008cac:	d82b      	bhi.n	8008d06 <__sflush_r+0xb2>
 8008cae:	4a2a      	ldr	r2, [pc, #168]	@ (8008d58 <__sflush_r+0x104>)
 8008cb0:	410a      	asrs	r2, r1
 8008cb2:	07d6      	lsls	r6, r2, #31
 8008cb4:	d427      	bmi.n	8008d06 <__sflush_r+0xb2>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	6062      	str	r2, [r4, #4]
 8008cba:	04d9      	lsls	r1, r3, #19
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	6022      	str	r2, [r4, #0]
 8008cc0:	d504      	bpl.n	8008ccc <__sflush_r+0x78>
 8008cc2:	1c42      	adds	r2, r0, #1
 8008cc4:	d101      	bne.n	8008cca <__sflush_r+0x76>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b903      	cbnz	r3, 8008ccc <__sflush_r+0x78>
 8008cca:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cce:	602f      	str	r7, [r5, #0]
 8008cd0:	b1b9      	cbz	r1, 8008d02 <__sflush_r+0xae>
 8008cd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	d002      	beq.n	8008ce0 <__sflush_r+0x8c>
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f7ff f9e0 	bl	80080a0 <_free_r>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ce4:	e00d      	b.n	8008d02 <__sflush_r+0xae>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4628      	mov	r0, r5
 8008cea:	47b0      	blx	r6
 8008cec:	4602      	mov	r2, r0
 8008cee:	1c50      	adds	r0, r2, #1
 8008cf0:	d1c9      	bne.n	8008c86 <__sflush_r+0x32>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0c6      	beq.n	8008c86 <__sflush_r+0x32>
 8008cf8:	2b1d      	cmp	r3, #29
 8008cfa:	d001      	beq.n	8008d00 <__sflush_r+0xac>
 8008cfc:	2b16      	cmp	r3, #22
 8008cfe:	d11e      	bne.n	8008d3e <__sflush_r+0xea>
 8008d00:	602f      	str	r7, [r5, #0]
 8008d02:	2000      	movs	r0, #0
 8008d04:	e022      	b.n	8008d4c <__sflush_r+0xf8>
 8008d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0a:	b21b      	sxth	r3, r3
 8008d0c:	e01b      	b.n	8008d46 <__sflush_r+0xf2>
 8008d0e:	690f      	ldr	r7, [r1, #16]
 8008d10:	2f00      	cmp	r7, #0
 8008d12:	d0f6      	beq.n	8008d02 <__sflush_r+0xae>
 8008d14:	0793      	lsls	r3, r2, #30
 8008d16:	680e      	ldr	r6, [r1, #0]
 8008d18:	bf08      	it	eq
 8008d1a:	694b      	ldreq	r3, [r1, #20]
 8008d1c:	600f      	str	r7, [r1, #0]
 8008d1e:	bf18      	it	ne
 8008d20:	2300      	movne	r3, #0
 8008d22:	eba6 0807 	sub.w	r8, r6, r7
 8008d26:	608b      	str	r3, [r1, #8]
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	dde9      	ble.n	8008d02 <__sflush_r+0xae>
 8008d2e:	6a21      	ldr	r1, [r4, #32]
 8008d30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d32:	4643      	mov	r3, r8
 8008d34:	463a      	mov	r2, r7
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b0      	blx	r6
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	dc08      	bgt.n	8008d50 <__sflush_r+0xfc>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	4407      	add	r7, r0
 8008d52:	eba8 0800 	sub.w	r8, r8, r0
 8008d56:	e7e7      	b.n	8008d28 <__sflush_r+0xd4>
 8008d58:	dfbffffe 	.word	0xdfbffffe

08008d5c <_fflush_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	b913      	cbnz	r3, 8008d6c <_fflush_r+0x10>
 8008d66:	2500      	movs	r5, #0
 8008d68:	4628      	mov	r0, r5
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	b118      	cbz	r0, 8008d76 <_fflush_r+0x1a>
 8008d6e:	6a03      	ldr	r3, [r0, #32]
 8008d70:	b90b      	cbnz	r3, 8008d76 <_fflush_r+0x1a>
 8008d72:	f7fe f9ed 	bl	8007150 <__sinit>
 8008d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0f3      	beq.n	8008d66 <_fflush_r+0xa>
 8008d7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d80:	07d0      	lsls	r0, r2, #31
 8008d82:	d404      	bmi.n	8008d8e <_fflush_r+0x32>
 8008d84:	0599      	lsls	r1, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_fflush_r+0x32>
 8008d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d8a:	f7fe fb2c 	bl	80073e6 <__retarget_lock_acquire_recursive>
 8008d8e:	4628      	mov	r0, r5
 8008d90:	4621      	mov	r1, r4
 8008d92:	f7ff ff5f 	bl	8008c54 <__sflush_r>
 8008d96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d98:	07da      	lsls	r2, r3, #31
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	d4e4      	bmi.n	8008d68 <_fflush_r+0xc>
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	059b      	lsls	r3, r3, #22
 8008da2:	d4e1      	bmi.n	8008d68 <_fflush_r+0xc>
 8008da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008da6:	f7fe fb1f 	bl	80073e8 <__retarget_lock_release_recursive>
 8008daa:	e7dd      	b.n	8008d68 <_fflush_r+0xc>

08008dac <memmove>:
 8008dac:	4288      	cmp	r0, r1
 8008dae:	b510      	push	{r4, lr}
 8008db0:	eb01 0402 	add.w	r4, r1, r2
 8008db4:	d902      	bls.n	8008dbc <memmove+0x10>
 8008db6:	4284      	cmp	r4, r0
 8008db8:	4623      	mov	r3, r4
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x20>
 8008dbc:	1e43      	subs	r3, r0, #1
 8008dbe:	42a1      	cmp	r1, r4
 8008dc0:	d008      	beq.n	8008dd4 <memmove+0x28>
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0x12>
 8008dcc:	4402      	add	r2, r0
 8008dce:	4601      	mov	r1, r0
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d100      	bne.n	8008dd6 <memmove+0x2a>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dde:	e7f7      	b.n	8008dd0 <memmove+0x24>

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	@ (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f9 fa6c 	bl	80022c8 <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20000960 	.word	0x20000960

08008e00 <__assert_func>:
 8008e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e02:	4614      	mov	r4, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b09      	ldr	r3, [pc, #36]	@ (8008e2c <__assert_func+0x2c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	68d8      	ldr	r0, [r3, #12]
 8008e0e:	b954      	cbnz	r4, 8008e26 <__assert_func+0x26>
 8008e10:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <__assert_func+0x30>)
 8008e12:	461c      	mov	r4, r3
 8008e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e18:	9100      	str	r1, [sp, #0]
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	4905      	ldr	r1, [pc, #20]	@ (8008e34 <__assert_func+0x34>)
 8008e1e:	f000 f86f 	bl	8008f00 <fiprintf>
 8008e22:	f000 f87f 	bl	8008f24 <abort>
 8008e26:	4b04      	ldr	r3, [pc, #16]	@ (8008e38 <__assert_func+0x38>)
 8008e28:	e7f4      	b.n	8008e14 <__assert_func+0x14>
 8008e2a:	bf00      	nop
 8008e2c:	20000018 	.word	0x20000018
 8008e30:	0800a92e 	.word	0x0800a92e
 8008e34:	0800a900 	.word	0x0800a900
 8008e38:	0800a8f3 	.word	0x0800a8f3

08008e3c <_calloc_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	fba1 5402 	umull	r5, r4, r1, r2
 8008e42:	b93c      	cbnz	r4, 8008e54 <_calloc_r+0x18>
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7ff f99f 	bl	8008188 <_malloc_r>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	b928      	cbnz	r0, 8008e5a <_calloc_r+0x1e>
 8008e4e:	2600      	movs	r6, #0
 8008e50:	4630      	mov	r0, r6
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	220c      	movs	r2, #12
 8008e56:	6002      	str	r2, [r0, #0]
 8008e58:	e7f9      	b.n	8008e4e <_calloc_r+0x12>
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f7fe fa44 	bl	80072ea <memset>
 8008e62:	e7f5      	b.n	8008e50 <_calloc_r+0x14>

08008e64 <__ascii_mbtowc>:
 8008e64:	b082      	sub	sp, #8
 8008e66:	b901      	cbnz	r1, 8008e6a <__ascii_mbtowc+0x6>
 8008e68:	a901      	add	r1, sp, #4
 8008e6a:	b142      	cbz	r2, 8008e7e <__ascii_mbtowc+0x1a>
 8008e6c:	b14b      	cbz	r3, 8008e82 <__ascii_mbtowc+0x1e>
 8008e6e:	7813      	ldrb	r3, [r2, #0]
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	1e10      	subs	r0, r2, #0
 8008e76:	bf18      	it	ne
 8008e78:	2001      	movne	r0, #1
 8008e7a:	b002      	add	sp, #8
 8008e7c:	4770      	bx	lr
 8008e7e:	4610      	mov	r0, r2
 8008e80:	e7fb      	b.n	8008e7a <__ascii_mbtowc+0x16>
 8008e82:	f06f 0001 	mvn.w	r0, #1
 8008e86:	e7f8      	b.n	8008e7a <__ascii_mbtowc+0x16>

08008e88 <_realloc_r>:
 8008e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4615      	mov	r5, r2
 8008e90:	460c      	mov	r4, r1
 8008e92:	b921      	cbnz	r1, 8008e9e <_realloc_r+0x16>
 8008e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	4611      	mov	r1, r2
 8008e9a:	f7ff b975 	b.w	8008188 <_malloc_r>
 8008e9e:	b92a      	cbnz	r2, 8008eac <_realloc_r+0x24>
 8008ea0:	f7ff f8fe 	bl	80080a0 <_free_r>
 8008ea4:	2400      	movs	r4, #0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eac:	f000 f841 	bl	8008f32 <_malloc_usable_size_r>
 8008eb0:	4285      	cmp	r5, r0
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	d802      	bhi.n	8008ebc <_realloc_r+0x34>
 8008eb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008eba:	d8f4      	bhi.n	8008ea6 <_realloc_r+0x1e>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f7ff f962 	bl	8008188 <_malloc_r>
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d0ec      	beq.n	8008ea4 <_realloc_r+0x1c>
 8008eca:	42b5      	cmp	r5, r6
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4621      	mov	r1, r4
 8008ed0:	bf28      	it	cs
 8008ed2:	4632      	movcs	r2, r6
 8008ed4:	f7fe fa89 	bl	80073ea <memcpy>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4640      	mov	r0, r8
 8008edc:	f7ff f8e0 	bl	80080a0 <_free_r>
 8008ee0:	463c      	mov	r4, r7
 8008ee2:	e7e0      	b.n	8008ea6 <_realloc_r+0x1e>

08008ee4 <__ascii_wctomb>:
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	b141      	cbz	r1, 8008efc <__ascii_wctomb+0x18>
 8008eea:	2aff      	cmp	r2, #255	@ 0xff
 8008eec:	d904      	bls.n	8008ef8 <__ascii_wctomb+0x14>
 8008eee:	228a      	movs	r2, #138	@ 0x8a
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef6:	4770      	bx	lr
 8008ef8:	700a      	strb	r2, [r1, #0]
 8008efa:	2001      	movs	r0, #1
 8008efc:	4770      	bx	lr
	...

08008f00 <fiprintf>:
 8008f00:	b40e      	push	{r1, r2, r3}
 8008f02:	b503      	push	{r0, r1, lr}
 8008f04:	4601      	mov	r1, r0
 8008f06:	ab03      	add	r3, sp, #12
 8008f08:	4805      	ldr	r0, [pc, #20]	@ (8008f20 <fiprintf+0x20>)
 8008f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f0e:	6800      	ldr	r0, [r0, #0]
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	f000 f83f 	bl	8008f94 <_vfiprintf_r>
 8008f16:	b002      	add	sp, #8
 8008f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f1c:	b003      	add	sp, #12
 8008f1e:	4770      	bx	lr
 8008f20:	20000018 	.word	0x20000018

08008f24 <abort>:
 8008f24:	b508      	push	{r3, lr}
 8008f26:	2006      	movs	r0, #6
 8008f28:	f000 fa08 	bl	800933c <raise>
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	f7f9 f946 	bl	80021be <_exit>

08008f32 <_malloc_usable_size_r>:
 8008f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f36:	1f18      	subs	r0, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bfbc      	itt	lt
 8008f3c:	580b      	ldrlt	r3, [r1, r0]
 8008f3e:	18c0      	addlt	r0, r0, r3
 8008f40:	4770      	bx	lr

08008f42 <__sfputc_r>:
 8008f42:	6893      	ldr	r3, [r2, #8]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	b410      	push	{r4}
 8008f4a:	6093      	str	r3, [r2, #8]
 8008f4c:	da08      	bge.n	8008f60 <__sfputc_r+0x1e>
 8008f4e:	6994      	ldr	r4, [r2, #24]
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	db01      	blt.n	8008f58 <__sfputc_r+0x16>
 8008f54:	290a      	cmp	r1, #10
 8008f56:	d103      	bne.n	8008f60 <__sfputc_r+0x1e>
 8008f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f5c:	f000 b932 	b.w	80091c4 <__swbuf_r>
 8008f60:	6813      	ldr	r3, [r2, #0]
 8008f62:	1c58      	adds	r0, r3, #1
 8008f64:	6010      	str	r0, [r2, #0]
 8008f66:	7019      	strb	r1, [r3, #0]
 8008f68:	4608      	mov	r0, r1
 8008f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <__sfputs_r>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	4606      	mov	r6, r0
 8008f74:	460f      	mov	r7, r1
 8008f76:	4614      	mov	r4, r2
 8008f78:	18d5      	adds	r5, r2, r3
 8008f7a:	42ac      	cmp	r4, r5
 8008f7c:	d101      	bne.n	8008f82 <__sfputs_r+0x12>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e007      	b.n	8008f92 <__sfputs_r+0x22>
 8008f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f86:	463a      	mov	r2, r7
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff ffda 	bl	8008f42 <__sfputc_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d1f3      	bne.n	8008f7a <__sfputs_r+0xa>
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f94 <_vfiprintf_r>:
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	460d      	mov	r5, r1
 8008f9a:	b09d      	sub	sp, #116	@ 0x74
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	4698      	mov	r8, r3
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	b118      	cbz	r0, 8008fac <_vfiprintf_r+0x18>
 8008fa4:	6a03      	ldr	r3, [r0, #32]
 8008fa6:	b90b      	cbnz	r3, 8008fac <_vfiprintf_r+0x18>
 8008fa8:	f7fe f8d2 	bl	8007150 <__sinit>
 8008fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d405      	bmi.n	8008fbe <_vfiprintf_r+0x2a>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_vfiprintf_r+0x2a>
 8008fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fba:	f7fe fa14 	bl	80073e6 <__retarget_lock_acquire_recursive>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	071b      	lsls	r3, r3, #28
 8008fc2:	d501      	bpl.n	8008fc8 <_vfiprintf_r+0x34>
 8008fc4:	692b      	ldr	r3, [r5, #16]
 8008fc6:	b99b      	cbnz	r3, 8008ff0 <_vfiprintf_r+0x5c>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f938 	bl	8009240 <__swsetup_r>
 8008fd0:	b170      	cbz	r0, 8008ff0 <_vfiprintf_r+0x5c>
 8008fd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fd4:	07dc      	lsls	r4, r3, #31
 8008fd6:	d504      	bpl.n	8008fe2 <_vfiprintf_r+0x4e>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	b01d      	add	sp, #116	@ 0x74
 8008fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe2:	89ab      	ldrh	r3, [r5, #12]
 8008fe4:	0598      	lsls	r0, r3, #22
 8008fe6:	d4f7      	bmi.n	8008fd8 <_vfiprintf_r+0x44>
 8008fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fea:	f7fe f9fd 	bl	80073e8 <__retarget_lock_release_recursive>
 8008fee:	e7f3      	b.n	8008fd8 <_vfiprintf_r+0x44>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffe:	2330      	movs	r3, #48	@ 0x30
 8009000:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091b0 <_vfiprintf_r+0x21c>
 8009004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009008:	f04f 0901 	mov.w	r9, #1
 800900c:	4623      	mov	r3, r4
 800900e:	469a      	mov	sl, r3
 8009010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009014:	b10a      	cbz	r2, 800901a <_vfiprintf_r+0x86>
 8009016:	2a25      	cmp	r2, #37	@ 0x25
 8009018:	d1f9      	bne.n	800900e <_vfiprintf_r+0x7a>
 800901a:	ebba 0b04 	subs.w	fp, sl, r4
 800901e:	d00b      	beq.n	8009038 <_vfiprintf_r+0xa4>
 8009020:	465b      	mov	r3, fp
 8009022:	4622      	mov	r2, r4
 8009024:	4629      	mov	r1, r5
 8009026:	4630      	mov	r0, r6
 8009028:	f7ff ffa2 	bl	8008f70 <__sfputs_r>
 800902c:	3001      	adds	r0, #1
 800902e:	f000 80a7 	beq.w	8009180 <_vfiprintf_r+0x1ec>
 8009032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009034:	445a      	add	r2, fp
 8009036:	9209      	str	r2, [sp, #36]	@ 0x24
 8009038:	f89a 3000 	ldrb.w	r3, [sl]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 809f 	beq.w	8009180 <_vfiprintf_r+0x1ec>
 8009042:	2300      	movs	r3, #0
 8009044:	f04f 32ff 	mov.w	r2, #4294967295
 8009048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904c:	f10a 0a01 	add.w	sl, sl, #1
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009058:	931a      	str	r3, [sp, #104]	@ 0x68
 800905a:	4654      	mov	r4, sl
 800905c:	2205      	movs	r2, #5
 800905e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009062:	4853      	ldr	r0, [pc, #332]	@ (80091b0 <_vfiprintf_r+0x21c>)
 8009064:	f7f7 f8b4 	bl	80001d0 <memchr>
 8009068:	9a04      	ldr	r2, [sp, #16]
 800906a:	b9d8      	cbnz	r0, 80090a4 <_vfiprintf_r+0x110>
 800906c:	06d1      	lsls	r1, r2, #27
 800906e:	bf44      	itt	mi
 8009070:	2320      	movmi	r3, #32
 8009072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009076:	0713      	lsls	r3, r2, #28
 8009078:	bf44      	itt	mi
 800907a:	232b      	movmi	r3, #43	@ 0x2b
 800907c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009080:	f89a 3000 	ldrb.w	r3, [sl]
 8009084:	2b2a      	cmp	r3, #42	@ 0x2a
 8009086:	d015      	beq.n	80090b4 <_vfiprintf_r+0x120>
 8009088:	9a07      	ldr	r2, [sp, #28]
 800908a:	4654      	mov	r4, sl
 800908c:	2000      	movs	r0, #0
 800908e:	f04f 0c0a 	mov.w	ip, #10
 8009092:	4621      	mov	r1, r4
 8009094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009098:	3b30      	subs	r3, #48	@ 0x30
 800909a:	2b09      	cmp	r3, #9
 800909c:	d94b      	bls.n	8009136 <_vfiprintf_r+0x1a2>
 800909e:	b1b0      	cbz	r0, 80090ce <_vfiprintf_r+0x13a>
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	e014      	b.n	80090ce <_vfiprintf_r+0x13a>
 80090a4:	eba0 0308 	sub.w	r3, r0, r8
 80090a8:	fa09 f303 	lsl.w	r3, r9, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	46a2      	mov	sl, r4
 80090b2:	e7d2      	b.n	800905a <_vfiprintf_r+0xc6>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	1d19      	adds	r1, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	9103      	str	r1, [sp, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfbb      	ittet	lt
 80090c0:	425b      	neglt	r3, r3
 80090c2:	f042 0202 	orrlt.w	r2, r2, #2
 80090c6:	9307      	strge	r3, [sp, #28]
 80090c8:	9307      	strlt	r3, [sp, #28]
 80090ca:	bfb8      	it	lt
 80090cc:	9204      	strlt	r2, [sp, #16]
 80090ce:	7823      	ldrb	r3, [r4, #0]
 80090d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80090d2:	d10a      	bne.n	80090ea <_vfiprintf_r+0x156>
 80090d4:	7863      	ldrb	r3, [r4, #1]
 80090d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090d8:	d132      	bne.n	8009140 <_vfiprintf_r+0x1ac>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	1d1a      	adds	r2, r3, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	9203      	str	r2, [sp, #12]
 80090e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090e6:	3402      	adds	r4, #2
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091c0 <_vfiprintf_r+0x22c>
 80090ee:	7821      	ldrb	r1, [r4, #0]
 80090f0:	2203      	movs	r2, #3
 80090f2:	4650      	mov	r0, sl
 80090f4:	f7f7 f86c 	bl	80001d0 <memchr>
 80090f8:	b138      	cbz	r0, 800910a <_vfiprintf_r+0x176>
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	eba0 000a 	sub.w	r0, r0, sl
 8009100:	2240      	movs	r2, #64	@ 0x40
 8009102:	4082      	lsls	r2, r0
 8009104:	4313      	orrs	r3, r2
 8009106:	3401      	adds	r4, #1
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910e:	4829      	ldr	r0, [pc, #164]	@ (80091b4 <_vfiprintf_r+0x220>)
 8009110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009114:	2206      	movs	r2, #6
 8009116:	f7f7 f85b 	bl	80001d0 <memchr>
 800911a:	2800      	cmp	r0, #0
 800911c:	d03f      	beq.n	800919e <_vfiprintf_r+0x20a>
 800911e:	4b26      	ldr	r3, [pc, #152]	@ (80091b8 <_vfiprintf_r+0x224>)
 8009120:	bb1b      	cbnz	r3, 800916a <_vfiprintf_r+0x1d6>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	3307      	adds	r3, #7
 8009126:	f023 0307 	bic.w	r3, r3, #7
 800912a:	3308      	adds	r3, #8
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009130:	443b      	add	r3, r7
 8009132:	9309      	str	r3, [sp, #36]	@ 0x24
 8009134:	e76a      	b.n	800900c <_vfiprintf_r+0x78>
 8009136:	fb0c 3202 	mla	r2, ip, r2, r3
 800913a:	460c      	mov	r4, r1
 800913c:	2001      	movs	r0, #1
 800913e:	e7a8      	b.n	8009092 <_vfiprintf_r+0xfe>
 8009140:	2300      	movs	r3, #0
 8009142:	3401      	adds	r4, #1
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	4619      	mov	r1, r3
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	4620      	mov	r0, r4
 800914e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009152:	3a30      	subs	r2, #48	@ 0x30
 8009154:	2a09      	cmp	r2, #9
 8009156:	d903      	bls.n	8009160 <_vfiprintf_r+0x1cc>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0c6      	beq.n	80090ea <_vfiprintf_r+0x156>
 800915c:	9105      	str	r1, [sp, #20]
 800915e:	e7c4      	b.n	80090ea <_vfiprintf_r+0x156>
 8009160:	fb0c 2101 	mla	r1, ip, r1, r2
 8009164:	4604      	mov	r4, r0
 8009166:	2301      	movs	r3, #1
 8009168:	e7f0      	b.n	800914c <_vfiprintf_r+0x1b8>
 800916a:	ab03      	add	r3, sp, #12
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	462a      	mov	r2, r5
 8009170:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <_vfiprintf_r+0x228>)
 8009172:	a904      	add	r1, sp, #16
 8009174:	4630      	mov	r0, r6
 8009176:	f7fd fba7 	bl	80068c8 <_printf_float>
 800917a:	4607      	mov	r7, r0
 800917c:	1c78      	adds	r0, r7, #1
 800917e:	d1d6      	bne.n	800912e <_vfiprintf_r+0x19a>
 8009180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009182:	07d9      	lsls	r1, r3, #31
 8009184:	d405      	bmi.n	8009192 <_vfiprintf_r+0x1fe>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	059a      	lsls	r2, r3, #22
 800918a:	d402      	bmi.n	8009192 <_vfiprintf_r+0x1fe>
 800918c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800918e:	f7fe f92b 	bl	80073e8 <__retarget_lock_release_recursive>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	065b      	lsls	r3, r3, #25
 8009196:	f53f af1f 	bmi.w	8008fd8 <_vfiprintf_r+0x44>
 800919a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800919c:	e71e      	b.n	8008fdc <_vfiprintf_r+0x48>
 800919e:	ab03      	add	r3, sp, #12
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	462a      	mov	r2, r5
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <_vfiprintf_r+0x228>)
 80091a6:	a904      	add	r1, sp, #16
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7fd fe25 	bl	8006df8 <_printf_i>
 80091ae:	e7e4      	b.n	800917a <_vfiprintf_r+0x1e6>
 80091b0:	0800a8d8 	.word	0x0800a8d8
 80091b4:	0800a8e2 	.word	0x0800a8e2
 80091b8:	080068c9 	.word	0x080068c9
 80091bc:	08008f71 	.word	0x08008f71
 80091c0:	0800a8de 	.word	0x0800a8de

080091c4 <__swbuf_r>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	460e      	mov	r6, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	4605      	mov	r5, r0
 80091cc:	b118      	cbz	r0, 80091d6 <__swbuf_r+0x12>
 80091ce:	6a03      	ldr	r3, [r0, #32]
 80091d0:	b90b      	cbnz	r3, 80091d6 <__swbuf_r+0x12>
 80091d2:	f7fd ffbd 	bl	8007150 <__sinit>
 80091d6:	69a3      	ldr	r3, [r4, #24]
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	071a      	lsls	r2, r3, #28
 80091de:	d501      	bpl.n	80091e4 <__swbuf_r+0x20>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	b943      	cbnz	r3, 80091f6 <__swbuf_r+0x32>
 80091e4:	4621      	mov	r1, r4
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 f82a 	bl	8009240 <__swsetup_r>
 80091ec:	b118      	cbz	r0, 80091f6 <__swbuf_r+0x32>
 80091ee:	f04f 37ff 	mov.w	r7, #4294967295
 80091f2:	4638      	mov	r0, r7
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	6922      	ldr	r2, [r4, #16]
 80091fa:	1a98      	subs	r0, r3, r2
 80091fc:	6963      	ldr	r3, [r4, #20]
 80091fe:	b2f6      	uxtb	r6, r6
 8009200:	4283      	cmp	r3, r0
 8009202:	4637      	mov	r7, r6
 8009204:	dc05      	bgt.n	8009212 <__swbuf_r+0x4e>
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f7ff fda7 	bl	8008d5c <_fflush_r>
 800920e:	2800      	cmp	r0, #0
 8009210:	d1ed      	bne.n	80091ee <__swbuf_r+0x2a>
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	3b01      	subs	r3, #1
 8009216:	60a3      	str	r3, [r4, #8]
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	6022      	str	r2, [r4, #0]
 800921e:	701e      	strb	r6, [r3, #0]
 8009220:	6962      	ldr	r2, [r4, #20]
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	429a      	cmp	r2, r3
 8009226:	d004      	beq.n	8009232 <__swbuf_r+0x6e>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	07db      	lsls	r3, r3, #31
 800922c:	d5e1      	bpl.n	80091f2 <__swbuf_r+0x2e>
 800922e:	2e0a      	cmp	r6, #10
 8009230:	d1df      	bne.n	80091f2 <__swbuf_r+0x2e>
 8009232:	4621      	mov	r1, r4
 8009234:	4628      	mov	r0, r5
 8009236:	f7ff fd91 	bl	8008d5c <_fflush_r>
 800923a:	2800      	cmp	r0, #0
 800923c:	d0d9      	beq.n	80091f2 <__swbuf_r+0x2e>
 800923e:	e7d6      	b.n	80091ee <__swbuf_r+0x2a>

08009240 <__swsetup_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4b29      	ldr	r3, [pc, #164]	@ (80092e8 <__swsetup_r+0xa8>)
 8009244:	4605      	mov	r5, r0
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	460c      	mov	r4, r1
 800924a:	b118      	cbz	r0, 8009254 <__swsetup_r+0x14>
 800924c:	6a03      	ldr	r3, [r0, #32]
 800924e:	b90b      	cbnz	r3, 8009254 <__swsetup_r+0x14>
 8009250:	f7fd ff7e 	bl	8007150 <__sinit>
 8009254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009258:	0719      	lsls	r1, r3, #28
 800925a:	d422      	bmi.n	80092a2 <__swsetup_r+0x62>
 800925c:	06da      	lsls	r2, r3, #27
 800925e:	d407      	bmi.n	8009270 <__swsetup_r+0x30>
 8009260:	2209      	movs	r2, #9
 8009262:	602a      	str	r2, [r5, #0]
 8009264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	e033      	b.n	80092d8 <__swsetup_r+0x98>
 8009270:	0758      	lsls	r0, r3, #29
 8009272:	d512      	bpl.n	800929a <__swsetup_r+0x5a>
 8009274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009276:	b141      	cbz	r1, 800928a <__swsetup_r+0x4a>
 8009278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800927c:	4299      	cmp	r1, r3
 800927e:	d002      	beq.n	8009286 <__swsetup_r+0x46>
 8009280:	4628      	mov	r0, r5
 8009282:	f7fe ff0d 	bl	80080a0 <_free_r>
 8009286:	2300      	movs	r3, #0
 8009288:	6363      	str	r3, [r4, #52]	@ 0x34
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	2300      	movs	r3, #0
 8009294:	6063      	str	r3, [r4, #4]
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f043 0308 	orr.w	r3, r3, #8
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	b94b      	cbnz	r3, 80092ba <__swsetup_r+0x7a>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b0:	d003      	beq.n	80092ba <__swsetup_r+0x7a>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f000 f883 	bl	80093c0 <__smakebuf_r>
 80092ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092be:	f013 0201 	ands.w	r2, r3, #1
 80092c2:	d00a      	beq.n	80092da <__swsetup_r+0x9a>
 80092c4:	2200      	movs	r2, #0
 80092c6:	60a2      	str	r2, [r4, #8]
 80092c8:	6962      	ldr	r2, [r4, #20]
 80092ca:	4252      	negs	r2, r2
 80092cc:	61a2      	str	r2, [r4, #24]
 80092ce:	6922      	ldr	r2, [r4, #16]
 80092d0:	b942      	cbnz	r2, 80092e4 <__swsetup_r+0xa4>
 80092d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092d6:	d1c5      	bne.n	8009264 <__swsetup_r+0x24>
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
 80092da:	0799      	lsls	r1, r3, #30
 80092dc:	bf58      	it	pl
 80092de:	6962      	ldrpl	r2, [r4, #20]
 80092e0:	60a2      	str	r2, [r4, #8]
 80092e2:	e7f4      	b.n	80092ce <__swsetup_r+0x8e>
 80092e4:	2000      	movs	r0, #0
 80092e6:	e7f7      	b.n	80092d8 <__swsetup_r+0x98>
 80092e8:	20000018 	.word	0x20000018

080092ec <_raise_r>:
 80092ec:	291f      	cmp	r1, #31
 80092ee:	b538      	push	{r3, r4, r5, lr}
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	d904      	bls.n	8009300 <_raise_r+0x14>
 80092f6:	2316      	movs	r3, #22
 80092f8:	6003      	str	r3, [r0, #0]
 80092fa:	f04f 30ff 	mov.w	r0, #4294967295
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009302:	b112      	cbz	r2, 800930a <_raise_r+0x1e>
 8009304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009308:	b94b      	cbnz	r3, 800931e <_raise_r+0x32>
 800930a:	4628      	mov	r0, r5
 800930c:	f000 f830 	bl	8009370 <_getpid_r>
 8009310:	4622      	mov	r2, r4
 8009312:	4601      	mov	r1, r0
 8009314:	4628      	mov	r0, r5
 8009316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931a:	f000 b817 	b.w	800934c <_kill_r>
 800931e:	2b01      	cmp	r3, #1
 8009320:	d00a      	beq.n	8009338 <_raise_r+0x4c>
 8009322:	1c59      	adds	r1, r3, #1
 8009324:	d103      	bne.n	800932e <_raise_r+0x42>
 8009326:	2316      	movs	r3, #22
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	2001      	movs	r0, #1
 800932c:	e7e7      	b.n	80092fe <_raise_r+0x12>
 800932e:	2100      	movs	r1, #0
 8009330:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009334:	4620      	mov	r0, r4
 8009336:	4798      	blx	r3
 8009338:	2000      	movs	r0, #0
 800933a:	e7e0      	b.n	80092fe <_raise_r+0x12>

0800933c <raise>:
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <raise+0xc>)
 800933e:	4601      	mov	r1, r0
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f7ff bfd3 	b.w	80092ec <_raise_r>
 8009346:	bf00      	nop
 8009348:	20000018 	.word	0x20000018

0800934c <_kill_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4d07      	ldr	r5, [pc, #28]	@ (800936c <_kill_r+0x20>)
 8009350:	2300      	movs	r3, #0
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f7f8 ff20 	bl	800219e <_kill>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	d102      	bne.n	8009368 <_kill_r+0x1c>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b103      	cbz	r3, 8009368 <_kill_r+0x1c>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd38      	pop	{r3, r4, r5, pc}
 800936a:	bf00      	nop
 800936c:	20000960 	.word	0x20000960

08009370 <_getpid_r>:
 8009370:	f7f8 bf0d 	b.w	800218e <_getpid>

08009374 <__swhatbuf_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460c      	mov	r4, r1
 8009378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937c:	2900      	cmp	r1, #0
 800937e:	b096      	sub	sp, #88	@ 0x58
 8009380:	4615      	mov	r5, r2
 8009382:	461e      	mov	r6, r3
 8009384:	da0d      	bge.n	80093a2 <__swhatbuf_r+0x2e>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800938c:	f04f 0100 	mov.w	r1, #0
 8009390:	bf14      	ite	ne
 8009392:	2340      	movne	r3, #64	@ 0x40
 8009394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009398:	2000      	movs	r0, #0
 800939a:	6031      	str	r1, [r6, #0]
 800939c:	602b      	str	r3, [r5, #0]
 800939e:	b016      	add	sp, #88	@ 0x58
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
 80093a2:	466a      	mov	r2, sp
 80093a4:	f000 f848 	bl	8009438 <_fstat_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dbec      	blt.n	8009386 <__swhatbuf_r+0x12>
 80093ac:	9901      	ldr	r1, [sp, #4]
 80093ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093b6:	4259      	negs	r1, r3
 80093b8:	4159      	adcs	r1, r3
 80093ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093be:	e7eb      	b.n	8009398 <__swhatbuf_r+0x24>

080093c0 <__smakebuf_r>:
 80093c0:	898b      	ldrh	r3, [r1, #12]
 80093c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093c4:	079d      	lsls	r5, r3, #30
 80093c6:	4606      	mov	r6, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	d507      	bpl.n	80093dc <__smakebuf_r+0x1c>
 80093cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	2301      	movs	r3, #1
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	b003      	add	sp, #12
 80093da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093dc:	ab01      	add	r3, sp, #4
 80093de:	466a      	mov	r2, sp
 80093e0:	f7ff ffc8 	bl	8009374 <__swhatbuf_r>
 80093e4:	9f00      	ldr	r7, [sp, #0]
 80093e6:	4605      	mov	r5, r0
 80093e8:	4639      	mov	r1, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7fe fecc 	bl	8008188 <_malloc_r>
 80093f0:	b948      	cbnz	r0, 8009406 <__smakebuf_r+0x46>
 80093f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f6:	059a      	lsls	r2, r3, #22
 80093f8:	d4ee      	bmi.n	80093d8 <__smakebuf_r+0x18>
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	f043 0302 	orr.w	r3, r3, #2
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	e7e2      	b.n	80093cc <__smakebuf_r+0xc>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	6020      	str	r0, [r4, #0]
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009416:	b15b      	cbz	r3, 8009430 <__smakebuf_r+0x70>
 8009418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800941c:	4630      	mov	r0, r6
 800941e:	f000 f81d 	bl	800945c <_isatty_r>
 8009422:	b128      	cbz	r0, 8009430 <__smakebuf_r+0x70>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	431d      	orrs	r5, r3
 8009434:	81a5      	strh	r5, [r4, #12]
 8009436:	e7cf      	b.n	80093d8 <__smakebuf_r+0x18>

08009438 <_fstat_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	@ (8009458 <_fstat_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7f8 ff0a 	bl	800225e <_fstat>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_fstat_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_fstat_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	20000960 	.word	0x20000960

0800945c <_isatty_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d06      	ldr	r5, [pc, #24]	@ (8009478 <_isatty_r+0x1c>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f7f8 ff09 	bl	800227e <_isatty>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_isatty_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_isatty_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20000960 	.word	0x20000960
 800947c:	00000000 	.word	0x00000000

08009480 <log>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	ed2d 8b02 	vpush	{d8}
 8009486:	ec55 4b10 	vmov	r4, r5, d0
 800948a:	f000 f841 	bl	8009510 <__ieee754_log>
 800948e:	4622      	mov	r2, r4
 8009490:	462b      	mov	r3, r5
 8009492:	4620      	mov	r0, r4
 8009494:	4629      	mov	r1, r5
 8009496:	eeb0 8a40 	vmov.f32	s16, s0
 800949a:	eef0 8a60 	vmov.f32	s17, s1
 800949e:	f7f7 fb45 	bl	8000b2c <__aeabi_dcmpun>
 80094a2:	b998      	cbnz	r0, 80094cc <log+0x4c>
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f7 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 80094b0:	b960      	cbnz	r0, 80094cc <log+0x4c>
 80094b2:	2200      	movs	r2, #0
 80094b4:	2300      	movs	r3, #0
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80094be:	b160      	cbz	r0, 80094da <log+0x5a>
 80094c0:	f7fd ff66 	bl	8007390 <__errno>
 80094c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80094f0 <log+0x70>
 80094c8:	2322      	movs	r3, #34	@ 0x22
 80094ca:	6003      	str	r3, [r0, #0]
 80094cc:	eeb0 0a48 	vmov.f32	s0, s16
 80094d0:	eef0 0a68 	vmov.f32	s1, s17
 80094d4:	ecbd 8b02 	vpop	{d8}
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	f7fd ff59 	bl	8007390 <__errno>
 80094de:	ecbd 8b02 	vpop	{d8}
 80094e2:	2321      	movs	r3, #33	@ 0x21
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ea:	4803      	ldr	r0, [pc, #12]	@ (80094f8 <log+0x78>)
 80094ec:	f000 b808 	b.w	8009500 <nan>
 80094f0:	00000000 	.word	0x00000000
 80094f4:	fff00000 	.word	0xfff00000
 80094f8:	0800a92e 	.word	0x0800a92e
 80094fc:	00000000 	.word	0x00000000

08009500 <nan>:
 8009500:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009508 <nan+0x8>
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	00000000 	.word	0x00000000
 800950c:	7ff80000 	.word	0x7ff80000

08009510 <__ieee754_log>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	ec51 0b10 	vmov	r0, r1, d0
 8009518:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800951c:	b087      	sub	sp, #28
 800951e:	460d      	mov	r5, r1
 8009520:	da26      	bge.n	8009570 <__ieee754_log+0x60>
 8009522:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009526:	4303      	orrs	r3, r0
 8009528:	4602      	mov	r2, r0
 800952a:	d10a      	bne.n	8009542 <__ieee754_log+0x32>
 800952c:	49ce      	ldr	r1, [pc, #824]	@ (8009868 <__ieee754_log+0x358>)
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	2000      	movs	r0, #0
 8009534:	f7f7 f98a 	bl	800084c <__aeabi_ddiv>
 8009538:	ec41 0b10 	vmov	d0, r0, r1
 800953c:	b007      	add	sp, #28
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	2900      	cmp	r1, #0
 8009544:	da05      	bge.n	8009552 <__ieee754_log+0x42>
 8009546:	460b      	mov	r3, r1
 8009548:	f7f6 fe9e 	bl	8000288 <__aeabi_dsub>
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	e7f0      	b.n	8009534 <__ieee754_log+0x24>
 8009552:	4bc6      	ldr	r3, [pc, #792]	@ (800986c <__ieee754_log+0x35c>)
 8009554:	2200      	movs	r2, #0
 8009556:	f7f7 f84f 	bl	80005f8 <__aeabi_dmul>
 800955a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800955e:	460d      	mov	r5, r1
 8009560:	4ac3      	ldr	r2, [pc, #780]	@ (8009870 <__ieee754_log+0x360>)
 8009562:	4295      	cmp	r5, r2
 8009564:	dd06      	ble.n	8009574 <__ieee754_log+0x64>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	f7f6 fe8f 	bl	800028c <__adddf3>
 800956e:	e7e3      	b.n	8009538 <__ieee754_log+0x28>
 8009570:	2300      	movs	r3, #0
 8009572:	e7f5      	b.n	8009560 <__ieee754_log+0x50>
 8009574:	152c      	asrs	r4, r5, #20
 8009576:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800957a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800957e:	441c      	add	r4, r3
 8009580:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009584:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800958c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009590:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009594:	ea42 0105 	orr.w	r1, r2, r5
 8009598:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800959c:	2200      	movs	r2, #0
 800959e:	4bb5      	ldr	r3, [pc, #724]	@ (8009874 <__ieee754_log+0x364>)
 80095a0:	f7f6 fe72 	bl	8000288 <__aeabi_dsub>
 80095a4:	1cab      	adds	r3, r5, #2
 80095a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	4682      	mov	sl, r0
 80095ae:	468b      	mov	fp, r1
 80095b0:	f04f 0200 	mov.w	r2, #0
 80095b4:	dc53      	bgt.n	800965e <__ieee754_log+0x14e>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f7f7 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80095bc:	b1d0      	cbz	r0, 80095f4 <__ieee754_log+0xe4>
 80095be:	2c00      	cmp	r4, #0
 80095c0:	f000 8120 	beq.w	8009804 <__ieee754_log+0x2f4>
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7f6 ffad 	bl	8000524 <__aeabi_i2d>
 80095ca:	a391      	add	r3, pc, #580	@ (adr r3, 8009810 <__ieee754_log+0x300>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	4606      	mov	r6, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	a38f      	add	r3, pc, #572	@ (adr r3, 8009818 <__ieee754_log+0x308>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	e7ba      	b.n	800956a <__ieee754_log+0x5a>
 80095f4:	a38a      	add	r3, pc, #552	@ (adr r3, 8009820 <__ieee754_log+0x310>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	4650      	mov	r0, sl
 80095fc:	4659      	mov	r1, fp
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	2000      	movs	r0, #0
 8009608:	499b      	ldr	r1, [pc, #620]	@ (8009878 <__ieee754_log+0x368>)
 800960a:	f7f6 fe3d 	bl	8000288 <__aeabi_dsub>
 800960e:	4652      	mov	r2, sl
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	465b      	mov	r3, fp
 8009616:	4650      	mov	r0, sl
 8009618:	4659      	mov	r1, fp
 800961a:	f7f6 ffed 	bl	80005f8 <__aeabi_dmul>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f6 ffe7 	bl	80005f8 <__aeabi_dmul>
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	b914      	cbnz	r4, 8009636 <__ieee754_log+0x126>
 8009630:	4632      	mov	r2, r6
 8009632:	463b      	mov	r3, r7
 8009634:	e0a0      	b.n	8009778 <__ieee754_log+0x268>
 8009636:	4620      	mov	r0, r4
 8009638:	f7f6 ff74 	bl	8000524 <__aeabi_i2d>
 800963c:	a374      	add	r3, pc, #464	@ (adr r3, 8009810 <__ieee754_log+0x300>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	a373      	add	r3, pc, #460	@ (adr r3, 8009818 <__ieee754_log+0x308>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f6 ffce 	bl	80005f8 <__aeabi_dmul>
 800965c:	e0a5      	b.n	80097aa <__ieee754_log+0x29a>
 800965e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009662:	f7f6 fe13 	bl	800028c <__adddf3>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4650      	mov	r0, sl
 800966c:	4659      	mov	r1, fp
 800966e:	f7f7 f8ed 	bl	800084c <__aeabi_ddiv>
 8009672:	e9cd 0100 	strd	r0, r1, [sp]
 8009676:	4620      	mov	r0, r4
 8009678:	f7f6 ff54 	bl	8000524 <__aeabi_i2d>
 800967c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009684:	4610      	mov	r0, r2
 8009686:	4619      	mov	r1, r3
 8009688:	f7f6 ffb6 	bl	80005f8 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	a363      	add	r3, pc, #396	@ (adr r3, 8009828 <__ieee754_log+0x318>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	4680      	mov	r8, r0
 80096a0:	4689      	mov	r9, r1
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	a362      	add	r3, pc, #392	@ (adr r3, 8009830 <__ieee754_log+0x320>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fdee 	bl	800028c <__adddf3>
 80096b0:	4642      	mov	r2, r8
 80096b2:	464b      	mov	r3, r9
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009838 <__ieee754_log+0x328>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fde5 	bl	800028c <__adddf3>
 80096c2:	4642      	mov	r2, r8
 80096c4:	464b      	mov	r3, r9
 80096c6:	f7f6 ff97 	bl	80005f8 <__aeabi_dmul>
 80096ca:	a35d      	add	r3, pc, #372	@ (adr r3, 8009840 <__ieee754_log+0x330>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fddc 	bl	800028c <__adddf3>
 80096d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	a35a      	add	r3, pc, #360	@ (adr r3, 8009848 <__ieee754_log+0x338>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f6 ff85 	bl	80005f8 <__aeabi_dmul>
 80096ee:	a358      	add	r3, pc, #352	@ (adr r3, 8009850 <__ieee754_log+0x340>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fdca 	bl	800028c <__adddf3>
 80096f8:	4642      	mov	r2, r8
 80096fa:	464b      	mov	r3, r9
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	a355      	add	r3, pc, #340	@ (adr r3, 8009858 <__ieee754_log+0x348>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fdc1 	bl	800028c <__adddf3>
 800970a:	4642      	mov	r2, r8
 800970c:	464b      	mov	r3, r9
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800971e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009722:	f7f6 fdb3 	bl	800028c <__adddf3>
 8009726:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800972a:	3551      	adds	r5, #81	@ 0x51
 800972c:	4335      	orrs	r5, r6
 800972e:	2d00      	cmp	r5, #0
 8009730:	4680      	mov	r8, r0
 8009732:	4689      	mov	r9, r1
 8009734:	dd48      	ble.n	80097c8 <__ieee754_log+0x2b8>
 8009736:	4b50      	ldr	r3, [pc, #320]	@ (8009878 <__ieee754_log+0x368>)
 8009738:	2200      	movs	r2, #0
 800973a:	4650      	mov	r0, sl
 800973c:	4659      	mov	r1, fp
 800973e:	f7f6 ff5b 	bl	80005f8 <__aeabi_dmul>
 8009742:	4652      	mov	r2, sl
 8009744:	465b      	mov	r3, fp
 8009746:	f7f6 ff57 	bl	80005f8 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4606      	mov	r6, r0
 8009750:	460f      	mov	r7, r1
 8009752:	4640      	mov	r0, r8
 8009754:	4649      	mov	r1, r9
 8009756:	f7f6 fd99 	bl	800028c <__adddf3>
 800975a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800975e:	f7f6 ff4b 	bl	80005f8 <__aeabi_dmul>
 8009762:	4680      	mov	r8, r0
 8009764:	4689      	mov	r9, r1
 8009766:	b964      	cbnz	r4, 8009782 <__ieee754_log+0x272>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	f7f6 fd84 	bl	8000288 <__aeabi_dsub>
 8009780:	e6da      	b.n	8009538 <__ieee754_log+0x28>
 8009782:	a323      	add	r3, pc, #140	@ (adr r3, 8009810 <__ieee754_log+0x300>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	a321      	add	r3, pc, #132	@ (adr r3, 8009818 <__ieee754_log+0x308>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979e:	f7f6 ff2b 	bl	80005f8 <__aeabi_dmul>
 80097a2:	4642      	mov	r2, r8
 80097a4:	464b      	mov	r3, r9
 80097a6:	f7f6 fd71 	bl	800028c <__adddf3>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f6 fd69 	bl	8000288 <__aeabi_dsub>
 80097b6:	4652      	mov	r2, sl
 80097b8:	465b      	mov	r3, fp
 80097ba:	f7f6 fd65 	bl	8000288 <__aeabi_dsub>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4620      	mov	r0, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	e7d9      	b.n	800977c <__ieee754_log+0x26c>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4650      	mov	r0, sl
 80097ce:	4659      	mov	r1, fp
 80097d0:	f7f6 fd5a 	bl	8000288 <__aeabi_dsub>
 80097d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	4606      	mov	r6, r0
 80097de:	460f      	mov	r7, r1
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	f43f af25 	beq.w	8009630 <__ieee754_log+0x120>
 80097e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009810 <__ieee754_log+0x300>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f0:	f7f6 ff02 	bl	80005f8 <__aeabi_dmul>
 80097f4:	a308      	add	r3, pc, #32	@ (adr r3, 8009818 <__ieee754_log+0x308>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009802:	e729      	b.n	8009658 <__ieee754_log+0x148>
 8009804:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009860 <__ieee754_log+0x350>
 8009808:	e698      	b.n	800953c <__ieee754_log+0x2c>
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
 8009810:	fee00000 	.word	0xfee00000
 8009814:	3fe62e42 	.word	0x3fe62e42
 8009818:	35793c76 	.word	0x35793c76
 800981c:	3dea39ef 	.word	0x3dea39ef
 8009820:	55555555 	.word	0x55555555
 8009824:	3fd55555 	.word	0x3fd55555
 8009828:	df3e5244 	.word	0xdf3e5244
 800982c:	3fc2f112 	.word	0x3fc2f112
 8009830:	96cb03de 	.word	0x96cb03de
 8009834:	3fc74664 	.word	0x3fc74664
 8009838:	94229359 	.word	0x94229359
 800983c:	3fd24924 	.word	0x3fd24924
 8009840:	55555593 	.word	0x55555593
 8009844:	3fe55555 	.word	0x3fe55555
 8009848:	d078c69f 	.word	0xd078c69f
 800984c:	3fc39a09 	.word	0x3fc39a09
 8009850:	1d8e78af 	.word	0x1d8e78af
 8009854:	3fcc71c5 	.word	0x3fcc71c5
 8009858:	9997fa04 	.word	0x9997fa04
 800985c:	3fd99999 	.word	0x3fd99999
	...
 8009868:	c3500000 	.word	0xc3500000
 800986c:	43500000 	.word	0x43500000
 8009870:	7fefffff 	.word	0x7fefffff
 8009874:	3ff00000 	.word	0x3ff00000
 8009878:	3fe00000 	.word	0x3fe00000

0800987c <_init>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	bf00      	nop
 8009880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009882:	bc08      	pop	{r3}
 8009884:	469e      	mov	lr, r3
 8009886:	4770      	bx	lr

08009888 <_fini>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	bf00      	nop
 800988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988e:	bc08      	pop	{r3}
 8009890:	469e      	mov	lr, r3
 8009892:	4770      	bx	lr
