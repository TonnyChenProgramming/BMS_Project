
BMS_Project_stm32F407G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08007a10  08007a10  00008a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008038  08008038  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008038  08008038  00009038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008040  08008040  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008040  08008040  00009040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008048  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000734  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000908  20000908  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106c0  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a73  00000000  00000000  0001a8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  0001d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfd  00000000  00000000  0001e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024344  00000000  00000000  0001f0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001554c  00000000  00000000  00043421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db42d  00000000  00000000  0005896d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133d9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005734  00000000  00000000  00133de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00139514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079f8 	.word	0x080079f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080079f8 	.word	0x080079f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <buzzer_init>:
#include "buzzer.h"

void buzzer_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <buzzer_init+0x60>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <buzzer_init+0x60>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <buzzer_init+0x60>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <buzzer_init+0x64>)
 8000f70:	f002 fbe6 	bl	8003740 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f78:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <buzzer_init+0x64>)
 8000f8c:	f002 fa3c 	bl	8003408 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <oled_init>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "stdio.h"

// OLED Initialization Function
void oled_init(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000fa4:	f000 f83c 	bl	8001020 <ssd1306_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2178      	movs	r1, #120	@ 0x78
 8000fda:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <ssd1306_WriteCommand+0x2c>)
 8000fdc:	f002 fd0e 	bl	80039fc <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200006e8 	.word	0x200006e8

08000fec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	9202      	str	r2, [sp, #8]
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2240      	movs	r2, #64	@ 0x40
 800100a:	2178      	movs	r1, #120	@ 0x78
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <ssd1306_WriteData+0x30>)
 800100e:	f002 fcf5 	bl	80039fc <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200006e8 	.word	0x200006e8

08001020 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001024:	f7ff ffc2 	bl	8000fac <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	@ 0x64
 800102a:	f001 f817 	bl	800205c <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f8b4 	bl	800119c <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001034:	2020      	movs	r0, #32
 8001036:	f7ff ffc1 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ffbe 	bl	8000fbc <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001040:	20b0      	movs	r0, #176	@ 0xb0
 8001042:	f7ff ffbb 	bl	8000fbc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001046:	20c8      	movs	r0, #200	@ 0xc8
 8001048:	f7ff ffb8 	bl	8000fbc <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ffb5 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001052:	2010      	movs	r0, #16
 8001054:	f7ff ffb2 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001058:	2040      	movs	r0, #64	@ 0x40
 800105a:	f7ff ffaf 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800105e:	20ff      	movs	r0, #255	@ 0xff
 8001060:	f000 f888 	bl	8001174 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001064:	20a1      	movs	r0, #161	@ 0xa1
 8001066:	f7ff ffa9 	bl	8000fbc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 800106a:	20a6      	movs	r0, #166	@ 0xa6
 800106c:	f7ff ffa6 	bl	8000fbc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001070:	20a8      	movs	r0, #168	@ 0xa8
 8001072:	f7ff ffa3 	bl	8000fbc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8001076:	203f      	movs	r0, #63	@ 0x3f
 8001078:	f7ff ffa0 	bl	8000fbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800107c:	20a4      	movs	r0, #164	@ 0xa4
 800107e:	f7ff ff9d 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001082:	20d3      	movs	r0, #211	@ 0xd3
 8001084:	f7ff ff9a 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff97 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800108e:	20d5      	movs	r0, #213	@ 0xd5
 8001090:	f7ff ff94 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001094:	20f0      	movs	r0, #240	@ 0xf0
 8001096:	f7ff ff91 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800109a:	20d9      	movs	r0, #217	@ 0xd9
 800109c:	f7ff ff8e 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80010a0:	2022      	movs	r0, #34	@ 0x22
 80010a2:	f7ff ff8b 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80010a6:	20da      	movs	r0, #218	@ 0xda
 80010a8:	f7ff ff88 	bl	8000fbc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80010ac:	2012      	movs	r0, #18
 80010ae:	f7ff ff85 	bl	8000fbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80010b2:	20db      	movs	r0, #219	@ 0xdb
 80010b4:	f7ff ff82 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80010b8:	2020      	movs	r0, #32
 80010ba:	f7ff ff7f 	bl	8000fbc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80010be:	208d      	movs	r0, #141	@ 0x8d
 80010c0:	f7ff ff7c 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80010c4:	2014      	movs	r0, #20
 80010c6:	f7ff ff79 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 f866 	bl	800119c <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 f80f 	bl	80010f4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80010d6:	f000 f825 	bl	8001124 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <ssd1306_Init+0xd0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <ssd1306_Init+0xd0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80010e6:	4b02      	ldr	r3, [pc, #8]	@ (80010f0 <ssd1306_Init+0xd0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	711a      	strb	r2, [r3, #4]
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200005f0 	.word	0x200005f0

080010f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <ssd1306_Fill+0x14>
 8001104:	2300      	movs	r3, #0
 8001106:	e000      	b.n	800110a <ssd1306_Fill+0x16>
 8001108:	23ff      	movs	r3, #255	@ 0xff
 800110a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800110e:	4619      	mov	r1, r3
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <ssd1306_Fill+0x2c>)
 8001112:	f004 fdaf 	bl	8005c74 <memset>
			sizeof(SSD1306_Buffer));
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f0 	.word	0x200001f0

08001124 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	e016      	b.n	800115e <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3b50      	subs	r3, #80	@ 0x50
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff40 	bl	8000fbc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ff3d 	bl	8000fbc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001142:	2010      	movs	r0, #16
 8001144:	f7ff ff3a 	bl	8000fbc <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	01db      	lsls	r3, r3, #7
 800114c:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <ssd1306_UpdateScreen+0x4c>)
 800114e:	4413      	add	r3, r2
 8001150:	2180      	movs	r1, #128	@ 0x80
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff4a 	bl	8000fec <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d9e5      	bls.n	8001130 <ssd1306_UpdateScreen+0xc>
	}
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001f0 	.word	0x200001f0

08001174 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 800117e:	2381      	movs	r3, #129	@ 0x81
 8001180:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff19 	bl	8000fbc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff15 	bl	8000fbc <ssd1306_WriteCommand>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80011ac:	23af      	movs	r3, #175	@ 0xaf
 80011ae:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <ssd1306_SetDisplayOn+0x38>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	715a      	strb	r2, [r3, #5]
 80011b6:	e004      	b.n	80011c2 <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80011b8:	23ae      	movs	r3, #174	@ 0xae
 80011ba:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <ssd1306_SetDisplayOn+0x38>)
 80011be:	2200      	movs	r2, #0
 80011c0:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fef9 	bl	8000fbc <ssd1306_WriteCommand>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200005f0 	.word	0x200005f0

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fecc 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f850 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f000 fa08 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e8:	f000 f9e6 	bl	80015b8 <MX_DMA_Init>
  MX_I2C1_Init();
 80011ec:	f000 f968 	bl	80014c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011f0:	f000 f8b2 	bl	8001358 <MX_ADC1_Init>
  MX_ADC2_Init();
 80011f4:	f000 f91a 	bl	800142c <MX_ADC2_Init>
  MX_TIM2_Init();
 80011f8:	f000 f990 	bl	800151c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf("DMA PeriphDataAlignment = %d\n", hdma_adc1.Init.PeriphDataAlignment);
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <main+0x84>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4619      	mov	r1, r3
 8001202:	4817      	ldr	r0, [pc, #92]	@ (8001260 <main+0x88>)
 8001204:	f004 fc44 	bl	8005a90 <iprintf>
	printf("DMA MemDataAlignment = %d\n", hdma_adc1.Init.MemDataAlignment);
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <main+0x84>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4619      	mov	r1, r3
 800120e:	4815      	ldr	r0, [pc, #84]	@ (8001264 <main+0x8c>)
 8001210:	f004 fc3e 	bl	8005a90 <iprintf>
	printf("DMA_PDATAALIGN_WORD = 0x%08lX\n", DMA_PDATAALIGN_WORD);
 8001214:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001218:	4813      	ldr	r0, [pc, #76]	@ (8001268 <main+0x90>)
 800121a:	f004 fc39 	bl	8005a90 <iprintf>
	printf("DMA_MDATAALIGN_WORD = 0x%08lX\n", DMA_MDATAALIGN_WORD);
 800121e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001222:	4812      	ldr	r0, [pc, #72]	@ (800126c <main+0x94>)
 8001224:	f004 fc34 	bl	8005a90 <iprintf>
  /* Initialize OLED and Buzzer*/
  oled_init();
 8001228:	f7ff feba 	bl	8000fa0 <oled_init>
  buzzer_init();
 800122c:	f7ff fe84 	bl	8000f38 <buzzer_init>

  /* Start Timer2 to trigger ADC conversions every 100ms */
  HAL_TIM_Base_Start(&htim2);
 8001230:	480f      	ldr	r0, [pc, #60]	@ (8001270 <main+0x98>)
 8001232:	f003 fc21 	bl	8004a78 <HAL_TIM_Base_Start>

  /* Enable ADC DMA */
  HAL_ADC_Start(&hadc2);
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <main+0x9c>)
 8001238:	f000 ff78 	bl	800212c <HAL_ADC_Start>

  HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 4);  // ✅ Capture 4 words per DMA burst // Use DMA for ADC1
 800123c:	2204      	movs	r2, #4
 800123e:	490e      	ldr	r1, [pc, #56]	@ (8001278 <main+0xa0>)
 8001240:	480e      	ldr	r0, [pc, #56]	@ (800127c <main+0xa4>)
 8001242:	f001 f845 	bl	80022d0 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (voltage_and_current_reading_flag)
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0xa8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0fa      	beq.n	8001246 <main+0x6e>
	    {
	        voltage_and_current_reading_flag = 0;  // ✅ Reset flag
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <main+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	        Test_DMA_ADC_Settings();  // ✅ Only process fresh ADC values
 8001256:	f000 fb1b 	bl	8001890 <Test_DMA_ADC_Settings>
	    if (voltage_and_current_reading_flag)
 800125a:	e7f4      	b.n	8001246 <main+0x6e>
 800125c:	20000688 	.word	0x20000688
 8001260:	08007a1c 	.word	0x08007a1c
 8001264:	08007a3c 	.word	0x08007a3c
 8001268:	08007a58 	.word	0x08007a58
 800126c:	08007a78 	.word	0x08007a78
 8001270:	2000073c 	.word	0x2000073c
 8001274:	20000640 	.word	0x20000640
 8001278:	20000784 	.word	0x20000784
 800127c:	200005f8 	.word	0x200005f8
 8001280:	200007ac 	.word	0x200007ac

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	@ 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	@ 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 fcee 	bl	8005c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <SystemClock_Config+0xcc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b8:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <SystemClock_Config+0xd0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f8:	23a8      	movs	r3, #168	@ 0xa8
 80012fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001300:	2307      	movs	r3, #7
 8001302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fee1 	bl	80040d0 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001314:	f000 fb5e 	bl	80019d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001324:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2105      	movs	r1, #5
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f942 	bl	80045c0 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001342:	f000 fb47 	bl	80019d4 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	@ 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <MX_ADC1_Init+0xcc>)
 8001378:	4a2b      	ldr	r2, [pc, #172]	@ (8001428 <MX_ADC1_Init+0xd0>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <MX_ADC1_Init+0xcc>)
 800137e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001382:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <MX_ADC1_Init+0xcc>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <MX_ADC1_Init+0xcc>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_ADC1_Init+0xcc>)
 8001392:	2200      	movs	r2, #0
 8001394:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <MX_ADC1_Init+0xcc>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c8:	4816      	ldr	r0, [pc, #88]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013ca:	f000 fe6b 	bl	80020a4 <HAL_ADC_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80013d4:	f000 fafe 	bl	80019d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80013d8:	2306      	movs	r3, #6
 80013da:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80013dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013e0:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_ADC1_Init+0xcc>)
 80013ee:	f001 fb43 	bl	8002a78 <HAL_ADCEx_MultiModeConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80013f8:	f000 faec 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001404:	2303      	movs	r3, #3
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_ADC1_Init+0xcc>)
 800140e:	f001 f893 	bl	8002538 <HAL_ADC_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001418:	f000 fadc 	bl	80019d4 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200005f8 	.word	0x200005f8
 8001428:	40012000 	.word	0x40012000

0800142c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <MX_ADC2_Init+0x90>)
 8001442:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001446:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800144a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 800145a:	2200      	movs	r2, #0
 800145c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 800146e:	2201      	movs	r2, #1
 8001470:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 800147c:	2201      	movs	r2, #1
 800147e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001480:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 8001482:	f000 fe0f 	bl	80020a4 <HAL_ADC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800148c:	f000 faa2 	bl	80019d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001490:	2302      	movs	r3, #2
 8001492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001494:	2301      	movs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001498:	2303      	movs	r3, #3
 800149a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_ADC2_Init+0x8c>)
 80014a2:	f001 f849 	bl	8002538 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80014ac:	f000 fa92 	bl	80019d4 <Error_Handler>
  // Step 2: Start ADC2 in normal mode before enabling ADC1 dual mode


  /* USER CODE END ADC2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000640 	.word	0x20000640
 80014bc:	40012100 	.word	0x40012100

080014c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f002 f939 	bl	8003774 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fa64 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200006e8 	.word	0x200006e8
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <MX_TIM2_Init+0x98>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <MX_TIM2_Init+0x98>)
 8001542:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <MX_TIM2_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_TIM2_Init+0x98>)
 8001550:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_TIM2_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_TIM2_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001562:	4814      	ldr	r0, [pc, #80]	@ (80015b4 <MX_TIM2_Init+0x98>)
 8001564:	f003 fa38 	bl	80049d8 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800156e:	f000 fa31 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <MX_TIM2_Init+0x98>)
 8001580:	f003 fae2 	bl	8004b48 <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800158a:	f000 fa23 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800158e:	2320      	movs	r3, #32
 8001590:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001592:	2380      	movs	r3, #128	@ 0x80
 8001594:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <MX_TIM2_Init+0x98>)
 800159c:	f003 fce2 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015a6:	f000 fa15 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000073c 	.word	0x2000073c

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_DMA_Init+0x3c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2038      	movs	r0, #56	@ 0x38
 80015e0:	f001 fb6b 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015e4:	2038      	movs	r0, #56	@ 0x38
 80015e6:	f001 fb84 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	@ 0x30
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b99      	ldr	r3, [pc, #612]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a98      	ldr	r2, [pc, #608]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b96      	ldr	r3, [pc, #600]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b92      	ldr	r3, [pc, #584]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a91      	ldr	r2, [pc, #580]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b8f      	ldr	r3, [pc, #572]	@ (8001878 <MX_GPIO_Init+0x280>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b8b      	ldr	r3, [pc, #556]	@ (8001878 <MX_GPIO_Init+0x280>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a8a      	ldr	r2, [pc, #552]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b88      	ldr	r3, [pc, #544]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b84      	ldr	r3, [pc, #528]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a83      	ldr	r2, [pc, #524]	@ (8001878 <MX_GPIO_Init+0x280>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b81      	ldr	r3, [pc, #516]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b7d      	ldr	r3, [pc, #500]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a7c      	ldr	r2, [pc, #496]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b7a      	ldr	r3, [pc, #488]	@ (8001878 <MX_GPIO_Init+0x280>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b76      	ldr	r3, [pc, #472]	@ (8001878 <MX_GPIO_Init+0x280>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a75      	ldr	r2, [pc, #468]	@ (8001878 <MX_GPIO_Init+0x280>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b73      	ldr	r3, [pc, #460]	@ (8001878 <MX_GPIO_Init+0x280>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2108      	movs	r1, #8
 80016ba:	4870      	ldr	r0, [pc, #448]	@ (800187c <MX_GPIO_Init+0x284>)
 80016bc:	f002 f840 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2101      	movs	r1, #1
 80016c4:	486e      	ldr	r0, [pc, #440]	@ (8001880 <MX_GPIO_Init+0x288>)
 80016c6:	f002 f83b 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016ca:	2200      	movs	r2, #0
 80016cc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80016d0:	486c      	ldr	r0, [pc, #432]	@ (8001884 <MX_GPIO_Init+0x28c>)
 80016d2:	f002 f835 	bl	8003740 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016d6:	2308      	movs	r3, #8
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4863      	ldr	r0, [pc, #396]	@ (800187c <MX_GPIO_Init+0x284>)
 80016ee:	f001 fe8b 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	485d      	ldr	r0, [pc, #372]	@ (8001880 <MX_GPIO_Init+0x288>)
 800170a:	f001 fe7d 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800170e:	2308      	movs	r3, #8
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171e:	2305      	movs	r3, #5
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4855      	ldr	r0, [pc, #340]	@ (8001880 <MX_GPIO_Init+0x288>)
 800172a:	f001 fe6d 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001732:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4851      	ldr	r0, [pc, #324]	@ (8001888 <MX_GPIO_Init+0x290>)
 8001744:	f001 fe60 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001748:	2310      	movs	r3, #16
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001758:	2306      	movs	r3, #6
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4849      	ldr	r0, [pc, #292]	@ (8001888 <MX_GPIO_Init+0x290>)
 8001764:	f001 fe50 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001768:	23e0      	movs	r3, #224	@ 0xe0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001778:	2305      	movs	r3, #5
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4841      	ldr	r0, [pc, #260]	@ (8001888 <MX_GPIO_Init+0x290>)
 8001784:	f001 fe40 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001788:	2304      	movs	r3, #4
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	483c      	ldr	r0, [pc, #240]	@ (800188c <MX_GPIO_Init+0x294>)
 800179c:	f001 fe34 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b2:	2305      	movs	r3, #5
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4833      	ldr	r0, [pc, #204]	@ (800188c <MX_GPIO_Init+0x294>)
 80017be:	f001 fe23 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017c2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80017c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	482a      	ldr	r0, [pc, #168]	@ (8001884 <MX_GPIO_Init+0x28c>)
 80017dc:	f001 fe14 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017e0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f2:	2306      	movs	r3, #6
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4820      	ldr	r0, [pc, #128]	@ (8001880 <MX_GPIO_Init+0x288>)
 80017fe:	f001 fe03 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001802:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	481c      	ldr	r0, [pc, #112]	@ (8001888 <MX_GPIO_Init+0x290>)
 8001818:	f001 fdf6 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800181c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800182e:	230a      	movs	r3, #10
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4813      	ldr	r0, [pc, #76]	@ (8001888 <MX_GPIO_Init+0x290>)
 800183a:	f001 fde5 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800183e:	2320      	movs	r3, #32
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <MX_GPIO_Init+0x28c>)
 8001852:	f001 fdd9 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001856:	2302      	movs	r3, #2
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800185a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_GPIO_Init+0x284>)
 800186c:	f001 fdcc 	bl	8003408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	@ 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40021000 	.word	0x40021000
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400

08001890 <Test_DMA_ADC_Settings>:

	temperature = (1.0 / ((log(Rntc / UPPER_RESISTANCE) / BETA_NTC) + (1.0 / ROOM_TEMPERATURE))) - 273.15f;

}
void Test_DMA_ADC_Settings(void)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
    static uint32_t last_timestamp = 0;  // Track last update time
    uint32_t current_time = HAL_GetTick();  // Get system time in milliseconds
 8001896:	f000 fbd5 	bl	8002044 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

    // ✅ Only process every 400ms (matching OLED update rate)
    if (current_time - last_timestamp >= 400)
 800189c:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <Test_DMA_ADC_Settings+0x130>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80018a8:	d37e      	bcc.n	80019a8 <Test_DMA_ADC_Settings+0x118>
    {
        last_timestamp = current_time;  // Update timestamp
 80018aa:	4a45      	ldr	r2, [pc, #276]	@ (80019c0 <Test_DMA_ADC_Settings+0x130>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	6013      	str	r3, [r2, #0]

        // ✅ Check if DMA buffer is receiving 4 words
        printf("DMA Buffer: %lu %lu %lu %lu\n", dma_adc_buffer[0], dma_adc_buffer[1], dma_adc_buffer[2], dma_adc_buffer[3]);
 80018b0:	4b44      	ldr	r3, [pc, #272]	@ (80019c4 <Test_DMA_ADC_Settings+0x134>)
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	4b43      	ldr	r3, [pc, #268]	@ (80019c4 <Test_DMA_ADC_Settings+0x134>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <Test_DMA_ADC_Settings+0x134>)
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <Test_DMA_ADC_Settings+0x134>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4603      	mov	r3, r0
 80018c4:	4840      	ldr	r0, [pc, #256]	@ (80019c8 <Test_DMA_ADC_Settings+0x138>)
 80018c6:	f004 f8e3 	bl	8005a90 <iprintf>

        // ✅ Extract & Print ADC values for verification
        for (int i = 0; i < 4; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e065      	b.n	800199c <Test_DMA_ADC_Settings+0x10c>
        {
            uint32_t dualADCData = dma_adc_buffer[i];
 80018d0:	4a3c      	ldr	r2, [pc, #240]	@ (80019c4 <Test_DMA_ADC_Settings+0x134>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	60fb      	str	r3, [r7, #12]

            uint16_t voltage_raw = (dualADCData & 0xFFFF);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	817b      	strh	r3, [r7, #10]
            uint16_t current_raw = (dualADCData >> 16);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	813b      	strh	r3, [r7, #8]

            float voltage = ((float)voltage_raw * VREF_ACTUAL1) / 4095.0 * 1.5;
 80018e4:	897b      	ldrh	r3, [r7, #10]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	ee17 0a90 	vmov	r0, s15
 80018f2:	f7fe fe29 	bl	8000548 <__aeabi_f2d>
 80018f6:	a32e      	add	r3, pc, #184	@ (adr r3, 80019b0 <Test_DMA_ADC_Settings+0x120>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fe7c 	bl	80005f8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	a32b      	add	r3, pc, #172	@ (adr r3, 80019b8 <Test_DMA_ADC_Settings+0x128>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe ff9d 	bl	800084c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b2b      	ldr	r3, [pc, #172]	@ (80019cc <Test_DMA_ADC_Settings+0x13c>)
 8001920:	f7fe fe6a 	bl	80005f8 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f93c 	bl	8000ba8 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	607b      	str	r3, [r7, #4]
            float current = ((float)current_raw * VREF_ACTUAL1) / 4095.0;  // Modify scaling based on actual sensor
 8001934:	893b      	ldrh	r3, [r7, #8]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	a31a      	add	r3, pc, #104	@ (adr r3, 80019b0 <Test_DMA_ADC_Settings+0x120>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe54 	bl	80005f8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a317      	add	r3, pc, #92	@ (adr r3, 80019b8 <Test_DMA_ADC_Settings+0x128>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe ff75 	bl	800084c <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f91d 	bl	8000ba8 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	603b      	str	r3, [r7, #0]

            printf("Sample %d -> Voltage: %.2fV, Current: %.2fA\n", i, voltage, current);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fde8 	bl	8000548 <__aeabi_f2d>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f7fe fde3 	bl	8000548 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9cd 2300 	strd	r2, r3, [sp]
 800198a:	4622      	mov	r2, r4
 800198c:	462b      	mov	r3, r5
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	480f      	ldr	r0, [pc, #60]	@ (80019d0 <Test_DMA_ADC_Settings+0x140>)
 8001992:	f004 f87d 	bl	8005a90 <iprintf>
        for (int i = 0; i < 4; i++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	dd96      	ble.n	80018d0 <Test_DMA_ADC_Settings+0x40>
        }
        printf("\n");  // New line for readability
 80019a2:	200a      	movs	r0, #10
 80019a4:	f004 f886 	bl	8005ab4 <putchar>
    }
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}
 80019b0:	b851eb85 	.word	0xb851eb85
 80019b4:	4007851e 	.word	0x4007851e
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40affe00 	.word	0x40affe00
 80019c0:	200007b0 	.word	0x200007b0
 80019c4:	20000784 	.word	0x20000784
 80019c8:	08007b24 	.word	0x08007b24
 80019cc:	3ff80000 	.word	0x3ff80000
 80019d0:	08007b44 	.word	0x08007b44

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <Error_Handler+0x8>

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a46      	ldr	r2, [pc, #280]	@ (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d158      	bne.n	8001b04 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a62:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a3d      	ldr	r2, [pc, #244]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4834      	ldr	r0, [pc, #208]	@ (8001b70 <HAL_ADC_MspInit+0x140>)
 8001a9e:	f001 fcb3 	bl	8003408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001aa4:	4a34      	ldr	r2, [pc, #208]	@ (8001b78 <HAL_ADC_MspInit+0x148>)
 8001aa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aae:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aba:	4b2e      	ldr	r3, [pc, #184]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001abc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ac4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ac8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001acc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ad0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ae6:	4823      	ldr	r0, [pc, #140]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001ae8:	f001 f91e 	bl	8002d28 <HAL_DMA_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001af2:	f7ff ff6f 	bl	80019d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001afa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001afc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <HAL_ADC_MspInit+0x144>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b02:	e02c      	b.n	8001b5e <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_ADC_MspInit+0x14c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d127      	bne.n	8001b5e <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b46:	2304      	movs	r3, #4
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <HAL_ADC_MspInit+0x140>)
 8001b5a:	f001 fc55 	bl	8003408 <HAL_GPIO_Init>
}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	@ 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	20000688 	.word	0x20000688
 8001b78:	40026410 	.word	0x40026410
 8001b7c:	40012100 	.word	0x40012100

08001b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_I2C_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12c      	bne.n	8001bfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001bbe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <HAL_I2C_MspInit+0x8c>)
 8001bdc:	f001 fc14 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	@ 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40005400 	.word	0x40005400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c20:	d10d      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_TIM_Base_MspInit+0x3c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_TIM_Base_MspInit+0x3c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_TIM_Base_MspInit+0x3c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 f9b9 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <DMA2_Stream0_IRQHandler+0x10>)
 8001cb6:	f001 f93d 	bl	8002f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000688 	.word	0x20000688

08001cc4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)  // ✅ Ensure callback is triggered by ADC1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_ADC_ConvCpltCallback+0x34>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d109      	bne.n	8001cea <HAL_ADC_ConvCpltCallback+0x26>
    {
        voltage_and_current_reading_flag = 1;  // ✅ Set flag when DMA transfer is done
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_ADC_ConvCpltCallback+0x38>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
        temperature_counter++;  // ✅ Increment temperature counter every 0.4s
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001ce8:	701a      	strb	r2, [r3, #0]
    }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	200007ac 	.word	0x200007ac
 8001d00:	200007ad 	.word	0x200007ad

08001d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d2c:	e000      	b.n	8001d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f9      	beq.n	8001d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d3a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  return 1;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_kill>:

int _kill(int pid, int sig)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d6c:	f003 ffd4 	bl	8005d18 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2216      	movs	r2, #22
 8001d74:	601a      	str	r2, [r3, #0]
  return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_exit>:

void _exit (int status)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffe7 	bl	8001d62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <_exit+0x12>

08001d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e00a      	b.n	8001dc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001daa:	f3af 8000 	nop.w
 8001dae:	4601      	mov	r1, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	b2ca      	uxtb	r2, r1
 8001db8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf0      	blt.n	8001daa <_read+0x12>
  }

  return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e009      	b.n	8001df8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	60ba      	str	r2, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 f840 	bl	8001e72 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf1      	blt.n	8001de4 <_write+0x12>
  }
  return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_close>:

int _close(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e32:	605a      	str	r2, [r3, #4]
  return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_isatty>:

int _isatty(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <__io_putchar>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int __io_putchar(int ch) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);  // Send character to SWV ITM console
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff41 	bl	8001d04 <ITM_SendChar>
    return ch;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f003 ff2c 	bl	8005d18 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	200007b4 	.word	0x200007b4
 8001ef4:	20000908 	.word	0x20000908

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
    /* FPU settings */
	//printf("[DEBUG] SCB->VTOR: 0x%08lX\n", SCB->VTOR);
    #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* Set CP10 and CP11 Full Access */
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <SystemInit+0x28>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f02:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <SystemInit+0x28>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location */
    #if defined (USER_VECT_TAB_ADDRESS)
        SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
    #else
        SCB->VTOR = 0x08000000;  // ✅ Always set VTOR to Flash
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SystemInit+0x28>)
 8001f0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f12:	609a      	str	r2, [r3, #8]
    #endif
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f28:	f7ff ffe6 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2e:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f44:	4c0a      	ldr	r4, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f003 fee7 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff f93f 	bl	80011d8 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f68:	08008048 	.word	0x08008048
  ldr r2, =_sbss
 8001f6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f70:	20000908 	.word	0x20000908

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 fe7f 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fd18 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fe97 	bl	8002d0e <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 fe5f 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	20000008 	.word	0x20000008
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	200007b8 	.word	0x200007b8

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200007b8 	.word	0x200007b8

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e033      	b.n	8002122 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fcb4 	bl	8001a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020ea:	f023 0302 	bic.w	r3, r3, #2
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fb40 	bl	800277c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	@ 0x40
 8002112:	e001      	b.n	8002118 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Start+0x1a>
 8002142:	2302      	movs	r3, #2
 8002144:	e0b2      	b.n	80022ac <HAL_ADC_Start+0x180>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d018      	beq.n	800218e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800216c:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_ADC_Start+0x18c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_ADC_Start+0x190>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9a      	lsrs	r2, r3, #18
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d17a      	bne.n	8002292 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021da:	d106      	bne.n	80021ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	f023 0206 	bic.w	r2, r3, #6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f8:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_ADC_Start+0x194>)
 80021fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002204:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12a      	bne.n	8002268 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <HAL_ADC_Start+0x198>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d015      	beq.n	8002248 <HAL_ADC_Start+0x11c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <HAL_ADC_Start+0x19c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d105      	bne.n	8002232 <HAL_ADC_Start+0x106>
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_ADC_Start+0x194>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a25      	ldr	r2, [pc, #148]	@ (80022cc <HAL_ADC_Start+0x1a0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d136      	bne.n	80022aa <HAL_ADC_Start+0x17e>
 800223c:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_ADC_Start+0x194>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d130      	bne.n	80022aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d129      	bne.n	80022aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	e020      	b.n	80022aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <HAL_ADC_Start+0x198>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11b      	bne.n	80022aa <HAL_ADC_Start+0x17e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d114      	bne.n	80022aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00b      	b.n	80022aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83
 80022c0:	40012300 	.word	0x40012300
 80022c4:	40012000 	.word	0x40012000
 80022c8:	40012100 	.word	0x40012100
 80022cc:	40012200 	.word	0x40012200

080022d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Start_DMA+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0f7      	b.n	80024de <HAL_ADC_Start_DMA+0x20e>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d018      	beq.n	8002336 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002314:	4b74      	ldr	r3, [pc, #464]	@ (80024e8 <HAL_ADC_Start_DMA+0x218>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a74      	ldr	r2, [pc, #464]	@ (80024ec <HAL_ADC_Start_DMA+0x21c>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9a      	lsrs	r2, r3, #18
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002328:	e002      	b.n	8002330 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3b01      	subs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f9      	bne.n	800232a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002344:	d107      	bne.n	8002356 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002354:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 80af 	bne.w	80024c4 <HAL_ADC_Start_DMA+0x1f4>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002390:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f023 0206 	bic.w	r2, r3, #6
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80023b2:	e002      	b.n	80023ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_ADC_Start_DMA+0x220>)
 80023c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ca:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_ADC_Start_DMA+0x224>)
 80023cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	4a49      	ldr	r2, [pc, #292]	@ (80024f8 <HAL_ADC_Start_DMA+0x228>)
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	4a48      	ldr	r2, [pc, #288]	@ (80024fc <HAL_ADC_Start_DMA+0x22c>)
 80023dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002406:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    //HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
    // modification to adjust CDR
    // 🚨 Fix for Dual ADC Mode 🚨
    if (READ_BIT(ADC->CCR, ADC_CCR_MULTI) != 0) {
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_ADC_Start_DMA+0x220>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_ADC_Start_DMA+0x154>
        // If ADC is in Dual Mode, use the Common Data Register
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4938      	ldr	r1, [pc, #224]	@ (8002500 <HAL_ADC_Start_DMA+0x230>)
 800241e:	f000 fd31 	bl	8002e84 <HAL_DMA_Start_IT>
 8002422:	e009      	b.n	8002438 <HAL_ADC_Start_DMA+0x168>
    } else {
        // Otherwise, use the default single ADC DR
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	334c      	adds	r3, #76	@ 0x4c
 800242e:	4619      	mov	r1, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f000 fd26 	bl	8002e84 <HAL_DMA_Start_IT>
    }

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12a      	bne.n	800249a <HAL_ADC_Start_DMA+0x1ca>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2e      	ldr	r2, [pc, #184]	@ (8002504 <HAL_ADC_Start_DMA+0x234>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d015      	beq.n	800247a <HAL_ADC_Start_DMA+0x1aa>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2d      	ldr	r2, [pc, #180]	@ (8002508 <HAL_ADC_Start_DMA+0x238>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d105      	bne.n	8002464 <HAL_ADC_Start_DMA+0x194>
 8002458:	4b25      	ldr	r3, [pc, #148]	@ (80024f0 <HAL_ADC_Start_DMA+0x220>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_ADC_Start_DMA+0x1aa>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a28      	ldr	r2, [pc, #160]	@ (800250c <HAL_ADC_Start_DMA+0x23c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d136      	bne.n	80024dc <HAL_ADC_Start_DMA+0x20c>
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_ADC_Start_DMA+0x220>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d130      	bne.n	80024dc <HAL_ADC_Start_DMA+0x20c>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d129      	bne.n	80024dc <HAL_ADC_Start_DMA+0x20c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	e020      	b.n	80024dc <HAL_ADC_Start_DMA+0x20c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_ADC_Start_DMA+0x234>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d11b      	bne.n	80024dc <HAL_ADC_Start_DMA+0x20c>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d114      	bne.n	80024dc <HAL_ADC_Start_DMA+0x20c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	e00b      	b.n	80024dc <HAL_ADC_Start_DMA+0x20c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	40012300 	.word	0x40012300
 80024f4:	08002975 	.word	0x08002975
 80024f8:	08002a2f 	.word	0x08002a2f
 80024fc:	08002a4b 	.word	0x08002a4b
 8002500:	40012308 	.word	0x40012308
 8002504:	40012000 	.word	0x40012000
 8002508:	40012100 	.word	0x40012100
 800250c:	40012200 	.word	0x40012200

08002510 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1c>
 8002550:	2302      	movs	r3, #2
 8002552:	e105      	b.n	8002760 <HAL_ADC_ConfigChannel+0x228>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d925      	bls.n	80025b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	3b1e      	subs	r3, #30
 800257a:	2207      	movs	r2, #7
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43da      	mvns	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	400a      	ands	r2, r1
 8002588:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	4603      	mov	r3, r0
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4403      	add	r3, r0
 80025a2:	3b1e      	subs	r3, #30
 80025a4:	409a      	lsls	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	e022      	b.n	80025f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6919      	ldr	r1, [r3, #16]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	2207      	movs	r2, #7
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6919      	ldr	r1, [r3, #16]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4618      	mov	r0, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4403      	add	r3, r0
 80025ec:	409a      	lsls	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d824      	bhi.n	8002648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b05      	subs	r3, #5
 8002610:	221f      	movs	r2, #31
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b05      	subs	r3, #5
 800263a:	fa00 f203 	lsl.w	r2, r0, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34
 8002646:	e04c      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d824      	bhi.n	800269a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b23      	subs	r3, #35	@ 0x23
 8002662:	221f      	movs	r2, #31
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b23      	subs	r3, #35	@ 0x23
 800268c:	fa00 f203 	lsl.w	r2, r0, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
 8002698:	e023      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	3b41      	subs	r3, #65	@ 0x41
 80026ac:	221f      	movs	r2, #31
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	400a      	ands	r2, r1
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b41      	subs	r3, #65	@ 0x41
 80026d6:	fa00 f203 	lsl.w	r2, r0, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e2:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_ADC_ConfigChannel+0x234>)
 80026e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <HAL_ADC_ConfigChannel+0x238>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d109      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1cc>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b12      	cmp	r3, #18
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_ADC_ConfigChannel+0x238>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d123      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x21e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d003      	beq.n	800271e <HAL_ADC_ConfigChannel+0x1e6>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b11      	cmp	r3, #17
 800271c:	d11b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d111      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_ADC_ConfigChannel+0x23c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_ADC_ConfigChannel+0x240>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012300 	.word	0x40012300
 8002770:	40012000 	.word	0x40012000
 8002774:	20000000 	.word	0x20000000
 8002778:	431bde83 	.word	0x431bde83

0800277c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002784:	4b79      	ldr	r3, [pc, #484]	@ (800296c <ADC_Init+0x1f0>)
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	4a58      	ldr	r2, [pc, #352]	@ (8002970 <ADC_Init+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e00f      	b.n	800287a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002878:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0202 	bic.w	r2, r2, #2
 8002888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7e1b      	ldrb	r3, [r3, #24]
 8002894:	005a      	lsls	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	3b01      	subs	r3, #1
 80028d4:	035a      	lsls	r2, r3, #13
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e007      	b.n	80028f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	3b01      	subs	r3, #1
 800290c:	051a      	lsls	r2, r3, #20
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002932:	025a      	lsls	r2, r3, #9
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	029a      	lsls	r2, r3, #10
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012300 	.word	0x40012300
 8002970:	0f000001 	.word	0x0f000001

08002974 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13c      	bne.n	8002a08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d12b      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d127      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d119      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0220 	bic.w	r2, r2, #32
 80029da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff f95f 	bl	8001cc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a06:	e00e      	b.n	8002a26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fd85 	bl	8002524 <HAL_ADC_ErrorCallback>
}
 8002a1a:	e004      	b.n	8002a26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fd67 	bl	8002510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fd5a 	bl	8002524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e031      	b.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a98:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 021f 	bic.w	r2, r3, #31
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40012300 	.word	0x40012300

08002b04 <__NVIC_SetPriorityGrouping>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff f986 	bl	8002044 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff f96d 	bl	8002044 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa6f 	bl	8003310 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa26 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	223f      	movs	r2, #63	@ 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Start_IT+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e040      	b.n	8002f2c <HAL_DMA_Start_IT+0xa8>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12f      	bne.n	8002f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f9b8 	bl	8003248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	223f      	movs	r2, #63	@ 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0216 	orr.w	r2, r2, #22
 8002ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e005      	b.n	8002f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f40:	4b8e      	ldr	r3, [pc, #568]	@ (800317c <HAL_DMA_IRQHandler+0x248>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a8e      	ldr	r2, [pc, #568]	@ (8003180 <HAL_DMA_IRQHandler+0x24c>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2208      	movs	r2, #8
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2210      	movs	r2, #16
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d043      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2210      	movs	r2, #16
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d108      	bne.n	8003064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
 8003062:	e01f      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e016      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0208 	bic.w	r2, r2, #8
 8003092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2220      	movs	r2, #32
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 808f 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8087 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	2220      	movs	r2, #32
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d136      	bne.n	800314c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0216 	bic.w	r2, r2, #22
 80030ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_DMA_IRQHandler+0x1da>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0208 	bic.w	r2, r2, #8
 800311c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	223f      	movs	r2, #63	@ 0x3f
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07e      	beq.n	8003240 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
        }
        return;
 800314a:	e079      	b.n	8003240 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e02c      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000
 8003180:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e01e      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d032      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d022      	beq.n	800322e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2205      	movs	r2, #5
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	d307      	bcc.n	800321c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_DMA_IRQHandler+0x2cc>
 800321a:	e000      	b.n	800321e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800321c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e000      	b.n	8003242 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003240:	bf00      	nop
    }
  }
}
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d108      	bne.n	8003288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003286:	e007      	b.n	8003298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b10      	subs	r3, #16
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <DMA_CalcBaseAndBitshift+0x64>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032be:	4a13      	ldr	r2, [pc, #76]	@ (800330c <DMA_CalcBaseAndBitshift+0x68>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d909      	bls.n	80032e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e4:	e007      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	aaaaaaab 	.word	0xaaaaaaab
 800330c:	08007cbc 	.word	0x08007cbc

08003310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d856      	bhi.n	80033de <DMA_CheckFifoParam+0xce>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <DMA_CheckFifoParam+0x28>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800335b 	.word	0x0800335b
 8003340:	08003349 	.word	0x08003349
 8003344:	080033df 	.word	0x080033df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d046      	beq.n	80033e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e043      	b.n	80033e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003362:	d140      	bne.n	80033e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e03d      	b.n	80033e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003372:	d121      	bne.n	80033b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d837      	bhi.n	80033ea <DMA_CheckFifoParam+0xda>
 800337a:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <DMA_CheckFifoParam+0x70>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003397 	.word	0x08003397
 8003388:	08003391 	.word	0x08003391
 800338c:	080033a9 	.word	0x080033a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e030      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d025      	beq.n	80033ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e022      	b.n	80033ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b0:	d11f      	bne.n	80033f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033b6:	e01c      	b.n	80033f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d903      	bls.n	80033c6 <DMA_CheckFifoParam+0xb6>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d003      	beq.n	80033cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033c4:	e018      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ca:	e015      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e00b      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033de:	bf00      	nop
 80033e0:	e00a      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
 80033e4:	e008      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e006      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e004      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e002      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
    }
  } 
  
  return status; 
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e16b      	b.n	80036fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 815a 	bne.w	80036f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80b4 	beq.w	80036f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b60      	ldr	r3, [pc, #384]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a5f      	ldr	r2, [pc, #380]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b5d      	ldr	r3, [pc, #372]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_GPIO_Init+0x314>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <HAL_GPIO_Init+0x226>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a51      	ldr	r2, [pc, #324]	@ (8003720 <HAL_GPIO_Init+0x318>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d025      	beq.n	800362a <HAL_GPIO_Init+0x222>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a50      	ldr	r2, [pc, #320]	@ (8003724 <HAL_GPIO_Init+0x31c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_GPIO_Init+0x21e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003728 <HAL_GPIO_Init+0x320>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	@ (800372c <HAL_GPIO_Init+0x324>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <HAL_GPIO_Init+0x328>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_GPIO_Init+0x32c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	@ (8003738 <HAL_GPIO_Init+0x330>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x20a>
 800360e:	2307      	movs	r3, #7
 8003610:	e00e      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003612:	2308      	movs	r3, #8
 8003614:	e00c      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003616:	2306      	movs	r3, #6
 8003618:	e00a      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361a:	2305      	movs	r3, #5
 800361c:	e008      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361e:	2304      	movs	r3, #4
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003622:	2303      	movs	r3, #3
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362e:	2300      	movs	r3, #0
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f002 0203 	and.w	r2, r2, #3
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003640:	4935      	ldr	r1, [pc, #212]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_GPIO_Init+0x334>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a32      	ldr	r2, [pc, #200]	@ (800373c <HAL_GPIO_Init+0x334>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b30      	ldr	r3, [pc, #192]	@ (800373c <HAL_GPIO_Init+0x334>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a27      	ldr	r2, [pc, #156]	@ (800373c <HAL_GPIO_Init+0x334>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a2:	4b26      	ldr	r3, [pc, #152]	@ (800373c <HAL_GPIO_Init+0x334>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c6:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_GPIO_Init+0x334>)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_GPIO_Init+0x334>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f0:	4a12      	ldr	r2, [pc, #72]	@ (800373c <HAL_GPIO_Init+0x334>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	f67f ae90 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	@ 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40013800 	.word	0x40013800
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400
 8003724:	40020800 	.word	0x40020800
 8003728:	40020c00 	.word	0x40020c00
 800372c:	40021000 	.word	0x40021000
 8003730:	40021400 	.word	0x40021400
 8003734:	40021800 	.word	0x40021800
 8003738:	40021c00 	.word	0x40021c00
 800373c:	40013c00 	.word	0x40013c00

08003740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003750:	787b      	ldrb	r3, [r7, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800375c:	e003      	b.n	8003766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	041a      	lsls	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	619a      	str	r2, [r3, #24]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12b      	b.n	80039de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe f9f0 	bl	8001b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f001 f8ea 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	@ (80039e8 <HAL_I2C_Init+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	@ (80039ec <HAL_I2C_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x92>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	@ (80039f0 <HAL_I2C_Init+0x27c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	@ (80039f4 <HAL_I2C_Init+0x280>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_I2C_Init+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xd4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xe8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_I2C_Init+0x284>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	@ (80039e8 <HAL_I2C_Init+0x274>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x13c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x138>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x168>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x18e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x196>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7fe fb15 	bl	8002044 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 80d9 	bne.w	8003bdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2319      	movs	r3, #25
 8003a30:	2201      	movs	r2, #1
 8003a32:	496d      	ldr	r1, [pc, #436]	@ (8003be8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f971 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0cc      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2C_Mem_Write+0x56>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0c5      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d007      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	@ 0x21
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a4d      	ldr	r2, [pc, #308]	@ (8003bec <HAL_I2C_Mem_Write+0x1f0>)
 8003ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aba:	88f8      	ldrh	r0, [r7, #6]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4603      	mov	r3, r0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f890 	bl	8003bf0 <I2C_RequestMemoryWrite>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d052      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e081      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fa36 	bl	8003f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d107      	bne.n	8003b02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d11b      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x180>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1aa      	bne.n	8003ada <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa29 	bl	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d107      	bne.n	8003bac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003baa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e016      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	00100002 	.word	0x00100002
 8003bec:	ffff0000 	.word	0xffff0000

08003bf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f878 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c40:	d103      	bne.n	8003c4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e05f      	b.n	8003d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	492d      	ldr	r1, [pc, #180]	@ (8003d18 <I2C_RequestMemoryWrite+0x128>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f8d3 	bl	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e04c      	b.n	8003d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f95e 	bl	8003f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d107      	bne.n	8003cb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e02b      	b.n	8003d0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbc:	893b      	ldrh	r3, [r7, #8]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	e021      	b.n	8003d0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc8:	893b      	ldrh	r3, [r7, #8]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	6a39      	ldr	r1, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f938 	bl	8003f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e005      	b.n	8003d0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	00010002 	.word	0x00010002

08003d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	e048      	b.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d044      	beq.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fe f985 	bl	8002044 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d139      	bne.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d10d      	bne.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	e00c      	b.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d116      	bne.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e023      	b.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	e00c      	b.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d093      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e1e:	e071      	b.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2e:	d123      	bne.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e067      	b.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d041      	beq.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e80:	f7fe f8e0 	bl	8002044 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d136      	bne.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10c      	bne.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e00b      	b.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e021      	b.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10c      	bne.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e00b      	b.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f af6d 	bne.w	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f5c:	e034      	b.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f886 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d028      	beq.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fe f865 	bl	8002044 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11d      	bne.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d016      	beq.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e007      	b.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	d1c3      	bne.n	8003f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fec:	e034      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f83e 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e034      	b.n	8004068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d028      	beq.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe f81d 	bl	8002044 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11d      	bne.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d016      	beq.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d1c3      	bne.n	8003fee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004086:	d11b      	bne.n	80040c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e267      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ee:	4b88      	ldr	r3, [pc, #544]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b85      	ldr	r3, [pc, #532]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b82      	ldr	r3, [pc, #520]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b7e      	ldr	r3, [pc, #504]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e242      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b76      	ldr	r3, [pc, #472]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a75      	ldr	r2, [pc, #468]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b70      	ldr	r3, [pc, #448]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6f      	ldr	r2, [pc, #444]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6d      	ldr	r3, [pc, #436]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6c      	ldr	r2, [pc, #432]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b69      	ldr	r3, [pc, #420]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b66      	ldr	r3, [pc, #408]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd ff5c 	bl	8002044 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd ff58 	bl	8002044 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	@ 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e207      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd ff48 	bl	8002044 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd ff44 	bl	8002044 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f3      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b51      	ldr	r3, [pc, #324]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b44      	ldr	r3, [pc, #272]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c7      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4937      	ldr	r1, [pc, #220]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x244>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fefd 	bl	8002044 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd fef9 	bl	8002044 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a8      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2b      	ldr	r3, [pc, #172]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b28      	ldr	r3, [pc, #160]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4925      	ldr	r1, [pc, #148]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_RCC_OscConfig+0x244>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fedc 	bl	8002044 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fed8 	bl	8002044 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e187      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d036      	beq.n	8004328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <HAL_RCC_OscConfig+0x248>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd febc 	bl	8002044 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd feb8 	bl	8002044 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e167      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_RCC_OscConfig+0x240>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e01b      	b.n	8004328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCC_OscConfig+0x248>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fea5 	bl	8002044 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e00e      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd fea1 	bl	8002044 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d907      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e150      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	42470000 	.word	0x42470000
 8004318:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b88      	ldr	r3, [pc, #544]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ea      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8097 	beq.w	8004464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b81      	ldr	r3, [pc, #516]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b7d      	ldr	r3, [pc, #500]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	4a7c      	ldr	r2, [pc, #496]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	@ 0x40
 8004356:	4b7a      	ldr	r3, [pc, #488]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b77      	ldr	r3, [pc, #476]	@ (8004544 <HAL_RCC_OscConfig+0x474>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b74      	ldr	r3, [pc, #464]	@ (8004544 <HAL_RCC_OscConfig+0x474>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	@ (8004544 <HAL_RCC_OscConfig+0x474>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd fe61 	bl	8002044 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fe5d 	bl	8002044 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e10c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b6a      	ldr	r3, [pc, #424]	@ (8004544 <HAL_RCC_OscConfig+0x474>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x2ea>
 80043ac:	4b64      	ldr	r3, [pc, #400]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	4a63      	ldr	r2, [pc, #396]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b8:	e01c      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x30c>
 80043c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043dc:	4b58      	ldr	r3, [pc, #352]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	4a57      	ldr	r2, [pc, #348]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e8:	4b55      	ldr	r3, [pc, #340]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ec:	4a54      	ldr	r2, [pc, #336]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fe22 	bl	8002044 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fe1e 	bl	8002044 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0cb      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b49      	ldr	r3, [pc, #292]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCC_OscConfig+0x334>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004428:	f7fd fe0c 	bl	8002044 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd fe08 	bl	8002044 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b5      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004452:	7dfb      	ldrb	r3, [r7, #23]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	4a38      	ldr	r2, [pc, #224]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80a1 	beq.w	80045b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446e:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d05c      	beq.n	8004534 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d141      	bne.n	8004506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <HAL_RCC_OscConfig+0x478>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fddc 	bl	8002044 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fdd8 	bl	8002044 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e087      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	491b      	ldr	r1, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_RCC_OscConfig+0x478>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd fdb1 	bl	8002044 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd fdad 	bl	8002044 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e05c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x416>
 8004504:	e054      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_RCC_OscConfig+0x478>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fd9a 	bl	8002044 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fd96 	bl	8002044 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e045      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x470>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x444>
 8004532:	e03d      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e038      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d028      	beq.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d121      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d11a      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fcc8 	bl	8002044 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fcc4 	bl	8002044 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	@ (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fc28 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08007ca4 	.word	0x08007ca4
 8004784:	20000000 	.word	0x20000000
 8004788:	20000004 	.word	0x20000004

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b094      	sub	sp, #80	@ 0x50
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b79      	ldr	r3, [pc, #484]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80e1 	bhi.w	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0db      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b73      	ldr	r3, [pc, #460]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047c4:	e0db      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b73      	ldr	r3, [pc, #460]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x208>)
 80047c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ca:	e0d8      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b6f      	ldr	r3, [pc, #444]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b6d      	ldr	r3, [pc, #436]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b6a      	ldr	r3, [pc, #424]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	2200      	movs	r2, #0
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	0159      	lsls	r1, r3, #5
 800480c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004810:	0150      	lsls	r0, r2, #5
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4621      	mov	r1, r4
 8004818:	1a51      	subs	r1, r2, r1
 800481a:	6139      	str	r1, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483a:	4651      	mov	r1, sl
 800483c:	018a      	lsls	r2, r1, #6
 800483e:	4651      	mov	r1, sl
 8004840:	ebb2 0801 	subs.w	r8, r2, r1
 8004844:	4659      	mov	r1, fp
 8004846:	eb63 0901 	sbc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	462b      	mov	r3, r5
 800486c:	eb49 0303 	adc.w	r3, r9, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487e:	4629      	mov	r1, r5
 8004880:	024b      	lsls	r3, r1, #9
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004888:	4621      	mov	r1, r4
 800488a:	024a      	lsls	r2, r1, #9
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800489c:	f7fc f9d4 	bl	8000c48 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a8:	e058      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b38      	ldr	r3, [pc, #224]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	4611      	mov	r1, r2
 80048b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d6:	0150      	lsls	r0, r2, #5
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4641      	mov	r1, r8
 80048de:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004900:	eb63 050b 	sbc.w	r5, r3, fp
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	464b      	mov	r3, r9
 8004920:	eb45 0303 	adc.w	r3, r5, r3
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	f7fc f97a 	bl	8000c48 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800495c:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800496c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800496e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004980:	4618      	mov	r0, r3
 8004982:	3750      	adds	r7, #80	@ 0x50
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	00f42400 	.word	0x00f42400
 8004994:	007a1200 	.word	0x007a1200

08004998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b03      	ldr	r3, [pc, #12]	@ (80049ac <HAL_RCC_GetHCLKFreq+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000000 	.word	0x20000000

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b4:	f7ff fff0 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0a9b      	lsrs	r3, r3, #10
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40023800 	.word	0x40023800
 80049d4:	08007cb4 	.word	0x08007cb4

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e041      	b.n	8004a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fd f906 	bl	8001c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 f95e 	bl	8004cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e046      	b.n	8004b1e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	@ (8004b2c <HAL_TIM_Base_Start+0xb4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b30 <HAL_TIM_Base_Start+0xb8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <HAL_TIM_Base_Start+0xbc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_TIM_Base_Start+0xc0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <HAL_TIM_Base_Start+0xc4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <HAL_TIM_Base_Start+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x70>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	@ (8004b44 <HAL_TIM_Base_Start+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d111      	bne.n	8004b0c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d010      	beq.n	8004b1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	e007      	b.n	8004b1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40001800 	.word	0x40001800

08004b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIM_ConfigClockSource+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e0b4      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x186>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9c:	d03e      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0xd4>
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	f200 8087 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004baa:	f000 8086 	beq.w	8004cba <HAL_TIM_ConfigClockSource+0x172>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	d87f      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb4:	2b70      	cmp	r3, #112	@ 0x70
 8004bb6:	d01a      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0xa6>
 8004bb8:	2b70      	cmp	r3, #112	@ 0x70
 8004bba:	d87b      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bbc:	2b60      	cmp	r3, #96	@ 0x60
 8004bbe:	d050      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x11a>
 8004bc0:	2b60      	cmp	r3, #96	@ 0x60
 8004bc2:	d877      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b50      	cmp	r3, #80	@ 0x50
 8004bc6:	d03c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0xfa>
 8004bc8:	2b50      	cmp	r3, #80	@ 0x50
 8004bca:	d873      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d058      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x13a>
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d86f      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b30      	cmp	r3, #48	@ 0x30
 8004bd6:	d064      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd8:	2b30      	cmp	r3, #48	@ 0x30
 8004bda:	d86b      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d060      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d867      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d05c      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d05a      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	e062      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	f000 f991 	bl	8004f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	609a      	str	r2, [r3, #8]
      break;
 8004c1a:	e04f      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2c:	f000 f97a 	bl	8004f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c3e:	609a      	str	r2, [r3, #8]
      break;
 8004c40:	e03c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f000 f8ee 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2150      	movs	r1, #80	@ 0x50
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f947 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004c60:	e02c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 f90d 	bl	8004e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2160      	movs	r1, #96	@ 0x60
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f937 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004c80:	e01c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 f8ce 	bl	8004e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2140      	movs	r1, #64	@ 0x40
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f927 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e00c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f000 f91e 	bl	8004eee <TIM_ITRx_SetConfig>
      break;
 8004cb2:	e003      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a46      	ldr	r2, [pc, #280]	@ (8004e04 <TIM_Base_SetConfig+0x12c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf6:	d00f      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a43      	ldr	r2, [pc, #268]	@ (8004e08 <TIM_Base_SetConfig+0x130>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a42      	ldr	r2, [pc, #264]	@ (8004e0c <TIM_Base_SetConfig+0x134>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a41      	ldr	r2, [pc, #260]	@ (8004e10 <TIM_Base_SetConfig+0x138>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a40      	ldr	r2, [pc, #256]	@ (8004e14 <TIM_Base_SetConfig+0x13c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a35      	ldr	r2, [pc, #212]	@ (8004e04 <TIM_Base_SetConfig+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d38:	d027      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a32      	ldr	r2, [pc, #200]	@ (8004e08 <TIM_Base_SetConfig+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d023      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a31      	ldr	r2, [pc, #196]	@ (8004e0c <TIM_Base_SetConfig+0x134>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01f      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a30      	ldr	r2, [pc, #192]	@ (8004e10 <TIM_Base_SetConfig+0x138>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2f      	ldr	r2, [pc, #188]	@ (8004e14 <TIM_Base_SetConfig+0x13c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d017      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e18 <TIM_Base_SetConfig+0x140>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	@ (8004e1c <TIM_Base_SetConfig+0x144>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00f      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e20 <TIM_Base_SetConfig+0x148>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2b      	ldr	r2, [pc, #172]	@ (8004e24 <TIM_Base_SetConfig+0x14c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d007      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e28 <TIM_Base_SetConfig+0x150>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a29      	ldr	r2, [pc, #164]	@ (8004e2c <TIM_Base_SetConfig+0x154>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d108      	bne.n	8004d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a10      	ldr	r2, [pc, #64]	@ (8004e04 <TIM_Base_SetConfig+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_Base_SetConfig+0xf8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <TIM_Base_SetConfig+0x13c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d103      	bne.n	8004dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d105      	bne.n	8004df6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]
  }
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40000c00 	.word	0x40000c00
 8004e14:	40010400 	.word	0x40010400
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800
 8004e24:	40001800 	.word	0x40001800
 8004e28:	40001c00 	.word	0x40001c00
 8004e2c:	40002000 	.word	0x40002000

08004e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 030a 	bic.w	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f023 0210 	bic.w	r2, r3, #16
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 0307 	orr.w	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e05a      	b.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a21      	ldr	r2, [pc, #132]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc8:	d01d      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10c      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	4313      	orrs	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40010400 	.word	0x40010400
 8005054:	40014000 	.word	0x40014000
 8005058:	40001800 	.word	0x40001800

0800505c <__cvt>:
 800505c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	ec57 6b10 	vmov	r6, r7, d0
 8005064:	2f00      	cmp	r7, #0
 8005066:	460c      	mov	r4, r1
 8005068:	4619      	mov	r1, r3
 800506a:	463b      	mov	r3, r7
 800506c:	bfbb      	ittet	lt
 800506e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005072:	461f      	movlt	r7, r3
 8005074:	2300      	movge	r3, #0
 8005076:	232d      	movlt	r3, #45	@ 0x2d
 8005078:	700b      	strb	r3, [r1, #0]
 800507a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800507c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005080:	4691      	mov	r9, r2
 8005082:	f023 0820 	bic.w	r8, r3, #32
 8005086:	bfbc      	itt	lt
 8005088:	4632      	movlt	r2, r6
 800508a:	4616      	movlt	r6, r2
 800508c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005090:	d005      	beq.n	800509e <__cvt+0x42>
 8005092:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005096:	d100      	bne.n	800509a <__cvt+0x3e>
 8005098:	3401      	adds	r4, #1
 800509a:	2102      	movs	r1, #2
 800509c:	e000      	b.n	80050a0 <__cvt+0x44>
 800509e:	2103      	movs	r1, #3
 80050a0:	ab03      	add	r3, sp, #12
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	ab02      	add	r3, sp, #8
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	ec47 6b10 	vmov	d0, r6, r7
 80050ac:	4653      	mov	r3, sl
 80050ae:	4622      	mov	r2, r4
 80050b0:	f000 fef6 	bl	8005ea0 <_dtoa_r>
 80050b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050b8:	4605      	mov	r5, r0
 80050ba:	d119      	bne.n	80050f0 <__cvt+0x94>
 80050bc:	f019 0f01 	tst.w	r9, #1
 80050c0:	d00e      	beq.n	80050e0 <__cvt+0x84>
 80050c2:	eb00 0904 	add.w	r9, r0, r4
 80050c6:	2200      	movs	r2, #0
 80050c8:	2300      	movs	r3, #0
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	f7fb fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80050d2:	b108      	cbz	r0, 80050d8 <__cvt+0x7c>
 80050d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80050d8:	2230      	movs	r2, #48	@ 0x30
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	454b      	cmp	r3, r9
 80050de:	d31e      	bcc.n	800511e <__cvt+0xc2>
 80050e0:	9b03      	ldr	r3, [sp, #12]
 80050e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050e4:	1b5b      	subs	r3, r3, r5
 80050e6:	4628      	mov	r0, r5
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	b004      	add	sp, #16
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050f4:	eb00 0904 	add.w	r9, r0, r4
 80050f8:	d1e5      	bne.n	80050c6 <__cvt+0x6a>
 80050fa:	7803      	ldrb	r3, [r0, #0]
 80050fc:	2b30      	cmp	r3, #48	@ 0x30
 80050fe:	d10a      	bne.n	8005116 <__cvt+0xba>
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	4630      	mov	r0, r6
 8005106:	4639      	mov	r1, r7
 8005108:	f7fb fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800510c:	b918      	cbnz	r0, 8005116 <__cvt+0xba>
 800510e:	f1c4 0401 	rsb	r4, r4, #1
 8005112:	f8ca 4000 	str.w	r4, [sl]
 8005116:	f8da 3000 	ldr.w	r3, [sl]
 800511a:	4499      	add	r9, r3
 800511c:	e7d3      	b.n	80050c6 <__cvt+0x6a>
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	9103      	str	r1, [sp, #12]
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e7d9      	b.n	80050da <__cvt+0x7e>

08005126 <__exponent>:
 8005126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005128:	2900      	cmp	r1, #0
 800512a:	bfba      	itte	lt
 800512c:	4249      	neglt	r1, r1
 800512e:	232d      	movlt	r3, #45	@ 0x2d
 8005130:	232b      	movge	r3, #43	@ 0x2b
 8005132:	2909      	cmp	r1, #9
 8005134:	7002      	strb	r2, [r0, #0]
 8005136:	7043      	strb	r3, [r0, #1]
 8005138:	dd29      	ble.n	800518e <__exponent+0x68>
 800513a:	f10d 0307 	add.w	r3, sp, #7
 800513e:	461d      	mov	r5, r3
 8005140:	270a      	movs	r7, #10
 8005142:	461a      	mov	r2, r3
 8005144:	fbb1 f6f7 	udiv	r6, r1, r7
 8005148:	fb07 1416 	mls	r4, r7, r6, r1
 800514c:	3430      	adds	r4, #48	@ 0x30
 800514e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005152:	460c      	mov	r4, r1
 8005154:	2c63      	cmp	r4, #99	@ 0x63
 8005156:	f103 33ff 	add.w	r3, r3, #4294967295
 800515a:	4631      	mov	r1, r6
 800515c:	dcf1      	bgt.n	8005142 <__exponent+0x1c>
 800515e:	3130      	adds	r1, #48	@ 0x30
 8005160:	1e94      	subs	r4, r2, #2
 8005162:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005166:	1c41      	adds	r1, r0, #1
 8005168:	4623      	mov	r3, r4
 800516a:	42ab      	cmp	r3, r5
 800516c:	d30a      	bcc.n	8005184 <__exponent+0x5e>
 800516e:	f10d 0309 	add.w	r3, sp, #9
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	42ac      	cmp	r4, r5
 8005176:	bf88      	it	hi
 8005178:	2300      	movhi	r3, #0
 800517a:	3302      	adds	r3, #2
 800517c:	4403      	add	r3, r0
 800517e:	1a18      	subs	r0, r3, r0
 8005180:	b003      	add	sp, #12
 8005182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005184:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005188:	f801 6f01 	strb.w	r6, [r1, #1]!
 800518c:	e7ed      	b.n	800516a <__exponent+0x44>
 800518e:	2330      	movs	r3, #48	@ 0x30
 8005190:	3130      	adds	r1, #48	@ 0x30
 8005192:	7083      	strb	r3, [r0, #2]
 8005194:	70c1      	strb	r1, [r0, #3]
 8005196:	1d03      	adds	r3, r0, #4
 8005198:	e7f1      	b.n	800517e <__exponent+0x58>
	...

0800519c <_printf_float>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b08d      	sub	sp, #52	@ 0x34
 80051a2:	460c      	mov	r4, r1
 80051a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051a8:	4616      	mov	r6, r2
 80051aa:	461f      	mov	r7, r3
 80051ac:	4605      	mov	r5, r0
 80051ae:	f000 fd69 	bl	8005c84 <_localeconv_r>
 80051b2:	6803      	ldr	r3, [r0, #0]
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb f85a 	bl	8000270 <strlen>
 80051bc:	2300      	movs	r3, #0
 80051be:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	9005      	str	r0, [sp, #20]
 80051c6:	3307      	adds	r3, #7
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051d4:	f8d4 b000 	ldr.w	fp, [r4]
 80051d8:	f8c8 2000 	str.w	r2, [r8]
 80051dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051e4:	9307      	str	r3, [sp, #28]
 80051e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80051ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005464 <_printf_float+0x2c8>)
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	f7fb fc98 	bl	8000b2c <__aeabi_dcmpun>
 80051fc:	bb70      	cbnz	r0, 800525c <_printf_float+0xc0>
 80051fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005202:	4b98      	ldr	r3, [pc, #608]	@ (8005464 <_printf_float+0x2c8>)
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	f7fb fc72 	bl	8000af0 <__aeabi_dcmple>
 800520c:	bb30      	cbnz	r0, 800525c <_printf_float+0xc0>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb fc61 	bl	8000adc <__aeabi_dcmplt>
 800521a:	b110      	cbz	r0, 8005222 <_printf_float+0x86>
 800521c:	232d      	movs	r3, #45	@ 0x2d
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005222:	4a91      	ldr	r2, [pc, #580]	@ (8005468 <_printf_float+0x2cc>)
 8005224:	4b91      	ldr	r3, [pc, #580]	@ (800546c <_printf_float+0x2d0>)
 8005226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800522a:	bf94      	ite	ls
 800522c:	4690      	movls	r8, r2
 800522e:	4698      	movhi	r8, r3
 8005230:	2303      	movs	r3, #3
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	f02b 0304 	bic.w	r3, fp, #4
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	f04f 0900 	mov.w	r9, #0
 800523e:	9700      	str	r7, [sp, #0]
 8005240:	4633      	mov	r3, r6
 8005242:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f9d2 	bl	80055f0 <_printf_common>
 800524c:	3001      	adds	r0, #1
 800524e:	f040 808d 	bne.w	800536c <_printf_float+0x1d0>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	b00d      	add	sp, #52	@ 0x34
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fb fc62 	bl	8000b2c <__aeabi_dcmpun>
 8005268:	b140      	cbz	r0, 800527c <_printf_float+0xe0>
 800526a:	464b      	mov	r3, r9
 800526c:	2b00      	cmp	r3, #0
 800526e:	bfbc      	itt	lt
 8005270:	232d      	movlt	r3, #45	@ 0x2d
 8005272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005276:	4a7e      	ldr	r2, [pc, #504]	@ (8005470 <_printf_float+0x2d4>)
 8005278:	4b7e      	ldr	r3, [pc, #504]	@ (8005474 <_printf_float+0x2d8>)
 800527a:	e7d4      	b.n	8005226 <_printf_float+0x8a>
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005282:	9206      	str	r2, [sp, #24]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	d13b      	bne.n	8005300 <_printf_float+0x164>
 8005288:	2306      	movs	r3, #6
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005290:	2300      	movs	r3, #0
 8005292:	6022      	str	r2, [r4, #0]
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	ab0a      	add	r3, sp, #40	@ 0x28
 8005298:	e9cd a301 	strd	sl, r3, [sp, #4]
 800529c:	ab09      	add	r3, sp, #36	@ 0x24
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	6861      	ldr	r1, [r4, #4]
 80052a2:	ec49 8b10 	vmov	d0, r8, r9
 80052a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7ff fed6 	bl	800505c <__cvt>
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052b4:	2b47      	cmp	r3, #71	@ 0x47
 80052b6:	4680      	mov	r8, r0
 80052b8:	d129      	bne.n	800530e <_printf_float+0x172>
 80052ba:	1cc8      	adds	r0, r1, #3
 80052bc:	db02      	blt.n	80052c4 <_printf_float+0x128>
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	4299      	cmp	r1, r3
 80052c2:	dd41      	ble.n	8005348 <_printf_float+0x1ac>
 80052c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80052c8:	fa5f fa8a 	uxtb.w	sl, sl
 80052cc:	3901      	subs	r1, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80052d6:	f7ff ff26 	bl	8005126 <__exponent>
 80052da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052dc:	1813      	adds	r3, r2, r0
 80052de:	2a01      	cmp	r2, #1
 80052e0:	4681      	mov	r9, r0
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	dc02      	bgt.n	80052ec <_printf_float+0x150>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	07d2      	lsls	r2, r2, #31
 80052ea:	d501      	bpl.n	80052f0 <_printf_float+0x154>
 80052ec:	3301      	adds	r3, #1
 80052ee:	6123      	str	r3, [r4, #16]
 80052f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0a2      	beq.n	800523e <_printf_float+0xa2>
 80052f8:	232d      	movs	r3, #45	@ 0x2d
 80052fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052fe:	e79e      	b.n	800523e <_printf_float+0xa2>
 8005300:	9a06      	ldr	r2, [sp, #24]
 8005302:	2a47      	cmp	r2, #71	@ 0x47
 8005304:	d1c2      	bne.n	800528c <_printf_float+0xf0>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1c0      	bne.n	800528c <_printf_float+0xf0>
 800530a:	2301      	movs	r3, #1
 800530c:	e7bd      	b.n	800528a <_printf_float+0xee>
 800530e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005312:	d9db      	bls.n	80052cc <_printf_float+0x130>
 8005314:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005318:	d118      	bne.n	800534c <_printf_float+0x1b0>
 800531a:	2900      	cmp	r1, #0
 800531c:	6863      	ldr	r3, [r4, #4]
 800531e:	dd0b      	ble.n	8005338 <_printf_float+0x19c>
 8005320:	6121      	str	r1, [r4, #16]
 8005322:	b913      	cbnz	r3, 800532a <_printf_float+0x18e>
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	07d0      	lsls	r0, r2, #31
 8005328:	d502      	bpl.n	8005330 <_printf_float+0x194>
 800532a:	3301      	adds	r3, #1
 800532c:	440b      	add	r3, r1
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005332:	f04f 0900 	mov.w	r9, #0
 8005336:	e7db      	b.n	80052f0 <_printf_float+0x154>
 8005338:	b913      	cbnz	r3, 8005340 <_printf_float+0x1a4>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	07d2      	lsls	r2, r2, #31
 800533e:	d501      	bpl.n	8005344 <_printf_float+0x1a8>
 8005340:	3302      	adds	r3, #2
 8005342:	e7f4      	b.n	800532e <_printf_float+0x192>
 8005344:	2301      	movs	r3, #1
 8005346:	e7f2      	b.n	800532e <_printf_float+0x192>
 8005348:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800534c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800534e:	4299      	cmp	r1, r3
 8005350:	db05      	blt.n	800535e <_printf_float+0x1c2>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	6121      	str	r1, [r4, #16]
 8005356:	07d8      	lsls	r0, r3, #31
 8005358:	d5ea      	bpl.n	8005330 <_printf_float+0x194>
 800535a:	1c4b      	adds	r3, r1, #1
 800535c:	e7e7      	b.n	800532e <_printf_float+0x192>
 800535e:	2900      	cmp	r1, #0
 8005360:	bfd4      	ite	le
 8005362:	f1c1 0202 	rsble	r2, r1, #2
 8005366:	2201      	movgt	r2, #1
 8005368:	4413      	add	r3, r2
 800536a:	e7e0      	b.n	800532e <_printf_float+0x192>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	055a      	lsls	r2, r3, #21
 8005370:	d407      	bmi.n	8005382 <_printf_float+0x1e6>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	4642      	mov	r2, r8
 8005376:	4631      	mov	r1, r6
 8005378:	4628      	mov	r0, r5
 800537a:	47b8      	blx	r7
 800537c:	3001      	adds	r0, #1
 800537e:	d12b      	bne.n	80053d8 <_printf_float+0x23c>
 8005380:	e767      	b.n	8005252 <_printf_float+0xb6>
 8005382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005386:	f240 80dd 	bls.w	8005544 <_printf_float+0x3a8>
 800538a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800538e:	2200      	movs	r2, #0
 8005390:	2300      	movs	r3, #0
 8005392:	f7fb fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8005396:	2800      	cmp	r0, #0
 8005398:	d033      	beq.n	8005402 <_printf_float+0x266>
 800539a:	4a37      	ldr	r2, [pc, #220]	@ (8005478 <_printf_float+0x2dc>)
 800539c:	2301      	movs	r3, #1
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f af54 	beq.w	8005252 <_printf_float+0xb6>
 80053aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053ae:	4543      	cmp	r3, r8
 80053b0:	db02      	blt.n	80053b8 <_printf_float+0x21c>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	07d8      	lsls	r0, r3, #31
 80053b6:	d50f      	bpl.n	80053d8 <_printf_float+0x23c>
 80053b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f af45 	beq.w	8005252 <_printf_float+0xb6>
 80053c8:	f04f 0900 	mov.w	r9, #0
 80053cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80053d0:	f104 0a1a 	add.w	sl, r4, #26
 80053d4:	45c8      	cmp	r8, r9
 80053d6:	dc09      	bgt.n	80053ec <_printf_float+0x250>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	079b      	lsls	r3, r3, #30
 80053dc:	f100 8103 	bmi.w	80055e6 <_printf_float+0x44a>
 80053e0:	68e0      	ldr	r0, [r4, #12]
 80053e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053e4:	4298      	cmp	r0, r3
 80053e6:	bfb8      	it	lt
 80053e8:	4618      	movlt	r0, r3
 80053ea:	e734      	b.n	8005256 <_printf_float+0xba>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4652      	mov	r2, sl
 80053f0:	4631      	mov	r1, r6
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	f43f af2b 	beq.w	8005252 <_printf_float+0xb6>
 80053fc:	f109 0901 	add.w	r9, r9, #1
 8005400:	e7e8      	b.n	80053d4 <_printf_float+0x238>
 8005402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	dc39      	bgt.n	800547c <_printf_float+0x2e0>
 8005408:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <_printf_float+0x2dc>)
 800540a:	2301      	movs	r3, #1
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f af1d 	beq.w	8005252 <_printf_float+0xb6>
 8005418:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800541c:	ea59 0303 	orrs.w	r3, r9, r3
 8005420:	d102      	bne.n	8005428 <_printf_float+0x28c>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	07d9      	lsls	r1, r3, #31
 8005426:	d5d7      	bpl.n	80053d8 <_printf_float+0x23c>
 8005428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af0d 	beq.w	8005252 <_printf_float+0xb6>
 8005438:	f04f 0a00 	mov.w	sl, #0
 800543c:	f104 0b1a 	add.w	fp, r4, #26
 8005440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005442:	425b      	negs	r3, r3
 8005444:	4553      	cmp	r3, sl
 8005446:	dc01      	bgt.n	800544c <_printf_float+0x2b0>
 8005448:	464b      	mov	r3, r9
 800544a:	e793      	b.n	8005374 <_printf_float+0x1d8>
 800544c:	2301      	movs	r3, #1
 800544e:	465a      	mov	r2, fp
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	f43f aefb 	beq.w	8005252 <_printf_float+0xb6>
 800545c:	f10a 0a01 	add.w	sl, sl, #1
 8005460:	e7ee      	b.n	8005440 <_printf_float+0x2a4>
 8005462:	bf00      	nop
 8005464:	7fefffff 	.word	0x7fefffff
 8005468:	08007cc4 	.word	0x08007cc4
 800546c:	08007cc8 	.word	0x08007cc8
 8005470:	08007ccc 	.word	0x08007ccc
 8005474:	08007cd0 	.word	0x08007cd0
 8005478:	08007cd4 	.word	0x08007cd4
 800547c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800547e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005482:	4553      	cmp	r3, sl
 8005484:	bfa8      	it	ge
 8005486:	4653      	movge	r3, sl
 8005488:	2b00      	cmp	r3, #0
 800548a:	4699      	mov	r9, r3
 800548c:	dc36      	bgt.n	80054fc <_printf_float+0x360>
 800548e:	f04f 0b00 	mov.w	fp, #0
 8005492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005496:	f104 021a 	add.w	r2, r4, #26
 800549a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800549c:	9306      	str	r3, [sp, #24]
 800549e:	eba3 0309 	sub.w	r3, r3, r9
 80054a2:	455b      	cmp	r3, fp
 80054a4:	dc31      	bgt.n	800550a <_printf_float+0x36e>
 80054a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a8:	459a      	cmp	sl, r3
 80054aa:	dc3a      	bgt.n	8005522 <_printf_float+0x386>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	07da      	lsls	r2, r3, #31
 80054b0:	d437      	bmi.n	8005522 <_printf_float+0x386>
 80054b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b4:	ebaa 0903 	sub.w	r9, sl, r3
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	ebaa 0303 	sub.w	r3, sl, r3
 80054be:	4599      	cmp	r9, r3
 80054c0:	bfa8      	it	ge
 80054c2:	4699      	movge	r9, r3
 80054c4:	f1b9 0f00 	cmp.w	r9, #0
 80054c8:	dc33      	bgt.n	8005532 <_printf_float+0x396>
 80054ca:	f04f 0800 	mov.w	r8, #0
 80054ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d2:	f104 0b1a 	add.w	fp, r4, #26
 80054d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054d8:	ebaa 0303 	sub.w	r3, sl, r3
 80054dc:	eba3 0309 	sub.w	r3, r3, r9
 80054e0:	4543      	cmp	r3, r8
 80054e2:	f77f af79 	ble.w	80053d8 <_printf_float+0x23c>
 80054e6:	2301      	movs	r3, #1
 80054e8:	465a      	mov	r2, fp
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f aeae 	beq.w	8005252 <_printf_float+0xb6>
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	e7ec      	b.n	80054d6 <_printf_float+0x33a>
 80054fc:	4642      	mov	r2, r8
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	d1c2      	bne.n	800548e <_printf_float+0x2f2>
 8005508:	e6a3      	b.n	8005252 <_printf_float+0xb6>
 800550a:	2301      	movs	r3, #1
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	9206      	str	r2, [sp, #24]
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f ae9c 	beq.w	8005252 <_printf_float+0xb6>
 800551a:	9a06      	ldr	r2, [sp, #24]
 800551c:	f10b 0b01 	add.w	fp, fp, #1
 8005520:	e7bb      	b.n	800549a <_printf_float+0x2fe>
 8005522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	d1c0      	bne.n	80054b2 <_printf_float+0x316>
 8005530:	e68f      	b.n	8005252 <_printf_float+0xb6>
 8005532:	9a06      	ldr	r2, [sp, #24]
 8005534:	464b      	mov	r3, r9
 8005536:	4442      	add	r2, r8
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	d1c3      	bne.n	80054ca <_printf_float+0x32e>
 8005542:	e686      	b.n	8005252 <_printf_float+0xb6>
 8005544:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005548:	f1ba 0f01 	cmp.w	sl, #1
 800554c:	dc01      	bgt.n	8005552 <_printf_float+0x3b6>
 800554e:	07db      	lsls	r3, r3, #31
 8005550:	d536      	bpl.n	80055c0 <_printf_float+0x424>
 8005552:	2301      	movs	r3, #1
 8005554:	4642      	mov	r2, r8
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae78 	beq.w	8005252 <_printf_float+0xb6>
 8005562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	f43f ae70 	beq.w	8005252 <_printf_float+0xb6>
 8005572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800557e:	f7fb faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005582:	b9c0      	cbnz	r0, 80055b6 <_printf_float+0x41a>
 8005584:	4653      	mov	r3, sl
 8005586:	f108 0201 	add.w	r2, r8, #1
 800558a:	4631      	mov	r1, r6
 800558c:	4628      	mov	r0, r5
 800558e:	47b8      	blx	r7
 8005590:	3001      	adds	r0, #1
 8005592:	d10c      	bne.n	80055ae <_printf_float+0x412>
 8005594:	e65d      	b.n	8005252 <_printf_float+0xb6>
 8005596:	2301      	movs	r3, #1
 8005598:	465a      	mov	r2, fp
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	f43f ae56 	beq.w	8005252 <_printf_float+0xb6>
 80055a6:	f108 0801 	add.w	r8, r8, #1
 80055aa:	45d0      	cmp	r8, sl
 80055ac:	dbf3      	blt.n	8005596 <_printf_float+0x3fa>
 80055ae:	464b      	mov	r3, r9
 80055b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055b4:	e6df      	b.n	8005376 <_printf_float+0x1da>
 80055b6:	f04f 0800 	mov.w	r8, #0
 80055ba:	f104 0b1a 	add.w	fp, r4, #26
 80055be:	e7f4      	b.n	80055aa <_printf_float+0x40e>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4642      	mov	r2, r8
 80055c4:	e7e1      	b.n	800558a <_printf_float+0x3ee>
 80055c6:	2301      	movs	r3, #1
 80055c8:	464a      	mov	r2, r9
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f ae3e 	beq.w	8005252 <_printf_float+0xb6>
 80055d6:	f108 0801 	add.w	r8, r8, #1
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055de:	1a5b      	subs	r3, r3, r1
 80055e0:	4543      	cmp	r3, r8
 80055e2:	dcf0      	bgt.n	80055c6 <_printf_float+0x42a>
 80055e4:	e6fc      	b.n	80053e0 <_printf_float+0x244>
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	f104 0919 	add.w	r9, r4, #25
 80055ee:	e7f4      	b.n	80055da <_printf_float+0x43e>

080055f0 <_printf_common>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	4698      	mov	r8, r3
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005600:	4293      	cmp	r3, r2
 8005602:	bfb8      	it	lt
 8005604:	4613      	movlt	r3, r2
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800560c:	4607      	mov	r7, r0
 800560e:	460c      	mov	r4, r1
 8005610:	b10a      	cbz	r2, 8005616 <_printf_common+0x26>
 8005612:	3301      	adds	r3, #1
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0699      	lsls	r1, r3, #26
 800561a:	bf42      	ittt	mi
 800561c:	6833      	ldrmi	r3, [r6, #0]
 800561e:	3302      	addmi	r3, #2
 8005620:	6033      	strmi	r3, [r6, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	f015 0506 	ands.w	r5, r5, #6
 8005628:	d106      	bne.n	8005638 <_printf_common+0x48>
 800562a:	f104 0a19 	add.w	sl, r4, #25
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	6832      	ldr	r2, [r6, #0]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc26      	bgt.n	8005686 <_printf_common+0x96>
 8005638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	3b00      	subs	r3, #0
 8005640:	bf18      	it	ne
 8005642:	2301      	movne	r3, #1
 8005644:	0692      	lsls	r2, r2, #26
 8005646:	d42b      	bmi.n	80056a0 <_printf_common+0xb0>
 8005648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800564c:	4641      	mov	r1, r8
 800564e:	4638      	mov	r0, r7
 8005650:	47c8      	blx	r9
 8005652:	3001      	adds	r0, #1
 8005654:	d01e      	beq.n	8005694 <_printf_common+0xa4>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	6922      	ldr	r2, [r4, #16]
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf02      	ittt	eq
 8005662:	68e5      	ldreq	r5, [r4, #12]
 8005664:	6833      	ldreq	r3, [r6, #0]
 8005666:	1aed      	subeq	r5, r5, r3
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	bf0c      	ite	eq
 800566c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005670:	2500      	movne	r5, #0
 8005672:	4293      	cmp	r3, r2
 8005674:	bfc4      	itt	gt
 8005676:	1a9b      	subgt	r3, r3, r2
 8005678:	18ed      	addgt	r5, r5, r3
 800567a:	2600      	movs	r6, #0
 800567c:	341a      	adds	r4, #26
 800567e:	42b5      	cmp	r5, r6
 8005680:	d11a      	bne.n	80056b8 <_printf_common+0xc8>
 8005682:	2000      	movs	r0, #0
 8005684:	e008      	b.n	8005698 <_printf_common+0xa8>
 8005686:	2301      	movs	r3, #1
 8005688:	4652      	mov	r2, sl
 800568a:	4641      	mov	r1, r8
 800568c:	4638      	mov	r0, r7
 800568e:	47c8      	blx	r9
 8005690:	3001      	adds	r0, #1
 8005692:	d103      	bne.n	800569c <_printf_common+0xac>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	3501      	adds	r5, #1
 800569e:	e7c6      	b.n	800562e <_printf_common+0x3e>
 80056a0:	18e1      	adds	r1, r4, r3
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	2030      	movs	r0, #48	@ 0x30
 80056a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056aa:	4422      	add	r2, r4
 80056ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056b4:	3302      	adds	r3, #2
 80056b6:	e7c7      	b.n	8005648 <_printf_common+0x58>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4622      	mov	r2, r4
 80056bc:	4641      	mov	r1, r8
 80056be:	4638      	mov	r0, r7
 80056c0:	47c8      	blx	r9
 80056c2:	3001      	adds	r0, #1
 80056c4:	d0e6      	beq.n	8005694 <_printf_common+0xa4>
 80056c6:	3601      	adds	r6, #1
 80056c8:	e7d9      	b.n	800567e <_printf_common+0x8e>
	...

080056cc <_printf_i>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	7e0f      	ldrb	r7, [r1, #24]
 80056d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056d4:	2f78      	cmp	r7, #120	@ 0x78
 80056d6:	4691      	mov	r9, r2
 80056d8:	4680      	mov	r8, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	469a      	mov	sl, r3
 80056de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056e2:	d807      	bhi.n	80056f4 <_printf_i+0x28>
 80056e4:	2f62      	cmp	r7, #98	@ 0x62
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x32>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	f000 80d2 	beq.w	8005892 <_printf_i+0x1c6>
 80056ee:	2f58      	cmp	r7, #88	@ 0x58
 80056f0:	f000 80b9 	beq.w	8005866 <_printf_i+0x19a>
 80056f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056fc:	e03a      	b.n	8005774 <_printf_i+0xa8>
 80056fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005702:	2b15      	cmp	r3, #21
 8005704:	d8f6      	bhi.n	80056f4 <_printf_i+0x28>
 8005706:	a101      	add	r1, pc, #4	@ (adr r1, 800570c <_printf_i+0x40>)
 8005708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800570c:	08005765 	.word	0x08005765
 8005710:	08005779 	.word	0x08005779
 8005714:	080056f5 	.word	0x080056f5
 8005718:	080056f5 	.word	0x080056f5
 800571c:	080056f5 	.word	0x080056f5
 8005720:	080056f5 	.word	0x080056f5
 8005724:	08005779 	.word	0x08005779
 8005728:	080056f5 	.word	0x080056f5
 800572c:	080056f5 	.word	0x080056f5
 8005730:	080056f5 	.word	0x080056f5
 8005734:	080056f5 	.word	0x080056f5
 8005738:	08005879 	.word	0x08005879
 800573c:	080057a3 	.word	0x080057a3
 8005740:	08005833 	.word	0x08005833
 8005744:	080056f5 	.word	0x080056f5
 8005748:	080056f5 	.word	0x080056f5
 800574c:	0800589b 	.word	0x0800589b
 8005750:	080056f5 	.word	0x080056f5
 8005754:	080057a3 	.word	0x080057a3
 8005758:	080056f5 	.word	0x080056f5
 800575c:	080056f5 	.word	0x080056f5
 8005760:	0800583b 	.word	0x0800583b
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005774:	2301      	movs	r3, #1
 8005776:	e09d      	b.n	80058b4 <_printf_i+0x1e8>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	6031      	str	r1, [r6, #0]
 8005780:	0606      	lsls	r6, r0, #24
 8005782:	d501      	bpl.n	8005788 <_printf_i+0xbc>
 8005784:	681d      	ldr	r5, [r3, #0]
 8005786:	e003      	b.n	8005790 <_printf_i+0xc4>
 8005788:	0645      	lsls	r5, r0, #25
 800578a:	d5fb      	bpl.n	8005784 <_printf_i+0xb8>
 800578c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005790:	2d00      	cmp	r5, #0
 8005792:	da03      	bge.n	800579c <_printf_i+0xd0>
 8005794:	232d      	movs	r3, #45	@ 0x2d
 8005796:	426d      	negs	r5, r5
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579c:	4859      	ldr	r0, [pc, #356]	@ (8005904 <_printf_i+0x238>)
 800579e:	230a      	movs	r3, #10
 80057a0:	e011      	b.n	80057c6 <_printf_i+0xfa>
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	0608      	lsls	r0, r1, #24
 80057a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057ac:	d402      	bmi.n	80057b4 <_printf_i+0xe8>
 80057ae:	0649      	lsls	r1, r1, #25
 80057b0:	bf48      	it	mi
 80057b2:	b2ad      	uxthmi	r5, r5
 80057b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057b6:	4853      	ldr	r0, [pc, #332]	@ (8005904 <_printf_i+0x238>)
 80057b8:	6033      	str	r3, [r6, #0]
 80057ba:	bf14      	ite	ne
 80057bc:	230a      	movne	r3, #10
 80057be:	2308      	moveq	r3, #8
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057c6:	6866      	ldr	r6, [r4, #4]
 80057c8:	60a6      	str	r6, [r4, #8]
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	bfa2      	ittt	ge
 80057ce:	6821      	ldrge	r1, [r4, #0]
 80057d0:	f021 0104 	bicge.w	r1, r1, #4
 80057d4:	6021      	strge	r1, [r4, #0]
 80057d6:	b90d      	cbnz	r5, 80057dc <_printf_i+0x110>
 80057d8:	2e00      	cmp	r6, #0
 80057da:	d04b      	beq.n	8005874 <_printf_i+0x1a8>
 80057dc:	4616      	mov	r6, r2
 80057de:	fbb5 f1f3 	udiv	r1, r5, r3
 80057e2:	fb03 5711 	mls	r7, r3, r1, r5
 80057e6:	5dc7      	ldrb	r7, [r0, r7]
 80057e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ec:	462f      	mov	r7, r5
 80057ee:	42bb      	cmp	r3, r7
 80057f0:	460d      	mov	r5, r1
 80057f2:	d9f4      	bls.n	80057de <_printf_i+0x112>
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d10b      	bne.n	8005810 <_printf_i+0x144>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07df      	lsls	r7, r3, #31
 80057fc:	d508      	bpl.n	8005810 <_printf_i+0x144>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6861      	ldr	r1, [r4, #4]
 8005802:	4299      	cmp	r1, r3
 8005804:	bfde      	ittt	le
 8005806:	2330      	movle	r3, #48	@ 0x30
 8005808:	f806 3c01 	strble.w	r3, [r6, #-1]
 800580c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005810:	1b92      	subs	r2, r2, r6
 8005812:	6122      	str	r2, [r4, #16]
 8005814:	f8cd a000 	str.w	sl, [sp]
 8005818:	464b      	mov	r3, r9
 800581a:	aa03      	add	r2, sp, #12
 800581c:	4621      	mov	r1, r4
 800581e:	4640      	mov	r0, r8
 8005820:	f7ff fee6 	bl	80055f0 <_printf_common>
 8005824:	3001      	adds	r0, #1
 8005826:	d14a      	bne.n	80058be <_printf_i+0x1f2>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b004      	add	sp, #16
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f043 0320 	orr.w	r3, r3, #32
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	4833      	ldr	r0, [pc, #204]	@ (8005908 <_printf_i+0x23c>)
 800583c:	2778      	movs	r7, #120	@ 0x78
 800583e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	6831      	ldr	r1, [r6, #0]
 8005846:	061f      	lsls	r7, r3, #24
 8005848:	f851 5b04 	ldr.w	r5, [r1], #4
 800584c:	d402      	bmi.n	8005854 <_printf_i+0x188>
 800584e:	065f      	lsls	r7, r3, #25
 8005850:	bf48      	it	mi
 8005852:	b2ad      	uxthmi	r5, r5
 8005854:	6031      	str	r1, [r6, #0]
 8005856:	07d9      	lsls	r1, r3, #31
 8005858:	bf44      	itt	mi
 800585a:	f043 0320 	orrmi.w	r3, r3, #32
 800585e:	6023      	strmi	r3, [r4, #0]
 8005860:	b11d      	cbz	r5, 800586a <_printf_i+0x19e>
 8005862:	2310      	movs	r3, #16
 8005864:	e7ac      	b.n	80057c0 <_printf_i+0xf4>
 8005866:	4827      	ldr	r0, [pc, #156]	@ (8005904 <_printf_i+0x238>)
 8005868:	e7e9      	b.n	800583e <_printf_i+0x172>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	f023 0320 	bic.w	r3, r3, #32
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	e7f6      	b.n	8005862 <_printf_i+0x196>
 8005874:	4616      	mov	r6, r2
 8005876:	e7bd      	b.n	80057f4 <_printf_i+0x128>
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	1d18      	adds	r0, r3, #4
 8005880:	6030      	str	r0, [r6, #0]
 8005882:	062e      	lsls	r6, r5, #24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	d501      	bpl.n	800588c <_printf_i+0x1c0>
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0x1c6>
 800588c:	0668      	lsls	r0, r5, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0x1bc>
 8005890:	8019      	strh	r1, [r3, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	4616      	mov	r6, r2
 8005898:	e7bc      	b.n	8005814 <_printf_i+0x148>
 800589a:	6833      	ldr	r3, [r6, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	6032      	str	r2, [r6, #0]
 80058a0:	681e      	ldr	r6, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7fa fc92 	bl	80001d0 <memchr>
 80058ac:	b108      	cbz	r0, 80058b2 <_printf_i+0x1e6>
 80058ae:	1b80      	subs	r0, r0, r6
 80058b0:	6060      	str	r0, [r4, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058bc:	e7aa      	b.n	8005814 <_printf_i+0x148>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d0ad      	beq.n	8005828 <_printf_i+0x15c>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	079b      	lsls	r3, r3, #30
 80058d0:	d413      	bmi.n	80058fa <_printf_i+0x22e>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e7a6      	b.n	800582c <_printf_i+0x160>
 80058de:	2301      	movs	r3, #1
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	47d0      	blx	sl
 80058e8:	3001      	adds	r0, #1
 80058ea:	d09d      	beq.n	8005828 <_printf_i+0x15c>
 80058ec:	3501      	adds	r5, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	9903      	ldr	r1, [sp, #12]
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dcf2      	bgt.n	80058de <_printf_i+0x212>
 80058f8:	e7eb      	b.n	80058d2 <_printf_i+0x206>
 80058fa:	2500      	movs	r5, #0
 80058fc:	f104 0619 	add.w	r6, r4, #25
 8005900:	e7f5      	b.n	80058ee <_printf_i+0x222>
 8005902:	bf00      	nop
 8005904:	08007cd6 	.word	0x08007cd6
 8005908:	08007ce7 	.word	0x08007ce7

0800590c <std>:
 800590c:	2300      	movs	r3, #0
 800590e:	b510      	push	{r4, lr}
 8005910:	4604      	mov	r4, r0
 8005912:	e9c0 3300 	strd	r3, r3, [r0]
 8005916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591a:	6083      	str	r3, [r0, #8]
 800591c:	8181      	strh	r1, [r0, #12]
 800591e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005920:	81c2      	strh	r2, [r0, #14]
 8005922:	6183      	str	r3, [r0, #24]
 8005924:	4619      	mov	r1, r3
 8005926:	2208      	movs	r2, #8
 8005928:	305c      	adds	r0, #92	@ 0x5c
 800592a:	f000 f9a3 	bl	8005c74 <memset>
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <std+0x58>)
 8005930:	6263      	str	r3, [r4, #36]	@ 0x24
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x5c>)
 8005934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <std+0x60>)
 8005938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <std+0x64>)
 800593c:	6323      	str	r3, [r4, #48]	@ 0x30
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <std+0x68>)
 8005940:	6224      	str	r4, [r4, #32]
 8005942:	429c      	cmp	r4, r3
 8005944:	d006      	beq.n	8005954 <std+0x48>
 8005946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800594a:	4294      	cmp	r4, r2
 800594c:	d002      	beq.n	8005954 <std+0x48>
 800594e:	33d0      	adds	r3, #208	@ 0xd0
 8005950:	429c      	cmp	r4, r3
 8005952:	d105      	bne.n	8005960 <std+0x54>
 8005954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f000 ba06 	b.w	8005d6c <__retarget_lock_init_recursive>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	bf00      	nop
 8005964:	08005ac5 	.word	0x08005ac5
 8005968:	08005ae7 	.word	0x08005ae7
 800596c:	08005b1f 	.word	0x08005b1f
 8005970:	08005b43 	.word	0x08005b43
 8005974:	200007bc 	.word	0x200007bc

08005978 <stdio_exit_handler>:
 8005978:	4a02      	ldr	r2, [pc, #8]	@ (8005984 <stdio_exit_handler+0xc>)
 800597a:	4903      	ldr	r1, [pc, #12]	@ (8005988 <stdio_exit_handler+0x10>)
 800597c:	4803      	ldr	r0, [pc, #12]	@ (800598c <stdio_exit_handler+0x14>)
 800597e:	f000 b869 	b.w	8005a54 <_fwalk_sglue>
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c
 8005988:	080076b9 	.word	0x080076b9
 800598c:	2000001c 	.word	0x2000001c

08005990 <cleanup_stdio>:
 8005990:	6841      	ldr	r1, [r0, #4]
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <cleanup_stdio+0x34>)
 8005994:	4299      	cmp	r1, r3
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	d001      	beq.n	80059a0 <cleanup_stdio+0x10>
 800599c:	f001 fe8c 	bl	80076b8 <_fflush_r>
 80059a0:	68a1      	ldr	r1, [r4, #8]
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <cleanup_stdio+0x38>)
 80059a4:	4299      	cmp	r1, r3
 80059a6:	d002      	beq.n	80059ae <cleanup_stdio+0x1e>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f001 fe85 	bl	80076b8 <_fflush_r>
 80059ae:	68e1      	ldr	r1, [r4, #12]
 80059b0:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <cleanup_stdio+0x3c>)
 80059b2:	4299      	cmp	r1, r3
 80059b4:	d004      	beq.n	80059c0 <cleanup_stdio+0x30>
 80059b6:	4620      	mov	r0, r4
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f001 be7c 	b.w	80076b8 <_fflush_r>
 80059c0:	bd10      	pop	{r4, pc}
 80059c2:	bf00      	nop
 80059c4:	200007bc 	.word	0x200007bc
 80059c8:	20000824 	.word	0x20000824
 80059cc:	2000088c 	.word	0x2000088c

080059d0 <global_stdio_init.part.0>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <global_stdio_init.part.0+0x30>)
 80059d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005a04 <global_stdio_init.part.0+0x34>)
 80059d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005a08 <global_stdio_init.part.0+0x38>)
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	4620      	mov	r0, r4
 80059dc:	2200      	movs	r2, #0
 80059de:	2104      	movs	r1, #4
 80059e0:	f7ff ff94 	bl	800590c <std>
 80059e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059e8:	2201      	movs	r2, #1
 80059ea:	2109      	movs	r1, #9
 80059ec:	f7ff ff8e 	bl	800590c <std>
 80059f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f4:	2202      	movs	r2, #2
 80059f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fa:	2112      	movs	r1, #18
 80059fc:	f7ff bf86 	b.w	800590c <std>
 8005a00:	200008f4 	.word	0x200008f4
 8005a04:	200007bc 	.word	0x200007bc
 8005a08:	08005979 	.word	0x08005979

08005a0c <__sfp_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__sfp_lock_acquire+0x8>)
 8005a0e:	f000 b9ae 	b.w	8005d6e <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	200008fd 	.word	0x200008fd

08005a18 <__sfp_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__sfp_lock_release+0x8>)
 8005a1a:	f000 b9a9 	b.w	8005d70 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	200008fd 	.word	0x200008fd

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sfp_lock_acquire>
 8005a2c:	6a23      	ldr	r3, [r4, #32]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sfp_lock_release>
 8005a38:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <__sinit+0x28>)
 8005a3a:	6223      	str	r3, [r4, #32]
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <__sinit+0x2c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f5      	bne.n	8005a30 <__sinit+0xc>
 8005a44:	f7ff ffc4 	bl	80059d0 <global_stdio_init.part.0>
 8005a48:	e7f2      	b.n	8005a30 <__sinit+0xc>
 8005a4a:	bf00      	nop
 8005a4c:	08005991 	.word	0x08005991
 8005a50:	200008f4 	.word	0x200008f4

08005a54 <_fwalk_sglue>:
 8005a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a58:	4607      	mov	r7, r0
 8005a5a:	4688      	mov	r8, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a64:	f1b9 0901 	subs.w	r9, r9, #1
 8005a68:	d505      	bpl.n	8005a76 <_fwalk_sglue+0x22>
 8005a6a:	6824      	ldr	r4, [r4, #0]
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	d1f7      	bne.n	8005a60 <_fwalk_sglue+0xc>
 8005a70:	4630      	mov	r0, r6
 8005a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d907      	bls.n	8005a8c <_fwalk_sglue+0x38>
 8005a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a80:	3301      	adds	r3, #1
 8005a82:	d003      	beq.n	8005a8c <_fwalk_sglue+0x38>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4638      	mov	r0, r7
 8005a88:	47c0      	blx	r8
 8005a8a:	4306      	orrs	r6, r0
 8005a8c:	3568      	adds	r5, #104	@ 0x68
 8005a8e:	e7e9      	b.n	8005a64 <_fwalk_sglue+0x10>

08005a90 <iprintf>:
 8005a90:	b40f      	push	{r0, r1, r2, r3}
 8005a92:	b507      	push	{r0, r1, r2, lr}
 8005a94:	4906      	ldr	r1, [pc, #24]	@ (8005ab0 <iprintf+0x20>)
 8005a96:	ab04      	add	r3, sp, #16
 8005a98:	6808      	ldr	r0, [r1, #0]
 8005a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9e:	6881      	ldr	r1, [r0, #8]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	f001 fc6d 	bl	8007380 <_vfiprintf_r>
 8005aa6:	b003      	add	sp, #12
 8005aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aac:	b004      	add	sp, #16
 8005aae:	4770      	bx	lr
 8005ab0:	20000018 	.word	0x20000018

08005ab4 <putchar>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	@ (8005ac0 <putchar+0xc>)
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	6882      	ldr	r2, [r0, #8]
 8005abc:	f001 be86 	b.w	80077cc <_putc_r>
 8005ac0:	20000018 	.word	0x20000018

08005ac4 <__sread>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	f000 f900 	bl	8005cd0 <_read_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	bfab      	itete	ge
 8005ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ad8:	181b      	addge	r3, r3, r0
 8005ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ade:	bfac      	ite	ge
 8005ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ae2:	81a3      	strhlt	r3, [r4, #12]
 8005ae4:	bd10      	pop	{r4, pc}

08005ae6 <__swrite>:
 8005ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aea:	461f      	mov	r7, r3
 8005aec:	898b      	ldrh	r3, [r1, #12]
 8005aee:	05db      	lsls	r3, r3, #23
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	4616      	mov	r6, r2
 8005af6:	d505      	bpl.n	8005b04 <__swrite+0x1e>
 8005af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afc:	2302      	movs	r3, #2
 8005afe:	2200      	movs	r2, #0
 8005b00:	f000 f8d4 	bl	8005cac <_lseek_r>
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	4632      	mov	r2, r6
 8005b12:	463b      	mov	r3, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1a:	f000 b8eb 	b.w	8005cf4 <_write_r>

08005b1e <__sseek>:
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	460c      	mov	r4, r1
 8005b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b26:	f000 f8c1 	bl	8005cac <_lseek_r>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	bf15      	itete	ne
 8005b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b3a:	81a3      	strheq	r3, [r4, #12]
 8005b3c:	bf18      	it	ne
 8005b3e:	81a3      	strhne	r3, [r4, #12]
 8005b40:	bd10      	pop	{r4, pc}

08005b42 <__sclose>:
 8005b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b46:	f000 b8a1 	b.w	8005c8c <_close_r>

08005b4a <__swbuf_r>:
 8005b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4c:	460e      	mov	r6, r1
 8005b4e:	4614      	mov	r4, r2
 8005b50:	4605      	mov	r5, r0
 8005b52:	b118      	cbz	r0, 8005b5c <__swbuf_r+0x12>
 8005b54:	6a03      	ldr	r3, [r0, #32]
 8005b56:	b90b      	cbnz	r3, 8005b5c <__swbuf_r+0x12>
 8005b58:	f7ff ff64 	bl	8005a24 <__sinit>
 8005b5c:	69a3      	ldr	r3, [r4, #24]
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	071a      	lsls	r2, r3, #28
 8005b64:	d501      	bpl.n	8005b6a <__swbuf_r+0x20>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b943      	cbnz	r3, 8005b7c <__swbuf_r+0x32>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 f82b 	bl	8005bc8 <__swsetup_r>
 8005b72:	b118      	cbz	r0, 8005b7c <__swbuf_r+0x32>
 8005b74:	f04f 37ff 	mov.w	r7, #4294967295
 8005b78:	4638      	mov	r0, r7
 8005b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	6922      	ldr	r2, [r4, #16]
 8005b80:	1a98      	subs	r0, r3, r2
 8005b82:	6963      	ldr	r3, [r4, #20]
 8005b84:	b2f6      	uxtb	r6, r6
 8005b86:	4283      	cmp	r3, r0
 8005b88:	4637      	mov	r7, r6
 8005b8a:	dc05      	bgt.n	8005b98 <__swbuf_r+0x4e>
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f001 fd92 	bl	80076b8 <_fflush_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d1ed      	bne.n	8005b74 <__swbuf_r+0x2a>
 8005b98:	68a3      	ldr	r3, [r4, #8]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	60a3      	str	r3, [r4, #8]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	6022      	str	r2, [r4, #0]
 8005ba4:	701e      	strb	r6, [r3, #0]
 8005ba6:	6962      	ldr	r2, [r4, #20]
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d004      	beq.n	8005bb8 <__swbuf_r+0x6e>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	07db      	lsls	r3, r3, #31
 8005bb2:	d5e1      	bpl.n	8005b78 <__swbuf_r+0x2e>
 8005bb4:	2e0a      	cmp	r6, #10
 8005bb6:	d1df      	bne.n	8005b78 <__swbuf_r+0x2e>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f001 fd7c 	bl	80076b8 <_fflush_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d0d9      	beq.n	8005b78 <__swbuf_r+0x2e>
 8005bc4:	e7d6      	b.n	8005b74 <__swbuf_r+0x2a>
	...

08005bc8 <__swsetup_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4b29      	ldr	r3, [pc, #164]	@ (8005c70 <__swsetup_r+0xa8>)
 8005bcc:	4605      	mov	r5, r0
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	b118      	cbz	r0, 8005bdc <__swsetup_r+0x14>
 8005bd4:	6a03      	ldr	r3, [r0, #32]
 8005bd6:	b90b      	cbnz	r3, 8005bdc <__swsetup_r+0x14>
 8005bd8:	f7ff ff24 	bl	8005a24 <__sinit>
 8005bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be0:	0719      	lsls	r1, r3, #28
 8005be2:	d422      	bmi.n	8005c2a <__swsetup_r+0x62>
 8005be4:	06da      	lsls	r2, r3, #27
 8005be6:	d407      	bmi.n	8005bf8 <__swsetup_r+0x30>
 8005be8:	2209      	movs	r2, #9
 8005bea:	602a      	str	r2, [r5, #0]
 8005bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf6:	e033      	b.n	8005c60 <__swsetup_r+0x98>
 8005bf8:	0758      	lsls	r0, r3, #29
 8005bfa:	d512      	bpl.n	8005c22 <__swsetup_r+0x5a>
 8005bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bfe:	b141      	cbz	r1, 8005c12 <__swsetup_r+0x4a>
 8005c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c04:	4299      	cmp	r1, r3
 8005c06:	d002      	beq.n	8005c0e <__swsetup_r+0x46>
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 ff0d 	bl	8006a28 <_free_r>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	f043 0308 	orr.w	r3, r3, #8
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	b94b      	cbnz	r3, 8005c42 <__swsetup_r+0x7a>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c38:	d003      	beq.n	8005c42 <__swsetup_r+0x7a>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f001 fd89 	bl	8007754 <__smakebuf_r>
 8005c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c46:	f013 0201 	ands.w	r2, r3, #1
 8005c4a:	d00a      	beq.n	8005c62 <__swsetup_r+0x9a>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60a2      	str	r2, [r4, #8]
 8005c50:	6962      	ldr	r2, [r4, #20]
 8005c52:	4252      	negs	r2, r2
 8005c54:	61a2      	str	r2, [r4, #24]
 8005c56:	6922      	ldr	r2, [r4, #16]
 8005c58:	b942      	cbnz	r2, 8005c6c <__swsetup_r+0xa4>
 8005c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c5e:	d1c5      	bne.n	8005bec <__swsetup_r+0x24>
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	0799      	lsls	r1, r3, #30
 8005c64:	bf58      	it	pl
 8005c66:	6962      	ldrpl	r2, [r4, #20]
 8005c68:	60a2      	str	r2, [r4, #8]
 8005c6a:	e7f4      	b.n	8005c56 <__swsetup_r+0x8e>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e7f7      	b.n	8005c60 <__swsetup_r+0x98>
 8005c70:	20000018 	.word	0x20000018

08005c74 <memset>:
 8005c74:	4402      	add	r2, r0
 8005c76:	4603      	mov	r3, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <_localeconv_r>:
 8005c84:	4800      	ldr	r0, [pc, #0]	@ (8005c88 <_localeconv_r+0x4>)
 8005c86:	4770      	bx	lr
 8005c88:	20000158 	.word	0x20000158

08005c8c <_close_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ca8 <_close_r+0x1c>)
 8005c90:	2300      	movs	r3, #0
 8005c92:	4604      	mov	r4, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fc f8b7 	bl	8001e0a <_close>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_close_r+0x1a>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_close_r+0x1a>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	200008f8 	.word	0x200008f8

08005cac <_lseek_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_lseek_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fc f8cc 	bl	8001e58 <_lseek>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_lseek_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_lseek_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200008f8 	.word	0x200008f8

08005cd0 <_read_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d07      	ldr	r5, [pc, #28]	@ (8005cf0 <_read_r+0x20>)
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	4611      	mov	r1, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f7fc f85a 	bl	8001d98 <_read>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_read_r+0x1e>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_read_r+0x1e>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	200008f8 	.word	0x200008f8

08005cf4 <_write_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	@ (8005d14 <_write_r+0x20>)
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	602a      	str	r2, [r5, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7fc f865 	bl	8001dd2 <_write>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_write_r+0x1e>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_write_r+0x1e>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	200008f8 	.word	0x200008f8

08005d18 <__errno>:
 8005d18:	4b01      	ldr	r3, [pc, #4]	@ (8005d20 <__errno+0x8>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000018 	.word	0x20000018

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	@ (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	@ (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	@ (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	@ (8005d68 <__libc_init_array+0x44>)
 8005d38:	f001 fe5e 	bl	80079f8 <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	08008040 	.word	0x08008040
 8005d60:	08008040 	.word	0x08008040
 8005d64:	08008040 	.word	0x08008040
 8005d68:	08008044 	.word	0x08008044

08005d6c <__retarget_lock_init_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_acquire_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__retarget_lock_release_recursive>:
 8005d70:	4770      	bx	lr

08005d72 <memcpy>:
 8005d72:	440a      	add	r2, r1
 8005d74:	4291      	cmp	r1, r2
 8005d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d7a:	d100      	bne.n	8005d7e <memcpy+0xc>
 8005d7c:	4770      	bx	lr
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d88:	4291      	cmp	r1, r2
 8005d8a:	d1f9      	bne.n	8005d80 <memcpy+0xe>
 8005d8c:	bd10      	pop	{r4, pc}

08005d8e <quorem>:
 8005d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d92:	6903      	ldr	r3, [r0, #16]
 8005d94:	690c      	ldr	r4, [r1, #16]
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	4607      	mov	r7, r0
 8005d9a:	db7e      	blt.n	8005e9a <quorem+0x10c>
 8005d9c:	3c01      	subs	r4, #1
 8005d9e:	f101 0814 	add.w	r8, r1, #20
 8005da2:	00a3      	lsls	r3, r4, #2
 8005da4:	f100 0514 	add.w	r5, r0, #20
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db8:	3301      	adds	r3, #1
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc4:	d32e      	bcc.n	8005e24 <quorem+0x96>
 8005dc6:	f04f 0a00 	mov.w	sl, #0
 8005dca:	46c4      	mov	ip, r8
 8005dcc:	46ae      	mov	lr, r5
 8005dce:	46d3      	mov	fp, sl
 8005dd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dd4:	b298      	uxth	r0, r3
 8005dd6:	fb06 a000 	mla	r0, r6, r0, sl
 8005dda:	0c02      	lsrs	r2, r0, #16
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	fb06 2303 	mla	r3, r6, r3, r2
 8005de2:	f8de 2000 	ldr.w	r2, [lr]
 8005de6:	b280      	uxth	r0, r0
 8005de8:	b292      	uxth	r2, r2
 8005dea:	1a12      	subs	r2, r2, r0
 8005dec:	445a      	add	r2, fp
 8005dee:	f8de 0000 	ldr.w	r0, [lr]
 8005df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005dfc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e00:	b292      	uxth	r2, r2
 8005e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e06:	45e1      	cmp	r9, ip
 8005e08:	f84e 2b04 	str.w	r2, [lr], #4
 8005e0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e10:	d2de      	bcs.n	8005dd0 <quorem+0x42>
 8005e12:	9b00      	ldr	r3, [sp, #0]
 8005e14:	58eb      	ldr	r3, [r5, r3]
 8005e16:	b92b      	cbnz	r3, 8005e24 <quorem+0x96>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	3b04      	subs	r3, #4
 8005e1c:	429d      	cmp	r5, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	d32f      	bcc.n	8005e82 <quorem+0xf4>
 8005e22:	613c      	str	r4, [r7, #16]
 8005e24:	4638      	mov	r0, r7
 8005e26:	f001 f979 	bl	800711c <__mcmp>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	db25      	blt.n	8005e7a <quorem+0xec>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	2000      	movs	r0, #0
 8005e32:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e36:	f8d1 c000 	ldr.w	ip, [r1]
 8005e3a:	fa1f fe82 	uxth.w	lr, r2
 8005e3e:	fa1f f38c 	uxth.w	r3, ip
 8005e42:	eba3 030e 	sub.w	r3, r3, lr
 8005e46:	4403      	add	r3, r0
 8005e48:	0c12      	lsrs	r2, r2, #16
 8005e4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e58:	45c1      	cmp	r9, r8
 8005e5a:	f841 3b04 	str.w	r3, [r1], #4
 8005e5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e62:	d2e6      	bcs.n	8005e32 <quorem+0xa4>
 8005e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e6c:	b922      	cbnz	r2, 8005e78 <quorem+0xea>
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	429d      	cmp	r5, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	d30b      	bcc.n	8005e8e <quorem+0x100>
 8005e76:	613c      	str	r4, [r7, #16]
 8005e78:	3601      	adds	r6, #1
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	b003      	add	sp, #12
 8005e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	d1cb      	bne.n	8005e22 <quorem+0x94>
 8005e8a:	3c01      	subs	r4, #1
 8005e8c:	e7c6      	b.n	8005e1c <quorem+0x8e>
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d1ef      	bne.n	8005e76 <quorem+0xe8>
 8005e96:	3c01      	subs	r4, #1
 8005e98:	e7ea      	b.n	8005e70 <quorem+0xe2>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7ee      	b.n	8005e7c <quorem+0xee>
	...

08005ea0 <_dtoa_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	69c7      	ldr	r7, [r0, #28]
 8005ea6:	b099      	sub	sp, #100	@ 0x64
 8005ea8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005eac:	ec55 4b10 	vmov	r4, r5, d0
 8005eb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005eb4:	4683      	mov	fp, r0
 8005eb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005eba:	b97f      	cbnz	r7, 8005edc <_dtoa_r+0x3c>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f000 fdfd 	bl	8006abc <malloc>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ec8:	b920      	cbnz	r0, 8005ed4 <_dtoa_r+0x34>
 8005eca:	4ba7      	ldr	r3, [pc, #668]	@ (8006168 <_dtoa_r+0x2c8>)
 8005ecc:	21ef      	movs	r1, #239	@ 0xef
 8005ece:	48a7      	ldr	r0, [pc, #668]	@ (800616c <_dtoa_r+0x2cc>)
 8005ed0:	f001 fce2 	bl	8007898 <__assert_func>
 8005ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ed8:	6007      	str	r7, [r0, #0]
 8005eda:	60c7      	str	r7, [r0, #12]
 8005edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	b159      	cbz	r1, 8005efc <_dtoa_r+0x5c>
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	604a      	str	r2, [r1, #4]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4093      	lsls	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
 8005eee:	4658      	mov	r0, fp
 8005ef0:	f000 feda 	bl	8006ca8 <_Bfree>
 8005ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	1e2b      	subs	r3, r5, #0
 8005efe:	bfb9      	ittee	lt
 8005f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f04:	9303      	strlt	r3, [sp, #12]
 8005f06:	2300      	movge	r3, #0
 8005f08:	6033      	strge	r3, [r6, #0]
 8005f0a:	9f03      	ldr	r7, [sp, #12]
 8005f0c:	4b98      	ldr	r3, [pc, #608]	@ (8006170 <_dtoa_r+0x2d0>)
 8005f0e:	bfbc      	itt	lt
 8005f10:	2201      	movlt	r2, #1
 8005f12:	6032      	strlt	r2, [r6, #0]
 8005f14:	43bb      	bics	r3, r7
 8005f16:	d112      	bne.n	8005f3e <_dtoa_r+0x9e>
 8005f18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f24:	4323      	orrs	r3, r4
 8005f26:	f000 854d 	beq.w	80069c4 <_dtoa_r+0xb24>
 8005f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006184 <_dtoa_r+0x2e4>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 854f 	beq.w	80069d4 <_dtoa_r+0xb34>
 8005f36:	f10a 0303 	add.w	r3, sl, #3
 8005f3a:	f000 bd49 	b.w	80069d0 <_dtoa_r+0xb30>
 8005f3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	ec51 0b17 	vmov	r0, r1, d7
 8005f48:	2300      	movs	r3, #0
 8005f4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f4e:	f7fa fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f52:	4680      	mov	r8, r0
 8005f54:	b158      	cbz	r0, 8005f6e <_dtoa_r+0xce>
 8005f56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f58:	2301      	movs	r3, #1
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f5e:	b113      	cbz	r3, 8005f66 <_dtoa_r+0xc6>
 8005f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f62:	4b84      	ldr	r3, [pc, #528]	@ (8006174 <_dtoa_r+0x2d4>)
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006188 <_dtoa_r+0x2e8>
 8005f6a:	f000 bd33 	b.w	80069d4 <_dtoa_r+0xb34>
 8005f6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f72:	aa16      	add	r2, sp, #88	@ 0x58
 8005f74:	a917      	add	r1, sp, #92	@ 0x5c
 8005f76:	4658      	mov	r0, fp
 8005f78:	f001 f980 	bl	800727c <__d2b>
 8005f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f80:	4681      	mov	r9, r0
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d077      	beq.n	8006076 <_dtoa_r+0x1d6>
 8005f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4b74      	ldr	r3, [pc, #464]	@ (8006178 <_dtoa_r+0x2d8>)
 8005fa6:	f7fa f96f 	bl	8000288 <__aeabi_dsub>
 8005faa:	a369      	add	r3, pc, #420	@ (adr r3, 8006150 <_dtoa_r+0x2b0>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fb22 	bl	80005f8 <__aeabi_dmul>
 8005fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8006158 <_dtoa_r+0x2b8>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa f967 	bl	800028c <__adddf3>
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	f7fa faae 	bl	8000524 <__aeabi_i2d>
 8005fc8:	a365      	add	r3, pc, #404	@ (adr r3, 8006160 <_dtoa_r+0x2c0>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa f957 	bl	800028c <__adddf3>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	f7fa fdb9 	bl	8000b58 <__aeabi_d2iz>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4607      	mov	r7, r0
 8005fea:	2300      	movs	r3, #0
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fd74 	bl	8000adc <__aeabi_dcmplt>
 8005ff4:	b140      	cbz	r0, 8006008 <_dtoa_r+0x168>
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f7fa fa94 	bl	8000524 <__aeabi_i2d>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	f7fa fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006004:	b900      	cbnz	r0, 8006008 <_dtoa_r+0x168>
 8006006:	3f01      	subs	r7, #1
 8006008:	2f16      	cmp	r7, #22
 800600a:	d851      	bhi.n	80060b0 <_dtoa_r+0x210>
 800600c:	4b5b      	ldr	r3, [pc, #364]	@ (800617c <_dtoa_r+0x2dc>)
 800600e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800601a:	f7fa fd5f 	bl	8000adc <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	d048      	beq.n	80060b4 <_dtoa_r+0x214>
 8006022:	3f01      	subs	r7, #1
 8006024:	2300      	movs	r3, #0
 8006026:	9312      	str	r3, [sp, #72]	@ 0x48
 8006028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800602a:	1b9b      	subs	r3, r3, r6
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	bf44      	itt	mi
 8006030:	f1c3 0801 	rsbmi	r8, r3, #1
 8006034:	2300      	movmi	r3, #0
 8006036:	9208      	str	r2, [sp, #32]
 8006038:	bf54      	ite	pl
 800603a:	f04f 0800 	movpl.w	r8, #0
 800603e:	9308      	strmi	r3, [sp, #32]
 8006040:	2f00      	cmp	r7, #0
 8006042:	db39      	blt.n	80060b8 <_dtoa_r+0x218>
 8006044:	9b08      	ldr	r3, [sp, #32]
 8006046:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006048:	443b      	add	r3, r7
 800604a:	9308      	str	r3, [sp, #32]
 800604c:	2300      	movs	r3, #0
 800604e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006052:	2b09      	cmp	r3, #9
 8006054:	d864      	bhi.n	8006120 <_dtoa_r+0x280>
 8006056:	2b05      	cmp	r3, #5
 8006058:	bfc4      	itt	gt
 800605a:	3b04      	subgt	r3, #4
 800605c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800605e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006060:	f1a3 0302 	sub.w	r3, r3, #2
 8006064:	bfcc      	ite	gt
 8006066:	2400      	movgt	r4, #0
 8006068:	2401      	movle	r4, #1
 800606a:	2b03      	cmp	r3, #3
 800606c:	d863      	bhi.n	8006136 <_dtoa_r+0x296>
 800606e:	e8df f003 	tbb	[pc, r3]
 8006072:	372a      	.short	0x372a
 8006074:	5535      	.short	0x5535
 8006076:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800607a:	441e      	add	r6, r3
 800607c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006080:	2b20      	cmp	r3, #32
 8006082:	bfc1      	itttt	gt
 8006084:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006088:	409f      	lslgt	r7, r3
 800608a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800608e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006092:	bfd6      	itet	le
 8006094:	f1c3 0320 	rsble	r3, r3, #32
 8006098:	ea47 0003 	orrgt.w	r0, r7, r3
 800609c:	fa04 f003 	lslle.w	r0, r4, r3
 80060a0:	f7fa fa30 	bl	8000504 <__aeabi_ui2d>
 80060a4:	2201      	movs	r2, #1
 80060a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060aa:	3e01      	subs	r6, #1
 80060ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80060ae:	e777      	b.n	8005fa0 <_dtoa_r+0x100>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e7b8      	b.n	8006026 <_dtoa_r+0x186>
 80060b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80060b6:	e7b7      	b.n	8006028 <_dtoa_r+0x188>
 80060b8:	427b      	negs	r3, r7
 80060ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80060bc:	2300      	movs	r3, #0
 80060be:	eba8 0807 	sub.w	r8, r8, r7
 80060c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060c4:	e7c4      	b.n	8006050 <_dtoa_r+0x1b0>
 80060c6:	2300      	movs	r3, #0
 80060c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dc35      	bgt.n	800613c <_dtoa_r+0x29c>
 80060d0:	2301      	movs	r3, #1
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	9307      	str	r3, [sp, #28]
 80060d6:	461a      	mov	r2, r3
 80060d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060da:	e00b      	b.n	80060f4 <_dtoa_r+0x254>
 80060dc:	2301      	movs	r3, #1
 80060de:	e7f3      	b.n	80060c8 <_dtoa_r+0x228>
 80060e0:	2300      	movs	r3, #0
 80060e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	bfb8      	it	lt
 80060f2:	2301      	movlt	r3, #1
 80060f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060f8:	2100      	movs	r1, #0
 80060fa:	2204      	movs	r2, #4
 80060fc:	f102 0514 	add.w	r5, r2, #20
 8006100:	429d      	cmp	r5, r3
 8006102:	d91f      	bls.n	8006144 <_dtoa_r+0x2a4>
 8006104:	6041      	str	r1, [r0, #4]
 8006106:	4658      	mov	r0, fp
 8006108:	f000 fd8e 	bl	8006c28 <_Balloc>
 800610c:	4682      	mov	sl, r0
 800610e:	2800      	cmp	r0, #0
 8006110:	d13c      	bne.n	800618c <_dtoa_r+0x2ec>
 8006112:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <_dtoa_r+0x2e0>)
 8006114:	4602      	mov	r2, r0
 8006116:	f240 11af 	movw	r1, #431	@ 0x1af
 800611a:	e6d8      	b.n	8005ece <_dtoa_r+0x2e>
 800611c:	2301      	movs	r3, #1
 800611e:	e7e0      	b.n	80060e2 <_dtoa_r+0x242>
 8006120:	2401      	movs	r4, #1
 8006122:	2300      	movs	r3, #0
 8006124:	9309      	str	r3, [sp, #36]	@ 0x24
 8006126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006128:	f04f 33ff 	mov.w	r3, #4294967295
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	2200      	movs	r2, #0
 8006132:	2312      	movs	r3, #18
 8006134:	e7d0      	b.n	80060d8 <_dtoa_r+0x238>
 8006136:	2301      	movs	r3, #1
 8006138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800613a:	e7f5      	b.n	8006128 <_dtoa_r+0x288>
 800613c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	9307      	str	r3, [sp, #28]
 8006142:	e7d7      	b.n	80060f4 <_dtoa_r+0x254>
 8006144:	3101      	adds	r1, #1
 8006146:	0052      	lsls	r2, r2, #1
 8006148:	e7d8      	b.n	80060fc <_dtoa_r+0x25c>
 800614a:	bf00      	nop
 800614c:	f3af 8000 	nop.w
 8006150:	636f4361 	.word	0x636f4361
 8006154:	3fd287a7 	.word	0x3fd287a7
 8006158:	8b60c8b3 	.word	0x8b60c8b3
 800615c:	3fc68a28 	.word	0x3fc68a28
 8006160:	509f79fb 	.word	0x509f79fb
 8006164:	3fd34413 	.word	0x3fd34413
 8006168:	08007d05 	.word	0x08007d05
 800616c:	08007d1c 	.word	0x08007d1c
 8006170:	7ff00000 	.word	0x7ff00000
 8006174:	08007cd5 	.word	0x08007cd5
 8006178:	3ff80000 	.word	0x3ff80000
 800617c:	08007e18 	.word	0x08007e18
 8006180:	08007d74 	.word	0x08007d74
 8006184:	08007d01 	.word	0x08007d01
 8006188:	08007cd4 	.word	0x08007cd4
 800618c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006190:	6018      	str	r0, [r3, #0]
 8006192:	9b07      	ldr	r3, [sp, #28]
 8006194:	2b0e      	cmp	r3, #14
 8006196:	f200 80a4 	bhi.w	80062e2 <_dtoa_r+0x442>
 800619a:	2c00      	cmp	r4, #0
 800619c:	f000 80a1 	beq.w	80062e2 <_dtoa_r+0x442>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	dd33      	ble.n	800620c <_dtoa_r+0x36c>
 80061a4:	4bad      	ldr	r3, [pc, #692]	@ (800645c <_dtoa_r+0x5bc>)
 80061a6:	f007 020f 	and.w	r2, r7, #15
 80061aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ae:	ed93 7b00 	vldr	d7, [r3]
 80061b2:	05f8      	lsls	r0, r7, #23
 80061b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061bc:	d516      	bpl.n	80061ec <_dtoa_r+0x34c>
 80061be:	4ba8      	ldr	r3, [pc, #672]	@ (8006460 <_dtoa_r+0x5c0>)
 80061c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061c8:	f7fa fb40 	bl	800084c <__aeabi_ddiv>
 80061cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d0:	f004 040f 	and.w	r4, r4, #15
 80061d4:	2603      	movs	r6, #3
 80061d6:	4da2      	ldr	r5, [pc, #648]	@ (8006460 <_dtoa_r+0x5c0>)
 80061d8:	b954      	cbnz	r4, 80061f0 <_dtoa_r+0x350>
 80061da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7fa fb33 	bl	800084c <__aeabi_ddiv>
 80061e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ea:	e028      	b.n	800623e <_dtoa_r+0x39e>
 80061ec:	2602      	movs	r6, #2
 80061ee:	e7f2      	b.n	80061d6 <_dtoa_r+0x336>
 80061f0:	07e1      	lsls	r1, r4, #31
 80061f2:	d508      	bpl.n	8006206 <_dtoa_r+0x366>
 80061f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061fc:	f7fa f9fc 	bl	80005f8 <__aeabi_dmul>
 8006200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006204:	3601      	adds	r6, #1
 8006206:	1064      	asrs	r4, r4, #1
 8006208:	3508      	adds	r5, #8
 800620a:	e7e5      	b.n	80061d8 <_dtoa_r+0x338>
 800620c:	f000 80d2 	beq.w	80063b4 <_dtoa_r+0x514>
 8006210:	427c      	negs	r4, r7
 8006212:	4b92      	ldr	r3, [pc, #584]	@ (800645c <_dtoa_r+0x5bc>)
 8006214:	4d92      	ldr	r5, [pc, #584]	@ (8006460 <_dtoa_r+0x5c0>)
 8006216:	f004 020f 	and.w	r2, r4, #15
 800621a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006226:	f7fa f9e7 	bl	80005f8 <__aeabi_dmul>
 800622a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622e:	1124      	asrs	r4, r4, #4
 8006230:	2300      	movs	r3, #0
 8006232:	2602      	movs	r6, #2
 8006234:	2c00      	cmp	r4, #0
 8006236:	f040 80b2 	bne.w	800639e <_dtoa_r+0x4fe>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1d3      	bne.n	80061e6 <_dtoa_r+0x346>
 800623e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80b7 	beq.w	80063b8 <_dtoa_r+0x518>
 800624a:	4b86      	ldr	r3, [pc, #536]	@ (8006464 <_dtoa_r+0x5c4>)
 800624c:	2200      	movs	r2, #0
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa fc43 	bl	8000adc <__aeabi_dcmplt>
 8006256:	2800      	cmp	r0, #0
 8006258:	f000 80ae 	beq.w	80063b8 <_dtoa_r+0x518>
 800625c:	9b07      	ldr	r3, [sp, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80aa 	beq.w	80063b8 <_dtoa_r+0x518>
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd37      	ble.n	80062da <_dtoa_r+0x43a>
 800626a:	1e7b      	subs	r3, r7, #1
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	4620      	mov	r0, r4
 8006270:	4b7d      	ldr	r3, [pc, #500]	@ (8006468 <_dtoa_r+0x5c8>)
 8006272:	2200      	movs	r2, #0
 8006274:	4629      	mov	r1, r5
 8006276:	f7fa f9bf 	bl	80005f8 <__aeabi_dmul>
 800627a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627e:	9c00      	ldr	r4, [sp, #0]
 8006280:	3601      	adds	r6, #1
 8006282:	4630      	mov	r0, r6
 8006284:	f7fa f94e 	bl	8000524 <__aeabi_i2d>
 8006288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	4b76      	ldr	r3, [pc, #472]	@ (800646c <_dtoa_r+0x5cc>)
 8006292:	2200      	movs	r2, #0
 8006294:	f7f9 fffa 	bl	800028c <__adddf3>
 8006298:	4605      	mov	r5, r0
 800629a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800629e:	2c00      	cmp	r4, #0
 80062a0:	f040 808d 	bne.w	80063be <_dtoa_r+0x51e>
 80062a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a8:	4b71      	ldr	r3, [pc, #452]	@ (8006470 <_dtoa_r+0x5d0>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f7f9 ffec 	bl	8000288 <__aeabi_dsub>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062b8:	462a      	mov	r2, r5
 80062ba:	4633      	mov	r3, r6
 80062bc:	f7fa fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f040 828b 	bne.w	80067dc <_dtoa_r+0x93c>
 80062c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ca:	462a      	mov	r2, r5
 80062cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062d0:	f7fa fc04 	bl	8000adc <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f040 8128 	bne.w	800652a <_dtoa_r+0x68a>
 80062da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f2c0 815a 	blt.w	800659e <_dtoa_r+0x6fe>
 80062ea:	2f0e      	cmp	r7, #14
 80062ec:	f300 8157 	bgt.w	800659e <_dtoa_r+0x6fe>
 80062f0:	4b5a      	ldr	r3, [pc, #360]	@ (800645c <_dtoa_r+0x5bc>)
 80062f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f6:	ed93 7b00 	vldr	d7, [r3]
 80062fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	ed8d 7b00 	vstr	d7, [sp]
 8006302:	da03      	bge.n	800630c <_dtoa_r+0x46c>
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f340 8101 	ble.w	800650e <_dtoa_r+0x66e>
 800630c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006310:	4656      	mov	r6, sl
 8006312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fa97 	bl	800084c <__aeabi_ddiv>
 800631e:	f7fa fc1b 	bl	8000b58 <__aeabi_d2iz>
 8006322:	4680      	mov	r8, r0
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632c:	f7fa f964 	bl	80005f8 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800633c:	f7f9 ffa4 	bl	8000288 <__aeabi_dsub>
 8006340:	f806 4b01 	strb.w	r4, [r6], #1
 8006344:	9d07      	ldr	r5, [sp, #28]
 8006346:	eba6 040a 	sub.w	r4, r6, sl
 800634a:	42a5      	cmp	r5, r4
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	f040 8117 	bne.w	8006582 <_dtoa_r+0x6e2>
 8006354:	f7f9 ff9a 	bl	800028c <__adddf3>
 8006358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	f7fa fbda 	bl	8000b18 <__aeabi_dcmpgt>
 8006364:	2800      	cmp	r0, #0
 8006366:	f040 80f9 	bne.w	800655c <_dtoa_r+0x6bc>
 800636a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	f7fa fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006376:	b118      	cbz	r0, 8006380 <_dtoa_r+0x4e0>
 8006378:	f018 0f01 	tst.w	r8, #1
 800637c:	f040 80ee 	bne.w	800655c <_dtoa_r+0x6bc>
 8006380:	4649      	mov	r1, r9
 8006382:	4658      	mov	r0, fp
 8006384:	f000 fc90 	bl	8006ca8 <_Bfree>
 8006388:	2300      	movs	r3, #0
 800638a:	7033      	strb	r3, [r6, #0]
 800638c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800638e:	3701      	adds	r7, #1
 8006390:	601f      	str	r7, [r3, #0]
 8006392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 831d 	beq.w	80069d4 <_dtoa_r+0xb34>
 800639a:	601e      	str	r6, [r3, #0]
 800639c:	e31a      	b.n	80069d4 <_dtoa_r+0xb34>
 800639e:	07e2      	lsls	r2, r4, #31
 80063a0:	d505      	bpl.n	80063ae <_dtoa_r+0x50e>
 80063a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063a6:	f7fa f927 	bl	80005f8 <__aeabi_dmul>
 80063aa:	3601      	adds	r6, #1
 80063ac:	2301      	movs	r3, #1
 80063ae:	1064      	asrs	r4, r4, #1
 80063b0:	3508      	adds	r5, #8
 80063b2:	e73f      	b.n	8006234 <_dtoa_r+0x394>
 80063b4:	2602      	movs	r6, #2
 80063b6:	e742      	b.n	800623e <_dtoa_r+0x39e>
 80063b8:	9c07      	ldr	r4, [sp, #28]
 80063ba:	9704      	str	r7, [sp, #16]
 80063bc:	e761      	b.n	8006282 <_dtoa_r+0x3e2>
 80063be:	4b27      	ldr	r3, [pc, #156]	@ (800645c <_dtoa_r+0x5bc>)
 80063c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063ca:	4454      	add	r4, sl
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d053      	beq.n	8006478 <_dtoa_r+0x5d8>
 80063d0:	4928      	ldr	r1, [pc, #160]	@ (8006474 <_dtoa_r+0x5d4>)
 80063d2:	2000      	movs	r0, #0
 80063d4:	f7fa fa3a 	bl	800084c <__aeabi_ddiv>
 80063d8:	4633      	mov	r3, r6
 80063da:	462a      	mov	r2, r5
 80063dc:	f7f9 ff54 	bl	8000288 <__aeabi_dsub>
 80063e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063e4:	4656      	mov	r6, sl
 80063e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ea:	f7fa fbb5 	bl	8000b58 <__aeabi_d2iz>
 80063ee:	4605      	mov	r5, r0
 80063f0:	f7fa f898 	bl	8000524 <__aeabi_i2d>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	3530      	adds	r5, #48	@ 0x30
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800640a:	f806 5b01 	strb.w	r5, [r6], #1
 800640e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006412:	f7fa fb63 	bl	8000adc <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	d171      	bne.n	80064fe <_dtoa_r+0x65e>
 800641a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800641e:	4911      	ldr	r1, [pc, #68]	@ (8006464 <_dtoa_r+0x5c4>)
 8006420:	2000      	movs	r0, #0
 8006422:	f7f9 ff31 	bl	8000288 <__aeabi_dsub>
 8006426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800642a:	f7fa fb57 	bl	8000adc <__aeabi_dcmplt>
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 8095 	bne.w	800655e <_dtoa_r+0x6be>
 8006434:	42a6      	cmp	r6, r4
 8006436:	f43f af50 	beq.w	80062da <_dtoa_r+0x43a>
 800643a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800643e:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <_dtoa_r+0x5c8>)
 8006440:	2200      	movs	r2, #0
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <_dtoa_r+0x5c8>)
 8006448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800644c:	2200      	movs	r2, #0
 800644e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006452:	f7fa f8d1 	bl	80005f8 <__aeabi_dmul>
 8006456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645a:	e7c4      	b.n	80063e6 <_dtoa_r+0x546>
 800645c:	08007e18 	.word	0x08007e18
 8006460:	08007df0 	.word	0x08007df0
 8006464:	3ff00000 	.word	0x3ff00000
 8006468:	40240000 	.word	0x40240000
 800646c:	401c0000 	.word	0x401c0000
 8006470:	40140000 	.word	0x40140000
 8006474:	3fe00000 	.word	0x3fe00000
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	f7fa f8bc 	bl	80005f8 <__aeabi_dmul>
 8006480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006484:	9415      	str	r4, [sp, #84]	@ 0x54
 8006486:	4656      	mov	r6, sl
 8006488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648c:	f7fa fb64 	bl	8000b58 <__aeabi_d2iz>
 8006490:	4605      	mov	r5, r0
 8006492:	f7fa f847 	bl	8000524 <__aeabi_i2d>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649e:	f7f9 fef3 	bl	8000288 <__aeabi_dsub>
 80064a2:	3530      	adds	r5, #48	@ 0x30
 80064a4:	f806 5b01 	strb.w	r5, [r6], #1
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	42a6      	cmp	r6, r4
 80064ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	d124      	bne.n	8006502 <_dtoa_r+0x662>
 80064b8:	4bac      	ldr	r3, [pc, #688]	@ (800676c <_dtoa_r+0x8cc>)
 80064ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064be:	f7f9 fee5 	bl	800028c <__adddf3>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ca:	f7fa fb25 	bl	8000b18 <__aeabi_dcmpgt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d145      	bne.n	800655e <_dtoa_r+0x6be>
 80064d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064d6:	49a5      	ldr	r1, [pc, #660]	@ (800676c <_dtoa_r+0x8cc>)
 80064d8:	2000      	movs	r0, #0
 80064da:	f7f9 fed5 	bl	8000288 <__aeabi_dsub>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e6:	f7fa faf9 	bl	8000adc <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f43f aef5 	beq.w	80062da <_dtoa_r+0x43a>
 80064f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064f2:	1e73      	subs	r3, r6, #1
 80064f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80064f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064fa:	2b30      	cmp	r3, #48	@ 0x30
 80064fc:	d0f8      	beq.n	80064f0 <_dtoa_r+0x650>
 80064fe:	9f04      	ldr	r7, [sp, #16]
 8006500:	e73e      	b.n	8006380 <_dtoa_r+0x4e0>
 8006502:	4b9b      	ldr	r3, [pc, #620]	@ (8006770 <_dtoa_r+0x8d0>)
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800650c:	e7bc      	b.n	8006488 <_dtoa_r+0x5e8>
 800650e:	d10c      	bne.n	800652a <_dtoa_r+0x68a>
 8006510:	4b98      	ldr	r3, [pc, #608]	@ (8006774 <_dtoa_r+0x8d4>)
 8006512:	2200      	movs	r2, #0
 8006514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006518:	f7fa f86e 	bl	80005f8 <__aeabi_dmul>
 800651c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006520:	f7fa faf0 	bl	8000b04 <__aeabi_dcmpge>
 8006524:	2800      	cmp	r0, #0
 8006526:	f000 8157 	beq.w	80067d8 <_dtoa_r+0x938>
 800652a:	2400      	movs	r4, #0
 800652c:	4625      	mov	r5, r4
 800652e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006530:	43db      	mvns	r3, r3
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	4656      	mov	r6, sl
 8006536:	2700      	movs	r7, #0
 8006538:	4621      	mov	r1, r4
 800653a:	4658      	mov	r0, fp
 800653c:	f000 fbb4 	bl	8006ca8 <_Bfree>
 8006540:	2d00      	cmp	r5, #0
 8006542:	d0dc      	beq.n	80064fe <_dtoa_r+0x65e>
 8006544:	b12f      	cbz	r7, 8006552 <_dtoa_r+0x6b2>
 8006546:	42af      	cmp	r7, r5
 8006548:	d003      	beq.n	8006552 <_dtoa_r+0x6b2>
 800654a:	4639      	mov	r1, r7
 800654c:	4658      	mov	r0, fp
 800654e:	f000 fbab 	bl	8006ca8 <_Bfree>
 8006552:	4629      	mov	r1, r5
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fba7 	bl	8006ca8 <_Bfree>
 800655a:	e7d0      	b.n	80064fe <_dtoa_r+0x65e>
 800655c:	9704      	str	r7, [sp, #16]
 800655e:	4633      	mov	r3, r6
 8006560:	461e      	mov	r6, r3
 8006562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006566:	2a39      	cmp	r2, #57	@ 0x39
 8006568:	d107      	bne.n	800657a <_dtoa_r+0x6da>
 800656a:	459a      	cmp	sl, r3
 800656c:	d1f8      	bne.n	8006560 <_dtoa_r+0x6c0>
 800656e:	9a04      	ldr	r2, [sp, #16]
 8006570:	3201      	adds	r2, #1
 8006572:	9204      	str	r2, [sp, #16]
 8006574:	2230      	movs	r2, #48	@ 0x30
 8006576:	f88a 2000 	strb.w	r2, [sl]
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	3201      	adds	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e7bd      	b.n	80064fe <_dtoa_r+0x65e>
 8006582:	4b7b      	ldr	r3, [pc, #492]	@ (8006770 <_dtoa_r+0x8d0>)
 8006584:	2200      	movs	r2, #0
 8006586:	f7fa f837 	bl	80005f8 <__aeabi_dmul>
 800658a:	2200      	movs	r2, #0
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	f7fa fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006596:	2800      	cmp	r0, #0
 8006598:	f43f aebb 	beq.w	8006312 <_dtoa_r+0x472>
 800659c:	e6f0      	b.n	8006380 <_dtoa_r+0x4e0>
 800659e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	f000 80db 	beq.w	800675c <_dtoa_r+0x8bc>
 80065a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a8:	2a01      	cmp	r2, #1
 80065aa:	f300 80bf 	bgt.w	800672c <_dtoa_r+0x88c>
 80065ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	f000 80b7 	beq.w	8006724 <_dtoa_r+0x884>
 80065b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065bc:	4646      	mov	r6, r8
 80065be:	9a08      	ldr	r2, [sp, #32]
 80065c0:	2101      	movs	r1, #1
 80065c2:	441a      	add	r2, r3
 80065c4:	4658      	mov	r0, fp
 80065c6:	4498      	add	r8, r3
 80065c8:	9208      	str	r2, [sp, #32]
 80065ca:	f000 fc21 	bl	8006e10 <__i2b>
 80065ce:	4605      	mov	r5, r0
 80065d0:	b15e      	cbz	r6, 80065ea <_dtoa_r+0x74a>
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd08      	ble.n	80065ea <_dtoa_r+0x74a>
 80065d8:	42b3      	cmp	r3, r6
 80065da:	9a08      	ldr	r2, [sp, #32]
 80065dc:	bfa8      	it	ge
 80065de:	4633      	movge	r3, r6
 80065e0:	eba8 0803 	sub.w	r8, r8, r3
 80065e4:	1af6      	subs	r6, r6, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	9308      	str	r3, [sp, #32]
 80065ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ec:	b1f3      	cbz	r3, 800662c <_dtoa_r+0x78c>
 80065ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 80b7 	beq.w	8006764 <_dtoa_r+0x8c4>
 80065f6:	b18c      	cbz	r4, 800661c <_dtoa_r+0x77c>
 80065f8:	4629      	mov	r1, r5
 80065fa:	4622      	mov	r2, r4
 80065fc:	4658      	mov	r0, fp
 80065fe:	f000 fcc7 	bl	8006f90 <__pow5mult>
 8006602:	464a      	mov	r2, r9
 8006604:	4601      	mov	r1, r0
 8006606:	4605      	mov	r5, r0
 8006608:	4658      	mov	r0, fp
 800660a:	f000 fc17 	bl	8006e3c <__multiply>
 800660e:	4649      	mov	r1, r9
 8006610:	9004      	str	r0, [sp, #16]
 8006612:	4658      	mov	r0, fp
 8006614:	f000 fb48 	bl	8006ca8 <_Bfree>
 8006618:	9b04      	ldr	r3, [sp, #16]
 800661a:	4699      	mov	r9, r3
 800661c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661e:	1b1a      	subs	r2, r3, r4
 8006620:	d004      	beq.n	800662c <_dtoa_r+0x78c>
 8006622:	4649      	mov	r1, r9
 8006624:	4658      	mov	r0, fp
 8006626:	f000 fcb3 	bl	8006f90 <__pow5mult>
 800662a:	4681      	mov	r9, r0
 800662c:	2101      	movs	r1, #1
 800662e:	4658      	mov	r0, fp
 8006630:	f000 fbee 	bl	8006e10 <__i2b>
 8006634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006636:	4604      	mov	r4, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 81cf 	beq.w	80069dc <_dtoa_r+0xb3c>
 800663e:	461a      	mov	r2, r3
 8006640:	4601      	mov	r1, r0
 8006642:	4658      	mov	r0, fp
 8006644:	f000 fca4 	bl	8006f90 <__pow5mult>
 8006648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664a:	2b01      	cmp	r3, #1
 800664c:	4604      	mov	r4, r0
 800664e:	f300 8095 	bgt.w	800677c <_dtoa_r+0x8dc>
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 8087 	bne.w	8006768 <_dtoa_r+0x8c8>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8089 	bne.w	8006778 <_dtoa_r+0x8d8>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800666c:	0d1b      	lsrs	r3, r3, #20
 800666e:	051b      	lsls	r3, r3, #20
 8006670:	b12b      	cbz	r3, 800667e <_dtoa_r+0x7de>
 8006672:	9b08      	ldr	r3, [sp, #32]
 8006674:	3301      	adds	r3, #1
 8006676:	9308      	str	r3, [sp, #32]
 8006678:	f108 0801 	add.w	r8, r8, #1
 800667c:	2301      	movs	r3, #1
 800667e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 81b0 	beq.w	80069e8 <_dtoa_r+0xb48>
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800668e:	6918      	ldr	r0, [r3, #16]
 8006690:	f000 fb72 	bl	8006d78 <__hi0bits>
 8006694:	f1c0 0020 	rsb	r0, r0, #32
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	4418      	add	r0, r3
 800669c:	f010 001f 	ands.w	r0, r0, #31
 80066a0:	d077      	beq.n	8006792 <_dtoa_r+0x8f2>
 80066a2:	f1c0 0320 	rsb	r3, r0, #32
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	dd6b      	ble.n	8006782 <_dtoa_r+0x8e2>
 80066aa:	9b08      	ldr	r3, [sp, #32]
 80066ac:	f1c0 001c 	rsb	r0, r0, #28
 80066b0:	4403      	add	r3, r0
 80066b2:	4480      	add	r8, r0
 80066b4:	4406      	add	r6, r0
 80066b6:	9308      	str	r3, [sp, #32]
 80066b8:	f1b8 0f00 	cmp.w	r8, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x82a>
 80066be:	4649      	mov	r1, r9
 80066c0:	4642      	mov	r2, r8
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fcbe 	bl	8007044 <__lshift>
 80066c8:	4681      	mov	r9, r0
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd05      	ble.n	80066dc <_dtoa_r+0x83c>
 80066d0:	4621      	mov	r1, r4
 80066d2:	461a      	mov	r2, r3
 80066d4:	4658      	mov	r0, fp
 80066d6:	f000 fcb5 	bl	8007044 <__lshift>
 80066da:	4604      	mov	r4, r0
 80066dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d059      	beq.n	8006796 <_dtoa_r+0x8f6>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4648      	mov	r0, r9
 80066e6:	f000 fd19 	bl	800711c <__mcmp>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	da53      	bge.n	8006796 <_dtoa_r+0x8f6>
 80066ee:	1e7b      	subs	r3, r7, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	4649      	mov	r1, r9
 80066f4:	2300      	movs	r3, #0
 80066f6:	220a      	movs	r2, #10
 80066f8:	4658      	mov	r0, fp
 80066fa:	f000 faf7 	bl	8006cec <__multadd>
 80066fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006700:	4681      	mov	r9, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8172 	beq.w	80069ec <_dtoa_r+0xb4c>
 8006708:	2300      	movs	r3, #0
 800670a:	4629      	mov	r1, r5
 800670c:	220a      	movs	r2, #10
 800670e:	4658      	mov	r0, fp
 8006710:	f000 faec 	bl	8006cec <__multadd>
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	4605      	mov	r5, r0
 800671a:	dc67      	bgt.n	80067ec <_dtoa_r+0x94c>
 800671c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671e:	2b02      	cmp	r3, #2
 8006720:	dc41      	bgt.n	80067a6 <_dtoa_r+0x906>
 8006722:	e063      	b.n	80067ec <_dtoa_r+0x94c>
 8006724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800672a:	e746      	b.n	80065ba <_dtoa_r+0x71a>
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	1e5c      	subs	r4, r3, #1
 8006730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006732:	42a3      	cmp	r3, r4
 8006734:	bfbf      	itttt	lt
 8006736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006738:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800673a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800673c:	1ae3      	sublt	r3, r4, r3
 800673e:	bfb4      	ite	lt
 8006740:	18d2      	addlt	r2, r2, r3
 8006742:	1b1c      	subge	r4, r3, r4
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	bfbc      	itt	lt
 8006748:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800674a:	2400      	movlt	r4, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfb5      	itete	lt
 8006750:	eba8 0603 	sublt.w	r6, r8, r3
 8006754:	9b07      	ldrge	r3, [sp, #28]
 8006756:	2300      	movlt	r3, #0
 8006758:	4646      	movge	r6, r8
 800675a:	e730      	b.n	80065be <_dtoa_r+0x71e>
 800675c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800675e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006760:	4646      	mov	r6, r8
 8006762:	e735      	b.n	80065d0 <_dtoa_r+0x730>
 8006764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006766:	e75c      	b.n	8006622 <_dtoa_r+0x782>
 8006768:	2300      	movs	r3, #0
 800676a:	e788      	b.n	800667e <_dtoa_r+0x7de>
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	40240000 	.word	0x40240000
 8006774:	40140000 	.word	0x40140000
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	e780      	b.n	800667e <_dtoa_r+0x7de>
 800677c:	2300      	movs	r3, #0
 800677e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006780:	e782      	b.n	8006688 <_dtoa_r+0x7e8>
 8006782:	d099      	beq.n	80066b8 <_dtoa_r+0x818>
 8006784:	9a08      	ldr	r2, [sp, #32]
 8006786:	331c      	adds	r3, #28
 8006788:	441a      	add	r2, r3
 800678a:	4498      	add	r8, r3
 800678c:	441e      	add	r6, r3
 800678e:	9208      	str	r2, [sp, #32]
 8006790:	e792      	b.n	80066b8 <_dtoa_r+0x818>
 8006792:	4603      	mov	r3, r0
 8006794:	e7f6      	b.n	8006784 <_dtoa_r+0x8e4>
 8006796:	9b07      	ldr	r3, [sp, #28]
 8006798:	9704      	str	r7, [sp, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	dc20      	bgt.n	80067e0 <_dtoa_r+0x940>
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	dd1e      	ble.n	80067e4 <_dtoa_r+0x944>
 80067a6:	9b00      	ldr	r3, [sp, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f aec0 	bne.w	800652e <_dtoa_r+0x68e>
 80067ae:	4621      	mov	r1, r4
 80067b0:	2205      	movs	r2, #5
 80067b2:	4658      	mov	r0, fp
 80067b4:	f000 fa9a 	bl	8006cec <__multadd>
 80067b8:	4601      	mov	r1, r0
 80067ba:	4604      	mov	r4, r0
 80067bc:	4648      	mov	r0, r9
 80067be:	f000 fcad 	bl	800711c <__mcmp>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f77f aeb3 	ble.w	800652e <_dtoa_r+0x68e>
 80067c8:	4656      	mov	r6, sl
 80067ca:	2331      	movs	r3, #49	@ 0x31
 80067cc:	f806 3b01 	strb.w	r3, [r6], #1
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	3301      	adds	r3, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	e6ae      	b.n	8006536 <_dtoa_r+0x696>
 80067d8:	9c07      	ldr	r4, [sp, #28]
 80067da:	9704      	str	r7, [sp, #16]
 80067dc:	4625      	mov	r5, r4
 80067de:	e7f3      	b.n	80067c8 <_dtoa_r+0x928>
 80067e0:	9b07      	ldr	r3, [sp, #28]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8104 	beq.w	80069f4 <_dtoa_r+0xb54>
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	dd05      	ble.n	80067fc <_dtoa_r+0x95c>
 80067f0:	4629      	mov	r1, r5
 80067f2:	4632      	mov	r2, r6
 80067f4:	4658      	mov	r0, fp
 80067f6:	f000 fc25 	bl	8007044 <__lshift>
 80067fa:	4605      	mov	r5, r0
 80067fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d05a      	beq.n	80068b8 <_dtoa_r+0xa18>
 8006802:	6869      	ldr	r1, [r5, #4]
 8006804:	4658      	mov	r0, fp
 8006806:	f000 fa0f 	bl	8006c28 <_Balloc>
 800680a:	4606      	mov	r6, r0
 800680c:	b928      	cbnz	r0, 800681a <_dtoa_r+0x97a>
 800680e:	4b84      	ldr	r3, [pc, #528]	@ (8006a20 <_dtoa_r+0xb80>)
 8006810:	4602      	mov	r2, r0
 8006812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006816:	f7ff bb5a 	b.w	8005ece <_dtoa_r+0x2e>
 800681a:	692a      	ldr	r2, [r5, #16]
 800681c:	3202      	adds	r2, #2
 800681e:	0092      	lsls	r2, r2, #2
 8006820:	f105 010c 	add.w	r1, r5, #12
 8006824:	300c      	adds	r0, #12
 8006826:	f7ff faa4 	bl	8005d72 <memcpy>
 800682a:	2201      	movs	r2, #1
 800682c:	4631      	mov	r1, r6
 800682e:	4658      	mov	r0, fp
 8006830:	f000 fc08 	bl	8007044 <__lshift>
 8006834:	f10a 0301 	add.w	r3, sl, #1
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	9b00      	ldr	r3, [sp, #0]
 800683c:	4453      	add	r3, sl
 800683e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	462f      	mov	r7, r5
 8006848:	930a      	str	r3, [sp, #40]	@ 0x28
 800684a:	4605      	mov	r5, r0
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	4621      	mov	r1, r4
 8006850:	3b01      	subs	r3, #1
 8006852:	4648      	mov	r0, r9
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	f7ff fa9a 	bl	8005d8e <quorem>
 800685a:	4639      	mov	r1, r7
 800685c:	9002      	str	r0, [sp, #8]
 800685e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006862:	4648      	mov	r0, r9
 8006864:	f000 fc5a 	bl	800711c <__mcmp>
 8006868:	462a      	mov	r2, r5
 800686a:	9008      	str	r0, [sp, #32]
 800686c:	4621      	mov	r1, r4
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fc70 	bl	8007154 <__mdiff>
 8006874:	68c2      	ldr	r2, [r0, #12]
 8006876:	4606      	mov	r6, r0
 8006878:	bb02      	cbnz	r2, 80068bc <_dtoa_r+0xa1c>
 800687a:	4601      	mov	r1, r0
 800687c:	4648      	mov	r0, r9
 800687e:	f000 fc4d 	bl	800711c <__mcmp>
 8006882:	4602      	mov	r2, r0
 8006884:	4631      	mov	r1, r6
 8006886:	4658      	mov	r0, fp
 8006888:	920e      	str	r2, [sp, #56]	@ 0x38
 800688a:	f000 fa0d 	bl	8006ca8 <_Bfree>
 800688e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006892:	9e07      	ldr	r6, [sp, #28]
 8006894:	ea43 0102 	orr.w	r1, r3, r2
 8006898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800689a:	4319      	orrs	r1, r3
 800689c:	d110      	bne.n	80068c0 <_dtoa_r+0xa20>
 800689e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068a2:	d029      	beq.n	80068f8 <_dtoa_r+0xa58>
 80068a4:	9b08      	ldr	r3, [sp, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dd02      	ble.n	80068b0 <_dtoa_r+0xa10>
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068b0:	9b00      	ldr	r3, [sp, #0]
 80068b2:	f883 8000 	strb.w	r8, [r3]
 80068b6:	e63f      	b.n	8006538 <_dtoa_r+0x698>
 80068b8:	4628      	mov	r0, r5
 80068ba:	e7bb      	b.n	8006834 <_dtoa_r+0x994>
 80068bc:	2201      	movs	r2, #1
 80068be:	e7e1      	b.n	8006884 <_dtoa_r+0x9e4>
 80068c0:	9b08      	ldr	r3, [sp, #32]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	db04      	blt.n	80068d0 <_dtoa_r+0xa30>
 80068c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068c8:	430b      	orrs	r3, r1
 80068ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068cc:	430b      	orrs	r3, r1
 80068ce:	d120      	bne.n	8006912 <_dtoa_r+0xa72>
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	dded      	ble.n	80068b0 <_dtoa_r+0xa10>
 80068d4:	4649      	mov	r1, r9
 80068d6:	2201      	movs	r2, #1
 80068d8:	4658      	mov	r0, fp
 80068da:	f000 fbb3 	bl	8007044 <__lshift>
 80068de:	4621      	mov	r1, r4
 80068e0:	4681      	mov	r9, r0
 80068e2:	f000 fc1b 	bl	800711c <__mcmp>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	dc03      	bgt.n	80068f2 <_dtoa_r+0xa52>
 80068ea:	d1e1      	bne.n	80068b0 <_dtoa_r+0xa10>
 80068ec:	f018 0f01 	tst.w	r8, #1
 80068f0:	d0de      	beq.n	80068b0 <_dtoa_r+0xa10>
 80068f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068f6:	d1d8      	bne.n	80068aa <_dtoa_r+0xa0a>
 80068f8:	9a00      	ldr	r2, [sp, #0]
 80068fa:	2339      	movs	r3, #57	@ 0x39
 80068fc:	7013      	strb	r3, [r2, #0]
 80068fe:	4633      	mov	r3, r6
 8006900:	461e      	mov	r6, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006908:	2a39      	cmp	r2, #57	@ 0x39
 800690a:	d052      	beq.n	80069b2 <_dtoa_r+0xb12>
 800690c:	3201      	adds	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e612      	b.n	8006538 <_dtoa_r+0x698>
 8006912:	2a00      	cmp	r2, #0
 8006914:	dd07      	ble.n	8006926 <_dtoa_r+0xa86>
 8006916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800691a:	d0ed      	beq.n	80068f8 <_dtoa_r+0xa58>
 800691c:	9a00      	ldr	r2, [sp, #0]
 800691e:	f108 0301 	add.w	r3, r8, #1
 8006922:	7013      	strb	r3, [r2, #0]
 8006924:	e608      	b.n	8006538 <_dtoa_r+0x698>
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	9a07      	ldr	r2, [sp, #28]
 800692a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800692e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006930:	4293      	cmp	r3, r2
 8006932:	d028      	beq.n	8006986 <_dtoa_r+0xae6>
 8006934:	4649      	mov	r1, r9
 8006936:	2300      	movs	r3, #0
 8006938:	220a      	movs	r2, #10
 800693a:	4658      	mov	r0, fp
 800693c:	f000 f9d6 	bl	8006cec <__multadd>
 8006940:	42af      	cmp	r7, r5
 8006942:	4681      	mov	r9, r0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	f04f 020a 	mov.w	r2, #10
 800694c:	4639      	mov	r1, r7
 800694e:	4658      	mov	r0, fp
 8006950:	d107      	bne.n	8006962 <_dtoa_r+0xac2>
 8006952:	f000 f9cb 	bl	8006cec <__multadd>
 8006956:	4607      	mov	r7, r0
 8006958:	4605      	mov	r5, r0
 800695a:	9b07      	ldr	r3, [sp, #28]
 800695c:	3301      	adds	r3, #1
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	e774      	b.n	800684c <_dtoa_r+0x9ac>
 8006962:	f000 f9c3 	bl	8006cec <__multadd>
 8006966:	4629      	mov	r1, r5
 8006968:	4607      	mov	r7, r0
 800696a:	2300      	movs	r3, #0
 800696c:	220a      	movs	r2, #10
 800696e:	4658      	mov	r0, fp
 8006970:	f000 f9bc 	bl	8006cec <__multadd>
 8006974:	4605      	mov	r5, r0
 8006976:	e7f0      	b.n	800695a <_dtoa_r+0xaba>
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	bfcc      	ite	gt
 800697e:	461e      	movgt	r6, r3
 8006980:	2601      	movle	r6, #1
 8006982:	4456      	add	r6, sl
 8006984:	2700      	movs	r7, #0
 8006986:	4649      	mov	r1, r9
 8006988:	2201      	movs	r2, #1
 800698a:	4658      	mov	r0, fp
 800698c:	f000 fb5a 	bl	8007044 <__lshift>
 8006990:	4621      	mov	r1, r4
 8006992:	4681      	mov	r9, r0
 8006994:	f000 fbc2 	bl	800711c <__mcmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	dcb0      	bgt.n	80068fe <_dtoa_r+0xa5e>
 800699c:	d102      	bne.n	80069a4 <_dtoa_r+0xb04>
 800699e:	f018 0f01 	tst.w	r8, #1
 80069a2:	d1ac      	bne.n	80068fe <_dtoa_r+0xa5e>
 80069a4:	4633      	mov	r3, r6
 80069a6:	461e      	mov	r6, r3
 80069a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ac:	2a30      	cmp	r2, #48	@ 0x30
 80069ae:	d0fa      	beq.n	80069a6 <_dtoa_r+0xb06>
 80069b0:	e5c2      	b.n	8006538 <_dtoa_r+0x698>
 80069b2:	459a      	cmp	sl, r3
 80069b4:	d1a4      	bne.n	8006900 <_dtoa_r+0xa60>
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	2331      	movs	r3, #49	@ 0x31
 80069be:	f88a 3000 	strb.w	r3, [sl]
 80069c2:	e5b9      	b.n	8006538 <_dtoa_r+0x698>
 80069c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a24 <_dtoa_r+0xb84>
 80069ca:	b11b      	cbz	r3, 80069d4 <_dtoa_r+0xb34>
 80069cc:	f10a 0308 	add.w	r3, sl, #8
 80069d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4650      	mov	r0, sl
 80069d6:	b019      	add	sp, #100	@ 0x64
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f77f ae37 	ble.w	8006652 <_dtoa_r+0x7b2>
 80069e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069e8:	2001      	movs	r0, #1
 80069ea:	e655      	b.n	8006698 <_dtoa_r+0x7f8>
 80069ec:	9b00      	ldr	r3, [sp, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f77f aed6 	ble.w	80067a0 <_dtoa_r+0x900>
 80069f4:	4656      	mov	r6, sl
 80069f6:	4621      	mov	r1, r4
 80069f8:	4648      	mov	r0, r9
 80069fa:	f7ff f9c8 	bl	8005d8e <quorem>
 80069fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a02:	f806 8b01 	strb.w	r8, [r6], #1
 8006a06:	9b00      	ldr	r3, [sp, #0]
 8006a08:	eba6 020a 	sub.w	r2, r6, sl
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	ddb3      	ble.n	8006978 <_dtoa_r+0xad8>
 8006a10:	4649      	mov	r1, r9
 8006a12:	2300      	movs	r3, #0
 8006a14:	220a      	movs	r2, #10
 8006a16:	4658      	mov	r0, fp
 8006a18:	f000 f968 	bl	8006cec <__multadd>
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	e7ea      	b.n	80069f6 <_dtoa_r+0xb56>
 8006a20:	08007d74 	.word	0x08007d74
 8006a24:	08007cf8 	.word	0x08007cf8

08006a28 <_free_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d041      	beq.n	8006ab4 <_free_r+0x8c>
 8006a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a34:	1f0c      	subs	r4, r1, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bfb8      	it	lt
 8006a3a:	18e4      	addlt	r4, r4, r3
 8006a3c:	f000 f8e8 	bl	8006c10 <__malloc_lock>
 8006a40:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab8 <_free_r+0x90>)
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	b933      	cbnz	r3, 8006a54 <_free_r+0x2c>
 8006a46:	6063      	str	r3, [r4, #4]
 8006a48:	6014      	str	r4, [r2, #0]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a50:	f000 b8e4 	b.w	8006c1c <__malloc_unlock>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d908      	bls.n	8006a6a <_free_r+0x42>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	1821      	adds	r1, r4, r0
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	bf01      	itttt	eq
 8006a60:	6819      	ldreq	r1, [r3, #0]
 8006a62:	685b      	ldreq	r3, [r3, #4]
 8006a64:	1809      	addeq	r1, r1, r0
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	e7ed      	b.n	8006a46 <_free_r+0x1e>
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b10b      	cbz	r3, 8006a74 <_free_r+0x4c>
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d9fa      	bls.n	8006a6a <_free_r+0x42>
 8006a74:	6811      	ldr	r1, [r2, #0]
 8006a76:	1850      	adds	r0, r2, r1
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d10b      	bne.n	8006a94 <_free_r+0x6c>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	4401      	add	r1, r0
 8006a80:	1850      	adds	r0, r2, r1
 8006a82:	4283      	cmp	r3, r0
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	d1e0      	bne.n	8006a4a <_free_r+0x22>
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	6053      	str	r3, [r2, #4]
 8006a8e:	4408      	add	r0, r1
 8006a90:	6010      	str	r0, [r2, #0]
 8006a92:	e7da      	b.n	8006a4a <_free_r+0x22>
 8006a94:	d902      	bls.n	8006a9c <_free_r+0x74>
 8006a96:	230c      	movs	r3, #12
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	e7d6      	b.n	8006a4a <_free_r+0x22>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf04      	itt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	bf04      	itt	eq
 8006aac:	1809      	addeq	r1, r1, r0
 8006aae:	6021      	streq	r1, [r4, #0]
 8006ab0:	6054      	str	r4, [r2, #4]
 8006ab2:	e7ca      	b.n	8006a4a <_free_r+0x22>
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000904 	.word	0x20000904

08006abc <malloc>:
 8006abc:	4b02      	ldr	r3, [pc, #8]	@ (8006ac8 <malloc+0xc>)
 8006abe:	4601      	mov	r1, r0
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	f000 b825 	b.w	8006b10 <_malloc_r>
 8006ac6:	bf00      	nop
 8006ac8:	20000018 	.word	0x20000018

08006acc <sbrk_aligned>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4e0f      	ldr	r6, [pc, #60]	@ (8006b0c <sbrk_aligned+0x40>)
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	6831      	ldr	r1, [r6, #0]
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	b911      	cbnz	r1, 8006ade <sbrk_aligned+0x12>
 8006ad8:	f000 fece 	bl	8007878 <_sbrk_r>
 8006adc:	6030      	str	r0, [r6, #0]
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 fec9 	bl	8007878 <_sbrk_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d103      	bne.n	8006af2 <sbrk_aligned+0x26>
 8006aea:	f04f 34ff 	mov.w	r4, #4294967295
 8006aee:	4620      	mov	r0, r4
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
 8006af2:	1cc4      	adds	r4, r0, #3
 8006af4:	f024 0403 	bic.w	r4, r4, #3
 8006af8:	42a0      	cmp	r0, r4
 8006afa:	d0f8      	beq.n	8006aee <sbrk_aligned+0x22>
 8006afc:	1a21      	subs	r1, r4, r0
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 feba 	bl	8007878 <_sbrk_r>
 8006b04:	3001      	adds	r0, #1
 8006b06:	d1f2      	bne.n	8006aee <sbrk_aligned+0x22>
 8006b08:	e7ef      	b.n	8006aea <sbrk_aligned+0x1e>
 8006b0a:	bf00      	nop
 8006b0c:	20000900 	.word	0x20000900

08006b10 <_malloc_r>:
 8006b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b14:	1ccd      	adds	r5, r1, #3
 8006b16:	f025 0503 	bic.w	r5, r5, #3
 8006b1a:	3508      	adds	r5, #8
 8006b1c:	2d0c      	cmp	r5, #12
 8006b1e:	bf38      	it	cc
 8006b20:	250c      	movcc	r5, #12
 8006b22:	2d00      	cmp	r5, #0
 8006b24:	4606      	mov	r6, r0
 8006b26:	db01      	blt.n	8006b2c <_malloc_r+0x1c>
 8006b28:	42a9      	cmp	r1, r5
 8006b2a:	d904      	bls.n	8006b36 <_malloc_r+0x26>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	2000      	movs	r0, #0
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c0c <_malloc_r+0xfc>
 8006b3a:	f000 f869 	bl	8006c10 <__malloc_lock>
 8006b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b42:	461c      	mov	r4, r3
 8006b44:	bb44      	cbnz	r4, 8006b98 <_malloc_r+0x88>
 8006b46:	4629      	mov	r1, r5
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f7ff ffbf 	bl	8006acc <sbrk_aligned>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	4604      	mov	r4, r0
 8006b52:	d158      	bne.n	8006c06 <_malloc_r+0xf6>
 8006b54:	f8d8 4000 	ldr.w	r4, [r8]
 8006b58:	4627      	mov	r7, r4
 8006b5a:	2f00      	cmp	r7, #0
 8006b5c:	d143      	bne.n	8006be6 <_malloc_r+0xd6>
 8006b5e:	2c00      	cmp	r4, #0
 8006b60:	d04b      	beq.n	8006bfa <_malloc_r+0xea>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	4639      	mov	r1, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	eb04 0903 	add.w	r9, r4, r3
 8006b6c:	f000 fe84 	bl	8007878 <_sbrk_r>
 8006b70:	4581      	cmp	r9, r0
 8006b72:	d142      	bne.n	8006bfa <_malloc_r+0xea>
 8006b74:	6821      	ldr	r1, [r4, #0]
 8006b76:	1a6d      	subs	r5, r5, r1
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff ffa6 	bl	8006acc <sbrk_aligned>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d03a      	beq.n	8006bfa <_malloc_r+0xea>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	442b      	add	r3, r5
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	bb62      	cbnz	r2, 8006bec <_malloc_r+0xdc>
 8006b92:	f8c8 7000 	str.w	r7, [r8]
 8006b96:	e00f      	b.n	8006bb8 <_malloc_r+0xa8>
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	1b52      	subs	r2, r2, r5
 8006b9c:	d420      	bmi.n	8006be0 <_malloc_r+0xd0>
 8006b9e:	2a0b      	cmp	r2, #11
 8006ba0:	d917      	bls.n	8006bd2 <_malloc_r+0xc2>
 8006ba2:	1961      	adds	r1, r4, r5
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	6025      	str	r5, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	6059      	strne	r1, [r3, #4]
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	bf08      	it	eq
 8006bb0:	f8c8 1000 	streq.w	r1, [r8]
 8006bb4:	5162      	str	r2, [r4, r5]
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 f82f 	bl	8006c1c <__malloc_unlock>
 8006bbe:	f104 000b 	add.w	r0, r4, #11
 8006bc2:	1d23      	adds	r3, r4, #4
 8006bc4:	f020 0007 	bic.w	r0, r0, #7
 8006bc8:	1ac2      	subs	r2, r0, r3
 8006bca:	bf1c      	itt	ne
 8006bcc:	1a1b      	subne	r3, r3, r0
 8006bce:	50a3      	strne	r3, [r4, r2]
 8006bd0:	e7af      	b.n	8006b32 <_malloc_r+0x22>
 8006bd2:	6862      	ldr	r2, [r4, #4]
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	bf0c      	ite	eq
 8006bd8:	f8c8 2000 	streq.w	r2, [r8]
 8006bdc:	605a      	strne	r2, [r3, #4]
 8006bde:	e7eb      	b.n	8006bb8 <_malloc_r+0xa8>
 8006be0:	4623      	mov	r3, r4
 8006be2:	6864      	ldr	r4, [r4, #4]
 8006be4:	e7ae      	b.n	8006b44 <_malloc_r+0x34>
 8006be6:	463c      	mov	r4, r7
 8006be8:	687f      	ldr	r7, [r7, #4]
 8006bea:	e7b6      	b.n	8006b5a <_malloc_r+0x4a>
 8006bec:	461a      	mov	r2, r3
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d1fb      	bne.n	8006bec <_malloc_r+0xdc>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6053      	str	r3, [r2, #4]
 8006bf8:	e7de      	b.n	8006bb8 <_malloc_r+0xa8>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	6033      	str	r3, [r6, #0]
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f000 f80c 	bl	8006c1c <__malloc_unlock>
 8006c04:	e794      	b.n	8006b30 <_malloc_r+0x20>
 8006c06:	6005      	str	r5, [r0, #0]
 8006c08:	e7d6      	b.n	8006bb8 <_malloc_r+0xa8>
 8006c0a:	bf00      	nop
 8006c0c:	20000904 	.word	0x20000904

08006c10 <__malloc_lock>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__malloc_lock+0x8>)
 8006c12:	f7ff b8ac 	b.w	8005d6e <__retarget_lock_acquire_recursive>
 8006c16:	bf00      	nop
 8006c18:	200008fc 	.word	0x200008fc

08006c1c <__malloc_unlock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__malloc_unlock+0x8>)
 8006c1e:	f7ff b8a7 	b.w	8005d70 <__retarget_lock_release_recursive>
 8006c22:	bf00      	nop
 8006c24:	200008fc 	.word	0x200008fc

08006c28 <_Balloc>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	69c6      	ldr	r6, [r0, #28]
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	b976      	cbnz	r6, 8006c50 <_Balloc+0x28>
 8006c32:	2010      	movs	r0, #16
 8006c34:	f7ff ff42 	bl	8006abc <malloc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	61e0      	str	r0, [r4, #28]
 8006c3c:	b920      	cbnz	r0, 8006c48 <_Balloc+0x20>
 8006c3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ca0 <_Balloc+0x78>)
 8006c40:	4818      	ldr	r0, [pc, #96]	@ (8006ca4 <_Balloc+0x7c>)
 8006c42:	216b      	movs	r1, #107	@ 0x6b
 8006c44:	f000 fe28 	bl	8007898 <__assert_func>
 8006c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c4c:	6006      	str	r6, [r0, #0]
 8006c4e:	60c6      	str	r6, [r0, #12]
 8006c50:	69e6      	ldr	r6, [r4, #28]
 8006c52:	68f3      	ldr	r3, [r6, #12]
 8006c54:	b183      	cbz	r3, 8006c78 <_Balloc+0x50>
 8006c56:	69e3      	ldr	r3, [r4, #28]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c5e:	b9b8      	cbnz	r0, 8006c90 <_Balloc+0x68>
 8006c60:	2101      	movs	r1, #1
 8006c62:	fa01 f605 	lsl.w	r6, r1, r5
 8006c66:	1d72      	adds	r2, r6, #5
 8006c68:	0092      	lsls	r2, r2, #2
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fe32 	bl	80078d4 <_calloc_r>
 8006c70:	b160      	cbz	r0, 8006c8c <_Balloc+0x64>
 8006c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c76:	e00e      	b.n	8006c96 <_Balloc+0x6e>
 8006c78:	2221      	movs	r2, #33	@ 0x21
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fe29 	bl	80078d4 <_calloc_r>
 8006c82:	69e3      	ldr	r3, [r4, #28]
 8006c84:	60f0      	str	r0, [r6, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e4      	bne.n	8006c56 <_Balloc+0x2e>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	6802      	ldr	r2, [r0, #0]
 8006c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c96:	2300      	movs	r3, #0
 8006c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c9c:	e7f7      	b.n	8006c8e <_Balloc+0x66>
 8006c9e:	bf00      	nop
 8006ca0:	08007d05 	.word	0x08007d05
 8006ca4:	08007d85 	.word	0x08007d85

08006ca8 <_Bfree>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	69c6      	ldr	r6, [r0, #28]
 8006cac:	4605      	mov	r5, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	b976      	cbnz	r6, 8006cd0 <_Bfree+0x28>
 8006cb2:	2010      	movs	r0, #16
 8006cb4:	f7ff ff02 	bl	8006abc <malloc>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	61e8      	str	r0, [r5, #28]
 8006cbc:	b920      	cbnz	r0, 8006cc8 <_Bfree+0x20>
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <_Bfree+0x3c>)
 8006cc0:	4809      	ldr	r0, [pc, #36]	@ (8006ce8 <_Bfree+0x40>)
 8006cc2:	218f      	movs	r1, #143	@ 0x8f
 8006cc4:	f000 fde8 	bl	8007898 <__assert_func>
 8006cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ccc:	6006      	str	r6, [r0, #0]
 8006cce:	60c6      	str	r6, [r0, #12]
 8006cd0:	b13c      	cbz	r4, 8006ce2 <_Bfree+0x3a>
 8006cd2:	69eb      	ldr	r3, [r5, #28]
 8006cd4:	6862      	ldr	r2, [r4, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cdc:	6021      	str	r1, [r4, #0]
 8006cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	08007d05 	.word	0x08007d05
 8006ce8:	08007d85 	.word	0x08007d85

08006cec <__multadd>:
 8006cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf0:	690d      	ldr	r5, [r1, #16]
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	461e      	mov	r6, r3
 8006cf8:	f101 0c14 	add.w	ip, r1, #20
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8006d02:	b299      	uxth	r1, r3
 8006d04:	fb02 6101 	mla	r1, r2, r1, r6
 8006d08:	0c1e      	lsrs	r6, r3, #16
 8006d0a:	0c0b      	lsrs	r3, r1, #16
 8006d0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d10:	b289      	uxth	r1, r1
 8006d12:	3001      	adds	r0, #1
 8006d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d18:	4285      	cmp	r5, r0
 8006d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d22:	dcec      	bgt.n	8006cfe <__multadd+0x12>
 8006d24:	b30e      	cbz	r6, 8006d6a <__multadd+0x7e>
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	dc19      	bgt.n	8006d60 <__multadd+0x74>
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	3101      	adds	r1, #1
 8006d32:	f7ff ff79 	bl	8006c28 <_Balloc>
 8006d36:	4680      	mov	r8, r0
 8006d38:	b928      	cbnz	r0, 8006d46 <__multadd+0x5a>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <__multadd+0x84>)
 8006d3e:	480d      	ldr	r0, [pc, #52]	@ (8006d74 <__multadd+0x88>)
 8006d40:	21ba      	movs	r1, #186	@ 0xba
 8006d42:	f000 fda9 	bl	8007898 <__assert_func>
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	3202      	adds	r2, #2
 8006d4a:	f104 010c 	add.w	r1, r4, #12
 8006d4e:	0092      	lsls	r2, r2, #2
 8006d50:	300c      	adds	r0, #12
 8006d52:	f7ff f80e 	bl	8005d72 <memcpy>
 8006d56:	4621      	mov	r1, r4
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ffa5 	bl	8006ca8 <_Bfree>
 8006d5e:	4644      	mov	r4, r8
 8006d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d64:	3501      	adds	r5, #1
 8006d66:	615e      	str	r6, [r3, #20]
 8006d68:	6125      	str	r5, [r4, #16]
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	08007d74 	.word	0x08007d74
 8006d74:	08007d85 	.word	0x08007d85

08006d78 <__hi0bits>:
 8006d78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	bf36      	itet	cc
 8006d80:	0403      	lslcc	r3, r0, #16
 8006d82:	2000      	movcs	r0, #0
 8006d84:	2010      	movcc	r0, #16
 8006d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d8a:	bf3c      	itt	cc
 8006d8c:	021b      	lslcc	r3, r3, #8
 8006d8e:	3008      	addcc	r0, #8
 8006d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d94:	bf3c      	itt	cc
 8006d96:	011b      	lslcc	r3, r3, #4
 8006d98:	3004      	addcc	r0, #4
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9e:	bf3c      	itt	cc
 8006da0:	009b      	lslcc	r3, r3, #2
 8006da2:	3002      	addcc	r0, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	db05      	blt.n	8006db4 <__hi0bits+0x3c>
 8006da8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dac:	f100 0001 	add.w	r0, r0, #1
 8006db0:	bf08      	it	eq
 8006db2:	2020      	moveq	r0, #32
 8006db4:	4770      	bx	lr

08006db6 <__lo0bits>:
 8006db6:	6803      	ldr	r3, [r0, #0]
 8006db8:	4602      	mov	r2, r0
 8006dba:	f013 0007 	ands.w	r0, r3, #7
 8006dbe:	d00b      	beq.n	8006dd8 <__lo0bits+0x22>
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	d421      	bmi.n	8006e08 <__lo0bits+0x52>
 8006dc4:	0798      	lsls	r0, r3, #30
 8006dc6:	bf49      	itett	mi
 8006dc8:	085b      	lsrmi	r3, r3, #1
 8006dca:	089b      	lsrpl	r3, r3, #2
 8006dcc:	2001      	movmi	r0, #1
 8006dce:	6013      	strmi	r3, [r2, #0]
 8006dd0:	bf5c      	itt	pl
 8006dd2:	6013      	strpl	r3, [r2, #0]
 8006dd4:	2002      	movpl	r0, #2
 8006dd6:	4770      	bx	lr
 8006dd8:	b299      	uxth	r1, r3
 8006dda:	b909      	cbnz	r1, 8006de0 <__lo0bits+0x2a>
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	2010      	movs	r0, #16
 8006de0:	b2d9      	uxtb	r1, r3
 8006de2:	b909      	cbnz	r1, 8006de8 <__lo0bits+0x32>
 8006de4:	3008      	adds	r0, #8
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	0719      	lsls	r1, r3, #28
 8006dea:	bf04      	itt	eq
 8006dec:	091b      	lsreq	r3, r3, #4
 8006dee:	3004      	addeq	r0, #4
 8006df0:	0799      	lsls	r1, r3, #30
 8006df2:	bf04      	itt	eq
 8006df4:	089b      	lsreq	r3, r3, #2
 8006df6:	3002      	addeq	r0, #2
 8006df8:	07d9      	lsls	r1, r3, #31
 8006dfa:	d403      	bmi.n	8006e04 <__lo0bits+0x4e>
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	f100 0001 	add.w	r0, r0, #1
 8006e02:	d003      	beq.n	8006e0c <__lo0bits+0x56>
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4770      	bx	lr
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4770      	bx	lr
 8006e0c:	2020      	movs	r0, #32
 8006e0e:	4770      	bx	lr

08006e10 <__i2b>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	2101      	movs	r1, #1
 8006e16:	f7ff ff07 	bl	8006c28 <_Balloc>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <__i2b+0x1a>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <__i2b+0x24>)
 8006e20:	4805      	ldr	r0, [pc, #20]	@ (8006e38 <__i2b+0x28>)
 8006e22:	f240 1145 	movw	r1, #325	@ 0x145
 8006e26:	f000 fd37 	bl	8007898 <__assert_func>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6144      	str	r4, [r0, #20]
 8006e2e:	6103      	str	r3, [r0, #16]
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08007d74 	.word	0x08007d74
 8006e38:	08007d85 	.word	0x08007d85

08006e3c <__multiply>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4614      	mov	r4, r2
 8006e42:	690a      	ldr	r2, [r1, #16]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	bfa8      	it	ge
 8006e4a:	4623      	movge	r3, r4
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	bfa4      	itt	ge
 8006e50:	460c      	movge	r4, r1
 8006e52:	461f      	movge	r7, r3
 8006e54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	6861      	ldr	r1, [r4, #4]
 8006e60:	eb0a 0609 	add.w	r6, sl, r9
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	b085      	sub	sp, #20
 8006e68:	bfb8      	it	lt
 8006e6a:	3101      	addlt	r1, #1
 8006e6c:	f7ff fedc 	bl	8006c28 <_Balloc>
 8006e70:	b930      	cbnz	r0, 8006e80 <__multiply+0x44>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b44      	ldr	r3, [pc, #272]	@ (8006f88 <__multiply+0x14c>)
 8006e76:	4845      	ldr	r0, [pc, #276]	@ (8006f8c <__multiply+0x150>)
 8006e78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e7c:	f000 fd0c 	bl	8007898 <__assert_func>
 8006e80:	f100 0514 	add.w	r5, r0, #20
 8006e84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e88:	462b      	mov	r3, r5
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4543      	cmp	r3, r8
 8006e8e:	d321      	bcc.n	8006ed4 <__multiply+0x98>
 8006e90:	f107 0114 	add.w	r1, r7, #20
 8006e94:	f104 0214 	add.w	r2, r4, #20
 8006e98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	1b13      	subs	r3, r2, r4
 8006ea4:	3b15      	subs	r3, #21
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	3304      	adds	r3, #4
 8006eac:	f104 0715 	add.w	r7, r4, #21
 8006eb0:	42ba      	cmp	r2, r7
 8006eb2:	bf38      	it	cc
 8006eb4:	2304      	movcc	r3, #4
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	9b02      	ldr	r3, [sp, #8]
 8006eba:	9103      	str	r1, [sp, #12]
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	d80c      	bhi.n	8006eda <__multiply+0x9e>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	dd03      	ble.n	8006ecc <__multiply+0x90>
 8006ec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05b      	beq.n	8006f84 <__multiply+0x148>
 8006ecc:	6106      	str	r6, [r0, #16]
 8006ece:	b005      	add	sp, #20
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	f843 2b04 	str.w	r2, [r3], #4
 8006ed8:	e7d8      	b.n	8006e8c <__multiply+0x50>
 8006eda:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ede:	f1ba 0f00 	cmp.w	sl, #0
 8006ee2:	d024      	beq.n	8006f2e <__multiply+0xf2>
 8006ee4:	f104 0e14 	add.w	lr, r4, #20
 8006ee8:	46a9      	mov	r9, r5
 8006eea:	f04f 0c00 	mov.w	ip, #0
 8006eee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ef6:	fa1f fb87 	uxth.w	fp, r7
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f04:	f8d9 7000 	ldr.w	r7, [r9]
 8006f08:	4463      	add	r3, ip
 8006f0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f1c:	4572      	cmp	r2, lr
 8006f1e:	f849 3b04 	str.w	r3, [r9], #4
 8006f22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f26:	d8e2      	bhi.n	8006eee <__multiply+0xb2>
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	f845 c003 	str.w	ip, [r5, r3]
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f34:	3104      	adds	r1, #4
 8006f36:	f1b9 0f00 	cmp.w	r9, #0
 8006f3a:	d021      	beq.n	8006f80 <__multiply+0x144>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	f104 0c14 	add.w	ip, r4, #20
 8006f42:	46ae      	mov	lr, r5
 8006f44:	f04f 0a00 	mov.w	sl, #0
 8006f48:	f8bc b000 	ldrh.w	fp, [ip]
 8006f4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f50:	fb09 770b 	mla	r7, r9, fp, r7
 8006f54:	4457      	add	r7, sl
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f5c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f68:	f8be 3000 	ldrh.w	r3, [lr]
 8006f6c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f74:	4562      	cmp	r2, ip
 8006f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f7a:	d8e5      	bhi.n	8006f48 <__multiply+0x10c>
 8006f7c:	9f01      	ldr	r7, [sp, #4]
 8006f7e:	51eb      	str	r3, [r5, r7]
 8006f80:	3504      	adds	r5, #4
 8006f82:	e799      	b.n	8006eb8 <__multiply+0x7c>
 8006f84:	3e01      	subs	r6, #1
 8006f86:	e79b      	b.n	8006ec0 <__multiply+0x84>
 8006f88:	08007d74 	.word	0x08007d74
 8006f8c:	08007d85 	.word	0x08007d85

08006f90 <__pow5mult>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4615      	mov	r5, r2
 8006f96:	f012 0203 	ands.w	r2, r2, #3
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	d007      	beq.n	8006fb0 <__pow5mult+0x20>
 8006fa0:	4c25      	ldr	r4, [pc, #148]	@ (8007038 <__pow5mult+0xa8>)
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006faa:	f7ff fe9f 	bl	8006cec <__multadd>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	10ad      	asrs	r5, r5, #2
 8006fb2:	d03d      	beq.n	8007030 <__pow5mult+0xa0>
 8006fb4:	69fc      	ldr	r4, [r7, #28]
 8006fb6:	b97c      	cbnz	r4, 8006fd8 <__pow5mult+0x48>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f7ff fd7f 	bl	8006abc <malloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	61f8      	str	r0, [r7, #28]
 8006fc2:	b928      	cbnz	r0, 8006fd0 <__pow5mult+0x40>
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800703c <__pow5mult+0xac>)
 8006fc6:	481e      	ldr	r0, [pc, #120]	@ (8007040 <__pow5mult+0xb0>)
 8006fc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fcc:	f000 fc64 	bl	8007898 <__assert_func>
 8006fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd4:	6004      	str	r4, [r0, #0]
 8006fd6:	60c4      	str	r4, [r0, #12]
 8006fd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe0:	b94c      	cbnz	r4, 8006ff6 <__pow5mult+0x66>
 8006fe2:	f240 2171 	movw	r1, #625	@ 0x271
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7ff ff12 	bl	8006e10 <__i2b>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	f04f 0900 	mov.w	r9, #0
 8006ffa:	07eb      	lsls	r3, r5, #31
 8006ffc:	d50a      	bpl.n	8007014 <__pow5mult+0x84>
 8006ffe:	4631      	mov	r1, r6
 8007000:	4622      	mov	r2, r4
 8007002:	4638      	mov	r0, r7
 8007004:	f7ff ff1a 	bl	8006e3c <__multiply>
 8007008:	4631      	mov	r1, r6
 800700a:	4680      	mov	r8, r0
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff fe4b 	bl	8006ca8 <_Bfree>
 8007012:	4646      	mov	r6, r8
 8007014:	106d      	asrs	r5, r5, #1
 8007016:	d00b      	beq.n	8007030 <__pow5mult+0xa0>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	b938      	cbnz	r0, 800702c <__pow5mult+0x9c>
 800701c:	4622      	mov	r2, r4
 800701e:	4621      	mov	r1, r4
 8007020:	4638      	mov	r0, r7
 8007022:	f7ff ff0b 	bl	8006e3c <__multiply>
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	f8c0 9000 	str.w	r9, [r0]
 800702c:	4604      	mov	r4, r0
 800702e:	e7e4      	b.n	8006ffa <__pow5mult+0x6a>
 8007030:	4630      	mov	r0, r6
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	bf00      	nop
 8007038:	08007de0 	.word	0x08007de0
 800703c:	08007d05 	.word	0x08007d05
 8007040:	08007d85 	.word	0x08007d85

08007044 <__lshift>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	460c      	mov	r4, r1
 800704a:	6849      	ldr	r1, [r1, #4]
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	4607      	mov	r7, r0
 8007056:	4691      	mov	r9, r2
 8007058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800705c:	f108 0601 	add.w	r6, r8, #1
 8007060:	42b3      	cmp	r3, r6
 8007062:	db0b      	blt.n	800707c <__lshift+0x38>
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff fddf 	bl	8006c28 <_Balloc>
 800706a:	4605      	mov	r5, r0
 800706c:	b948      	cbnz	r0, 8007082 <__lshift+0x3e>
 800706e:	4602      	mov	r2, r0
 8007070:	4b28      	ldr	r3, [pc, #160]	@ (8007114 <__lshift+0xd0>)
 8007072:	4829      	ldr	r0, [pc, #164]	@ (8007118 <__lshift+0xd4>)
 8007074:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007078:	f000 fc0e 	bl	8007898 <__assert_func>
 800707c:	3101      	adds	r1, #1
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	e7ee      	b.n	8007060 <__lshift+0x1c>
 8007082:	2300      	movs	r3, #0
 8007084:	f100 0114 	add.w	r1, r0, #20
 8007088:	f100 0210 	add.w	r2, r0, #16
 800708c:	4618      	mov	r0, r3
 800708e:	4553      	cmp	r3, sl
 8007090:	db33      	blt.n	80070fa <__lshift+0xb6>
 8007092:	6920      	ldr	r0, [r4, #16]
 8007094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007098:	f104 0314 	add.w	r3, r4, #20
 800709c:	f019 091f 	ands.w	r9, r9, #31
 80070a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070a8:	d02b      	beq.n	8007102 <__lshift+0xbe>
 80070aa:	f1c9 0e20 	rsb	lr, r9, #32
 80070ae:	468a      	mov	sl, r1
 80070b0:	2200      	movs	r2, #0
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	fa00 f009 	lsl.w	r0, r0, r9
 80070b8:	4310      	orrs	r0, r2
 80070ba:	f84a 0b04 	str.w	r0, [sl], #4
 80070be:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c2:	459c      	cmp	ip, r3
 80070c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070c8:	d8f3      	bhi.n	80070b2 <__lshift+0x6e>
 80070ca:	ebac 0304 	sub.w	r3, ip, r4
 80070ce:	3b15      	subs	r3, #21
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	3304      	adds	r3, #4
 80070d6:	f104 0015 	add.w	r0, r4, #21
 80070da:	4584      	cmp	ip, r0
 80070dc:	bf38      	it	cc
 80070de:	2304      	movcc	r3, #4
 80070e0:	50ca      	str	r2, [r1, r3]
 80070e2:	b10a      	cbz	r2, 80070e8 <__lshift+0xa4>
 80070e4:	f108 0602 	add.w	r6, r8, #2
 80070e8:	3e01      	subs	r6, #1
 80070ea:	4638      	mov	r0, r7
 80070ec:	612e      	str	r6, [r5, #16]
 80070ee:	4621      	mov	r1, r4
 80070f0:	f7ff fdda 	bl	8006ca8 <_Bfree>
 80070f4:	4628      	mov	r0, r5
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fe:	3301      	adds	r3, #1
 8007100:	e7c5      	b.n	800708e <__lshift+0x4a>
 8007102:	3904      	subs	r1, #4
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	f841 2f04 	str.w	r2, [r1, #4]!
 800710c:	459c      	cmp	ip, r3
 800710e:	d8f9      	bhi.n	8007104 <__lshift+0xc0>
 8007110:	e7ea      	b.n	80070e8 <__lshift+0xa4>
 8007112:	bf00      	nop
 8007114:	08007d74 	.word	0x08007d74
 8007118:	08007d85 	.word	0x08007d85

0800711c <__mcmp>:
 800711c:	690a      	ldr	r2, [r1, #16]
 800711e:	4603      	mov	r3, r0
 8007120:	6900      	ldr	r0, [r0, #16]
 8007122:	1a80      	subs	r0, r0, r2
 8007124:	b530      	push	{r4, r5, lr}
 8007126:	d10e      	bne.n	8007146 <__mcmp+0x2a>
 8007128:	3314      	adds	r3, #20
 800712a:	3114      	adds	r1, #20
 800712c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007130:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800713c:	4295      	cmp	r5, r2
 800713e:	d003      	beq.n	8007148 <__mcmp+0x2c>
 8007140:	d205      	bcs.n	800714e <__mcmp+0x32>
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	42a3      	cmp	r3, r4
 800714a:	d3f3      	bcc.n	8007134 <__mcmp+0x18>
 800714c:	e7fb      	b.n	8007146 <__mcmp+0x2a>
 800714e:	2001      	movs	r0, #1
 8007150:	e7f9      	b.n	8007146 <__mcmp+0x2a>
	...

08007154 <__mdiff>:
 8007154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	4689      	mov	r9, r1
 800715a:	4606      	mov	r6, r0
 800715c:	4611      	mov	r1, r2
 800715e:	4648      	mov	r0, r9
 8007160:	4614      	mov	r4, r2
 8007162:	f7ff ffdb 	bl	800711c <__mcmp>
 8007166:	1e05      	subs	r5, r0, #0
 8007168:	d112      	bne.n	8007190 <__mdiff+0x3c>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff fd5b 	bl	8006c28 <_Balloc>
 8007172:	4602      	mov	r2, r0
 8007174:	b928      	cbnz	r0, 8007182 <__mdiff+0x2e>
 8007176:	4b3f      	ldr	r3, [pc, #252]	@ (8007274 <__mdiff+0x120>)
 8007178:	f240 2137 	movw	r1, #567	@ 0x237
 800717c:	483e      	ldr	r0, [pc, #248]	@ (8007278 <__mdiff+0x124>)
 800717e:	f000 fb8b 	bl	8007898 <__assert_func>
 8007182:	2301      	movs	r3, #1
 8007184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007188:	4610      	mov	r0, r2
 800718a:	b003      	add	sp, #12
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	bfbc      	itt	lt
 8007192:	464b      	movlt	r3, r9
 8007194:	46a1      	movlt	r9, r4
 8007196:	4630      	mov	r0, r6
 8007198:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800719c:	bfba      	itte	lt
 800719e:	461c      	movlt	r4, r3
 80071a0:	2501      	movlt	r5, #1
 80071a2:	2500      	movge	r5, #0
 80071a4:	f7ff fd40 	bl	8006c28 <_Balloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	b918      	cbnz	r0, 80071b4 <__mdiff+0x60>
 80071ac:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <__mdiff+0x120>)
 80071ae:	f240 2145 	movw	r1, #581	@ 0x245
 80071b2:	e7e3      	b.n	800717c <__mdiff+0x28>
 80071b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071b8:	6926      	ldr	r6, [r4, #16]
 80071ba:	60c5      	str	r5, [r0, #12]
 80071bc:	f109 0310 	add.w	r3, r9, #16
 80071c0:	f109 0514 	add.w	r5, r9, #20
 80071c4:	f104 0e14 	add.w	lr, r4, #20
 80071c8:	f100 0b14 	add.w	fp, r0, #20
 80071cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	46d9      	mov	r9, fp
 80071d8:	f04f 0c00 	mov.w	ip, #0
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	fa1f f38a 	uxth.w	r3, sl
 80071ec:	4619      	mov	r1, r3
 80071ee:	b283      	uxth	r3, r0
 80071f0:	1acb      	subs	r3, r1, r3
 80071f2:	0c00      	lsrs	r0, r0, #16
 80071f4:	4463      	add	r3, ip
 80071f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007204:	4576      	cmp	r6, lr
 8007206:	f849 3b04 	str.w	r3, [r9], #4
 800720a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800720e:	d8e5      	bhi.n	80071dc <__mdiff+0x88>
 8007210:	1b33      	subs	r3, r6, r4
 8007212:	3b15      	subs	r3, #21
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	3415      	adds	r4, #21
 800721a:	3304      	adds	r3, #4
 800721c:	42a6      	cmp	r6, r4
 800721e:	bf38      	it	cc
 8007220:	2304      	movcc	r3, #4
 8007222:	441d      	add	r5, r3
 8007224:	445b      	add	r3, fp
 8007226:	461e      	mov	r6, r3
 8007228:	462c      	mov	r4, r5
 800722a:	4544      	cmp	r4, r8
 800722c:	d30e      	bcc.n	800724c <__mdiff+0xf8>
 800722e:	f108 0103 	add.w	r1, r8, #3
 8007232:	1b49      	subs	r1, r1, r5
 8007234:	f021 0103 	bic.w	r1, r1, #3
 8007238:	3d03      	subs	r5, #3
 800723a:	45a8      	cmp	r8, r5
 800723c:	bf38      	it	cc
 800723e:	2100      	movcc	r1, #0
 8007240:	440b      	add	r3, r1
 8007242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007246:	b191      	cbz	r1, 800726e <__mdiff+0x11a>
 8007248:	6117      	str	r7, [r2, #16]
 800724a:	e79d      	b.n	8007188 <__mdiff+0x34>
 800724c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007250:	46e6      	mov	lr, ip
 8007252:	0c08      	lsrs	r0, r1, #16
 8007254:	fa1c fc81 	uxtah	ip, ip, r1
 8007258:	4471      	add	r1, lr
 800725a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800725e:	b289      	uxth	r1, r1
 8007260:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007264:	f846 1b04 	str.w	r1, [r6], #4
 8007268:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800726c:	e7dd      	b.n	800722a <__mdiff+0xd6>
 800726e:	3f01      	subs	r7, #1
 8007270:	e7e7      	b.n	8007242 <__mdiff+0xee>
 8007272:	bf00      	nop
 8007274:	08007d74 	.word	0x08007d74
 8007278:	08007d85 	.word	0x08007d85

0800727c <__d2b>:
 800727c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007280:	460f      	mov	r7, r1
 8007282:	2101      	movs	r1, #1
 8007284:	ec59 8b10 	vmov	r8, r9, d0
 8007288:	4616      	mov	r6, r2
 800728a:	f7ff fccd 	bl	8006c28 <_Balloc>
 800728e:	4604      	mov	r4, r0
 8007290:	b930      	cbnz	r0, 80072a0 <__d2b+0x24>
 8007292:	4602      	mov	r2, r0
 8007294:	4b23      	ldr	r3, [pc, #140]	@ (8007324 <__d2b+0xa8>)
 8007296:	4824      	ldr	r0, [pc, #144]	@ (8007328 <__d2b+0xac>)
 8007298:	f240 310f 	movw	r1, #783	@ 0x30f
 800729c:	f000 fafc 	bl	8007898 <__assert_func>
 80072a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072a8:	b10d      	cbz	r5, 80072ae <__d2b+0x32>
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	f1b8 0300 	subs.w	r3, r8, #0
 80072b4:	d023      	beq.n	80072fe <__d2b+0x82>
 80072b6:	4668      	mov	r0, sp
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	f7ff fd7c 	bl	8006db6 <__lo0bits>
 80072be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072c2:	b1d0      	cbz	r0, 80072fa <__d2b+0x7e>
 80072c4:	f1c0 0320 	rsb	r3, r0, #32
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	430b      	orrs	r3, r1
 80072ce:	40c2      	lsrs	r2, r0
 80072d0:	6163      	str	r3, [r4, #20]
 80072d2:	9201      	str	r2, [sp, #4]
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	61a3      	str	r3, [r4, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf0c      	ite	eq
 80072dc:	2201      	moveq	r2, #1
 80072de:	2202      	movne	r2, #2
 80072e0:	6122      	str	r2, [r4, #16]
 80072e2:	b1a5      	cbz	r5, 800730e <__d2b+0x92>
 80072e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072e8:	4405      	add	r5, r0
 80072ea:	603d      	str	r5, [r7, #0]
 80072ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072f0:	6030      	str	r0, [r6, #0]
 80072f2:	4620      	mov	r0, r4
 80072f4:	b003      	add	sp, #12
 80072f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072fa:	6161      	str	r1, [r4, #20]
 80072fc:	e7ea      	b.n	80072d4 <__d2b+0x58>
 80072fe:	a801      	add	r0, sp, #4
 8007300:	f7ff fd59 	bl	8006db6 <__lo0bits>
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	6163      	str	r3, [r4, #20]
 8007308:	3020      	adds	r0, #32
 800730a:	2201      	movs	r2, #1
 800730c:	e7e8      	b.n	80072e0 <__d2b+0x64>
 800730e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007312:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007316:	6038      	str	r0, [r7, #0]
 8007318:	6918      	ldr	r0, [r3, #16]
 800731a:	f7ff fd2d 	bl	8006d78 <__hi0bits>
 800731e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007322:	e7e5      	b.n	80072f0 <__d2b+0x74>
 8007324:	08007d74 	.word	0x08007d74
 8007328:	08007d85 	.word	0x08007d85

0800732c <__sfputc_r>:
 800732c:	6893      	ldr	r3, [r2, #8]
 800732e:	3b01      	subs	r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	b410      	push	{r4}
 8007334:	6093      	str	r3, [r2, #8]
 8007336:	da08      	bge.n	800734a <__sfputc_r+0x1e>
 8007338:	6994      	ldr	r4, [r2, #24]
 800733a:	42a3      	cmp	r3, r4
 800733c:	db01      	blt.n	8007342 <__sfputc_r+0x16>
 800733e:	290a      	cmp	r1, #10
 8007340:	d103      	bne.n	800734a <__sfputc_r+0x1e>
 8007342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007346:	f7fe bc00 	b.w	8005b4a <__swbuf_r>
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	1c58      	adds	r0, r3, #1
 800734e:	6010      	str	r0, [r2, #0]
 8007350:	7019      	strb	r1, [r3, #0]
 8007352:	4608      	mov	r0, r1
 8007354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007358:	4770      	bx	lr

0800735a <__sfputs_r>:
 800735a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	4614      	mov	r4, r2
 8007362:	18d5      	adds	r5, r2, r3
 8007364:	42ac      	cmp	r4, r5
 8007366:	d101      	bne.n	800736c <__sfputs_r+0x12>
 8007368:	2000      	movs	r0, #0
 800736a:	e007      	b.n	800737c <__sfputs_r+0x22>
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	463a      	mov	r2, r7
 8007372:	4630      	mov	r0, r6
 8007374:	f7ff ffda 	bl	800732c <__sfputc_r>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d1f3      	bne.n	8007364 <__sfputs_r+0xa>
 800737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007380 <_vfiprintf_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	460d      	mov	r5, r1
 8007386:	b09d      	sub	sp, #116	@ 0x74
 8007388:	4614      	mov	r4, r2
 800738a:	4698      	mov	r8, r3
 800738c:	4606      	mov	r6, r0
 800738e:	b118      	cbz	r0, 8007398 <_vfiprintf_r+0x18>
 8007390:	6a03      	ldr	r3, [r0, #32]
 8007392:	b90b      	cbnz	r3, 8007398 <_vfiprintf_r+0x18>
 8007394:	f7fe fb46 	bl	8005a24 <__sinit>
 8007398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x2a>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x2a>
 80073a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a6:	f7fe fce2 	bl	8005d6e <__retarget_lock_acquire_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	071b      	lsls	r3, r3, #28
 80073ae:	d501      	bpl.n	80073b4 <_vfiprintf_r+0x34>
 80073b0:	692b      	ldr	r3, [r5, #16]
 80073b2:	b99b      	cbnz	r3, 80073dc <_vfiprintf_r+0x5c>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7fe fc06 	bl	8005bc8 <__swsetup_r>
 80073bc:	b170      	cbz	r0, 80073dc <_vfiprintf_r+0x5c>
 80073be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073c0:	07dc      	lsls	r4, r3, #31
 80073c2:	d504      	bpl.n	80073ce <_vfiprintf_r+0x4e>
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b01d      	add	sp, #116	@ 0x74
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	0598      	lsls	r0, r3, #22
 80073d2:	d4f7      	bmi.n	80073c4 <_vfiprintf_r+0x44>
 80073d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d6:	f7fe fccb 	bl	8005d70 <__retarget_lock_release_recursive>
 80073da:	e7f3      	b.n	80073c4 <_vfiprintf_r+0x44>
 80073dc:	2300      	movs	r3, #0
 80073de:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e0:	2320      	movs	r3, #32
 80073e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ea:	2330      	movs	r3, #48	@ 0x30
 80073ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800759c <_vfiprintf_r+0x21c>
 80073f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073f4:	f04f 0901 	mov.w	r9, #1
 80073f8:	4623      	mov	r3, r4
 80073fa:	469a      	mov	sl, r3
 80073fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007400:	b10a      	cbz	r2, 8007406 <_vfiprintf_r+0x86>
 8007402:	2a25      	cmp	r2, #37	@ 0x25
 8007404:	d1f9      	bne.n	80073fa <_vfiprintf_r+0x7a>
 8007406:	ebba 0b04 	subs.w	fp, sl, r4
 800740a:	d00b      	beq.n	8007424 <_vfiprintf_r+0xa4>
 800740c:	465b      	mov	r3, fp
 800740e:	4622      	mov	r2, r4
 8007410:	4629      	mov	r1, r5
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ffa1 	bl	800735a <__sfputs_r>
 8007418:	3001      	adds	r0, #1
 800741a:	f000 80a7 	beq.w	800756c <_vfiprintf_r+0x1ec>
 800741e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007420:	445a      	add	r2, fp
 8007422:	9209      	str	r2, [sp, #36]	@ 0x24
 8007424:	f89a 3000 	ldrb.w	r3, [sl]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 809f 	beq.w	800756c <_vfiprintf_r+0x1ec>
 800742e:	2300      	movs	r3, #0
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007438:	f10a 0a01 	add.w	sl, sl, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	9307      	str	r3, [sp, #28]
 8007440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007444:	931a      	str	r3, [sp, #104]	@ 0x68
 8007446:	4654      	mov	r4, sl
 8007448:	2205      	movs	r2, #5
 800744a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744e:	4853      	ldr	r0, [pc, #332]	@ (800759c <_vfiprintf_r+0x21c>)
 8007450:	f7f8 febe 	bl	80001d0 <memchr>
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	b9d8      	cbnz	r0, 8007490 <_vfiprintf_r+0x110>
 8007458:	06d1      	lsls	r1, r2, #27
 800745a:	bf44      	itt	mi
 800745c:	2320      	movmi	r3, #32
 800745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007462:	0713      	lsls	r3, r2, #28
 8007464:	bf44      	itt	mi
 8007466:	232b      	movmi	r3, #43	@ 0x2b
 8007468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800746c:	f89a 3000 	ldrb.w	r3, [sl]
 8007470:	2b2a      	cmp	r3, #42	@ 0x2a
 8007472:	d015      	beq.n	80074a0 <_vfiprintf_r+0x120>
 8007474:	9a07      	ldr	r2, [sp, #28]
 8007476:	4654      	mov	r4, sl
 8007478:	2000      	movs	r0, #0
 800747a:	f04f 0c0a 	mov.w	ip, #10
 800747e:	4621      	mov	r1, r4
 8007480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007484:	3b30      	subs	r3, #48	@ 0x30
 8007486:	2b09      	cmp	r3, #9
 8007488:	d94b      	bls.n	8007522 <_vfiprintf_r+0x1a2>
 800748a:	b1b0      	cbz	r0, 80074ba <_vfiprintf_r+0x13a>
 800748c:	9207      	str	r2, [sp, #28]
 800748e:	e014      	b.n	80074ba <_vfiprintf_r+0x13a>
 8007490:	eba0 0308 	sub.w	r3, r0, r8
 8007494:	fa09 f303 	lsl.w	r3, r9, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	46a2      	mov	sl, r4
 800749e:	e7d2      	b.n	8007446 <_vfiprintf_r+0xc6>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	1d19      	adds	r1, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	9103      	str	r1, [sp, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bfbb      	ittet	lt
 80074ac:	425b      	neglt	r3, r3
 80074ae:	f042 0202 	orrlt.w	r2, r2, #2
 80074b2:	9307      	strge	r3, [sp, #28]
 80074b4:	9307      	strlt	r3, [sp, #28]
 80074b6:	bfb8      	it	lt
 80074b8:	9204      	strlt	r2, [sp, #16]
 80074ba:	7823      	ldrb	r3, [r4, #0]
 80074bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80074be:	d10a      	bne.n	80074d6 <_vfiprintf_r+0x156>
 80074c0:	7863      	ldrb	r3, [r4, #1]
 80074c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c4:	d132      	bne.n	800752c <_vfiprintf_r+0x1ac>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d1a      	adds	r2, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9203      	str	r2, [sp, #12]
 80074ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d2:	3402      	adds	r4, #2
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075ac <_vfiprintf_r+0x22c>
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	2203      	movs	r2, #3
 80074de:	4650      	mov	r0, sl
 80074e0:	f7f8 fe76 	bl	80001d0 <memchr>
 80074e4:	b138      	cbz	r0, 80074f6 <_vfiprintf_r+0x176>
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	eba0 000a 	sub.w	r0, r0, sl
 80074ec:	2240      	movs	r2, #64	@ 0x40
 80074ee:	4082      	lsls	r2, r0
 80074f0:	4313      	orrs	r3, r2
 80074f2:	3401      	adds	r4, #1
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fa:	4829      	ldr	r0, [pc, #164]	@ (80075a0 <_vfiprintf_r+0x220>)
 80074fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007500:	2206      	movs	r2, #6
 8007502:	f7f8 fe65 	bl	80001d0 <memchr>
 8007506:	2800      	cmp	r0, #0
 8007508:	d03f      	beq.n	800758a <_vfiprintf_r+0x20a>
 800750a:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <_vfiprintf_r+0x224>)
 800750c:	bb1b      	cbnz	r3, 8007556 <_vfiprintf_r+0x1d6>
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	3307      	adds	r3, #7
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	3308      	adds	r3, #8
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751c:	443b      	add	r3, r7
 800751e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007520:	e76a      	b.n	80073f8 <_vfiprintf_r+0x78>
 8007522:	fb0c 3202 	mla	r2, ip, r2, r3
 8007526:	460c      	mov	r4, r1
 8007528:	2001      	movs	r0, #1
 800752a:	e7a8      	b.n	800747e <_vfiprintf_r+0xfe>
 800752c:	2300      	movs	r3, #0
 800752e:	3401      	adds	r4, #1
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	4619      	mov	r1, r3
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	4620      	mov	r0, r4
 800753a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800753e:	3a30      	subs	r2, #48	@ 0x30
 8007540:	2a09      	cmp	r2, #9
 8007542:	d903      	bls.n	800754c <_vfiprintf_r+0x1cc>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0c6      	beq.n	80074d6 <_vfiprintf_r+0x156>
 8007548:	9105      	str	r1, [sp, #20]
 800754a:	e7c4      	b.n	80074d6 <_vfiprintf_r+0x156>
 800754c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007550:	4604      	mov	r4, r0
 8007552:	2301      	movs	r3, #1
 8007554:	e7f0      	b.n	8007538 <_vfiprintf_r+0x1b8>
 8007556:	ab03      	add	r3, sp, #12
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	462a      	mov	r2, r5
 800755c:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <_vfiprintf_r+0x228>)
 800755e:	a904      	add	r1, sp, #16
 8007560:	4630      	mov	r0, r6
 8007562:	f7fd fe1b 	bl	800519c <_printf_float>
 8007566:	4607      	mov	r7, r0
 8007568:	1c78      	adds	r0, r7, #1
 800756a:	d1d6      	bne.n	800751a <_vfiprintf_r+0x19a>
 800756c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800756e:	07d9      	lsls	r1, r3, #31
 8007570:	d405      	bmi.n	800757e <_vfiprintf_r+0x1fe>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	059a      	lsls	r2, r3, #22
 8007576:	d402      	bmi.n	800757e <_vfiprintf_r+0x1fe>
 8007578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800757a:	f7fe fbf9 	bl	8005d70 <__retarget_lock_release_recursive>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	065b      	lsls	r3, r3, #25
 8007582:	f53f af1f 	bmi.w	80073c4 <_vfiprintf_r+0x44>
 8007586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007588:	e71e      	b.n	80073c8 <_vfiprintf_r+0x48>
 800758a:	ab03      	add	r3, sp, #12
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	462a      	mov	r2, r5
 8007590:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <_vfiprintf_r+0x228>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	4630      	mov	r0, r6
 8007596:	f7fe f899 	bl	80056cc <_printf_i>
 800759a:	e7e4      	b.n	8007566 <_vfiprintf_r+0x1e6>
 800759c:	08007ee0 	.word	0x08007ee0
 80075a0:	08007eea 	.word	0x08007eea
 80075a4:	0800519d 	.word	0x0800519d
 80075a8:	0800735b 	.word	0x0800735b
 80075ac:	08007ee6 	.word	0x08007ee6

080075b0 <__sflush_r>:
 80075b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	0716      	lsls	r6, r2, #28
 80075ba:	4605      	mov	r5, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	d454      	bmi.n	800766a <__sflush_r+0xba>
 80075c0:	684b      	ldr	r3, [r1, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc02      	bgt.n	80075cc <__sflush_r+0x1c>
 80075c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	dd48      	ble.n	800765e <__sflush_r+0xae>
 80075cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	d045      	beq.n	800765e <__sflush_r+0xae>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075d8:	682f      	ldr	r7, [r5, #0]
 80075da:	6a21      	ldr	r1, [r4, #32]
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	d030      	beq.n	8007642 <__sflush_r+0x92>
 80075e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	0759      	lsls	r1, r3, #29
 80075e6:	d505      	bpl.n	80075f4 <__sflush_r+0x44>
 80075e8:	6863      	ldr	r3, [r4, #4]
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075ee:	b10b      	cbz	r3, 80075f4 <__sflush_r+0x44>
 80075f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075f2:	1ad2      	subs	r2, r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075f8:	6a21      	ldr	r1, [r4, #32]
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b0      	blx	r6
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	d106      	bne.n	8007612 <__sflush_r+0x62>
 8007604:	6829      	ldr	r1, [r5, #0]
 8007606:	291d      	cmp	r1, #29
 8007608:	d82b      	bhi.n	8007662 <__sflush_r+0xb2>
 800760a:	4a2a      	ldr	r2, [pc, #168]	@ (80076b4 <__sflush_r+0x104>)
 800760c:	410a      	asrs	r2, r1
 800760e:	07d6      	lsls	r6, r2, #31
 8007610:	d427      	bmi.n	8007662 <__sflush_r+0xb2>
 8007612:	2200      	movs	r2, #0
 8007614:	6062      	str	r2, [r4, #4]
 8007616:	04d9      	lsls	r1, r3, #19
 8007618:	6922      	ldr	r2, [r4, #16]
 800761a:	6022      	str	r2, [r4, #0]
 800761c:	d504      	bpl.n	8007628 <__sflush_r+0x78>
 800761e:	1c42      	adds	r2, r0, #1
 8007620:	d101      	bne.n	8007626 <__sflush_r+0x76>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	b903      	cbnz	r3, 8007628 <__sflush_r+0x78>
 8007626:	6560      	str	r0, [r4, #84]	@ 0x54
 8007628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800762a:	602f      	str	r7, [r5, #0]
 800762c:	b1b9      	cbz	r1, 800765e <__sflush_r+0xae>
 800762e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007632:	4299      	cmp	r1, r3
 8007634:	d002      	beq.n	800763c <__sflush_r+0x8c>
 8007636:	4628      	mov	r0, r5
 8007638:	f7ff f9f6 	bl	8006a28 <_free_r>
 800763c:	2300      	movs	r3, #0
 800763e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007640:	e00d      	b.n	800765e <__sflush_r+0xae>
 8007642:	2301      	movs	r3, #1
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	4602      	mov	r2, r0
 800764a:	1c50      	adds	r0, r2, #1
 800764c:	d1c9      	bne.n	80075e2 <__sflush_r+0x32>
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c6      	beq.n	80075e2 <__sflush_r+0x32>
 8007654:	2b1d      	cmp	r3, #29
 8007656:	d001      	beq.n	800765c <__sflush_r+0xac>
 8007658:	2b16      	cmp	r3, #22
 800765a:	d11e      	bne.n	800769a <__sflush_r+0xea>
 800765c:	602f      	str	r7, [r5, #0]
 800765e:	2000      	movs	r0, #0
 8007660:	e022      	b.n	80076a8 <__sflush_r+0xf8>
 8007662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007666:	b21b      	sxth	r3, r3
 8007668:	e01b      	b.n	80076a2 <__sflush_r+0xf2>
 800766a:	690f      	ldr	r7, [r1, #16]
 800766c:	2f00      	cmp	r7, #0
 800766e:	d0f6      	beq.n	800765e <__sflush_r+0xae>
 8007670:	0793      	lsls	r3, r2, #30
 8007672:	680e      	ldr	r6, [r1, #0]
 8007674:	bf08      	it	eq
 8007676:	694b      	ldreq	r3, [r1, #20]
 8007678:	600f      	str	r7, [r1, #0]
 800767a:	bf18      	it	ne
 800767c:	2300      	movne	r3, #0
 800767e:	eba6 0807 	sub.w	r8, r6, r7
 8007682:	608b      	str	r3, [r1, #8]
 8007684:	f1b8 0f00 	cmp.w	r8, #0
 8007688:	dde9      	ble.n	800765e <__sflush_r+0xae>
 800768a:	6a21      	ldr	r1, [r4, #32]
 800768c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800768e:	4643      	mov	r3, r8
 8007690:	463a      	mov	r2, r7
 8007692:	4628      	mov	r0, r5
 8007694:	47b0      	blx	r6
 8007696:	2800      	cmp	r0, #0
 8007698:	dc08      	bgt.n	80076ac <__sflush_r+0xfc>
 800769a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	4407      	add	r7, r0
 80076ae:	eba8 0800 	sub.w	r8, r8, r0
 80076b2:	e7e7      	b.n	8007684 <__sflush_r+0xd4>
 80076b4:	dfbffffe 	.word	0xdfbffffe

080076b8 <_fflush_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	690b      	ldr	r3, [r1, #16]
 80076bc:	4605      	mov	r5, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	b913      	cbnz	r3, 80076c8 <_fflush_r+0x10>
 80076c2:	2500      	movs	r5, #0
 80076c4:	4628      	mov	r0, r5
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	b118      	cbz	r0, 80076d2 <_fflush_r+0x1a>
 80076ca:	6a03      	ldr	r3, [r0, #32]
 80076cc:	b90b      	cbnz	r3, 80076d2 <_fflush_r+0x1a>
 80076ce:	f7fe f9a9 	bl	8005a24 <__sinit>
 80076d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0f3      	beq.n	80076c2 <_fflush_r+0xa>
 80076da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076dc:	07d0      	lsls	r0, r2, #31
 80076de:	d404      	bmi.n	80076ea <_fflush_r+0x32>
 80076e0:	0599      	lsls	r1, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_fflush_r+0x32>
 80076e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076e6:	f7fe fb42 	bl	8005d6e <__retarget_lock_acquire_recursive>
 80076ea:	4628      	mov	r0, r5
 80076ec:	4621      	mov	r1, r4
 80076ee:	f7ff ff5f 	bl	80075b0 <__sflush_r>
 80076f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076f4:	07da      	lsls	r2, r3, #31
 80076f6:	4605      	mov	r5, r0
 80076f8:	d4e4      	bmi.n	80076c4 <_fflush_r+0xc>
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	059b      	lsls	r3, r3, #22
 80076fe:	d4e1      	bmi.n	80076c4 <_fflush_r+0xc>
 8007700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007702:	f7fe fb35 	bl	8005d70 <__retarget_lock_release_recursive>
 8007706:	e7dd      	b.n	80076c4 <_fflush_r+0xc>

08007708 <__swhatbuf_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	460c      	mov	r4, r1
 800770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007710:	2900      	cmp	r1, #0
 8007712:	b096      	sub	sp, #88	@ 0x58
 8007714:	4615      	mov	r5, r2
 8007716:	461e      	mov	r6, r3
 8007718:	da0d      	bge.n	8007736 <__swhatbuf_r+0x2e>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	bf14      	ite	ne
 8007726:	2340      	movne	r3, #64	@ 0x40
 8007728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800772c:	2000      	movs	r0, #0
 800772e:	6031      	str	r1, [r6, #0]
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	b016      	add	sp, #88	@ 0x58
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	466a      	mov	r2, sp
 8007738:	f000 f87c 	bl	8007834 <_fstat_r>
 800773c:	2800      	cmp	r0, #0
 800773e:	dbec      	blt.n	800771a <__swhatbuf_r+0x12>
 8007740:	9901      	ldr	r1, [sp, #4]
 8007742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800774a:	4259      	negs	r1, r3
 800774c:	4159      	adcs	r1, r3
 800774e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007752:	e7eb      	b.n	800772c <__swhatbuf_r+0x24>

08007754 <__smakebuf_r>:
 8007754:	898b      	ldrh	r3, [r1, #12]
 8007756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007758:	079d      	lsls	r5, r3, #30
 800775a:	4606      	mov	r6, r0
 800775c:	460c      	mov	r4, r1
 800775e:	d507      	bpl.n	8007770 <__smakebuf_r+0x1c>
 8007760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	2301      	movs	r3, #1
 800776a:	6163      	str	r3, [r4, #20]
 800776c:	b003      	add	sp, #12
 800776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007770:	ab01      	add	r3, sp, #4
 8007772:	466a      	mov	r2, sp
 8007774:	f7ff ffc8 	bl	8007708 <__swhatbuf_r>
 8007778:	9f00      	ldr	r7, [sp, #0]
 800777a:	4605      	mov	r5, r0
 800777c:	4639      	mov	r1, r7
 800777e:	4630      	mov	r0, r6
 8007780:	f7ff f9c6 	bl	8006b10 <_malloc_r>
 8007784:	b948      	cbnz	r0, 800779a <__smakebuf_r+0x46>
 8007786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800778a:	059a      	lsls	r2, r3, #22
 800778c:	d4ee      	bmi.n	800776c <__smakebuf_r+0x18>
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0302 	orr.w	r3, r3, #2
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	e7e2      	b.n	8007760 <__smakebuf_r+0xc>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	6020      	str	r0, [r4, #0]
 800779e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077aa:	b15b      	cbz	r3, 80077c4 <__smakebuf_r+0x70>
 80077ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 f851 	bl	8007858 <_isatty_r>
 80077b6:	b128      	cbz	r0, 80077c4 <__smakebuf_r+0x70>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	431d      	orrs	r5, r3
 80077c8:	81a5      	strh	r5, [r4, #12]
 80077ca:	e7cf      	b.n	800776c <__smakebuf_r+0x18>

080077cc <_putc_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	460d      	mov	r5, r1
 80077d0:	4614      	mov	r4, r2
 80077d2:	4606      	mov	r6, r0
 80077d4:	b118      	cbz	r0, 80077de <_putc_r+0x12>
 80077d6:	6a03      	ldr	r3, [r0, #32]
 80077d8:	b90b      	cbnz	r3, 80077de <_putc_r+0x12>
 80077da:	f7fe f923 	bl	8005a24 <__sinit>
 80077de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077e0:	07d8      	lsls	r0, r3, #31
 80077e2:	d405      	bmi.n	80077f0 <_putc_r+0x24>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	0599      	lsls	r1, r3, #22
 80077e8:	d402      	bmi.n	80077f0 <_putc_r+0x24>
 80077ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ec:	f7fe fabf 	bl	8005d6e <__retarget_lock_acquire_recursive>
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	da05      	bge.n	8007806 <_putc_r+0x3a>
 80077fa:	69a2      	ldr	r2, [r4, #24]
 80077fc:	4293      	cmp	r3, r2
 80077fe:	db12      	blt.n	8007826 <_putc_r+0x5a>
 8007800:	b2eb      	uxtb	r3, r5
 8007802:	2b0a      	cmp	r3, #10
 8007804:	d00f      	beq.n	8007826 <_putc_r+0x5a>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	6022      	str	r2, [r4, #0]
 800780c:	701d      	strb	r5, [r3, #0]
 800780e:	b2ed      	uxtb	r5, r5
 8007810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007812:	07da      	lsls	r2, r3, #31
 8007814:	d405      	bmi.n	8007822 <_putc_r+0x56>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	059b      	lsls	r3, r3, #22
 800781a:	d402      	bmi.n	8007822 <_putc_r+0x56>
 800781c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800781e:	f7fe faa7 	bl	8005d70 <__retarget_lock_release_recursive>
 8007822:	4628      	mov	r0, r5
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	4629      	mov	r1, r5
 8007828:	4622      	mov	r2, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f7fe f98d 	bl	8005b4a <__swbuf_r>
 8007830:	4605      	mov	r5, r0
 8007832:	e7ed      	b.n	8007810 <_putc_r+0x44>

08007834 <_fstat_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	@ (8007854 <_fstat_r+0x20>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7fa faee 	bl	8001e22 <_fstat>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_fstat_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_fstat_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	200008f8 	.word	0x200008f8

08007858 <_isatty_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	@ (8007874 <_isatty_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fa faed 	bl	8001e42 <_isatty>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_isatty_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_isatty_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	200008f8 	.word	0x200008f8

08007878 <_sbrk_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d06      	ldr	r5, [pc, #24]	@ (8007894 <_sbrk_r+0x1c>)
 800787c:	2300      	movs	r3, #0
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fa fb02 	bl	8001e8c <_sbrk>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_sbrk_r+0x1a>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_sbrk_r+0x1a>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	200008f8 	.word	0x200008f8

08007898 <__assert_func>:
 8007898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800789a:	4614      	mov	r4, r2
 800789c:	461a      	mov	r2, r3
 800789e:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <__assert_func+0x2c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4605      	mov	r5, r0
 80078a4:	68d8      	ldr	r0, [r3, #12]
 80078a6:	b954      	cbnz	r4, 80078be <__assert_func+0x26>
 80078a8:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <__assert_func+0x30>)
 80078aa:	461c      	mov	r4, r3
 80078ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078b0:	9100      	str	r1, [sp, #0]
 80078b2:	462b      	mov	r3, r5
 80078b4:	4905      	ldr	r1, [pc, #20]	@ (80078cc <__assert_func+0x34>)
 80078b6:	f000 f841 	bl	800793c <fiprintf>
 80078ba:	f000 f851 	bl	8007960 <abort>
 80078be:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <__assert_func+0x38>)
 80078c0:	e7f4      	b.n	80078ac <__assert_func+0x14>
 80078c2:	bf00      	nop
 80078c4:	20000018 	.word	0x20000018
 80078c8:	08007f36 	.word	0x08007f36
 80078cc:	08007f08 	.word	0x08007f08
 80078d0:	08007efb 	.word	0x08007efb

080078d4 <_calloc_r>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	fba1 5402 	umull	r5, r4, r1, r2
 80078da:	b93c      	cbnz	r4, 80078ec <_calloc_r+0x18>
 80078dc:	4629      	mov	r1, r5
 80078de:	f7ff f917 	bl	8006b10 <_malloc_r>
 80078e2:	4606      	mov	r6, r0
 80078e4:	b928      	cbnz	r0, 80078f2 <_calloc_r+0x1e>
 80078e6:	2600      	movs	r6, #0
 80078e8:	4630      	mov	r0, r6
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	220c      	movs	r2, #12
 80078ee:	6002      	str	r2, [r0, #0]
 80078f0:	e7f9      	b.n	80078e6 <_calloc_r+0x12>
 80078f2:	462a      	mov	r2, r5
 80078f4:	4621      	mov	r1, r4
 80078f6:	f7fe f9bd 	bl	8005c74 <memset>
 80078fa:	e7f5      	b.n	80078e8 <_calloc_r+0x14>

080078fc <__ascii_mbtowc>:
 80078fc:	b082      	sub	sp, #8
 80078fe:	b901      	cbnz	r1, 8007902 <__ascii_mbtowc+0x6>
 8007900:	a901      	add	r1, sp, #4
 8007902:	b142      	cbz	r2, 8007916 <__ascii_mbtowc+0x1a>
 8007904:	b14b      	cbz	r3, 800791a <__ascii_mbtowc+0x1e>
 8007906:	7813      	ldrb	r3, [r2, #0]
 8007908:	600b      	str	r3, [r1, #0]
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	1e10      	subs	r0, r2, #0
 800790e:	bf18      	it	ne
 8007910:	2001      	movne	r0, #1
 8007912:	b002      	add	sp, #8
 8007914:	4770      	bx	lr
 8007916:	4610      	mov	r0, r2
 8007918:	e7fb      	b.n	8007912 <__ascii_mbtowc+0x16>
 800791a:	f06f 0001 	mvn.w	r0, #1
 800791e:	e7f8      	b.n	8007912 <__ascii_mbtowc+0x16>

08007920 <__ascii_wctomb>:
 8007920:	4603      	mov	r3, r0
 8007922:	4608      	mov	r0, r1
 8007924:	b141      	cbz	r1, 8007938 <__ascii_wctomb+0x18>
 8007926:	2aff      	cmp	r2, #255	@ 0xff
 8007928:	d904      	bls.n	8007934 <__ascii_wctomb+0x14>
 800792a:	228a      	movs	r2, #138	@ 0x8a
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
 8007932:	4770      	bx	lr
 8007934:	700a      	strb	r2, [r1, #0]
 8007936:	2001      	movs	r0, #1
 8007938:	4770      	bx	lr
	...

0800793c <fiprintf>:
 800793c:	b40e      	push	{r1, r2, r3}
 800793e:	b503      	push	{r0, r1, lr}
 8007940:	4601      	mov	r1, r0
 8007942:	ab03      	add	r3, sp, #12
 8007944:	4805      	ldr	r0, [pc, #20]	@ (800795c <fiprintf+0x20>)
 8007946:	f853 2b04 	ldr.w	r2, [r3], #4
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	f7ff fd17 	bl	8007380 <_vfiprintf_r>
 8007952:	b002      	add	sp, #8
 8007954:	f85d eb04 	ldr.w	lr, [sp], #4
 8007958:	b003      	add	sp, #12
 800795a:	4770      	bx	lr
 800795c:	20000018 	.word	0x20000018

08007960 <abort>:
 8007960:	b508      	push	{r3, lr}
 8007962:	2006      	movs	r0, #6
 8007964:	f000 f82c 	bl	80079c0 <raise>
 8007968:	2001      	movs	r0, #1
 800796a:	f7fa fa0a 	bl	8001d82 <_exit>

0800796e <_raise_r>:
 800796e:	291f      	cmp	r1, #31
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4605      	mov	r5, r0
 8007974:	460c      	mov	r4, r1
 8007976:	d904      	bls.n	8007982 <_raise_r+0x14>
 8007978:	2316      	movs	r3, #22
 800797a:	6003      	str	r3, [r0, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007984:	b112      	cbz	r2, 800798c <_raise_r+0x1e>
 8007986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800798a:	b94b      	cbnz	r3, 80079a0 <_raise_r+0x32>
 800798c:	4628      	mov	r0, r5
 800798e:	f000 f831 	bl	80079f4 <_getpid_r>
 8007992:	4622      	mov	r2, r4
 8007994:	4601      	mov	r1, r0
 8007996:	4628      	mov	r0, r5
 8007998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799c:	f000 b818 	b.w	80079d0 <_kill_r>
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d00a      	beq.n	80079ba <_raise_r+0x4c>
 80079a4:	1c59      	adds	r1, r3, #1
 80079a6:	d103      	bne.n	80079b0 <_raise_r+0x42>
 80079a8:	2316      	movs	r3, #22
 80079aa:	6003      	str	r3, [r0, #0]
 80079ac:	2001      	movs	r0, #1
 80079ae:	e7e7      	b.n	8007980 <_raise_r+0x12>
 80079b0:	2100      	movs	r1, #0
 80079b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079b6:	4620      	mov	r0, r4
 80079b8:	4798      	blx	r3
 80079ba:	2000      	movs	r0, #0
 80079bc:	e7e0      	b.n	8007980 <_raise_r+0x12>
	...

080079c0 <raise>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	@ (80079cc <raise+0xc>)
 80079c2:	4601      	mov	r1, r0
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f7ff bfd2 	b.w	800796e <_raise_r>
 80079ca:	bf00      	nop
 80079cc:	20000018 	.word	0x20000018

080079d0 <_kill_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	@ (80079f0 <_kill_r+0x20>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f7fa f9c0 	bl	8001d62 <_kill>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d102      	bne.n	80079ec <_kill_r+0x1c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b103      	cbz	r3, 80079ec <_kill_r+0x1c>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	200008f8 	.word	0x200008f8

080079f4 <_getpid_r>:
 80079f4:	f7fa b9ad 	b.w	8001d52 <_getpid>

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
