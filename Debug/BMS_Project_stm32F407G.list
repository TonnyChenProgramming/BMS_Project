
BMS_Project_stm32F407G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  08006350  08006350  00007350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de0  08006de0  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de8  08006de8  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de8  08006de8  00007de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dec  08006dec  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006df0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081e4  2**0
                  CONTENTS
 10 .bss          000005cc  200001e4  200001e4  000081e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007b0  200007b0  000081e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f53  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc9  00000000  00000000  00011167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  00012d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a6  00000000  00000000  00013608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b41  00000000  00000000  00013cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c790  00000000  00000000  000357ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5b5a  00000000  00000000  00041f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107ad9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003528  00000000  00000000  00107b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0010b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006338 	.word	0x08006338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08006338 	.word	0x08006338

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <oled_init>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "stdio.h"

// OLED Initialization Function
void oled_init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000e9c:	f000 f8b2 	bl	8001004 <ssd1306_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <oled_display>:

// OLED Data Display Function
void oled_display(float voltage, float current, float soc, float power) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eae:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eb2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000eb6:	edc7 1a00 	vstr	s3, [r7]
    //else
    //{
        //printf("OLED NOT Found! Check Wiring!\n");
    //}

    ssd1306_Fill(Black);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f90c 	bl	80010d8 <ssd1306_Fill>
    // Print Voltage
        sprintf(buffer, "V: %.2fV", voltage);
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff fb41 	bl	8000548 <__aeabi_f2d>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	f107 0014 	add.w	r0, r7, #20
 8000ece:	492b      	ldr	r1, [pc, #172]	@ (8000f7c <oled_display+0xd8>)
 8000ed0:	f003 f904 	bl	80040dc <siprintf>
        ssd1306_SetCursor(2, 2);
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 fa48 	bl	800136c <ssd1306_SetCursor>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <oled_display+0xdc>)
 8000ede:	f107 0014 	add.w	r0, r7, #20
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	9200      	str	r2, [sp, #0]
 8000ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee8:	f000 fa1a 	bl	8001320 <ssd1306_WriteString>

        // Print Current
        sprintf(buffer, "I: %.2fA", current);
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f7ff fb2b 	bl	8000548 <__aeabi_f2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	f107 0014 	add.w	r0, r7, #20
 8000efa:	4922      	ldr	r1, [pc, #136]	@ (8000f84 <oled_display+0xe0>)
 8000efc:	f003 f8ee 	bl	80040dc <siprintf>
        ssd1306_SetCursor(2, 12);
 8000f00:	210c      	movs	r1, #12
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fa32 	bl	800136c <ssd1306_SetCursor>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <oled_display+0xdc>)
 8000f0a:	f107 0014 	add.w	r0, r7, #20
 8000f0e:	2201      	movs	r2, #1
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f14:	f000 fa04 	bl	8001320 <ssd1306_WriteString>

        // Print State of Charge (SOC)
        sprintf(buffer, "SOC: %.1f%%", soc);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fb15 	bl	8000548 <__aeabi_f2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	f107 0014 	add.w	r0, r7, #20
 8000f26:	4918      	ldr	r1, [pc, #96]	@ (8000f88 <oled_display+0xe4>)
 8000f28:	f003 f8d8 	bl	80040dc <siprintf>
        ssd1306_SetCursor(2, 22);
 8000f2c:	2116      	movs	r1, #22
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f000 fa1c 	bl	800136c <ssd1306_SetCursor>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <oled_display+0xdc>)
 8000f36:	f107 0014 	add.w	r0, r7, #20
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f40:	f000 f9ee 	bl	8001320 <ssd1306_WriteString>

        // Print Power
        sprintf(buffer, "P: %.2fW", power);
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f7ff faff 	bl	8000548 <__aeabi_f2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	f107 0014 	add.w	r0, r7, #20
 8000f52:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <oled_display+0xe8>)
 8000f54:	f003 f8c2 	bl	80040dc <siprintf>
        ssd1306_SetCursor(2, 32);
 8000f58:	2120      	movs	r1, #32
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 fa06 	bl	800136c <ssd1306_SetCursor>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <oled_display+0xdc>)
 8000f62:	f107 0014 	add.w	r0, r7, #20
 8000f66:	2201      	movs	r2, #1
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f6c:	f000 f9d8 	bl	8001320 <ssd1306_WriteString>


    ssd1306_UpdateScreen();
 8000f70:	f000 f8ca 	bl	8001108 <ssd1306_UpdateScreen>
}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	08006350 	.word	0x08006350
 8000f80:	08006a48 	.word	0x08006a48
 8000f84:	0800635c 	.word	0x0800635c
 8000f88:	08006368 	.word	0x08006368
 8000f8c:	08006374 	.word	0x08006374

08000f90 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2178      	movs	r1, #120	@ 0x78
 8000fbe:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <ssd1306_WriteCommand+0x2c>)
 8000fc0:	f001 fb14 	bl	80025ec <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000608 	.word	0x20000608

08000fd0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe2:	9202      	str	r2, [sp, #8]
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2240      	movs	r2, #64	@ 0x40
 8000fee:	2178      	movs	r1, #120	@ 0x78
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <ssd1306_WriteData+0x30>)
 8000ff2:	f001 fafb 	bl	80025ec <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000608 	.word	0x20000608

08001004 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001008:	f7ff ffc2 	bl	8000f90 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f000 fee9 	bl	8001de4 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f9d6 	bl	80013c4 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001018:	2020      	movs	r0, #32
 800101a:	f7ff ffc1 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ffbe 	bl	8000fa0 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001024:	20b0      	movs	r0, #176	@ 0xb0
 8001026:	f7ff ffbb 	bl	8000fa0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800102a:	20c8      	movs	r0, #200	@ 0xc8
 800102c:	f7ff ffb8 	bl	8000fa0 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ffb5 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001036:	2010      	movs	r0, #16
 8001038:	f7ff ffb2 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800103c:	2040      	movs	r0, #64	@ 0x40
 800103e:	f7ff ffaf 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 8001042:	20ff      	movs	r0, #255	@ 0xff
 8001044:	f000 f9aa 	bl	800139c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001048:	20a1      	movs	r0, #161	@ 0xa1
 800104a:	f7ff ffa9 	bl	8000fa0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 800104e:	20a6      	movs	r0, #166	@ 0xa6
 8001050:	f7ff ffa6 	bl	8000fa0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001054:	20a8      	movs	r0, #168	@ 0xa8
 8001056:	f7ff ffa3 	bl	8000fa0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 800105a:	203f      	movs	r0, #63	@ 0x3f
 800105c:	f7ff ffa0 	bl	8000fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001060:	20a4      	movs	r0, #164	@ 0xa4
 8001062:	f7ff ff9d 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001066:	20d3      	movs	r0, #211	@ 0xd3
 8001068:	f7ff ff9a 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff97 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001072:	20d5      	movs	r0, #213	@ 0xd5
 8001074:	f7ff ff94 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001078:	20f0      	movs	r0, #240	@ 0xf0
 800107a:	f7ff ff91 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800107e:	20d9      	movs	r0, #217	@ 0xd9
 8001080:	f7ff ff8e 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001084:	2022      	movs	r0, #34	@ 0x22
 8001086:	f7ff ff8b 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800108a:	20da      	movs	r0, #218	@ 0xda
 800108c:	f7ff ff88 	bl	8000fa0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 8001090:	2012      	movs	r0, #18
 8001092:	f7ff ff85 	bl	8000fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001096:	20db      	movs	r0, #219	@ 0xdb
 8001098:	f7ff ff82 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800109c:	2020      	movs	r0, #32
 800109e:	f7ff ff7f 	bl	8000fa0 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80010a2:	208d      	movs	r0, #141	@ 0x8d
 80010a4:	f7ff ff7c 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff ff79 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 f988 	bl	80013c4 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f80f 	bl	80010d8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80010ba:	f000 f825 	bl	8001108 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <ssd1306_Init+0xd0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <ssd1306_Init+0xd0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80010ca:	4b02      	ldr	r3, [pc, #8]	@ (80010d4 <ssd1306_Init+0xd0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	711a      	strb	r2, [r3, #4]
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000600 	.word	0x20000600

080010d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <ssd1306_Fill+0x14>
 80010e8:	2300      	movs	r3, #0
 80010ea:	e000      	b.n	80010ee <ssd1306_Fill+0x16>
 80010ec:	23ff      	movs	r3, #255	@ 0xff
 80010ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f2:	4619      	mov	r1, r3
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <ssd1306_Fill+0x2c>)
 80010f6:	f003 f8e9 	bl	80042cc <memset>
			sizeof(SSD1306_Buffer));
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000200 	.word	0x20000200

08001108 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e016      	b.n	8001142 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b50      	subs	r3, #80	@ 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff40 	bl	8000fa0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff3d 	bl	8000fa0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001126:	2010      	movs	r0, #16
 8001128:	f7ff ff3a 	bl	8000fa0 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <ssd1306_UpdateScreen+0x4c>)
 8001132:	4413      	add	r3, r2
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff4a 	bl	8000fd0 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	3301      	adds	r3, #1
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d9e5      	bls.n	8001114 <ssd1306_UpdateScreen+0xc>
	}
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000200 	.word	0x20000200

08001158 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	460b      	mov	r3, r1
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db3d      	blt.n	80011ee <ssd1306_DrawPixel+0x96>
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b3f      	cmp	r3, #63	@ 0x3f
 8001176:	d83a      	bhi.n	80011ee <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d11a      	bne.n	80011b4 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	b2d8      	uxtb	r0, r3
 8001186:	4603      	mov	r3, r0
 8001188:	01db      	lsls	r3, r3, #7
 800118a:	4413      	add	r3, r2
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <ssd1306_DrawPixel+0xa4>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b259      	sxtb	r1, r3
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	4603      	mov	r3, r0
 80011a8:	01db      	lsls	r3, r3, #7
 80011aa:	4413      	add	r3, r2
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <ssd1306_DrawPixel+0xa4>)
 80011b0:	54d1      	strb	r1, [r2, r3]
 80011b2:	e01d      	b.n	80011f0 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011b4:	79fa      	ldrb	r2, [r7, #7]
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	4603      	mov	r3, r0
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	4413      	add	r3, r2
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <ssd1306_DrawPixel+0xa4>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4013      	ands	r3, r2
 80011dc:	b259      	sxtb	r1, r3
 80011de:	79fa      	ldrb	r2, [r7, #7]
 80011e0:	4603      	mov	r3, r0
 80011e2:	01db      	lsls	r3, r3, #7
 80011e4:	4413      	add	r3, r2
 80011e6:	b2c9      	uxtb	r1, r1
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <ssd1306_DrawPixel+0xa4>)
 80011ea:	54d1      	strb	r1, [r2, r3]
 80011ec:	e000      	b.n	80011f0 <ssd1306_DrawPixel+0x98>
		return;
 80011ee:	bf00      	nop
	}
}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000200 	.word	0x20000200

08001200 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4638      	mov	r0, r7
 800120a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800120e:	4623      	mov	r3, r4
 8001210:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b1f      	cmp	r3, #31
 8001216:	d902      	bls.n	800121e <ssd1306_WriteChar+0x1e>
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b7e      	cmp	r3, #126	@ 0x7e
 800121c:	d901      	bls.n	8001222 <ssd1306_WriteChar+0x22>
		return 0;
 800121e:	2300      	movs	r3, #0
 8001220:	e077      	b.n	8001312 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001222:	4b3e      	ldr	r3, [pc, #248]	@ (800131c <ssd1306_WriteChar+0x11c>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	783b      	ldrb	r3, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	2b80      	cmp	r3, #128	@ 0x80
 800122e:	dc06      	bgt.n	800123e <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8001230:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <ssd1306_WriteChar+0x11c>)
 8001232:	885b      	ldrh	r3, [r3, #2]
 8001234:	461a      	mov	r2, r3
 8001236:	787b      	ldrb	r3, [r7, #1]
 8001238:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800123a:	2b40      	cmp	r3, #64	@ 0x40
 800123c:	dd01      	ble.n	8001242 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e067      	b.n	8001312 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e04e      	b.n	80012e6 <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3b20      	subs	r3, #32
 800124e:	7879      	ldrb	r1, [r7, #1]
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	4619      	mov	r1, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	440b      	add	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e036      	b.n	80012d6 <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <ssd1306_WriteChar+0x11c>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b2d8      	uxtb	r0, r3
 8001286:	4b25      	ldr	r3, [pc, #148]	@ (800131c <ssd1306_WriteChar+0x11c>)
 8001288:	885b      	ldrh	r3, [r3, #2]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4413      	add	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff ff5d 	bl	8001158 <ssd1306_DrawPixel>
 800129e:	e017      	b.n	80012d0 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80012a0:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <ssd1306_WriteChar+0x11c>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <ssd1306_WriteChar+0x11c>)
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	f7ff ff44 	bl	8001158 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3301      	adds	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	783b      	ldrb	r3, [r7, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4293      	cmp	r3, r2
 80012de:	d3c3      	bcc.n	8001268 <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3301      	adds	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	787b      	ldrb	r3, [r7, #1]
 80012e8:	461a      	mov	r2, r3
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d3ab      	bcc.n	8001248 <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <ssd1306_WriteChar+0x11c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d005      	beq.n	8001306 <ssd1306_WriteChar+0x106>
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	3a20      	subs	r2, #32
 8001300:	440a      	add	r2, r1
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	e000      	b.n	8001308 <ssd1306_WriteChar+0x108>
 8001306:	783a      	ldrb	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <ssd1306_WriteChar+0x11c>)
 800130e:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	20000600 	.word	0x20000600

08001320 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	4638      	mov	r0, r7
 800132a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 800132e:	e013      	b.n	8001358 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	7818      	ldrb	r0, [r3, #0]
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	463b      	mov	r3, r7
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	f7ff ff60 	bl	8001200 <ssd1306_WriteChar>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d002      	beq.n	8001352 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	e008      	b.n	8001364 <ssd1306_WriteString+0x44>
		}
		str++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e7      	bne.n	8001330 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	781b      	ldrb	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <ssd1306_SetCursor+0x2c>)
 8001382:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <ssd1306_SetCursor+0x2c>)
 800138a:	805a      	strh	r2, [r3, #2]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000600 	.word	0x20000600

0800139c <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80013a6:	2381      	movs	r3, #129	@ 0x81
 80013a8:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fdf7 	bl	8000fa0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fdf3 	bl	8000fa0 <ssd1306_WriteCommand>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80013d4:	23af      	movs	r3, #175	@ 0xaf
 80013d6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <ssd1306_SetDisplayOn+0x38>)
 80013da:	2201      	movs	r2, #1
 80013dc:	715a      	strb	r2, [r3, #5]
 80013de:	e004      	b.n	80013ea <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80013e0:	23ae      	movs	r3, #174	@ 0xae
 80013e2:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <ssd1306_SetDisplayOn+0x38>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fdd7 	bl	8000fa0 <ssd1306_WriteCommand>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000600 	.word	0x20000600

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ffc2 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 fc30 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f85e 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 f8f4 	bl	8001690 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a8:	f000 f8c4 	bl	8001634 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)) {
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <main+0x98>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <main+0x26>
      printf("Error: SysTick is not enabled! HAL_Delay() will not work.\n");
 80014b8:	481e      	ldr	r0, [pc, #120]	@ (8001534 <main+0x9c>)
 80014ba:	f002 fe07 	bl	80040cc <puts>
  }
  printf("SysTick CTRL: 0x%08lX\n", SysTick->CTRL);
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <main+0x98>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	481c      	ldr	r0, [pc, #112]	@ (8001538 <main+0xa0>)
 80014c6:	f002 fd99 	bl	8003ffc <iprintf>
  printf("HAL_GetTick(): %lu\n", HAL_GetTick());
 80014ca:	f000 fc7f 	bl	8001dcc <HAL_GetTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	481a      	ldr	r0, [pc, #104]	@ (800153c <main+0xa4>)
 80014d4:	f002 fd92 	bl	8003ffc <iprintf>
  printf("Vector Table Address: 0x%08lX\n", SCB->VTOR);
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <main+0xa8>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4619      	mov	r1, r3
 80014de:	4819      	ldr	r0, [pc, #100]	@ (8001544 <main+0xac>)
 80014e0:	f002 fd8c 	bl	8003ffc <iprintf>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80014e4:	b662      	cpsie	i
}
 80014e6:	bf00      	nop

  __enable_irq();
  SysTick_Config(SystemCoreClock / 1000);
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <main+0xb0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <main+0xb4>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffad 	bl	8001454 <SysTick_Config>
  oled_init();
 80014fa:	f7ff fccd 	bl	8000e98 <oled_init>

  oled_display(voltage,  current, soc,  power);
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <main+0xb8>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <main+0xbc>)
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <main+0xc0>)
 800150c:	edd3 6a00 	vldr	s13, [r3]
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <main+0xc4>)
 8001512:	ed93 6a00 	vldr	s12, [r3]
 8001516:	eef0 1a46 	vmov.f32	s3, s12
 800151a:	eeb0 1a66 	vmov.f32	s2, s13
 800151e:	eef0 0a47 	vmov.f32	s1, s14
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	f7ff fcbd 	bl	8000ea4 <oled_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800152a:	bf00      	nop
 800152c:	e7fd      	b.n	800152a <main+0x92>
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010
 8001534:	08006380 	.word	0x08006380
 8001538:	080063bc 	.word	0x080063bc
 800153c:	080063d4 	.word	0x080063d4
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	080063e8 	.word	0x080063e8
 8001548:	20000010 	.word	0x20000010
 800154c:	10624dd3 	.word	0x10624dd3
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004
 8001558:	20000008 	.word	0x20000008
 800155c:	2000000c 	.word	0x2000000c

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	@ 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2230      	movs	r2, #48	@ 0x30
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f002 feac 	bl	80042cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a27      	ldr	r2, [pc, #156]	@ (800162c <SystemClock_Config+0xcc>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <SystemClock_Config+0xd0>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <SystemClock_Config+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d4:	23a8      	movs	r3, #168	@ 0xa8
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015dc:	2307      	movs	r3, #7
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fb6b 	bl	8002cc0 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f0:	f000 f99a 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2302      	movs	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001600:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2105      	movs	r1, #5
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fdcc 	bl	80031b0 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161e:	f000 f983 	bl	8001928 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	@ 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_I2C1_Init+0x50>)
 800163a:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <MX_I2C1_Init+0x54>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001640:	4a12      	ldr	r2, [pc, #72]	@ (800168c <MX_I2C1_Init+0x58>)
 8001642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_I2C1_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_I2C1_Init+0x50>)
 8001672:	f000 fe77 	bl	8002364 <HAL_I2C_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800167c:	f000 f954 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000608 	.word	0x20000608
 8001688:	40005400 	.word	0x40005400
 800168c:	000186a0 	.word	0x000186a0

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	@ 0x30
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b99      	ldr	r3, [pc, #612]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a98      	ldr	r2, [pc, #608]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b96      	ldr	r3, [pc, #600]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b92      	ldr	r3, [pc, #584]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a91      	ldr	r2, [pc, #580]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a8a      	ldr	r2, [pc, #552]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <MX_GPIO_Init+0x280>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b84      	ldr	r3, [pc, #528]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a83      	ldr	r2, [pc, #524]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b81      	ldr	r3, [pc, #516]	@ (8001910 <MX_GPIO_Init+0x280>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <MX_GPIO_Init+0x280>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a7c      	ldr	r2, [pc, #496]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b76      	ldr	r3, [pc, #472]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a75      	ldr	r2, [pc, #468]	@ (8001910 <MX_GPIO_Init+0x280>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b73      	ldr	r3, [pc, #460]	@ (8001910 <MX_GPIO_Init+0x280>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2108      	movs	r1, #8
 8001752:	4870      	ldr	r0, [pc, #448]	@ (8001914 <MX_GPIO_Init+0x284>)
 8001754:	f000 fdec 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2101      	movs	r1, #1
 800175c:	486e      	ldr	r0, [pc, #440]	@ (8001918 <MX_GPIO_Init+0x288>)
 800175e:	f000 fde7 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001762:	2200      	movs	r2, #0
 8001764:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001768:	486c      	ldr	r0, [pc, #432]	@ (800191c <MX_GPIO_Init+0x28c>)
 800176a:	f000 fde1 	bl	8002330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800176e:	2308      	movs	r3, #8
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4863      	ldr	r0, [pc, #396]	@ (8001914 <MX_GPIO_Init+0x284>)
 8001786:	f000 fc37 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800178a:	2301      	movs	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	485d      	ldr	r0, [pc, #372]	@ (8001918 <MX_GPIO_Init+0x288>)
 80017a2:	f000 fc29 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017a6:	2308      	movs	r3, #8
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b6:	2305      	movs	r3, #5
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4855      	ldr	r0, [pc, #340]	@ (8001918 <MX_GPIO_Init+0x288>)
 80017c2:	f000 fc19 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4851      	ldr	r0, [pc, #324]	@ (8001920 <MX_GPIO_Init+0x290>)
 80017dc:	f000 fc0c 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017e0:	2310      	movs	r3, #16
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f0:	2306      	movs	r3, #6
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4849      	ldr	r0, [pc, #292]	@ (8001920 <MX_GPIO_Init+0x290>)
 80017fc:	f000 fbfc 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001800:	23e0      	movs	r3, #224	@ 0xe0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001810:	2305      	movs	r3, #5
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4841      	ldr	r0, [pc, #260]	@ (8001920 <MX_GPIO_Init+0x290>)
 800181c:	f000 fbec 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001820:	2304      	movs	r3, #4
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	483c      	ldr	r0, [pc, #240]	@ (8001924 <MX_GPIO_Init+0x294>)
 8001834:	f000 fbe0 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184a:	2305      	movs	r3, #5
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4833      	ldr	r0, [pc, #204]	@ (8001924 <MX_GPIO_Init+0x294>)
 8001856:	f000 fbcf 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800185a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800185e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	482a      	ldr	r0, [pc, #168]	@ (800191c <MX_GPIO_Init+0x28c>)
 8001874:	f000 fbc0 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001878:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188a:	2306      	movs	r3, #6
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4820      	ldr	r0, [pc, #128]	@ (8001918 <MX_GPIO_Init+0x288>)
 8001896:	f000 fbaf 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800189a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481c      	ldr	r0, [pc, #112]	@ (8001920 <MX_GPIO_Init+0x290>)
 80018b0:	f000 fba2 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80018b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c6:	230a      	movs	r3, #10
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	4813      	ldr	r0, [pc, #76]	@ (8001920 <MX_GPIO_Init+0x290>)
 80018d2:	f000 fb91 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018d6:	2320      	movs	r3, #32
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <MX_GPIO_Init+0x28c>)
 80018ea:	f000 fb85 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_GPIO_Init+0x284>)
 8001904:	f000 fb78 	bl	8001ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	@ 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40021000 	.word	0x40021000
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001972:	2007      	movs	r0, #7
 8001974:	f000 fb0c 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_I2C_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12c      	bne.n	8001a00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c8:	2312      	movs	r3, #18
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019d4:	2304      	movs	r3, #4
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <HAL_I2C_MspInit+0x8c>)
 80019e0:	f000 fb0a 	bl	8001ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_I2C_MspInit+0x88>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f99b 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a7a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a7e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d013      	beq.n	8001ab2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a8a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a8e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001a92:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a9a:	e000      	b.n	8001a9e <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a9c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a9e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f9      	beq.n	8001a9c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001aa8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f002 fc49 	bl	8004370 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f840 	bl	8001be0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_isatty>:

int _isatty(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <__io_putchar>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int __io_putchar(int ch) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);  // Send character to SWV ITM console
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff41 	bl	8001a72 <ITM_SendChar>
    return ch;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f002 fba0 	bl	8004370 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20020000 	.word	0x20020000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	2000065c 	.word	0x2000065c
 8001c64:	200007b0 	.word	0x200007b0

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    /* FPU settings */
	printf("[DEBUG] SCB->VTOR: 0x%08lX\n", SCB->VTOR);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <SystemInit+0x38>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4619      	mov	r1, r3
 8001c72:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <SystemInit+0x3c>)
 8001c74:	f002 f9c2 	bl	8003ffc <iprintf>
    #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* Set CP10 and CP11 Full Access */
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <SystemInit+0x38>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ca0 <SystemInit+0x38>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location */
    #if defined (USER_VECT_TAB_ADDRESS)
        SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
    #else
        SCB->VTOR = 0x08000000;  // ✅ Always set VTOR to Flash
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SystemInit+0x38>)
 8001c8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c8e:	609a      	str	r2, [r3, #8]
    #endif

    printf("[DEBUG] SystemInit() - SCB->VTOR Set to: 0x%08lX\n", SCB->VTOR);
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <SystemInit+0x38>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <SystemInit+0x40>)
 8001c98:	f002 f9b0 	bl	8003ffc <iprintf>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	08006408 	.word	0x08006408
 8001ca8:	08006424 	.word	0x08006424

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cb0:	f7ff ffda 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	@ (8001cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f002 fb4f 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff fbdb 	bl	8001498 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cf0:	08006df0 	.word	0x08006df0
  ldr r2, =_sbss
 8001cf4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cf8:	200007b0 	.word	0x200007b0

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 f931 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fdfe 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f93b 	bl	8001fde <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f911 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000010 	.word	0x20000010
 8001d9c:	20000018 	.word	0x20000018
 8001da0:	20000014 	.word	0x20000014

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000018 	.word	0x20000018
 8001dc8:	20000660 	.word	0x20000660

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000660 	.word	0x20000660

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000018 	.word	0x20000018

08001e2c <__NVIC_SetPriorityGrouping>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_SetPriority>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	@ (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	@ (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff47 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff5c 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffb0 	bl	8001f4c <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e16b      	b.n	80022ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 815a 	bne.w	80022e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b4 	beq.w	80022e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	6453      	str	r3, [r2, #68]	@ 0x44
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_GPIO_Init+0x30c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_GPIO_Init+0x310>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_GPIO_Init+0x314>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	@ (8002310 <HAL_GPIO_Init+0x318>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a50      	ldr	r2, [pc, #320]	@ (8002314 <HAL_GPIO_Init+0x31c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002318 <HAL_GPIO_Init+0x320>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x21a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	@ (800231c <HAL_GPIO_Init+0x324>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x216>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x328>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x212>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x32c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x20e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_GPIO_Init+0x330>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x20a>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002202:	2308      	movs	r3, #8
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x310>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a32      	ldr	r2, [pc, #200]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a27      	ldr	r2, [pc, #156]	@ (800232c <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <HAL_GPIO_Init+0x334>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae90 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e12b      	b.n	80025ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fafa 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	@ 0x24
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c8:	f001 f8ea 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a81      	ldr	r2, [pc, #516]	@ (80025d8 <HAL_I2C_Init+0x274>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d807      	bhi.n	80023e8 <HAL_I2C_Init+0x84>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a80      	ldr	r2, [pc, #512]	@ (80025dc <HAL_I2C_Init+0x278>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e006      	b.n	80023f6 <HAL_I2C_Init+0x92>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a7d      	ldr	r2, [pc, #500]	@ (80025e0 <HAL_I2C_Init+0x27c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0e7      	b.n	80025ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a78      	ldr	r2, [pc, #480]	@ (80025e4 <HAL_I2C_Init+0x280>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <HAL_I2C_Init+0x274>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d802      	bhi.n	8002438 <HAL_I2C_Init+0xd4>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3301      	adds	r3, #1
 8002436:	e009      	b.n	800244c <HAL_I2C_Init+0xe8>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	4a69      	ldr	r2, [pc, #420]	@ (80025e8 <HAL_I2C_Init+0x284>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	3301      	adds	r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800245e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	495c      	ldr	r1, [pc, #368]	@ (80025d8 <HAL_I2C_Init+0x274>)
 8002468:	428b      	cmp	r3, r1
 800246a:	d819      	bhi.n	80024a0 <HAL_I2C_Init+0x13c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e59      	subs	r1, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fbb1 f3f3 	udiv	r3, r1, r3
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002480:	400b      	ands	r3, r1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_I2C_Init+0x138>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e59      	subs	r1, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fbb1 f3f3 	udiv	r3, r1, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249a:	e051      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 800249c:	2304      	movs	r3, #4
 800249e:	e04f      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d111      	bne.n	80024cc <HAL_I2C_Init+0x168>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e012      	b.n	80024f2 <HAL_I2C_Init+0x18e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	0099      	lsls	r1, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Init+0x196>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e022      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10e      	bne.n	8002520 <HAL_I2C_Init+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e58      	subs	r0, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	440b      	add	r3, r1
 8002510:	fbb0 f3f3 	udiv	r3, r0, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	e00f      	b.n	8002540 <HAL_I2C_Init+0x1dc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	0099      	lsls	r1, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800256e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6911      	ldr	r1, [r2, #16]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	430b      	orrs	r3, r1
 8002582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	000186a0 	.word	0x000186a0
 80025dc:	001e847f 	.word	0x001e847f
 80025e0:	003d08ff 	.word	0x003d08ff
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	817b      	strh	r3, [r7, #10]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002606:	f7ff fbe1 	bl	8001dcc <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	f040 80d9 	bne.w	80027cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2319      	movs	r3, #25
 8002620:	2201      	movs	r2, #1
 8002622:	496d      	ldr	r1, [pc, #436]	@ (80027d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f971 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	e0cc      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Mem_Write+0x56>
 800263e:	2302      	movs	r3, #2
 8002640:	e0c5      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d007      	beq.n	8002668 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2221      	movs	r2, #33	@ 0x21
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a4d      	ldr	r2, [pc, #308]	@ (80027dc <HAL_I2C_Mem_Write+0x1f0>)
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026aa:	88f8      	ldrh	r0, [r7, #6]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4603      	mov	r3, r0
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f890 	bl	80027e0 <I2C_RequestMemoryWrite>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d052      	beq.n	800276c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e081      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fa36 	bl	8002b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11b      	bne.n	800276c <HAL_I2C_Mem_Write+0x180>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1aa      	bne.n	80026ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fa29 	bl	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e016      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00100002 	.word	0x00100002
 80027dc:	ffff0000 	.word	0xffff0000

080027e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2200      	movs	r2, #0
 8002812:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f878 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002830:	d103      	bne.n	800283a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002838:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e05f      	b.n	80028fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800284c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	492d      	ldr	r1, [pc, #180]	@ (8002908 <I2C_RequestMemoryWrite+0x128>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f8d3 	bl	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e04c      	b.n	80028fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f95e 	bl	8002b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d107      	bne.n	80028a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02b      	b.n	80028fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ac:	893b      	ldrh	r3, [r7, #8]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	e021      	b.n	80028fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c8:	6a39      	ldr	r1, [r7, #32]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f938 	bl	8002b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d107      	bne.n	80028ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e005      	b.n	80028fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f2:	893b      	ldrh	r3, [r7, #8]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	00010002 	.word	0x00010002

0800290c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291c:	e048      	b.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d044      	beq.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff fa51 	bl	8001dcc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d139      	bne.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0c1b      	lsrs	r3, r3, #16
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10d      	bne.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	43da      	mvns	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	e00c      	b.n	800297c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	43da      	mvns	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d116      	bne.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e023      	b.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10d      	bne.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	e00c      	b.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	43da      	mvns	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4013      	ands	r3, r2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d093      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a0e:	e071      	b.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1e:	d123      	bne.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e067      	b.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d041      	beq.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a70:	f7ff f9ac 	bl	8001dcc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d302      	bcc.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d136      	bne.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e00b      	b.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e021      	b.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10c      	bne.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e00b      	b.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f af6d 	bne.w	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4c:	e034      	b.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f886 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e034      	b.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d028      	beq.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7ff f931 	bl	8001dcc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11d      	bne.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b86:	2b80      	cmp	r3, #128	@ 0x80
 8002b88:	d016      	beq.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e007      	b.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc2:	2b80      	cmp	r3, #128	@ 0x80
 8002bc4:	d1c3      	bne.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bdc:	e034      	b.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f83e 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d028      	beq.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7ff f8e9 	bl	8001dcc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11d      	bne.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d016      	beq.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d1c3      	bne.n	8002bde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d11b      	bne.n	8002cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e267      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d075      	beq.n	8002dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cde:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b85      	ldr	r3, [pc, #532]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d112      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b82      	ldr	r3, [pc, #520]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4b7e      	ldr	r3, [pc, #504]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d157      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e242      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x74>
 8002d26:	4b76      	ldr	r3, [pc, #472]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b70      	ldr	r3, [pc, #448]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6f      	ldr	r2, [pc, #444]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d58:	4b69      	ldr	r3, [pc, #420]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b66      	ldr	r3, [pc, #408]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a65      	ldr	r2, [pc, #404]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff f828 	bl	8001dcc <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff f824 	bl	8001dcc <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e207      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff f814 	bl	8001dcc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7ff f810 	bl	8001dcc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1f3      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	4b51      	ldr	r3, [pc, #324]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b44      	ldr	r3, [pc, #272]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1c7      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe ffc9 	bl	8001dcc <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe ffc5 	bl	8001dcc <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1a8      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4925      	ldr	r1, [pc, #148]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe ffa8 	bl	8001dcc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe ffa4 	bl	8001dcc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e187      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d036      	beq.n	8002f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ff88 	bl	8001dcc <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe ff84 	bl	8001dcc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e167      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x200>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ff71 	bl	8001dcc <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe ff6d 	bl	8001dcc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e150      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b88      	ldr	r3, [pc, #544]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b81      	ldr	r3, [pc, #516]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	4b7a      	ldr	r3, [pc, #488]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b77      	ldr	r3, [pc, #476]	@ (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b74      	ldr	r3, [pc, #464]	@ (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a73      	ldr	r2, [pc, #460]	@ (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ff2d 	bl	8001dcc <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe ff29 	bl	8001dcc <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e10c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6a      	ldr	r3, [pc, #424]	@ (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x2ea>
 8002f9c:	4b64      	ldr	r3, [pc, #400]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a63      	ldr	r2, [pc, #396]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x30c>
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002fcc:	4b58      	ldr	r3, [pc, #352]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	4a57      	ldr	r2, [pc, #348]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd8:	4b55      	ldr	r3, [pc, #340]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a54      	ldr	r2, [pc, #336]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe feee 	bl	8001dcc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe feea 	bl	8001dcc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0cb      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b49      	ldr	r3, [pc, #292]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x334>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fe fed8 	bl	8001dcc <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe fed4 	bl	8001dcc <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0b5      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b3e      	ldr	r3, [pc, #248]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b39      	ldr	r3, [pc, #228]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	4a38      	ldr	r2, [pc, #224]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a1 	beq.w	80031a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305e:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d05c      	beq.n	8003124 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d141      	bne.n	80030f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <HAL_RCC_OscConfig+0x478>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fea8 	bl	8001dcc <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe fea4 	bl	8001dcc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e087      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	491b      	ldr	r1, [pc, #108]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x478>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe fe7d 	bl	8001dcc <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fe79 	bl	8001dcc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e05c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x416>
 80030f4:	e054      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_RCC_OscConfig+0x478>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fe66 	bl	8001dcc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fe62 	bl	8001dcc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e045      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_OscConfig+0x470>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x444>
 8003122:	e03d      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e038      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
 8003138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x4ec>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d028      	beq.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d121      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11a      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	4293      	cmp	r3, r2
 8003176:	d111      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0cc      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d90c      	bls.n	80031ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b63      	ldr	r3, [pc, #396]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b8      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003204:	4b59      	ldr	r3, [pc, #356]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a58      	ldr	r2, [pc, #352]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800321c:	4b53      	ldr	r3, [pc, #332]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b50      	ldr	r3, [pc, #320]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	494d      	ldr	r1, [pc, #308]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d044      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b3f      	ldr	r3, [pc, #252]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e067      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b37      	ldr	r3, [pc, #220]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4934      	ldr	r1, [pc, #208]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fd94 	bl	8001dcc <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe fd90 	bl	8001dcc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d20c      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e032      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4916      	ldr	r1, [pc, #88]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	490e      	ldr	r1, [pc, #56]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003336:	f000 f821 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490a      	ldr	r1, [pc, #40]	@ (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fcf4 	bl	8001d44 <HAL_InitTick>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00
 800336c:	40023800 	.word	0x40023800
 8003370:	08006a54 	.word	0x08006a54
 8003374:	20000010 	.word	0x20000010
 8003378:	20000014 	.word	0x20000014

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b094      	sub	sp, #80	@ 0x50
 8003382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003394:	4b79      	ldr	r3, [pc, #484]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d00d      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x40>
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f200 80e1 	bhi.w	8003568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x34>
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ae:	e0db      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b73      	ldr	r3, [pc, #460]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x204>)
 80033b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b4:	e0db      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b6:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x208>)
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ba:	e0d8      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033bc:	4b6f      	ldr	r3, [pc, #444]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c6:	4b6d      	ldr	r3, [pc, #436]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e6:	2300      	movs	r3, #0
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ee:	4622      	mov	r2, r4
 80033f0:	462b      	mov	r3, r5
 80033f2:	f04f 0000 	mov.w	r0, #0
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	0159      	lsls	r1, r3, #5
 80033fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003400:	0150      	lsls	r0, r2, #5
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4621      	mov	r1, r4
 8003408:	1a51      	subs	r1, r2, r1
 800340a:	6139      	str	r1, [r7, #16]
 800340c:	4629      	mov	r1, r5
 800340e:	eb63 0301 	sbc.w	r3, r3, r1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003420:	4659      	mov	r1, fp
 8003422:	018b      	lsls	r3, r1, #6
 8003424:	4651      	mov	r1, sl
 8003426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800342a:	4651      	mov	r1, sl
 800342c:	018a      	lsls	r2, r1, #6
 800342e:	4651      	mov	r1, sl
 8003430:	ebb2 0801 	subs.w	r8, r2, r1
 8003434:	4659      	mov	r1, fp
 8003436:	eb63 0901 	sbc.w	r9, r3, r1
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344e:	4690      	mov	r8, r2
 8003450:	4699      	mov	r9, r3
 8003452:	4623      	mov	r3, r4
 8003454:	eb18 0303 	adds.w	r3, r8, r3
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	462b      	mov	r3, r5
 800345c:	eb49 0303 	adc.w	r3, r9, r3
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346e:	4629      	mov	r1, r5
 8003470:	024b      	lsls	r3, r1, #9
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003478:	4621      	mov	r1, r4
 800347a:	024a      	lsls	r2, r1, #9
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003482:	2200      	movs	r2, #0
 8003484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800348c:	f7fd fb8c 	bl	8000ba8 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4613      	mov	r3, r2
 8003496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003498:	e058      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b38      	ldr	r3, [pc, #224]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	2200      	movs	r2, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	4611      	mov	r1, r2
 80034a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	f04f 0000 	mov.w	r0, #0
 80034bc:	f04f 0100 	mov.w	r1, #0
 80034c0:	0159      	lsls	r1, r3, #5
 80034c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c6:	0150      	lsls	r0, r2, #5
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4641      	mov	r1, r8
 80034ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034ec:	ebb2 040a 	subs.w	r4, r2, sl
 80034f0:	eb63 050b 	sbc.w	r5, r3, fp
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	00eb      	lsls	r3, r5, #3
 80034fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003502:	00e2      	lsls	r2, r4, #3
 8003504:	4614      	mov	r4, r2
 8003506:	461d      	mov	r5, r3
 8003508:	4643      	mov	r3, r8
 800350a:	18e3      	adds	r3, r4, r3
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	464b      	mov	r3, r9
 8003510:	eb45 0303 	adc.w	r3, r5, r3
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003522:	4629      	mov	r1, r5
 8003524:	028b      	lsls	r3, r1, #10
 8003526:	4621      	mov	r1, r4
 8003528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800352c:	4621      	mov	r1, r4
 800352e:	028a      	lsls	r2, r1, #10
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003536:	2200      	movs	r2, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	61fa      	str	r2, [r7, #28]
 800353c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003540:	f7fd fb32 	bl	8000ba8 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_RCC_GetSysClockFreq+0x200>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800355c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800355e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003566:	e002      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x204>)
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800356c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003570:	4618      	mov	r0, r3
 8003572:	3750      	adds	r7, #80	@ 0x50
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	00f42400 	.word	0x00f42400
 8003584:	007a1200 	.word	0x007a1200

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_RCC_GetHCLKFreq+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000010 	.word	0x20000010

080035a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a4:	f7ff fff0 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	@ (80035c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08006a64 	.word	0x08006a64

080035c8 <__cvt>:
 80035c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	ec57 6b10 	vmov	r6, r7, d0
 80035d0:	2f00      	cmp	r7, #0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4619      	mov	r1, r3
 80035d6:	463b      	mov	r3, r7
 80035d8:	bfbb      	ittet	lt
 80035da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80035de:	461f      	movlt	r7, r3
 80035e0:	2300      	movge	r3, #0
 80035e2:	232d      	movlt	r3, #45	@ 0x2d
 80035e4:	700b      	strb	r3, [r1, #0]
 80035e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80035ec:	4691      	mov	r9, r2
 80035ee:	f023 0820 	bic.w	r8, r3, #32
 80035f2:	bfbc      	itt	lt
 80035f4:	4632      	movlt	r2, r6
 80035f6:	4616      	movlt	r6, r2
 80035f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035fc:	d005      	beq.n	800360a <__cvt+0x42>
 80035fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003602:	d100      	bne.n	8003606 <__cvt+0x3e>
 8003604:	3401      	adds	r4, #1
 8003606:	2102      	movs	r1, #2
 8003608:	e000      	b.n	800360c <__cvt+0x44>
 800360a:	2103      	movs	r1, #3
 800360c:	ab03      	add	r3, sp, #12
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	ab02      	add	r3, sp, #8
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	ec47 6b10 	vmov	d0, r6, r7
 8003618:	4653      	mov	r3, sl
 800361a:	4622      	mov	r2, r4
 800361c:	f000 ff6c 	bl	80044f8 <_dtoa_r>
 8003620:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003624:	4605      	mov	r5, r0
 8003626:	d119      	bne.n	800365c <__cvt+0x94>
 8003628:	f019 0f01 	tst.w	r9, #1
 800362c:	d00e      	beq.n	800364c <__cvt+0x84>
 800362e:	eb00 0904 	add.w	r9, r0, r4
 8003632:	2200      	movs	r2, #0
 8003634:	2300      	movs	r3, #0
 8003636:	4630      	mov	r0, r6
 8003638:	4639      	mov	r1, r7
 800363a:	f7fd fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800363e:	b108      	cbz	r0, 8003644 <__cvt+0x7c>
 8003640:	f8cd 900c 	str.w	r9, [sp, #12]
 8003644:	2230      	movs	r2, #48	@ 0x30
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	454b      	cmp	r3, r9
 800364a:	d31e      	bcc.n	800368a <__cvt+0xc2>
 800364c:	9b03      	ldr	r3, [sp, #12]
 800364e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003650:	1b5b      	subs	r3, r3, r5
 8003652:	4628      	mov	r0, r5
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	b004      	add	sp, #16
 8003658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003660:	eb00 0904 	add.w	r9, r0, r4
 8003664:	d1e5      	bne.n	8003632 <__cvt+0x6a>
 8003666:	7803      	ldrb	r3, [r0, #0]
 8003668:	2b30      	cmp	r3, #48	@ 0x30
 800366a:	d10a      	bne.n	8003682 <__cvt+0xba>
 800366c:	2200      	movs	r2, #0
 800366e:	2300      	movs	r3, #0
 8003670:	4630      	mov	r0, r6
 8003672:	4639      	mov	r1, r7
 8003674:	f7fd fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003678:	b918      	cbnz	r0, 8003682 <__cvt+0xba>
 800367a:	f1c4 0401 	rsb	r4, r4, #1
 800367e:	f8ca 4000 	str.w	r4, [sl]
 8003682:	f8da 3000 	ldr.w	r3, [sl]
 8003686:	4499      	add	r9, r3
 8003688:	e7d3      	b.n	8003632 <__cvt+0x6a>
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	9103      	str	r1, [sp, #12]
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e7d9      	b.n	8003646 <__cvt+0x7e>

08003692 <__exponent>:
 8003692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003694:	2900      	cmp	r1, #0
 8003696:	bfba      	itte	lt
 8003698:	4249      	neglt	r1, r1
 800369a:	232d      	movlt	r3, #45	@ 0x2d
 800369c:	232b      	movge	r3, #43	@ 0x2b
 800369e:	2909      	cmp	r1, #9
 80036a0:	7002      	strb	r2, [r0, #0]
 80036a2:	7043      	strb	r3, [r0, #1]
 80036a4:	dd29      	ble.n	80036fa <__exponent+0x68>
 80036a6:	f10d 0307 	add.w	r3, sp, #7
 80036aa:	461d      	mov	r5, r3
 80036ac:	270a      	movs	r7, #10
 80036ae:	461a      	mov	r2, r3
 80036b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80036b4:	fb07 1416 	mls	r4, r7, r6, r1
 80036b8:	3430      	adds	r4, #48	@ 0x30
 80036ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036be:	460c      	mov	r4, r1
 80036c0:	2c63      	cmp	r4, #99	@ 0x63
 80036c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80036c6:	4631      	mov	r1, r6
 80036c8:	dcf1      	bgt.n	80036ae <__exponent+0x1c>
 80036ca:	3130      	adds	r1, #48	@ 0x30
 80036cc:	1e94      	subs	r4, r2, #2
 80036ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036d2:	1c41      	adds	r1, r0, #1
 80036d4:	4623      	mov	r3, r4
 80036d6:	42ab      	cmp	r3, r5
 80036d8:	d30a      	bcc.n	80036f0 <__exponent+0x5e>
 80036da:	f10d 0309 	add.w	r3, sp, #9
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	42ac      	cmp	r4, r5
 80036e2:	bf88      	it	hi
 80036e4:	2300      	movhi	r3, #0
 80036e6:	3302      	adds	r3, #2
 80036e8:	4403      	add	r3, r0
 80036ea:	1a18      	subs	r0, r3, r0
 80036ec:	b003      	add	sp, #12
 80036ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80036f8:	e7ed      	b.n	80036d6 <__exponent+0x44>
 80036fa:	2330      	movs	r3, #48	@ 0x30
 80036fc:	3130      	adds	r1, #48	@ 0x30
 80036fe:	7083      	strb	r3, [r0, #2]
 8003700:	70c1      	strb	r1, [r0, #3]
 8003702:	1d03      	adds	r3, r0, #4
 8003704:	e7f1      	b.n	80036ea <__exponent+0x58>
	...

08003708 <_printf_float>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	b08d      	sub	sp, #52	@ 0x34
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003714:	4616      	mov	r6, r2
 8003716:	461f      	mov	r7, r3
 8003718:	4605      	mov	r5, r0
 800371a:	f000 fddf 	bl	80042dc <_localeconv_r>
 800371e:	6803      	ldr	r3, [r0, #0]
 8003720:	9304      	str	r3, [sp, #16]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fc fda4 	bl	8000270 <strlen>
 8003728:	2300      	movs	r3, #0
 800372a:	930a      	str	r3, [sp, #40]	@ 0x28
 800372c:	f8d8 3000 	ldr.w	r3, [r8]
 8003730:	9005      	str	r0, [sp, #20]
 8003732:	3307      	adds	r3, #7
 8003734:	f023 0307 	bic.w	r3, r3, #7
 8003738:	f103 0208 	add.w	r2, r3, #8
 800373c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003740:	f8d4 b000 	ldr.w	fp, [r4]
 8003744:	f8c8 2000 	str.w	r2, [r8]
 8003748:	e9d3 8900 	ldrd	r8, r9, [r3]
 800374c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003750:	9307      	str	r3, [sp, #28]
 8003752:	f8cd 8018 	str.w	r8, [sp, #24]
 8003756:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800375a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800375e:	4b9c      	ldr	r3, [pc, #624]	@ (80039d0 <_printf_float+0x2c8>)
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	f7fd f9e2 	bl	8000b2c <__aeabi_dcmpun>
 8003768:	bb70      	cbnz	r0, 80037c8 <_printf_float+0xc0>
 800376a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800376e:	4b98      	ldr	r3, [pc, #608]	@ (80039d0 <_printf_float+0x2c8>)
 8003770:	f04f 32ff 	mov.w	r2, #4294967295
 8003774:	f7fd f9bc 	bl	8000af0 <__aeabi_dcmple>
 8003778:	bb30      	cbnz	r0, 80037c8 <_printf_float+0xc0>
 800377a:	2200      	movs	r2, #0
 800377c:	2300      	movs	r3, #0
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	f7fd f9ab 	bl	8000adc <__aeabi_dcmplt>
 8003786:	b110      	cbz	r0, 800378e <_printf_float+0x86>
 8003788:	232d      	movs	r3, #45	@ 0x2d
 800378a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800378e:	4a91      	ldr	r2, [pc, #580]	@ (80039d4 <_printf_float+0x2cc>)
 8003790:	4b91      	ldr	r3, [pc, #580]	@ (80039d8 <_printf_float+0x2d0>)
 8003792:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003796:	bf94      	ite	ls
 8003798:	4690      	movls	r8, r2
 800379a:	4698      	movhi	r8, r3
 800379c:	2303      	movs	r3, #3
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	f02b 0304 	bic.w	r3, fp, #4
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	f04f 0900 	mov.w	r9, #0
 80037aa:	9700      	str	r7, [sp, #0]
 80037ac:	4633      	mov	r3, r6
 80037ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80037b0:	4621      	mov	r1, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 f9d2 	bl	8003b5c <_printf_common>
 80037b8:	3001      	adds	r0, #1
 80037ba:	f040 808d 	bne.w	80038d8 <_printf_float+0x1d0>
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	b00d      	add	sp, #52	@ 0x34
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fd f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80037d4:	b140      	cbz	r0, 80037e8 <_printf_float+0xe0>
 80037d6:	464b      	mov	r3, r9
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bfbc      	itt	lt
 80037dc:	232d      	movlt	r3, #45	@ 0x2d
 80037de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037e2:	4a7e      	ldr	r2, [pc, #504]	@ (80039dc <_printf_float+0x2d4>)
 80037e4:	4b7e      	ldr	r3, [pc, #504]	@ (80039e0 <_printf_float+0x2d8>)
 80037e6:	e7d4      	b.n	8003792 <_printf_float+0x8a>
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80037ee:	9206      	str	r2, [sp, #24]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	d13b      	bne.n	800386c <_printf_float+0x164>
 80037f4:	2306      	movs	r3, #6
 80037f6:	6063      	str	r3, [r4, #4]
 80037f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80037fc:	2300      	movs	r3, #0
 80037fe:	6022      	str	r2, [r4, #0]
 8003800:	9303      	str	r3, [sp, #12]
 8003802:	ab0a      	add	r3, sp, #40	@ 0x28
 8003804:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003808:	ab09      	add	r3, sp, #36	@ 0x24
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	6861      	ldr	r1, [r4, #4]
 800380e:	ec49 8b10 	vmov	d0, r8, r9
 8003812:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003816:	4628      	mov	r0, r5
 8003818:	f7ff fed6 	bl	80035c8 <__cvt>
 800381c:	9b06      	ldr	r3, [sp, #24]
 800381e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003820:	2b47      	cmp	r3, #71	@ 0x47
 8003822:	4680      	mov	r8, r0
 8003824:	d129      	bne.n	800387a <_printf_float+0x172>
 8003826:	1cc8      	adds	r0, r1, #3
 8003828:	db02      	blt.n	8003830 <_printf_float+0x128>
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	4299      	cmp	r1, r3
 800382e:	dd41      	ble.n	80038b4 <_printf_float+0x1ac>
 8003830:	f1aa 0a02 	sub.w	sl, sl, #2
 8003834:	fa5f fa8a 	uxtb.w	sl, sl
 8003838:	3901      	subs	r1, #1
 800383a:	4652      	mov	r2, sl
 800383c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003840:	9109      	str	r1, [sp, #36]	@ 0x24
 8003842:	f7ff ff26 	bl	8003692 <__exponent>
 8003846:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003848:	1813      	adds	r3, r2, r0
 800384a:	2a01      	cmp	r2, #1
 800384c:	4681      	mov	r9, r0
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	dc02      	bgt.n	8003858 <_printf_float+0x150>
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	07d2      	lsls	r2, r2, #31
 8003856:	d501      	bpl.n	800385c <_printf_float+0x154>
 8003858:	3301      	adds	r3, #1
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0a2      	beq.n	80037aa <_printf_float+0xa2>
 8003864:	232d      	movs	r3, #45	@ 0x2d
 8003866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800386a:	e79e      	b.n	80037aa <_printf_float+0xa2>
 800386c:	9a06      	ldr	r2, [sp, #24]
 800386e:	2a47      	cmp	r2, #71	@ 0x47
 8003870:	d1c2      	bne.n	80037f8 <_printf_float+0xf0>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1c0      	bne.n	80037f8 <_printf_float+0xf0>
 8003876:	2301      	movs	r3, #1
 8003878:	e7bd      	b.n	80037f6 <_printf_float+0xee>
 800387a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800387e:	d9db      	bls.n	8003838 <_printf_float+0x130>
 8003880:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003884:	d118      	bne.n	80038b8 <_printf_float+0x1b0>
 8003886:	2900      	cmp	r1, #0
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	dd0b      	ble.n	80038a4 <_printf_float+0x19c>
 800388c:	6121      	str	r1, [r4, #16]
 800388e:	b913      	cbnz	r3, 8003896 <_printf_float+0x18e>
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	07d0      	lsls	r0, r2, #31
 8003894:	d502      	bpl.n	800389c <_printf_float+0x194>
 8003896:	3301      	adds	r3, #1
 8003898:	440b      	add	r3, r1
 800389a:	6123      	str	r3, [r4, #16]
 800389c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800389e:	f04f 0900 	mov.w	r9, #0
 80038a2:	e7db      	b.n	800385c <_printf_float+0x154>
 80038a4:	b913      	cbnz	r3, 80038ac <_printf_float+0x1a4>
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	07d2      	lsls	r2, r2, #31
 80038aa:	d501      	bpl.n	80038b0 <_printf_float+0x1a8>
 80038ac:	3302      	adds	r3, #2
 80038ae:	e7f4      	b.n	800389a <_printf_float+0x192>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e7f2      	b.n	800389a <_printf_float+0x192>
 80038b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038ba:	4299      	cmp	r1, r3
 80038bc:	db05      	blt.n	80038ca <_printf_float+0x1c2>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	6121      	str	r1, [r4, #16]
 80038c2:	07d8      	lsls	r0, r3, #31
 80038c4:	d5ea      	bpl.n	800389c <_printf_float+0x194>
 80038c6:	1c4b      	adds	r3, r1, #1
 80038c8:	e7e7      	b.n	800389a <_printf_float+0x192>
 80038ca:	2900      	cmp	r1, #0
 80038cc:	bfd4      	ite	le
 80038ce:	f1c1 0202 	rsble	r2, r1, #2
 80038d2:	2201      	movgt	r2, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	e7e0      	b.n	800389a <_printf_float+0x192>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	055a      	lsls	r2, r3, #21
 80038dc:	d407      	bmi.n	80038ee <_printf_float+0x1e6>
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	4642      	mov	r2, r8
 80038e2:	4631      	mov	r1, r6
 80038e4:	4628      	mov	r0, r5
 80038e6:	47b8      	blx	r7
 80038e8:	3001      	adds	r0, #1
 80038ea:	d12b      	bne.n	8003944 <_printf_float+0x23c>
 80038ec:	e767      	b.n	80037be <_printf_float+0xb6>
 80038ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038f2:	f240 80dd 	bls.w	8003ab0 <_printf_float+0x3a8>
 80038f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80038fa:	2200      	movs	r2, #0
 80038fc:	2300      	movs	r3, #0
 80038fe:	f7fd f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003902:	2800      	cmp	r0, #0
 8003904:	d033      	beq.n	800396e <_printf_float+0x266>
 8003906:	4a37      	ldr	r2, [pc, #220]	@ (80039e4 <_printf_float+0x2dc>)
 8003908:	2301      	movs	r3, #1
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f af54 	beq.w	80037be <_printf_float+0xb6>
 8003916:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800391a:	4543      	cmp	r3, r8
 800391c:	db02      	blt.n	8003924 <_printf_float+0x21c>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	07d8      	lsls	r0, r3, #31
 8003922:	d50f      	bpl.n	8003944 <_printf_float+0x23c>
 8003924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003928:	4631      	mov	r1, r6
 800392a:	4628      	mov	r0, r5
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	f43f af45 	beq.w	80037be <_printf_float+0xb6>
 8003934:	f04f 0900 	mov.w	r9, #0
 8003938:	f108 38ff 	add.w	r8, r8, #4294967295
 800393c:	f104 0a1a 	add.w	sl, r4, #26
 8003940:	45c8      	cmp	r8, r9
 8003942:	dc09      	bgt.n	8003958 <_printf_float+0x250>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	f100 8103 	bmi.w	8003b52 <_printf_float+0x44a>
 800394c:	68e0      	ldr	r0, [r4, #12]
 800394e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003950:	4298      	cmp	r0, r3
 8003952:	bfb8      	it	lt
 8003954:	4618      	movlt	r0, r3
 8003956:	e734      	b.n	80037c2 <_printf_float+0xba>
 8003958:	2301      	movs	r3, #1
 800395a:	4652      	mov	r2, sl
 800395c:	4631      	mov	r1, r6
 800395e:	4628      	mov	r0, r5
 8003960:	47b8      	blx	r7
 8003962:	3001      	adds	r0, #1
 8003964:	f43f af2b 	beq.w	80037be <_printf_float+0xb6>
 8003968:	f109 0901 	add.w	r9, r9, #1
 800396c:	e7e8      	b.n	8003940 <_printf_float+0x238>
 800396e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	dc39      	bgt.n	80039e8 <_printf_float+0x2e0>
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <_printf_float+0x2dc>)
 8003976:	2301      	movs	r3, #1
 8003978:	4631      	mov	r1, r6
 800397a:	4628      	mov	r0, r5
 800397c:	47b8      	blx	r7
 800397e:	3001      	adds	r0, #1
 8003980:	f43f af1d 	beq.w	80037be <_printf_float+0xb6>
 8003984:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003988:	ea59 0303 	orrs.w	r3, r9, r3
 800398c:	d102      	bne.n	8003994 <_printf_float+0x28c>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07d9      	lsls	r1, r3, #31
 8003992:	d5d7      	bpl.n	8003944 <_printf_float+0x23c>
 8003994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003998:	4631      	mov	r1, r6
 800399a:	4628      	mov	r0, r5
 800399c:	47b8      	blx	r7
 800399e:	3001      	adds	r0, #1
 80039a0:	f43f af0d 	beq.w	80037be <_printf_float+0xb6>
 80039a4:	f04f 0a00 	mov.w	sl, #0
 80039a8:	f104 0b1a 	add.w	fp, r4, #26
 80039ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039ae:	425b      	negs	r3, r3
 80039b0:	4553      	cmp	r3, sl
 80039b2:	dc01      	bgt.n	80039b8 <_printf_float+0x2b0>
 80039b4:	464b      	mov	r3, r9
 80039b6:	e793      	b.n	80038e0 <_printf_float+0x1d8>
 80039b8:	2301      	movs	r3, #1
 80039ba:	465a      	mov	r2, fp
 80039bc:	4631      	mov	r1, r6
 80039be:	4628      	mov	r0, r5
 80039c0:	47b8      	blx	r7
 80039c2:	3001      	adds	r0, #1
 80039c4:	f43f aefb 	beq.w	80037be <_printf_float+0xb6>
 80039c8:	f10a 0a01 	add.w	sl, sl, #1
 80039cc:	e7ee      	b.n	80039ac <_printf_float+0x2a4>
 80039ce:	bf00      	nop
 80039d0:	7fefffff 	.word	0x7fefffff
 80039d4:	08006a6c 	.word	0x08006a6c
 80039d8:	08006a70 	.word	0x08006a70
 80039dc:	08006a74 	.word	0x08006a74
 80039e0:	08006a78 	.word	0x08006a78
 80039e4:	08006a7c 	.word	0x08006a7c
 80039e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80039ee:	4553      	cmp	r3, sl
 80039f0:	bfa8      	it	ge
 80039f2:	4653      	movge	r3, sl
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	4699      	mov	r9, r3
 80039f8:	dc36      	bgt.n	8003a68 <_printf_float+0x360>
 80039fa:	f04f 0b00 	mov.w	fp, #0
 80039fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a02:	f104 021a 	add.w	r2, r4, #26
 8003a06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a08:	9306      	str	r3, [sp, #24]
 8003a0a:	eba3 0309 	sub.w	r3, r3, r9
 8003a0e:	455b      	cmp	r3, fp
 8003a10:	dc31      	bgt.n	8003a76 <_printf_float+0x36e>
 8003a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a14:	459a      	cmp	sl, r3
 8003a16:	dc3a      	bgt.n	8003a8e <_printf_float+0x386>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	07da      	lsls	r2, r3, #31
 8003a1c:	d437      	bmi.n	8003a8e <_printf_float+0x386>
 8003a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a20:	ebaa 0903 	sub.w	r9, sl, r3
 8003a24:	9b06      	ldr	r3, [sp, #24]
 8003a26:	ebaa 0303 	sub.w	r3, sl, r3
 8003a2a:	4599      	cmp	r9, r3
 8003a2c:	bfa8      	it	ge
 8003a2e:	4699      	movge	r9, r3
 8003a30:	f1b9 0f00 	cmp.w	r9, #0
 8003a34:	dc33      	bgt.n	8003a9e <_printf_float+0x396>
 8003a36:	f04f 0800 	mov.w	r8, #0
 8003a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a3e:	f104 0b1a 	add.w	fp, r4, #26
 8003a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a44:	ebaa 0303 	sub.w	r3, sl, r3
 8003a48:	eba3 0309 	sub.w	r3, r3, r9
 8003a4c:	4543      	cmp	r3, r8
 8003a4e:	f77f af79 	ble.w	8003944 <_printf_float+0x23c>
 8003a52:	2301      	movs	r3, #1
 8003a54:	465a      	mov	r2, fp
 8003a56:	4631      	mov	r1, r6
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b8      	blx	r7
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	f43f aeae 	beq.w	80037be <_printf_float+0xb6>
 8003a62:	f108 0801 	add.w	r8, r8, #1
 8003a66:	e7ec      	b.n	8003a42 <_printf_float+0x33a>
 8003a68:	4642      	mov	r2, r8
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	d1c2      	bne.n	80039fa <_printf_float+0x2f2>
 8003a74:	e6a3      	b.n	80037be <_printf_float+0xb6>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	9206      	str	r2, [sp, #24]
 8003a7e:	47b8      	blx	r7
 8003a80:	3001      	adds	r0, #1
 8003a82:	f43f ae9c 	beq.w	80037be <_printf_float+0xb6>
 8003a86:	9a06      	ldr	r2, [sp, #24]
 8003a88:	f10b 0b01 	add.w	fp, fp, #1
 8003a8c:	e7bb      	b.n	8003a06 <_printf_float+0x2fe>
 8003a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a92:	4631      	mov	r1, r6
 8003a94:	4628      	mov	r0, r5
 8003a96:	47b8      	blx	r7
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d1c0      	bne.n	8003a1e <_printf_float+0x316>
 8003a9c:	e68f      	b.n	80037be <_printf_float+0xb6>
 8003a9e:	9a06      	ldr	r2, [sp, #24]
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	4442      	add	r2, r8
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b8      	blx	r7
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d1c3      	bne.n	8003a36 <_printf_float+0x32e>
 8003aae:	e686      	b.n	80037be <_printf_float+0xb6>
 8003ab0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ab4:	f1ba 0f01 	cmp.w	sl, #1
 8003ab8:	dc01      	bgt.n	8003abe <_printf_float+0x3b6>
 8003aba:	07db      	lsls	r3, r3, #31
 8003abc:	d536      	bpl.n	8003b2c <_printf_float+0x424>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	f43f ae78 	beq.w	80037be <_printf_float+0xb6>
 8003ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	47b8      	blx	r7
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f43f ae70 	beq.w	80037be <_printf_float+0xb6>
 8003ade:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003aea:	f7fc ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aee:	b9c0      	cbnz	r0, 8003b22 <_printf_float+0x41a>
 8003af0:	4653      	mov	r3, sl
 8003af2:	f108 0201 	add.w	r2, r8, #1
 8003af6:	4631      	mov	r1, r6
 8003af8:	4628      	mov	r0, r5
 8003afa:	47b8      	blx	r7
 8003afc:	3001      	adds	r0, #1
 8003afe:	d10c      	bne.n	8003b1a <_printf_float+0x412>
 8003b00:	e65d      	b.n	80037be <_printf_float+0xb6>
 8003b02:	2301      	movs	r3, #1
 8003b04:	465a      	mov	r2, fp
 8003b06:	4631      	mov	r1, r6
 8003b08:	4628      	mov	r0, r5
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f ae56 	beq.w	80037be <_printf_float+0xb6>
 8003b12:	f108 0801 	add.w	r8, r8, #1
 8003b16:	45d0      	cmp	r8, sl
 8003b18:	dbf3      	blt.n	8003b02 <_printf_float+0x3fa>
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b20:	e6df      	b.n	80038e2 <_printf_float+0x1da>
 8003b22:	f04f 0800 	mov.w	r8, #0
 8003b26:	f104 0b1a 	add.w	fp, r4, #26
 8003b2a:	e7f4      	b.n	8003b16 <_printf_float+0x40e>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	4642      	mov	r2, r8
 8003b30:	e7e1      	b.n	8003af6 <_printf_float+0x3ee>
 8003b32:	2301      	movs	r3, #1
 8003b34:	464a      	mov	r2, r9
 8003b36:	4631      	mov	r1, r6
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47b8      	blx	r7
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	f43f ae3e 	beq.w	80037be <_printf_float+0xb6>
 8003b42:	f108 0801 	add.w	r8, r8, #1
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b4a:	1a5b      	subs	r3, r3, r1
 8003b4c:	4543      	cmp	r3, r8
 8003b4e:	dcf0      	bgt.n	8003b32 <_printf_float+0x42a>
 8003b50:	e6fc      	b.n	800394c <_printf_float+0x244>
 8003b52:	f04f 0800 	mov.w	r8, #0
 8003b56:	f104 0919 	add.w	r9, r4, #25
 8003b5a:	e7f4      	b.n	8003b46 <_printf_float+0x43e>

08003b5c <_printf_common>:
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	4616      	mov	r6, r2
 8003b62:	4698      	mov	r8, r3
 8003b64:	688a      	ldr	r2, [r1, #8]
 8003b66:	690b      	ldr	r3, [r1, #16]
 8003b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bfb8      	it	lt
 8003b70:	4613      	movlt	r3, r2
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b78:	4607      	mov	r7, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	b10a      	cbz	r2, 8003b82 <_printf_common+0x26>
 8003b7e:	3301      	adds	r3, #1
 8003b80:	6033      	str	r3, [r6, #0]
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	0699      	lsls	r1, r3, #26
 8003b86:	bf42      	ittt	mi
 8003b88:	6833      	ldrmi	r3, [r6, #0]
 8003b8a:	3302      	addmi	r3, #2
 8003b8c:	6033      	strmi	r3, [r6, #0]
 8003b8e:	6825      	ldr	r5, [r4, #0]
 8003b90:	f015 0506 	ands.w	r5, r5, #6
 8003b94:	d106      	bne.n	8003ba4 <_printf_common+0x48>
 8003b96:	f104 0a19 	add.w	sl, r4, #25
 8003b9a:	68e3      	ldr	r3, [r4, #12]
 8003b9c:	6832      	ldr	r2, [r6, #0]
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	dc26      	bgt.n	8003bf2 <_printf_common+0x96>
 8003ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	3b00      	subs	r3, #0
 8003bac:	bf18      	it	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	0692      	lsls	r2, r2, #26
 8003bb2:	d42b      	bmi.n	8003c0c <_printf_common+0xb0>
 8003bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bb8:	4641      	mov	r1, r8
 8003bba:	4638      	mov	r0, r7
 8003bbc:	47c8      	blx	r9
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d01e      	beq.n	8003c00 <_printf_common+0xa4>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	6922      	ldr	r2, [r4, #16]
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf02      	ittt	eq
 8003bce:	68e5      	ldreq	r5, [r4, #12]
 8003bd0:	6833      	ldreq	r3, [r6, #0]
 8003bd2:	1aed      	subeq	r5, r5, r3
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	bf0c      	ite	eq
 8003bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bdc:	2500      	movne	r5, #0
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bfc4      	itt	gt
 8003be2:	1a9b      	subgt	r3, r3, r2
 8003be4:	18ed      	addgt	r5, r5, r3
 8003be6:	2600      	movs	r6, #0
 8003be8:	341a      	adds	r4, #26
 8003bea:	42b5      	cmp	r5, r6
 8003bec:	d11a      	bne.n	8003c24 <_printf_common+0xc8>
 8003bee:	2000      	movs	r0, #0
 8003bf0:	e008      	b.n	8003c04 <_printf_common+0xa8>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	47c8      	blx	r9
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d103      	bne.n	8003c08 <_printf_common+0xac>
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	3501      	adds	r5, #1
 8003c0a:	e7c6      	b.n	8003b9a <_printf_common+0x3e>
 8003c0c:	18e1      	adds	r1, r4, r3
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	2030      	movs	r0, #48	@ 0x30
 8003c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c16:	4422      	add	r2, r4
 8003c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c20:	3302      	adds	r3, #2
 8003c22:	e7c7      	b.n	8003bb4 <_printf_common+0x58>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4622      	mov	r2, r4
 8003c28:	4641      	mov	r1, r8
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c8      	blx	r9
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d0e6      	beq.n	8003c00 <_printf_common+0xa4>
 8003c32:	3601      	adds	r6, #1
 8003c34:	e7d9      	b.n	8003bea <_printf_common+0x8e>
	...

08003c38 <_printf_i>:
 8003c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	7e0f      	ldrb	r7, [r1, #24]
 8003c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c40:	2f78      	cmp	r7, #120	@ 0x78
 8003c42:	4691      	mov	r9, r2
 8003c44:	4680      	mov	r8, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	469a      	mov	sl, r3
 8003c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c4e:	d807      	bhi.n	8003c60 <_printf_i+0x28>
 8003c50:	2f62      	cmp	r7, #98	@ 0x62
 8003c52:	d80a      	bhi.n	8003c6a <_printf_i+0x32>
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	f000 80d2 	beq.w	8003dfe <_printf_i+0x1c6>
 8003c5a:	2f58      	cmp	r7, #88	@ 0x58
 8003c5c:	f000 80b9 	beq.w	8003dd2 <_printf_i+0x19a>
 8003c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c68:	e03a      	b.n	8003ce0 <_printf_i+0xa8>
 8003c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c6e:	2b15      	cmp	r3, #21
 8003c70:	d8f6      	bhi.n	8003c60 <_printf_i+0x28>
 8003c72:	a101      	add	r1, pc, #4	@ (adr r1, 8003c78 <_printf_i+0x40>)
 8003c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003c61 	.word	0x08003c61
 8003c84:	08003c61 	.word	0x08003c61
 8003c88:	08003c61 	.word	0x08003c61
 8003c8c:	08003c61 	.word	0x08003c61
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c61 	.word	0x08003c61
 8003c98:	08003c61 	.word	0x08003c61
 8003c9c:	08003c61 	.word	0x08003c61
 8003ca0:	08003c61 	.word	0x08003c61
 8003ca4:	08003de5 	.word	0x08003de5
 8003ca8:	08003d0f 	.word	0x08003d0f
 8003cac:	08003d9f 	.word	0x08003d9f
 8003cb0:	08003c61 	.word	0x08003c61
 8003cb4:	08003c61 	.word	0x08003c61
 8003cb8:	08003e07 	.word	0x08003e07
 8003cbc:	08003c61 	.word	0x08003c61
 8003cc0:	08003d0f 	.word	0x08003d0f
 8003cc4:	08003c61 	.word	0x08003c61
 8003cc8:	08003c61 	.word	0x08003c61
 8003ccc:	08003da7 	.word	0x08003da7
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6032      	str	r2, [r6, #0]
 8003cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e09d      	b.n	8003e20 <_printf_i+0x1e8>
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	6031      	str	r1, [r6, #0]
 8003cec:	0606      	lsls	r6, r0, #24
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0xbc>
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	e003      	b.n	8003cfc <_printf_i+0xc4>
 8003cf4:	0645      	lsls	r5, r0, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0xb8>
 8003cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	da03      	bge.n	8003d08 <_printf_i+0xd0>
 8003d00:	232d      	movs	r3, #45	@ 0x2d
 8003d02:	426d      	negs	r5, r5
 8003d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d08:	4859      	ldr	r0, [pc, #356]	@ (8003e70 <_printf_i+0x238>)
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	e011      	b.n	8003d32 <_printf_i+0xfa>
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	6833      	ldr	r3, [r6, #0]
 8003d12:	0608      	lsls	r0, r1, #24
 8003d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d18:	d402      	bmi.n	8003d20 <_printf_i+0xe8>
 8003d1a:	0649      	lsls	r1, r1, #25
 8003d1c:	bf48      	it	mi
 8003d1e:	b2ad      	uxthmi	r5, r5
 8003d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d22:	4853      	ldr	r0, [pc, #332]	@ (8003e70 <_printf_i+0x238>)
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	bf14      	ite	ne
 8003d28:	230a      	movne	r3, #10
 8003d2a:	2308      	moveq	r3, #8
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d32:	6866      	ldr	r6, [r4, #4]
 8003d34:	60a6      	str	r6, [r4, #8]
 8003d36:	2e00      	cmp	r6, #0
 8003d38:	bfa2      	ittt	ge
 8003d3a:	6821      	ldrge	r1, [r4, #0]
 8003d3c:	f021 0104 	bicge.w	r1, r1, #4
 8003d40:	6021      	strge	r1, [r4, #0]
 8003d42:	b90d      	cbnz	r5, 8003d48 <_printf_i+0x110>
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	d04b      	beq.n	8003de0 <_printf_i+0x1a8>
 8003d48:	4616      	mov	r6, r2
 8003d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d52:	5dc7      	ldrb	r7, [r0, r7]
 8003d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d58:	462f      	mov	r7, r5
 8003d5a:	42bb      	cmp	r3, r7
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	d9f4      	bls.n	8003d4a <_printf_i+0x112>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d10b      	bne.n	8003d7c <_printf_i+0x144>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07df      	lsls	r7, r3, #31
 8003d68:	d508      	bpl.n	8003d7c <_printf_i+0x144>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	6861      	ldr	r1, [r4, #4]
 8003d6e:	4299      	cmp	r1, r3
 8003d70:	bfde      	ittt	le
 8003d72:	2330      	movle	r3, #48	@ 0x30
 8003d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d7c:	1b92      	subs	r2, r2, r6
 8003d7e:	6122      	str	r2, [r4, #16]
 8003d80:	f8cd a000 	str.w	sl, [sp]
 8003d84:	464b      	mov	r3, r9
 8003d86:	aa03      	add	r2, sp, #12
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f7ff fee6 	bl	8003b5c <_printf_common>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d14a      	bne.n	8003e2a <_printf_i+0x1f2>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	b004      	add	sp, #16
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	4833      	ldr	r0, [pc, #204]	@ (8003e74 <_printf_i+0x23c>)
 8003da8:	2778      	movs	r7, #120	@ 0x78
 8003daa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	6831      	ldr	r1, [r6, #0]
 8003db2:	061f      	lsls	r7, r3, #24
 8003db4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003db8:	d402      	bmi.n	8003dc0 <_printf_i+0x188>
 8003dba:	065f      	lsls	r7, r3, #25
 8003dbc:	bf48      	it	mi
 8003dbe:	b2ad      	uxthmi	r5, r5
 8003dc0:	6031      	str	r1, [r6, #0]
 8003dc2:	07d9      	lsls	r1, r3, #31
 8003dc4:	bf44      	itt	mi
 8003dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dca:	6023      	strmi	r3, [r4, #0]
 8003dcc:	b11d      	cbz	r5, 8003dd6 <_printf_i+0x19e>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	e7ac      	b.n	8003d2c <_printf_i+0xf4>
 8003dd2:	4827      	ldr	r0, [pc, #156]	@ (8003e70 <_printf_i+0x238>)
 8003dd4:	e7e9      	b.n	8003daa <_printf_i+0x172>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f023 0320 	bic.w	r3, r3, #32
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	e7f6      	b.n	8003dce <_printf_i+0x196>
 8003de0:	4616      	mov	r6, r2
 8003de2:	e7bd      	b.n	8003d60 <_printf_i+0x128>
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	6961      	ldr	r1, [r4, #20]
 8003dea:	1d18      	adds	r0, r3, #4
 8003dec:	6030      	str	r0, [r6, #0]
 8003dee:	062e      	lsls	r6, r5, #24
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	d501      	bpl.n	8003df8 <_printf_i+0x1c0>
 8003df4:	6019      	str	r1, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <_printf_i+0x1c6>
 8003df8:	0668      	lsls	r0, r5, #25
 8003dfa:	d5fb      	bpl.n	8003df4 <_printf_i+0x1bc>
 8003dfc:	8019      	strh	r1, [r3, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6123      	str	r3, [r4, #16]
 8003e02:	4616      	mov	r6, r2
 8003e04:	e7bc      	b.n	8003d80 <_printf_i+0x148>
 8003e06:	6833      	ldr	r3, [r6, #0]
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	6032      	str	r2, [r6, #0]
 8003e0c:	681e      	ldr	r6, [r3, #0]
 8003e0e:	6862      	ldr	r2, [r4, #4]
 8003e10:	2100      	movs	r1, #0
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7fc f9dc 	bl	80001d0 <memchr>
 8003e18:	b108      	cbz	r0, 8003e1e <_printf_i+0x1e6>
 8003e1a:	1b80      	subs	r0, r0, r6
 8003e1c:	6060      	str	r0, [r4, #4]
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	6123      	str	r3, [r4, #16]
 8003e22:	2300      	movs	r3, #0
 8003e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e28:	e7aa      	b.n	8003d80 <_printf_i+0x148>
 8003e2a:	6923      	ldr	r3, [r4, #16]
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4640      	mov	r0, r8
 8003e32:	47d0      	blx	sl
 8003e34:	3001      	adds	r0, #1
 8003e36:	d0ad      	beq.n	8003d94 <_printf_i+0x15c>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	079b      	lsls	r3, r3, #30
 8003e3c:	d413      	bmi.n	8003e66 <_printf_i+0x22e>
 8003e3e:	68e0      	ldr	r0, [r4, #12]
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	4298      	cmp	r0, r3
 8003e44:	bfb8      	it	lt
 8003e46:	4618      	movlt	r0, r3
 8003e48:	e7a6      	b.n	8003d98 <_printf_i+0x160>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	4649      	mov	r1, r9
 8003e50:	4640      	mov	r0, r8
 8003e52:	47d0      	blx	sl
 8003e54:	3001      	adds	r0, #1
 8003e56:	d09d      	beq.n	8003d94 <_printf_i+0x15c>
 8003e58:	3501      	adds	r5, #1
 8003e5a:	68e3      	ldr	r3, [r4, #12]
 8003e5c:	9903      	ldr	r1, [sp, #12]
 8003e5e:	1a5b      	subs	r3, r3, r1
 8003e60:	42ab      	cmp	r3, r5
 8003e62:	dcf2      	bgt.n	8003e4a <_printf_i+0x212>
 8003e64:	e7eb      	b.n	8003e3e <_printf_i+0x206>
 8003e66:	2500      	movs	r5, #0
 8003e68:	f104 0619 	add.w	r6, r4, #25
 8003e6c:	e7f5      	b.n	8003e5a <_printf_i+0x222>
 8003e6e:	bf00      	nop
 8003e70:	08006a7e 	.word	0x08006a7e
 8003e74:	08006a8f 	.word	0x08006a8f

08003e78 <std>:
 8003e78:	2300      	movs	r3, #0
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e86:	6083      	str	r3, [r0, #8]
 8003e88:	8181      	strh	r1, [r0, #12]
 8003e8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e8c:	81c2      	strh	r2, [r0, #14]
 8003e8e:	6183      	str	r3, [r0, #24]
 8003e90:	4619      	mov	r1, r3
 8003e92:	2208      	movs	r2, #8
 8003e94:	305c      	adds	r0, #92	@ 0x5c
 8003e96:	f000 fa19 	bl	80042cc <memset>
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <std+0x58>)
 8003e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <std+0x5c>)
 8003ea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <std+0x60>)
 8003ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <std+0x64>)
 8003ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <std+0x68>)
 8003eac:	6224      	str	r4, [r4, #32]
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d006      	beq.n	8003ec0 <std+0x48>
 8003eb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eb6:	4294      	cmp	r4, r2
 8003eb8:	d002      	beq.n	8003ec0 <std+0x48>
 8003eba:	33d0      	adds	r3, #208	@ 0xd0
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d105      	bne.n	8003ecc <std+0x54>
 8003ec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec8:	f000 ba7c 	b.w	80043c4 <__retarget_lock_init_recursive>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	0800411d 	.word	0x0800411d
 8003ed4:	0800413f 	.word	0x0800413f
 8003ed8:	08004177 	.word	0x08004177
 8003edc:	0800419b 	.word	0x0800419b
 8003ee0:	20000664 	.word	0x20000664

08003ee4 <stdio_exit_handler>:
 8003ee4:	4a02      	ldr	r2, [pc, #8]	@ (8003ef0 <stdio_exit_handler+0xc>)
 8003ee6:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <stdio_exit_handler+0x10>)
 8003ee8:	4803      	ldr	r0, [pc, #12]	@ (8003ef8 <stdio_exit_handler+0x14>)
 8003eea:	f000 b869 	b.w	8003fc0 <_fwalk_sglue>
 8003eee:	bf00      	nop
 8003ef0:	2000001c 	.word	0x2000001c
 8003ef4:	08005fc1 	.word	0x08005fc1
 8003ef8:	2000002c 	.word	0x2000002c

08003efc <cleanup_stdio>:
 8003efc:	6841      	ldr	r1, [r0, #4]
 8003efe:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <cleanup_stdio+0x34>)
 8003f00:	4299      	cmp	r1, r3
 8003f02:	b510      	push	{r4, lr}
 8003f04:	4604      	mov	r4, r0
 8003f06:	d001      	beq.n	8003f0c <cleanup_stdio+0x10>
 8003f08:	f002 f85a 	bl	8005fc0 <_fflush_r>
 8003f0c:	68a1      	ldr	r1, [r4, #8]
 8003f0e:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <cleanup_stdio+0x38>)
 8003f10:	4299      	cmp	r1, r3
 8003f12:	d002      	beq.n	8003f1a <cleanup_stdio+0x1e>
 8003f14:	4620      	mov	r0, r4
 8003f16:	f002 f853 	bl	8005fc0 <_fflush_r>
 8003f1a:	68e1      	ldr	r1, [r4, #12]
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <cleanup_stdio+0x3c>)
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	d004      	beq.n	8003f2c <cleanup_stdio+0x30>
 8003f22:	4620      	mov	r0, r4
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f002 b84a 	b.w	8005fc0 <_fflush_r>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000664 	.word	0x20000664
 8003f34:	200006cc 	.word	0x200006cc
 8003f38:	20000734 	.word	0x20000734

08003f3c <global_stdio_init.part.0>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <global_stdio_init.part.0+0x30>)
 8003f40:	4c0b      	ldr	r4, [pc, #44]	@ (8003f70 <global_stdio_init.part.0+0x34>)
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <global_stdio_init.part.0+0x38>)
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4620      	mov	r0, r4
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	f7ff ff94 	bl	8003e78 <std>
 8003f50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f54:	2201      	movs	r2, #1
 8003f56:	2109      	movs	r1, #9
 8003f58:	f7ff ff8e 	bl	8003e78 <std>
 8003f5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f60:	2202      	movs	r2, #2
 8003f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f66:	2112      	movs	r1, #18
 8003f68:	f7ff bf86 	b.w	8003e78 <std>
 8003f6c:	2000079c 	.word	0x2000079c
 8003f70:	20000664 	.word	0x20000664
 8003f74:	08003ee5 	.word	0x08003ee5

08003f78 <__sfp_lock_acquire>:
 8003f78:	4801      	ldr	r0, [pc, #4]	@ (8003f80 <__sfp_lock_acquire+0x8>)
 8003f7a:	f000 ba24 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 8003f7e:	bf00      	nop
 8003f80:	200007a5 	.word	0x200007a5

08003f84 <__sfp_lock_release>:
 8003f84:	4801      	ldr	r0, [pc, #4]	@ (8003f8c <__sfp_lock_release+0x8>)
 8003f86:	f000 ba1f 	b.w	80043c8 <__retarget_lock_release_recursive>
 8003f8a:	bf00      	nop
 8003f8c:	200007a5 	.word	0x200007a5

08003f90 <__sinit>:
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4604      	mov	r4, r0
 8003f94:	f7ff fff0 	bl	8003f78 <__sfp_lock_acquire>
 8003f98:	6a23      	ldr	r3, [r4, #32]
 8003f9a:	b11b      	cbz	r3, 8003fa4 <__sinit+0x14>
 8003f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa0:	f7ff bff0 	b.w	8003f84 <__sfp_lock_release>
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__sinit+0x28>)
 8003fa6:	6223      	str	r3, [r4, #32]
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <__sinit+0x2c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f5      	bne.n	8003f9c <__sinit+0xc>
 8003fb0:	f7ff ffc4 	bl	8003f3c <global_stdio_init.part.0>
 8003fb4:	e7f2      	b.n	8003f9c <__sinit+0xc>
 8003fb6:	bf00      	nop
 8003fb8:	08003efd 	.word	0x08003efd
 8003fbc:	2000079c 	.word	0x2000079c

08003fc0 <_fwalk_sglue>:
 8003fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	4688      	mov	r8, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	2600      	movs	r6, #0
 8003fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003fd4:	d505      	bpl.n	8003fe2 <_fwalk_sglue+0x22>
 8003fd6:	6824      	ldr	r4, [r4, #0]
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	d1f7      	bne.n	8003fcc <_fwalk_sglue+0xc>
 8003fdc:	4630      	mov	r0, r6
 8003fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d907      	bls.n	8003ff8 <_fwalk_sglue+0x38>
 8003fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fec:	3301      	adds	r3, #1
 8003fee:	d003      	beq.n	8003ff8 <_fwalk_sglue+0x38>
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c0      	blx	r8
 8003ff6:	4306      	orrs	r6, r0
 8003ff8:	3568      	adds	r5, #104	@ 0x68
 8003ffa:	e7e9      	b.n	8003fd0 <_fwalk_sglue+0x10>

08003ffc <iprintf>:
 8003ffc:	b40f      	push	{r0, r1, r2, r3}
 8003ffe:	b507      	push	{r0, r1, r2, lr}
 8004000:	4906      	ldr	r1, [pc, #24]	@ (800401c <iprintf+0x20>)
 8004002:	ab04      	add	r3, sp, #16
 8004004:	6808      	ldr	r0, [r1, #0]
 8004006:	f853 2b04 	ldr.w	r2, [r3], #4
 800400a:	6881      	ldr	r1, [r0, #8]
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	f001 fe3b 	bl	8005c88 <_vfiprintf_r>
 8004012:	b003      	add	sp, #12
 8004014:	f85d eb04 	ldr.w	lr, [sp], #4
 8004018:	b004      	add	sp, #16
 800401a:	4770      	bx	lr
 800401c:	20000028 	.word	0x20000028

08004020 <_puts_r>:
 8004020:	6a03      	ldr	r3, [r0, #32]
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	6884      	ldr	r4, [r0, #8]
 8004026:	4605      	mov	r5, r0
 8004028:	460e      	mov	r6, r1
 800402a:	b90b      	cbnz	r3, 8004030 <_puts_r+0x10>
 800402c:	f7ff ffb0 	bl	8003f90 <__sinit>
 8004030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d405      	bmi.n	8004042 <_puts_r+0x22>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	0598      	lsls	r0, r3, #22
 800403a:	d402      	bmi.n	8004042 <_puts_r+0x22>
 800403c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800403e:	f000 f9c2 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	0719      	lsls	r1, r3, #28
 8004046:	d502      	bpl.n	800404e <_puts_r+0x2e>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d135      	bne.n	80040ba <_puts_r+0x9a>
 800404e:	4621      	mov	r1, r4
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f8e5 	bl	8004220 <__swsetup_r>
 8004056:	b380      	cbz	r0, 80040ba <_puts_r+0x9a>
 8004058:	f04f 35ff 	mov.w	r5, #4294967295
 800405c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800405e:	07da      	lsls	r2, r3, #31
 8004060:	d405      	bmi.n	800406e <_puts_r+0x4e>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	059b      	lsls	r3, r3, #22
 8004066:	d402      	bmi.n	800406e <_puts_r+0x4e>
 8004068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800406a:	f000 f9ad 	bl	80043c8 <__retarget_lock_release_recursive>
 800406e:	4628      	mov	r0, r5
 8004070:	bd70      	pop	{r4, r5, r6, pc}
 8004072:	2b00      	cmp	r3, #0
 8004074:	da04      	bge.n	8004080 <_puts_r+0x60>
 8004076:	69a2      	ldr	r2, [r4, #24]
 8004078:	429a      	cmp	r2, r3
 800407a:	dc17      	bgt.n	80040ac <_puts_r+0x8c>
 800407c:	290a      	cmp	r1, #10
 800407e:	d015      	beq.n	80040ac <_puts_r+0x8c>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	7019      	strb	r1, [r3, #0]
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800408e:	3b01      	subs	r3, #1
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	2900      	cmp	r1, #0
 8004094:	d1ed      	bne.n	8004072 <_puts_r+0x52>
 8004096:	2b00      	cmp	r3, #0
 8004098:	da11      	bge.n	80040be <_puts_r+0x9e>
 800409a:	4622      	mov	r2, r4
 800409c:	210a      	movs	r1, #10
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f87f 	bl	80041a2 <__swbuf_r>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d0d7      	beq.n	8004058 <_puts_r+0x38>
 80040a8:	250a      	movs	r5, #10
 80040aa:	e7d7      	b.n	800405c <_puts_r+0x3c>
 80040ac:	4622      	mov	r2, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f877 	bl	80041a2 <__swbuf_r>
 80040b4:	3001      	adds	r0, #1
 80040b6:	d1e7      	bne.n	8004088 <_puts_r+0x68>
 80040b8:	e7ce      	b.n	8004058 <_puts_r+0x38>
 80040ba:	3e01      	subs	r6, #1
 80040bc:	e7e4      	b.n	8004088 <_puts_r+0x68>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	220a      	movs	r2, #10
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e7ee      	b.n	80040a8 <_puts_r+0x88>
	...

080040cc <puts>:
 80040cc:	4b02      	ldr	r3, [pc, #8]	@ (80040d8 <puts+0xc>)
 80040ce:	4601      	mov	r1, r0
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	f7ff bfa5 	b.w	8004020 <_puts_r>
 80040d6:	bf00      	nop
 80040d8:	20000028 	.word	0x20000028

080040dc <siprintf>:
 80040dc:	b40e      	push	{r1, r2, r3}
 80040de:	b500      	push	{lr}
 80040e0:	b09c      	sub	sp, #112	@ 0x70
 80040e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80040e4:	9002      	str	r0, [sp, #8]
 80040e6:	9006      	str	r0, [sp, #24]
 80040e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040ec:	4809      	ldr	r0, [pc, #36]	@ (8004114 <siprintf+0x38>)
 80040ee:	9107      	str	r1, [sp, #28]
 80040f0:	9104      	str	r1, [sp, #16]
 80040f2:	4909      	ldr	r1, [pc, #36]	@ (8004118 <siprintf+0x3c>)
 80040f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	a902      	add	r1, sp, #8
 8004100:	f001 fc9c 	bl	8005a3c <_svfiprintf_r>
 8004104:	9b02      	ldr	r3, [sp, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	b01c      	add	sp, #112	@ 0x70
 800410c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004110:	b003      	add	sp, #12
 8004112:	4770      	bx	lr
 8004114:	20000028 	.word	0x20000028
 8004118:	ffff0208 	.word	0xffff0208

0800411c <__sread>:
 800411c:	b510      	push	{r4, lr}
 800411e:	460c      	mov	r4, r1
 8004120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004124:	f000 f900 	bl	8004328 <_read_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	bfab      	itete	ge
 800412c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800412e:	89a3      	ldrhlt	r3, [r4, #12]
 8004130:	181b      	addge	r3, r3, r0
 8004132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004136:	bfac      	ite	ge
 8004138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800413a:	81a3      	strhlt	r3, [r4, #12]
 800413c:	bd10      	pop	{r4, pc}

0800413e <__swrite>:
 800413e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004142:	461f      	mov	r7, r3
 8004144:	898b      	ldrh	r3, [r1, #12]
 8004146:	05db      	lsls	r3, r3, #23
 8004148:	4605      	mov	r5, r0
 800414a:	460c      	mov	r4, r1
 800414c:	4616      	mov	r6, r2
 800414e:	d505      	bpl.n	800415c <__swrite+0x1e>
 8004150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004154:	2302      	movs	r3, #2
 8004156:	2200      	movs	r2, #0
 8004158:	f000 f8d4 	bl	8004304 <_lseek_r>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	4632      	mov	r2, r6
 800416a:	463b      	mov	r3, r7
 800416c:	4628      	mov	r0, r5
 800416e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	f000 b8eb 	b.w	800434c <_write_r>

08004176 <__sseek>:
 8004176:	b510      	push	{r4, lr}
 8004178:	460c      	mov	r4, r1
 800417a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417e:	f000 f8c1 	bl	8004304 <_lseek_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	bf15      	itete	ne
 8004188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800418a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800418e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004192:	81a3      	strheq	r3, [r4, #12]
 8004194:	bf18      	it	ne
 8004196:	81a3      	strhne	r3, [r4, #12]
 8004198:	bd10      	pop	{r4, pc}

0800419a <__sclose>:
 800419a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419e:	f000 b8a1 	b.w	80042e4 <_close_r>

080041a2 <__swbuf_r>:
 80041a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a4:	460e      	mov	r6, r1
 80041a6:	4614      	mov	r4, r2
 80041a8:	4605      	mov	r5, r0
 80041aa:	b118      	cbz	r0, 80041b4 <__swbuf_r+0x12>
 80041ac:	6a03      	ldr	r3, [r0, #32]
 80041ae:	b90b      	cbnz	r3, 80041b4 <__swbuf_r+0x12>
 80041b0:	f7ff feee 	bl	8003f90 <__sinit>
 80041b4:	69a3      	ldr	r3, [r4, #24]
 80041b6:	60a3      	str	r3, [r4, #8]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	071a      	lsls	r2, r3, #28
 80041bc:	d501      	bpl.n	80041c2 <__swbuf_r+0x20>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	b943      	cbnz	r3, 80041d4 <__swbuf_r+0x32>
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 f82b 	bl	8004220 <__swsetup_r>
 80041ca:	b118      	cbz	r0, 80041d4 <__swbuf_r+0x32>
 80041cc:	f04f 37ff 	mov.w	r7, #4294967295
 80041d0:	4638      	mov	r0, r7
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	6922      	ldr	r2, [r4, #16]
 80041d8:	1a98      	subs	r0, r3, r2
 80041da:	6963      	ldr	r3, [r4, #20]
 80041dc:	b2f6      	uxtb	r6, r6
 80041de:	4283      	cmp	r3, r0
 80041e0:	4637      	mov	r7, r6
 80041e2:	dc05      	bgt.n	80041f0 <__swbuf_r+0x4e>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	f001 feea 	bl	8005fc0 <_fflush_r>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d1ed      	bne.n	80041cc <__swbuf_r+0x2a>
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60a3      	str	r3, [r4, #8]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	701e      	strb	r6, [r3, #0]
 80041fe:	6962      	ldr	r2, [r4, #20]
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <__swbuf_r+0x6e>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d5e1      	bpl.n	80041d0 <__swbuf_r+0x2e>
 800420c:	2e0a      	cmp	r6, #10
 800420e:	d1df      	bne.n	80041d0 <__swbuf_r+0x2e>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f001 fed4 	bl	8005fc0 <_fflush_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d0d9      	beq.n	80041d0 <__swbuf_r+0x2e>
 800421c:	e7d6      	b.n	80041cc <__swbuf_r+0x2a>
	...

08004220 <__swsetup_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <__swsetup_r+0xa8>)
 8004224:	4605      	mov	r5, r0
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	460c      	mov	r4, r1
 800422a:	b118      	cbz	r0, 8004234 <__swsetup_r+0x14>
 800422c:	6a03      	ldr	r3, [r0, #32]
 800422e:	b90b      	cbnz	r3, 8004234 <__swsetup_r+0x14>
 8004230:	f7ff feae 	bl	8003f90 <__sinit>
 8004234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004238:	0719      	lsls	r1, r3, #28
 800423a:	d422      	bmi.n	8004282 <__swsetup_r+0x62>
 800423c:	06da      	lsls	r2, r3, #27
 800423e:	d407      	bmi.n	8004250 <__swsetup_r+0x30>
 8004240:	2209      	movs	r2, #9
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	e033      	b.n	80042b8 <__swsetup_r+0x98>
 8004250:	0758      	lsls	r0, r3, #29
 8004252:	d512      	bpl.n	800427a <__swsetup_r+0x5a>
 8004254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004256:	b141      	cbz	r1, 800426a <__swsetup_r+0x4a>
 8004258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800425c:	4299      	cmp	r1, r3
 800425e:	d002      	beq.n	8004266 <__swsetup_r+0x46>
 8004260:	4628      	mov	r0, r5
 8004262:	f000 ff0d 	bl	8005080 <_free_r>
 8004266:	2300      	movs	r3, #0
 8004268:	6363      	str	r3, [r4, #52]	@ 0x34
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	2300      	movs	r3, #0
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f043 0308 	orr.w	r3, r3, #8
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	b94b      	cbnz	r3, 800429a <__swsetup_r+0x7a>
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800428c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004290:	d003      	beq.n	800429a <__swsetup_r+0x7a>
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f001 fee1 	bl	800605c <__smakebuf_r>
 800429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429e:	f013 0201 	ands.w	r2, r3, #1
 80042a2:	d00a      	beq.n	80042ba <__swsetup_r+0x9a>
 80042a4:	2200      	movs	r2, #0
 80042a6:	60a2      	str	r2, [r4, #8]
 80042a8:	6962      	ldr	r2, [r4, #20]
 80042aa:	4252      	negs	r2, r2
 80042ac:	61a2      	str	r2, [r4, #24]
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	b942      	cbnz	r2, 80042c4 <__swsetup_r+0xa4>
 80042b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042b6:	d1c5      	bne.n	8004244 <__swsetup_r+0x24>
 80042b8:	bd38      	pop	{r3, r4, r5, pc}
 80042ba:	0799      	lsls	r1, r3, #30
 80042bc:	bf58      	it	pl
 80042be:	6962      	ldrpl	r2, [r4, #20]
 80042c0:	60a2      	str	r2, [r4, #8]
 80042c2:	e7f4      	b.n	80042ae <__swsetup_r+0x8e>
 80042c4:	2000      	movs	r0, #0
 80042c6:	e7f7      	b.n	80042b8 <__swsetup_r+0x98>
 80042c8:	20000028 	.word	0x20000028

080042cc <memset>:
 80042cc:	4402      	add	r2, r0
 80042ce:	4603      	mov	r3, r0
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d100      	bne.n	80042d6 <memset+0xa>
 80042d4:	4770      	bx	lr
 80042d6:	f803 1b01 	strb.w	r1, [r3], #1
 80042da:	e7f9      	b.n	80042d0 <memset+0x4>

080042dc <_localeconv_r>:
 80042dc:	4800      	ldr	r0, [pc, #0]	@ (80042e0 <_localeconv_r+0x4>)
 80042de:	4770      	bx	lr
 80042e0:	20000168 	.word	0x20000168

080042e4 <_close_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d06      	ldr	r5, [pc, #24]	@ (8004300 <_close_r+0x1c>)
 80042e8:	2300      	movs	r3, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fd fc42 	bl	8001b78 <_close>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_close_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_close_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200007a0 	.word	0x200007a0

08004304 <_lseek_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d07      	ldr	r5, [pc, #28]	@ (8004324 <_lseek_r+0x20>)
 8004308:	4604      	mov	r4, r0
 800430a:	4608      	mov	r0, r1
 800430c:	4611      	mov	r1, r2
 800430e:	2200      	movs	r2, #0
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fd fc57 	bl	8001bc6 <_lseek>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_lseek_r+0x1e>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_lseek_r+0x1e>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	200007a0 	.word	0x200007a0

08004328 <_read_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d07      	ldr	r5, [pc, #28]	@ (8004348 <_read_r+0x20>)
 800432c:	4604      	mov	r4, r0
 800432e:	4608      	mov	r0, r1
 8004330:	4611      	mov	r1, r2
 8004332:	2200      	movs	r2, #0
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f7fd fbe5 	bl	8001b06 <_read>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_read_r+0x1e>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_read_r+0x1e>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	200007a0 	.word	0x200007a0

0800434c <_write_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d07      	ldr	r5, [pc, #28]	@ (800436c <_write_r+0x20>)
 8004350:	4604      	mov	r4, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	2200      	movs	r2, #0
 8004358:	602a      	str	r2, [r5, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fd fbf0 	bl	8001b40 <_write>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_write_r+0x1e>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_write_r+0x1e>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200007a0 	.word	0x200007a0

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	@ (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000028 	.word	0x20000028

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4d0d      	ldr	r5, [pc, #52]	@ (80043b4 <__libc_init_array+0x38>)
 8004380:	4c0d      	ldr	r4, [pc, #52]	@ (80043b8 <__libc_init_array+0x3c>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	2600      	movs	r6, #0
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	4d0b      	ldr	r5, [pc, #44]	@ (80043bc <__libc_init_array+0x40>)
 800438e:	4c0c      	ldr	r4, [pc, #48]	@ (80043c0 <__libc_init_array+0x44>)
 8004390:	f001 ffd2 	bl	8006338 <_init>
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	2600      	movs	r6, #0
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08006de8 	.word	0x08006de8
 80043b8:	08006de8 	.word	0x08006de8
 80043bc:	08006de8 	.word	0x08006de8
 80043c0:	08006dec 	.word	0x08006dec

080043c4 <__retarget_lock_init_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_acquire_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__retarget_lock_release_recursive>:
 80043c8:	4770      	bx	lr

080043ca <memcpy>:
 80043ca:	440a      	add	r2, r1
 80043cc:	4291      	cmp	r1, r2
 80043ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d2:	d100      	bne.n	80043d6 <memcpy+0xc>
 80043d4:	4770      	bx	lr
 80043d6:	b510      	push	{r4, lr}
 80043d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043e0:	4291      	cmp	r1, r2
 80043e2:	d1f9      	bne.n	80043d8 <memcpy+0xe>
 80043e4:	bd10      	pop	{r4, pc}

080043e6 <quorem>:
 80043e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6903      	ldr	r3, [r0, #16]
 80043ec:	690c      	ldr	r4, [r1, #16]
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	4607      	mov	r7, r0
 80043f2:	db7e      	blt.n	80044f2 <quorem+0x10c>
 80043f4:	3c01      	subs	r4, #1
 80043f6:	f101 0814 	add.w	r8, r1, #20
 80043fa:	00a3      	lsls	r3, r4, #2
 80043fc:	f100 0514 	add.w	r5, r0, #20
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800440c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004410:	3301      	adds	r3, #1
 8004412:	429a      	cmp	r2, r3
 8004414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004418:	fbb2 f6f3 	udiv	r6, r2, r3
 800441c:	d32e      	bcc.n	800447c <quorem+0x96>
 800441e:	f04f 0a00 	mov.w	sl, #0
 8004422:	46c4      	mov	ip, r8
 8004424:	46ae      	mov	lr, r5
 8004426:	46d3      	mov	fp, sl
 8004428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800442c:	b298      	uxth	r0, r3
 800442e:	fb06 a000 	mla	r0, r6, r0, sl
 8004432:	0c02      	lsrs	r2, r0, #16
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	fb06 2303 	mla	r3, r6, r3, r2
 800443a:	f8de 2000 	ldr.w	r2, [lr]
 800443e:	b280      	uxth	r0, r0
 8004440:	b292      	uxth	r2, r2
 8004442:	1a12      	subs	r2, r2, r0
 8004444:	445a      	add	r2, fp
 8004446:	f8de 0000 	ldr.w	r0, [lr]
 800444a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800444e:	b29b      	uxth	r3, r3
 8004450:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004454:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004458:	b292      	uxth	r2, r2
 800445a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800445e:	45e1      	cmp	r9, ip
 8004460:	f84e 2b04 	str.w	r2, [lr], #4
 8004464:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004468:	d2de      	bcs.n	8004428 <quorem+0x42>
 800446a:	9b00      	ldr	r3, [sp, #0]
 800446c:	58eb      	ldr	r3, [r5, r3]
 800446e:	b92b      	cbnz	r3, 800447c <quorem+0x96>
 8004470:	9b01      	ldr	r3, [sp, #4]
 8004472:	3b04      	subs	r3, #4
 8004474:	429d      	cmp	r5, r3
 8004476:	461a      	mov	r2, r3
 8004478:	d32f      	bcc.n	80044da <quorem+0xf4>
 800447a:	613c      	str	r4, [r7, #16]
 800447c:	4638      	mov	r0, r7
 800447e:	f001 f979 	bl	8005774 <__mcmp>
 8004482:	2800      	cmp	r0, #0
 8004484:	db25      	blt.n	80044d2 <quorem+0xec>
 8004486:	4629      	mov	r1, r5
 8004488:	2000      	movs	r0, #0
 800448a:	f858 2b04 	ldr.w	r2, [r8], #4
 800448e:	f8d1 c000 	ldr.w	ip, [r1]
 8004492:	fa1f fe82 	uxth.w	lr, r2
 8004496:	fa1f f38c 	uxth.w	r3, ip
 800449a:	eba3 030e 	sub.w	r3, r3, lr
 800449e:	4403      	add	r3, r0
 80044a0:	0c12      	lsrs	r2, r2, #16
 80044a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044b0:	45c1      	cmp	r9, r8
 80044b2:	f841 3b04 	str.w	r3, [r1], #4
 80044b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80044ba:	d2e6      	bcs.n	800448a <quorem+0xa4>
 80044bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044c4:	b922      	cbnz	r2, 80044d0 <quorem+0xea>
 80044c6:	3b04      	subs	r3, #4
 80044c8:	429d      	cmp	r5, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	d30b      	bcc.n	80044e6 <quorem+0x100>
 80044ce:	613c      	str	r4, [r7, #16]
 80044d0:	3601      	adds	r6, #1
 80044d2:	4630      	mov	r0, r6
 80044d4:	b003      	add	sp, #12
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	3b04      	subs	r3, #4
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d1cb      	bne.n	800447a <quorem+0x94>
 80044e2:	3c01      	subs	r4, #1
 80044e4:	e7c6      	b.n	8004474 <quorem+0x8e>
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d1ef      	bne.n	80044ce <quorem+0xe8>
 80044ee:	3c01      	subs	r4, #1
 80044f0:	e7ea      	b.n	80044c8 <quorem+0xe2>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7ee      	b.n	80044d4 <quorem+0xee>
	...

080044f8 <_dtoa_r>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	69c7      	ldr	r7, [r0, #28]
 80044fe:	b099      	sub	sp, #100	@ 0x64
 8004500:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004504:	ec55 4b10 	vmov	r4, r5, d0
 8004508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800450a:	9109      	str	r1, [sp, #36]	@ 0x24
 800450c:	4683      	mov	fp, r0
 800450e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004512:	b97f      	cbnz	r7, 8004534 <_dtoa_r+0x3c>
 8004514:	2010      	movs	r0, #16
 8004516:	f000 fdfd 	bl	8005114 <malloc>
 800451a:	4602      	mov	r2, r0
 800451c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004520:	b920      	cbnz	r0, 800452c <_dtoa_r+0x34>
 8004522:	4ba7      	ldr	r3, [pc, #668]	@ (80047c0 <_dtoa_r+0x2c8>)
 8004524:	21ef      	movs	r1, #239	@ 0xef
 8004526:	48a7      	ldr	r0, [pc, #668]	@ (80047c4 <_dtoa_r+0x2cc>)
 8004528:	f001 fe20 	bl	800616c <__assert_func>
 800452c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004530:	6007      	str	r7, [r0, #0]
 8004532:	60c7      	str	r7, [r0, #12]
 8004534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	b159      	cbz	r1, 8004554 <_dtoa_r+0x5c>
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	604a      	str	r2, [r1, #4]
 8004540:	2301      	movs	r3, #1
 8004542:	4093      	lsls	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
 8004546:	4658      	mov	r0, fp
 8004548:	f000 feda 	bl	8005300 <_Bfree>
 800454c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	1e2b      	subs	r3, r5, #0
 8004556:	bfb9      	ittee	lt
 8004558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800455c:	9303      	strlt	r3, [sp, #12]
 800455e:	2300      	movge	r3, #0
 8004560:	6033      	strge	r3, [r6, #0]
 8004562:	9f03      	ldr	r7, [sp, #12]
 8004564:	4b98      	ldr	r3, [pc, #608]	@ (80047c8 <_dtoa_r+0x2d0>)
 8004566:	bfbc      	itt	lt
 8004568:	2201      	movlt	r2, #1
 800456a:	6032      	strlt	r2, [r6, #0]
 800456c:	43bb      	bics	r3, r7
 800456e:	d112      	bne.n	8004596 <_dtoa_r+0x9e>
 8004570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004572:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800457c:	4323      	orrs	r3, r4
 800457e:	f000 854d 	beq.w	800501c <_dtoa_r+0xb24>
 8004582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80047dc <_dtoa_r+0x2e4>
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 854f 	beq.w	800502c <_dtoa_r+0xb34>
 800458e:	f10a 0303 	add.w	r3, sl, #3
 8004592:	f000 bd49 	b.w	8005028 <_dtoa_r+0xb30>
 8004596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	ec51 0b17 	vmov	r0, r1, d7
 80045a0:	2300      	movs	r3, #0
 80045a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80045a6:	f7fc fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80045aa:	4680      	mov	r8, r0
 80045ac:	b158      	cbz	r0, 80045c6 <_dtoa_r+0xce>
 80045ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80045b0:	2301      	movs	r3, #1
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045b6:	b113      	cbz	r3, 80045be <_dtoa_r+0xc6>
 80045b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80045ba:	4b84      	ldr	r3, [pc, #528]	@ (80047cc <_dtoa_r+0x2d4>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80047e0 <_dtoa_r+0x2e8>
 80045c2:	f000 bd33 	b.w	800502c <_dtoa_r+0xb34>
 80045c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80045ca:	aa16      	add	r2, sp, #88	@ 0x58
 80045cc:	a917      	add	r1, sp, #92	@ 0x5c
 80045ce:	4658      	mov	r0, fp
 80045d0:	f001 f980 	bl	80058d4 <__d2b>
 80045d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80045d8:	4681      	mov	r9, r0
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d077      	beq.n	80046ce <_dtoa_r+0x1d6>
 80045de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80045e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045f8:	4619      	mov	r1, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	4b74      	ldr	r3, [pc, #464]	@ (80047d0 <_dtoa_r+0x2d8>)
 80045fe:	f7fb fe43 	bl	8000288 <__aeabi_dsub>
 8004602:	a369      	add	r3, pc, #420	@ (adr r3, 80047a8 <_dtoa_r+0x2b0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb fff6 	bl	80005f8 <__aeabi_dmul>
 800460c:	a368      	add	r3, pc, #416	@ (adr r3, 80047b0 <_dtoa_r+0x2b8>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fe3b 	bl	800028c <__adddf3>
 8004616:	4604      	mov	r4, r0
 8004618:	4630      	mov	r0, r6
 800461a:	460d      	mov	r5, r1
 800461c:	f7fb ff82 	bl	8000524 <__aeabi_i2d>
 8004620:	a365      	add	r3, pc, #404	@ (adr r3, 80047b8 <_dtoa_r+0x2c0>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb ffe7 	bl	80005f8 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	f7fb fe2b 	bl	800028c <__adddf3>
 8004636:	4604      	mov	r4, r0
 8004638:	460d      	mov	r5, r1
 800463a:	f7fc fa8d 	bl	8000b58 <__aeabi_d2iz>
 800463e:	2200      	movs	r2, #0
 8004640:	4607      	mov	r7, r0
 8004642:	2300      	movs	r3, #0
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fc fa48 	bl	8000adc <__aeabi_dcmplt>
 800464c:	b140      	cbz	r0, 8004660 <_dtoa_r+0x168>
 800464e:	4638      	mov	r0, r7
 8004650:	f7fb ff68 	bl	8000524 <__aeabi_i2d>
 8004654:	4622      	mov	r2, r4
 8004656:	462b      	mov	r3, r5
 8004658:	f7fc fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800465c:	b900      	cbnz	r0, 8004660 <_dtoa_r+0x168>
 800465e:	3f01      	subs	r7, #1
 8004660:	2f16      	cmp	r7, #22
 8004662:	d851      	bhi.n	8004708 <_dtoa_r+0x210>
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <_dtoa_r+0x2dc>)
 8004666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004672:	f7fc fa33 	bl	8000adc <__aeabi_dcmplt>
 8004676:	2800      	cmp	r0, #0
 8004678:	d048      	beq.n	800470c <_dtoa_r+0x214>
 800467a:	3f01      	subs	r7, #1
 800467c:	2300      	movs	r3, #0
 800467e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004682:	1b9b      	subs	r3, r3, r6
 8004684:	1e5a      	subs	r2, r3, #1
 8004686:	bf44      	itt	mi
 8004688:	f1c3 0801 	rsbmi	r8, r3, #1
 800468c:	2300      	movmi	r3, #0
 800468e:	9208      	str	r2, [sp, #32]
 8004690:	bf54      	ite	pl
 8004692:	f04f 0800 	movpl.w	r8, #0
 8004696:	9308      	strmi	r3, [sp, #32]
 8004698:	2f00      	cmp	r7, #0
 800469a:	db39      	blt.n	8004710 <_dtoa_r+0x218>
 800469c:	9b08      	ldr	r3, [sp, #32]
 800469e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80046a0:	443b      	add	r3, r7
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	2300      	movs	r3, #0
 80046a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d864      	bhi.n	8004778 <_dtoa_r+0x280>
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	bfc4      	itt	gt
 80046b2:	3b04      	subgt	r3, #4
 80046b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80046b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b8:	f1a3 0302 	sub.w	r3, r3, #2
 80046bc:	bfcc      	ite	gt
 80046be:	2400      	movgt	r4, #0
 80046c0:	2401      	movle	r4, #1
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d863      	bhi.n	800478e <_dtoa_r+0x296>
 80046c6:	e8df f003 	tbb	[pc, r3]
 80046ca:	372a      	.short	0x372a
 80046cc:	5535      	.short	0x5535
 80046ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80046d2:	441e      	add	r6, r3
 80046d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046d8:	2b20      	cmp	r3, #32
 80046da:	bfc1      	itttt	gt
 80046dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046e0:	409f      	lslgt	r7, r3
 80046e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046ea:	bfd6      	itet	le
 80046ec:	f1c3 0320 	rsble	r3, r3, #32
 80046f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80046f4:	fa04 f003 	lslle.w	r0, r4, r3
 80046f8:	f7fb ff04 	bl	8000504 <__aeabi_ui2d>
 80046fc:	2201      	movs	r2, #1
 80046fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004702:	3e01      	subs	r6, #1
 8004704:	9214      	str	r2, [sp, #80]	@ 0x50
 8004706:	e777      	b.n	80045f8 <_dtoa_r+0x100>
 8004708:	2301      	movs	r3, #1
 800470a:	e7b8      	b.n	800467e <_dtoa_r+0x186>
 800470c:	9012      	str	r0, [sp, #72]	@ 0x48
 800470e:	e7b7      	b.n	8004680 <_dtoa_r+0x188>
 8004710:	427b      	negs	r3, r7
 8004712:	930a      	str	r3, [sp, #40]	@ 0x28
 8004714:	2300      	movs	r3, #0
 8004716:	eba8 0807 	sub.w	r8, r8, r7
 800471a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800471c:	e7c4      	b.n	80046a8 <_dtoa_r+0x1b0>
 800471e:	2300      	movs	r3, #0
 8004720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc35      	bgt.n	8004794 <_dtoa_r+0x29c>
 8004728:	2301      	movs	r3, #1
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	461a      	mov	r2, r3
 8004730:	920e      	str	r2, [sp, #56]	@ 0x38
 8004732:	e00b      	b.n	800474c <_dtoa_r+0x254>
 8004734:	2301      	movs	r3, #1
 8004736:	e7f3      	b.n	8004720 <_dtoa_r+0x228>
 8004738:	2300      	movs	r3, #0
 800473a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800473c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	bfb8      	it	lt
 800474a:	2301      	movlt	r3, #1
 800474c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004750:	2100      	movs	r1, #0
 8004752:	2204      	movs	r2, #4
 8004754:	f102 0514 	add.w	r5, r2, #20
 8004758:	429d      	cmp	r5, r3
 800475a:	d91f      	bls.n	800479c <_dtoa_r+0x2a4>
 800475c:	6041      	str	r1, [r0, #4]
 800475e:	4658      	mov	r0, fp
 8004760:	f000 fd8e 	bl	8005280 <_Balloc>
 8004764:	4682      	mov	sl, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d13c      	bne.n	80047e4 <_dtoa_r+0x2ec>
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <_dtoa_r+0x2e0>)
 800476c:	4602      	mov	r2, r0
 800476e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004772:	e6d8      	b.n	8004526 <_dtoa_r+0x2e>
 8004774:	2301      	movs	r3, #1
 8004776:	e7e0      	b.n	800473a <_dtoa_r+0x242>
 8004778:	2401      	movs	r4, #1
 800477a:	2300      	movs	r3, #0
 800477c:	9309      	str	r3, [sp, #36]	@ 0x24
 800477e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	2200      	movs	r2, #0
 800478a:	2312      	movs	r3, #18
 800478c:	e7d0      	b.n	8004730 <_dtoa_r+0x238>
 800478e:	2301      	movs	r3, #1
 8004790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004792:	e7f5      	b.n	8004780 <_dtoa_r+0x288>
 8004794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	9307      	str	r3, [sp, #28]
 800479a:	e7d7      	b.n	800474c <_dtoa_r+0x254>
 800479c:	3101      	adds	r1, #1
 800479e:	0052      	lsls	r2, r2, #1
 80047a0:	e7d8      	b.n	8004754 <_dtoa_r+0x25c>
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	636f4361 	.word	0x636f4361
 80047ac:	3fd287a7 	.word	0x3fd287a7
 80047b0:	8b60c8b3 	.word	0x8b60c8b3
 80047b4:	3fc68a28 	.word	0x3fc68a28
 80047b8:	509f79fb 	.word	0x509f79fb
 80047bc:	3fd34413 	.word	0x3fd34413
 80047c0:	08006aad 	.word	0x08006aad
 80047c4:	08006ac4 	.word	0x08006ac4
 80047c8:	7ff00000 	.word	0x7ff00000
 80047cc:	08006a7d 	.word	0x08006a7d
 80047d0:	3ff80000 	.word	0x3ff80000
 80047d4:	08006bc0 	.word	0x08006bc0
 80047d8:	08006b1c 	.word	0x08006b1c
 80047dc:	08006aa9 	.word	0x08006aa9
 80047e0:	08006a7c 	.word	0x08006a7c
 80047e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047e8:	6018      	str	r0, [r3, #0]
 80047ea:	9b07      	ldr	r3, [sp, #28]
 80047ec:	2b0e      	cmp	r3, #14
 80047ee:	f200 80a4 	bhi.w	800493a <_dtoa_r+0x442>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	f000 80a1 	beq.w	800493a <_dtoa_r+0x442>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	dd33      	ble.n	8004864 <_dtoa_r+0x36c>
 80047fc:	4bad      	ldr	r3, [pc, #692]	@ (8004ab4 <_dtoa_r+0x5bc>)
 80047fe:	f007 020f 	and.w	r2, r7, #15
 8004802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004806:	ed93 7b00 	vldr	d7, [r3]
 800480a:	05f8      	lsls	r0, r7, #23
 800480c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004810:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004814:	d516      	bpl.n	8004844 <_dtoa_r+0x34c>
 8004816:	4ba8      	ldr	r3, [pc, #672]	@ (8004ab8 <_dtoa_r+0x5c0>)
 8004818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800481c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004820:	f7fc f814 	bl	800084c <__aeabi_ddiv>
 8004824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004828:	f004 040f 	and.w	r4, r4, #15
 800482c:	2603      	movs	r6, #3
 800482e:	4da2      	ldr	r5, [pc, #648]	@ (8004ab8 <_dtoa_r+0x5c0>)
 8004830:	b954      	cbnz	r4, 8004848 <_dtoa_r+0x350>
 8004832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483a:	f7fc f807 	bl	800084c <__aeabi_ddiv>
 800483e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004842:	e028      	b.n	8004896 <_dtoa_r+0x39e>
 8004844:	2602      	movs	r6, #2
 8004846:	e7f2      	b.n	800482e <_dtoa_r+0x336>
 8004848:	07e1      	lsls	r1, r4, #31
 800484a:	d508      	bpl.n	800485e <_dtoa_r+0x366>
 800484c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004854:	f7fb fed0 	bl	80005f8 <__aeabi_dmul>
 8004858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800485c:	3601      	adds	r6, #1
 800485e:	1064      	asrs	r4, r4, #1
 8004860:	3508      	adds	r5, #8
 8004862:	e7e5      	b.n	8004830 <_dtoa_r+0x338>
 8004864:	f000 80d2 	beq.w	8004a0c <_dtoa_r+0x514>
 8004868:	427c      	negs	r4, r7
 800486a:	4b92      	ldr	r3, [pc, #584]	@ (8004ab4 <_dtoa_r+0x5bc>)
 800486c:	4d92      	ldr	r5, [pc, #584]	@ (8004ab8 <_dtoa_r+0x5c0>)
 800486e:	f004 020f 	and.w	r2, r4, #15
 8004872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800487e:	f7fb febb 	bl	80005f8 <__aeabi_dmul>
 8004882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004886:	1124      	asrs	r4, r4, #4
 8004888:	2300      	movs	r3, #0
 800488a:	2602      	movs	r6, #2
 800488c:	2c00      	cmp	r4, #0
 800488e:	f040 80b2 	bne.w	80049f6 <_dtoa_r+0x4fe>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d3      	bne.n	800483e <_dtoa_r+0x346>
 8004896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80b7 	beq.w	8004a10 <_dtoa_r+0x518>
 80048a2:	4b86      	ldr	r3, [pc, #536]	@ (8004abc <_dtoa_r+0x5c4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fc f917 	bl	8000adc <__aeabi_dcmplt>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f000 80ae 	beq.w	8004a10 <_dtoa_r+0x518>
 80048b4:	9b07      	ldr	r3, [sp, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80aa 	beq.w	8004a10 <_dtoa_r+0x518>
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dd37      	ble.n	8004932 <_dtoa_r+0x43a>
 80048c2:	1e7b      	subs	r3, r7, #1
 80048c4:	9304      	str	r3, [sp, #16]
 80048c6:	4620      	mov	r0, r4
 80048c8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac0 <_dtoa_r+0x5c8>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fe93 	bl	80005f8 <__aeabi_dmul>
 80048d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048d6:	9c00      	ldr	r4, [sp, #0]
 80048d8:	3601      	adds	r6, #1
 80048da:	4630      	mov	r0, r6
 80048dc:	f7fb fe22 	bl	8000524 <__aeabi_i2d>
 80048e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048e4:	f7fb fe88 	bl	80005f8 <__aeabi_dmul>
 80048e8:	4b76      	ldr	r3, [pc, #472]	@ (8004ac4 <_dtoa_r+0x5cc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	f7fb fcce 	bl	800028c <__adddf3>
 80048f0:	4605      	mov	r5, r0
 80048f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	f040 808d 	bne.w	8004a16 <_dtoa_r+0x51e>
 80048fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004900:	4b71      	ldr	r3, [pc, #452]	@ (8004ac8 <_dtoa_r+0x5d0>)
 8004902:	2200      	movs	r2, #0
 8004904:	f7fb fcc0 	bl	8000288 <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004910:	462a      	mov	r2, r5
 8004912:	4633      	mov	r3, r6
 8004914:	f7fc f900 	bl	8000b18 <__aeabi_dcmpgt>
 8004918:	2800      	cmp	r0, #0
 800491a:	f040 828b 	bne.w	8004e34 <_dtoa_r+0x93c>
 800491e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004922:	462a      	mov	r2, r5
 8004924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004928:	f7fc f8d8 	bl	8000adc <__aeabi_dcmplt>
 800492c:	2800      	cmp	r0, #0
 800492e:	f040 8128 	bne.w	8004b82 <_dtoa_r+0x68a>
 8004932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800493a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800493c:	2b00      	cmp	r3, #0
 800493e:	f2c0 815a 	blt.w	8004bf6 <_dtoa_r+0x6fe>
 8004942:	2f0e      	cmp	r7, #14
 8004944:	f300 8157 	bgt.w	8004bf6 <_dtoa_r+0x6fe>
 8004948:	4b5a      	ldr	r3, [pc, #360]	@ (8004ab4 <_dtoa_r+0x5bc>)
 800494a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800494e:	ed93 7b00 	vldr	d7, [r3]
 8004952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	ed8d 7b00 	vstr	d7, [sp]
 800495a:	da03      	bge.n	8004964 <_dtoa_r+0x46c>
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f340 8101 	ble.w	8004b66 <_dtoa_r+0x66e>
 8004964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004968:	4656      	mov	r6, sl
 800496a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fb ff6b 	bl	800084c <__aeabi_ddiv>
 8004976:	f7fc f8ef 	bl	8000b58 <__aeabi_d2iz>
 800497a:	4680      	mov	r8, r0
 800497c:	f7fb fdd2 	bl	8000524 <__aeabi_i2d>
 8004980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004984:	f7fb fe38 	bl	80005f8 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004994:	f7fb fc78 	bl	8000288 <__aeabi_dsub>
 8004998:	f806 4b01 	strb.w	r4, [r6], #1
 800499c:	9d07      	ldr	r5, [sp, #28]
 800499e:	eba6 040a 	sub.w	r4, r6, sl
 80049a2:	42a5      	cmp	r5, r4
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	f040 8117 	bne.w	8004bda <_dtoa_r+0x6e2>
 80049ac:	f7fb fc6e 	bl	800028c <__adddf3>
 80049b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049b4:	4604      	mov	r4, r0
 80049b6:	460d      	mov	r5, r1
 80049b8:	f7fc f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 80049bc:	2800      	cmp	r0, #0
 80049be:	f040 80f9 	bne.w	8004bb4 <_dtoa_r+0x6bc>
 80049c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ce:	b118      	cbz	r0, 80049d8 <_dtoa_r+0x4e0>
 80049d0:	f018 0f01 	tst.w	r8, #1
 80049d4:	f040 80ee 	bne.w	8004bb4 <_dtoa_r+0x6bc>
 80049d8:	4649      	mov	r1, r9
 80049da:	4658      	mov	r0, fp
 80049dc:	f000 fc90 	bl	8005300 <_Bfree>
 80049e0:	2300      	movs	r3, #0
 80049e2:	7033      	strb	r3, [r6, #0]
 80049e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80049e6:	3701      	adds	r7, #1
 80049e8:	601f      	str	r7, [r3, #0]
 80049ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 831d 	beq.w	800502c <_dtoa_r+0xb34>
 80049f2:	601e      	str	r6, [r3, #0]
 80049f4:	e31a      	b.n	800502c <_dtoa_r+0xb34>
 80049f6:	07e2      	lsls	r2, r4, #31
 80049f8:	d505      	bpl.n	8004a06 <_dtoa_r+0x50e>
 80049fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049fe:	f7fb fdfb 	bl	80005f8 <__aeabi_dmul>
 8004a02:	3601      	adds	r6, #1
 8004a04:	2301      	movs	r3, #1
 8004a06:	1064      	asrs	r4, r4, #1
 8004a08:	3508      	adds	r5, #8
 8004a0a:	e73f      	b.n	800488c <_dtoa_r+0x394>
 8004a0c:	2602      	movs	r6, #2
 8004a0e:	e742      	b.n	8004896 <_dtoa_r+0x39e>
 8004a10:	9c07      	ldr	r4, [sp, #28]
 8004a12:	9704      	str	r7, [sp, #16]
 8004a14:	e761      	b.n	80048da <_dtoa_r+0x3e2>
 8004a16:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <_dtoa_r+0x5bc>)
 8004a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a22:	4454      	add	r4, sl
 8004a24:	2900      	cmp	r1, #0
 8004a26:	d053      	beq.n	8004ad0 <_dtoa_r+0x5d8>
 8004a28:	4928      	ldr	r1, [pc, #160]	@ (8004acc <_dtoa_r+0x5d4>)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fb ff0e 	bl	800084c <__aeabi_ddiv>
 8004a30:	4633      	mov	r3, r6
 8004a32:	462a      	mov	r2, r5
 8004a34:	f7fb fc28 	bl	8000288 <__aeabi_dsub>
 8004a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a3c:	4656      	mov	r6, sl
 8004a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a42:	f7fc f889 	bl	8000b58 <__aeabi_d2iz>
 8004a46:	4605      	mov	r5, r0
 8004a48:	f7fb fd6c 	bl	8000524 <__aeabi_i2d>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a54:	f7fb fc18 	bl	8000288 <__aeabi_dsub>
 8004a58:	3530      	adds	r5, #48	@ 0x30
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a62:	f806 5b01 	strb.w	r5, [r6], #1
 8004a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a6a:	f7fc f837 	bl	8000adc <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d171      	bne.n	8004b56 <_dtoa_r+0x65e>
 8004a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a76:	4911      	ldr	r1, [pc, #68]	@ (8004abc <_dtoa_r+0x5c4>)
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fb fc05 	bl	8000288 <__aeabi_dsub>
 8004a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a82:	f7fc f82b 	bl	8000adc <__aeabi_dcmplt>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f040 8095 	bne.w	8004bb6 <_dtoa_r+0x6be>
 8004a8c:	42a6      	cmp	r6, r4
 8004a8e:	f43f af50 	beq.w	8004932 <_dtoa_r+0x43a>
 8004a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <_dtoa_r+0x5c8>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fdad 	bl	80005f8 <__aeabi_dmul>
 8004a9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <_dtoa_r+0x5c8>)
 8004aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aaa:	f7fb fda5 	bl	80005f8 <__aeabi_dmul>
 8004aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ab2:	e7c4      	b.n	8004a3e <_dtoa_r+0x546>
 8004ab4:	08006bc0 	.word	0x08006bc0
 8004ab8:	08006b98 	.word	0x08006b98
 8004abc:	3ff00000 	.word	0x3ff00000
 8004ac0:	40240000 	.word	0x40240000
 8004ac4:	401c0000 	.word	0x401c0000
 8004ac8:	40140000 	.word	0x40140000
 8004acc:	3fe00000 	.word	0x3fe00000
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f7fb fd90 	bl	80005f8 <__aeabi_dmul>
 8004ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004adc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004ade:	4656      	mov	r6, sl
 8004ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae4:	f7fc f838 	bl	8000b58 <__aeabi_d2iz>
 8004ae8:	4605      	mov	r5, r0
 8004aea:	f7fb fd1b 	bl	8000524 <__aeabi_i2d>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af6:	f7fb fbc7 	bl	8000288 <__aeabi_dsub>
 8004afa:	3530      	adds	r5, #48	@ 0x30
 8004afc:	f806 5b01 	strb.w	r5, [r6], #1
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	d124      	bne.n	8004b5a <_dtoa_r+0x662>
 8004b10:	4bac      	ldr	r3, [pc, #688]	@ (8004dc4 <_dtoa_r+0x8cc>)
 8004b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b16:	f7fb fbb9 	bl	800028c <__adddf3>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b22:	f7fb fff9 	bl	8000b18 <__aeabi_dcmpgt>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d145      	bne.n	8004bb6 <_dtoa_r+0x6be>
 8004b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b2e:	49a5      	ldr	r1, [pc, #660]	@ (8004dc4 <_dtoa_r+0x8cc>)
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7fb fba9 	bl	8000288 <__aeabi_dsub>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3e:	f7fb ffcd 	bl	8000adc <__aeabi_dcmplt>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f43f aef5 	beq.w	8004932 <_dtoa_r+0x43a>
 8004b48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004b4a:	1e73      	subs	r3, r6, #1
 8004b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004b4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b52:	2b30      	cmp	r3, #48	@ 0x30
 8004b54:	d0f8      	beq.n	8004b48 <_dtoa_r+0x650>
 8004b56:	9f04      	ldr	r7, [sp, #16]
 8004b58:	e73e      	b.n	80049d8 <_dtoa_r+0x4e0>
 8004b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc8 <_dtoa_r+0x8d0>)
 8004b5c:	f7fb fd4c 	bl	80005f8 <__aeabi_dmul>
 8004b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b64:	e7bc      	b.n	8004ae0 <_dtoa_r+0x5e8>
 8004b66:	d10c      	bne.n	8004b82 <_dtoa_r+0x68a>
 8004b68:	4b98      	ldr	r3, [pc, #608]	@ (8004dcc <_dtoa_r+0x8d4>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b70:	f7fb fd42 	bl	80005f8 <__aeabi_dmul>
 8004b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b78:	f7fb ffc4 	bl	8000b04 <__aeabi_dcmpge>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f000 8157 	beq.w	8004e30 <_dtoa_r+0x938>
 8004b82:	2400      	movs	r4, #0
 8004b84:	4625      	mov	r5, r4
 8004b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	9304      	str	r3, [sp, #16]
 8004b8c:	4656      	mov	r6, sl
 8004b8e:	2700      	movs	r7, #0
 8004b90:	4621      	mov	r1, r4
 8004b92:	4658      	mov	r0, fp
 8004b94:	f000 fbb4 	bl	8005300 <_Bfree>
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	d0dc      	beq.n	8004b56 <_dtoa_r+0x65e>
 8004b9c:	b12f      	cbz	r7, 8004baa <_dtoa_r+0x6b2>
 8004b9e:	42af      	cmp	r7, r5
 8004ba0:	d003      	beq.n	8004baa <_dtoa_r+0x6b2>
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	f000 fbab 	bl	8005300 <_Bfree>
 8004baa:	4629      	mov	r1, r5
 8004bac:	4658      	mov	r0, fp
 8004bae:	f000 fba7 	bl	8005300 <_Bfree>
 8004bb2:	e7d0      	b.n	8004b56 <_dtoa_r+0x65e>
 8004bb4:	9704      	str	r7, [sp, #16]
 8004bb6:	4633      	mov	r3, r6
 8004bb8:	461e      	mov	r6, r3
 8004bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bbe:	2a39      	cmp	r2, #57	@ 0x39
 8004bc0:	d107      	bne.n	8004bd2 <_dtoa_r+0x6da>
 8004bc2:	459a      	cmp	sl, r3
 8004bc4:	d1f8      	bne.n	8004bb8 <_dtoa_r+0x6c0>
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	3201      	adds	r2, #1
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	2230      	movs	r2, #48	@ 0x30
 8004bce:	f88a 2000 	strb.w	r2, [sl]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	3201      	adds	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e7bd      	b.n	8004b56 <_dtoa_r+0x65e>
 8004bda:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <_dtoa_r+0x8d0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f7fb fd0b 	bl	80005f8 <__aeabi_dmul>
 8004be2:	2200      	movs	r2, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4604      	mov	r4, r0
 8004be8:	460d      	mov	r5, r1
 8004bea:	f7fb ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f43f aebb 	beq.w	800496a <_dtoa_r+0x472>
 8004bf4:	e6f0      	b.n	80049d8 <_dtoa_r+0x4e0>
 8004bf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	f000 80db 	beq.w	8004db4 <_dtoa_r+0x8bc>
 8004bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c00:	2a01      	cmp	r2, #1
 8004c02:	f300 80bf 	bgt.w	8004d84 <_dtoa_r+0x88c>
 8004c06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	f000 80b7 	beq.w	8004d7c <_dtoa_r+0x884>
 8004c0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c14:	4646      	mov	r6, r8
 8004c16:	9a08      	ldr	r2, [sp, #32]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	441a      	add	r2, r3
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	4498      	add	r8, r3
 8004c20:	9208      	str	r2, [sp, #32]
 8004c22:	f000 fc21 	bl	8005468 <__i2b>
 8004c26:	4605      	mov	r5, r0
 8004c28:	b15e      	cbz	r6, 8004c42 <_dtoa_r+0x74a>
 8004c2a:	9b08      	ldr	r3, [sp, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dd08      	ble.n	8004c42 <_dtoa_r+0x74a>
 8004c30:	42b3      	cmp	r3, r6
 8004c32:	9a08      	ldr	r2, [sp, #32]
 8004c34:	bfa8      	it	ge
 8004c36:	4633      	movge	r3, r6
 8004c38:	eba8 0803 	sub.w	r8, r8, r3
 8004c3c:	1af6      	subs	r6, r6, r3
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	9308      	str	r3, [sp, #32]
 8004c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c44:	b1f3      	cbz	r3, 8004c84 <_dtoa_r+0x78c>
 8004c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80b7 	beq.w	8004dbc <_dtoa_r+0x8c4>
 8004c4e:	b18c      	cbz	r4, 8004c74 <_dtoa_r+0x77c>
 8004c50:	4629      	mov	r1, r5
 8004c52:	4622      	mov	r2, r4
 8004c54:	4658      	mov	r0, fp
 8004c56:	f000 fcc7 	bl	80055e8 <__pow5mult>
 8004c5a:	464a      	mov	r2, r9
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4658      	mov	r0, fp
 8004c62:	f000 fc17 	bl	8005494 <__multiply>
 8004c66:	4649      	mov	r1, r9
 8004c68:	9004      	str	r0, [sp, #16]
 8004c6a:	4658      	mov	r0, fp
 8004c6c:	f000 fb48 	bl	8005300 <_Bfree>
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	4699      	mov	r9, r3
 8004c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c76:	1b1a      	subs	r2, r3, r4
 8004c78:	d004      	beq.n	8004c84 <_dtoa_r+0x78c>
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	4658      	mov	r0, fp
 8004c7e:	f000 fcb3 	bl	80055e8 <__pow5mult>
 8004c82:	4681      	mov	r9, r0
 8004c84:	2101      	movs	r1, #1
 8004c86:	4658      	mov	r0, fp
 8004c88:	f000 fbee 	bl	8005468 <__i2b>
 8004c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c8e:	4604      	mov	r4, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 81cf 	beq.w	8005034 <_dtoa_r+0xb3c>
 8004c96:	461a      	mov	r2, r3
 8004c98:	4601      	mov	r1, r0
 8004c9a:	4658      	mov	r0, fp
 8004c9c:	f000 fca4 	bl	80055e8 <__pow5mult>
 8004ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f300 8095 	bgt.w	8004dd4 <_dtoa_r+0x8dc>
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 8087 	bne.w	8004dc0 <_dtoa_r+0x8c8>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8089 	bne.w	8004dd0 <_dtoa_r+0x8d8>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	051b      	lsls	r3, r3, #20
 8004cc8:	b12b      	cbz	r3, 8004cd6 <_dtoa_r+0x7de>
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	9308      	str	r3, [sp, #32]
 8004cd0:	f108 0801 	add.w	r8, r8, #1
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 81b0 	beq.w	8005040 <_dtoa_r+0xb48>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ce6:	6918      	ldr	r0, [r3, #16]
 8004ce8:	f000 fb72 	bl	80053d0 <__hi0bits>
 8004cec:	f1c0 0020 	rsb	r0, r0, #32
 8004cf0:	9b08      	ldr	r3, [sp, #32]
 8004cf2:	4418      	add	r0, r3
 8004cf4:	f010 001f 	ands.w	r0, r0, #31
 8004cf8:	d077      	beq.n	8004dea <_dtoa_r+0x8f2>
 8004cfa:	f1c0 0320 	rsb	r3, r0, #32
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	dd6b      	ble.n	8004dda <_dtoa_r+0x8e2>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	f1c0 001c 	rsb	r0, r0, #28
 8004d08:	4403      	add	r3, r0
 8004d0a:	4480      	add	r8, r0
 8004d0c:	4406      	add	r6, r0
 8004d0e:	9308      	str	r3, [sp, #32]
 8004d10:	f1b8 0f00 	cmp.w	r8, #0
 8004d14:	dd05      	ble.n	8004d22 <_dtoa_r+0x82a>
 8004d16:	4649      	mov	r1, r9
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f000 fcbe 	bl	800569c <__lshift>
 8004d20:	4681      	mov	r9, r0
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd05      	ble.n	8004d34 <_dtoa_r+0x83c>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	f000 fcb5 	bl	800569c <__lshift>
 8004d32:	4604      	mov	r4, r0
 8004d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d059      	beq.n	8004dee <_dtoa_r+0x8f6>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4648      	mov	r0, r9
 8004d3e:	f000 fd19 	bl	8005774 <__mcmp>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	da53      	bge.n	8004dee <_dtoa_r+0x8f6>
 8004d46:	1e7b      	subs	r3, r7, #1
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	220a      	movs	r2, #10
 8004d50:	4658      	mov	r0, fp
 8004d52:	f000 faf7 	bl	8005344 <__multadd>
 8004d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d58:	4681      	mov	r9, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8172 	beq.w	8005044 <_dtoa_r+0xb4c>
 8004d60:	2300      	movs	r3, #0
 8004d62:	4629      	mov	r1, r5
 8004d64:	220a      	movs	r2, #10
 8004d66:	4658      	mov	r0, fp
 8004d68:	f000 faec 	bl	8005344 <__multadd>
 8004d6c:	9b00      	ldr	r3, [sp, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	4605      	mov	r5, r0
 8004d72:	dc67      	bgt.n	8004e44 <_dtoa_r+0x94c>
 8004d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	dc41      	bgt.n	8004dfe <_dtoa_r+0x906>
 8004d7a:	e063      	b.n	8004e44 <_dtoa_r+0x94c>
 8004d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d82:	e746      	b.n	8004c12 <_dtoa_r+0x71a>
 8004d84:	9b07      	ldr	r3, [sp, #28]
 8004d86:	1e5c      	subs	r4, r3, #1
 8004d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	bfbf      	itttt	lt
 8004d8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004d92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d94:	1ae3      	sublt	r3, r4, r3
 8004d96:	bfb4      	ite	lt
 8004d98:	18d2      	addlt	r2, r2, r3
 8004d9a:	1b1c      	subge	r4, r3, r4
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	bfbc      	itt	lt
 8004da0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004da2:	2400      	movlt	r4, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfb5      	itete	lt
 8004da8:	eba8 0603 	sublt.w	r6, r8, r3
 8004dac:	9b07      	ldrge	r3, [sp, #28]
 8004dae:	2300      	movlt	r3, #0
 8004db0:	4646      	movge	r6, r8
 8004db2:	e730      	b.n	8004c16 <_dtoa_r+0x71e>
 8004db4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004db6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004db8:	4646      	mov	r6, r8
 8004dba:	e735      	b.n	8004c28 <_dtoa_r+0x730>
 8004dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dbe:	e75c      	b.n	8004c7a <_dtoa_r+0x782>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e788      	b.n	8004cd6 <_dtoa_r+0x7de>
 8004dc4:	3fe00000 	.word	0x3fe00000
 8004dc8:	40240000 	.word	0x40240000
 8004dcc:	40140000 	.word	0x40140000
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	e780      	b.n	8004cd6 <_dtoa_r+0x7de>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dd8:	e782      	b.n	8004ce0 <_dtoa_r+0x7e8>
 8004dda:	d099      	beq.n	8004d10 <_dtoa_r+0x818>
 8004ddc:	9a08      	ldr	r2, [sp, #32]
 8004dde:	331c      	adds	r3, #28
 8004de0:	441a      	add	r2, r3
 8004de2:	4498      	add	r8, r3
 8004de4:	441e      	add	r6, r3
 8004de6:	9208      	str	r2, [sp, #32]
 8004de8:	e792      	b.n	8004d10 <_dtoa_r+0x818>
 8004dea:	4603      	mov	r3, r0
 8004dec:	e7f6      	b.n	8004ddc <_dtoa_r+0x8e4>
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	9704      	str	r7, [sp, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc20      	bgt.n	8004e38 <_dtoa_r+0x940>
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	dd1e      	ble.n	8004e3c <_dtoa_r+0x944>
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f aec0 	bne.w	8004b86 <_dtoa_r+0x68e>
 8004e06:	4621      	mov	r1, r4
 8004e08:	2205      	movs	r2, #5
 8004e0a:	4658      	mov	r0, fp
 8004e0c:	f000 fa9a 	bl	8005344 <__multadd>
 8004e10:	4601      	mov	r1, r0
 8004e12:	4604      	mov	r4, r0
 8004e14:	4648      	mov	r0, r9
 8004e16:	f000 fcad 	bl	8005774 <__mcmp>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f77f aeb3 	ble.w	8004b86 <_dtoa_r+0x68e>
 8004e20:	4656      	mov	r6, sl
 8004e22:	2331      	movs	r3, #49	@ 0x31
 8004e24:	f806 3b01 	strb.w	r3, [r6], #1
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	e6ae      	b.n	8004b8e <_dtoa_r+0x696>
 8004e30:	9c07      	ldr	r4, [sp, #28]
 8004e32:	9704      	str	r7, [sp, #16]
 8004e34:	4625      	mov	r5, r4
 8004e36:	e7f3      	b.n	8004e20 <_dtoa_r+0x928>
 8004e38:	9b07      	ldr	r3, [sp, #28]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8104 	beq.w	800504c <_dtoa_r+0xb54>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	dd05      	ble.n	8004e54 <_dtoa_r+0x95c>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fc25 	bl	800569c <__lshift>
 8004e52:	4605      	mov	r5, r0
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05a      	beq.n	8004f10 <_dtoa_r+0xa18>
 8004e5a:	6869      	ldr	r1, [r5, #4]
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 fa0f 	bl	8005280 <_Balloc>
 8004e62:	4606      	mov	r6, r0
 8004e64:	b928      	cbnz	r0, 8004e72 <_dtoa_r+0x97a>
 8004e66:	4b84      	ldr	r3, [pc, #528]	@ (8005078 <_dtoa_r+0xb80>)
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e6e:	f7ff bb5a 	b.w	8004526 <_dtoa_r+0x2e>
 8004e72:	692a      	ldr	r2, [r5, #16]
 8004e74:	3202      	adds	r2, #2
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	f105 010c 	add.w	r1, r5, #12
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	f7ff faa4 	bl	80043ca <memcpy>
 8004e82:	2201      	movs	r2, #1
 8004e84:	4631      	mov	r1, r6
 8004e86:	4658      	mov	r0, fp
 8004e88:	f000 fc08 	bl	800569c <__lshift>
 8004e8c:	f10a 0301 	add.w	r3, sl, #1
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	9b00      	ldr	r3, [sp, #0]
 8004e94:	4453      	add	r3, sl
 8004e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	462f      	mov	r7, r5
 8004ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4648      	mov	r0, r9
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	f7ff fa9a 	bl	80043e6 <quorem>
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	9002      	str	r0, [sp, #8]
 8004eb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f000 fc5a 	bl	8005774 <__mcmp>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	9008      	str	r0, [sp, #32]
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4658      	mov	r0, fp
 8004ec8:	f000 fc70 	bl	80057ac <__mdiff>
 8004ecc:	68c2      	ldr	r2, [r0, #12]
 8004ece:	4606      	mov	r6, r0
 8004ed0:	bb02      	cbnz	r2, 8004f14 <_dtoa_r+0xa1c>
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	4648      	mov	r0, r9
 8004ed6:	f000 fc4d 	bl	8005774 <__mcmp>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4631      	mov	r1, r6
 8004ede:	4658      	mov	r0, fp
 8004ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ee2:	f000 fa0d 	bl	8005300 <_Bfree>
 8004ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004eea:	9e07      	ldr	r6, [sp, #28]
 8004eec:	ea43 0102 	orr.w	r1, r3, r2
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ef2:	4319      	orrs	r1, r3
 8004ef4:	d110      	bne.n	8004f18 <_dtoa_r+0xa20>
 8004ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004efa:	d029      	beq.n	8004f50 <_dtoa_r+0xa58>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd02      	ble.n	8004f08 <_dtoa_r+0xa10>
 8004f02:	9b02      	ldr	r3, [sp, #8]
 8004f04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	f883 8000 	strb.w	r8, [r3]
 8004f0e:	e63f      	b.n	8004b90 <_dtoa_r+0x698>
 8004f10:	4628      	mov	r0, r5
 8004f12:	e7bb      	b.n	8004e8c <_dtoa_r+0x994>
 8004f14:	2201      	movs	r2, #1
 8004f16:	e7e1      	b.n	8004edc <_dtoa_r+0x9e4>
 8004f18:	9b08      	ldr	r3, [sp, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	db04      	blt.n	8004f28 <_dtoa_r+0xa30>
 8004f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f20:	430b      	orrs	r3, r1
 8004f22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f24:	430b      	orrs	r3, r1
 8004f26:	d120      	bne.n	8004f6a <_dtoa_r+0xa72>
 8004f28:	2a00      	cmp	r2, #0
 8004f2a:	dded      	ble.n	8004f08 <_dtoa_r+0xa10>
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4658      	mov	r0, fp
 8004f32:	f000 fbb3 	bl	800569c <__lshift>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4681      	mov	r9, r0
 8004f3a:	f000 fc1b 	bl	8005774 <__mcmp>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	dc03      	bgt.n	8004f4a <_dtoa_r+0xa52>
 8004f42:	d1e1      	bne.n	8004f08 <_dtoa_r+0xa10>
 8004f44:	f018 0f01 	tst.w	r8, #1
 8004f48:	d0de      	beq.n	8004f08 <_dtoa_r+0xa10>
 8004f4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f4e:	d1d8      	bne.n	8004f02 <_dtoa_r+0xa0a>
 8004f50:	9a00      	ldr	r2, [sp, #0]
 8004f52:	2339      	movs	r3, #57	@ 0x39
 8004f54:	7013      	strb	r3, [r2, #0]
 8004f56:	4633      	mov	r3, r6
 8004f58:	461e      	mov	r6, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f60:	2a39      	cmp	r2, #57	@ 0x39
 8004f62:	d052      	beq.n	800500a <_dtoa_r+0xb12>
 8004f64:	3201      	adds	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e612      	b.n	8004b90 <_dtoa_r+0x698>
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	dd07      	ble.n	8004f7e <_dtoa_r+0xa86>
 8004f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f72:	d0ed      	beq.n	8004f50 <_dtoa_r+0xa58>
 8004f74:	9a00      	ldr	r2, [sp, #0]
 8004f76:	f108 0301 	add.w	r3, r8, #1
 8004f7a:	7013      	strb	r3, [r2, #0]
 8004f7c:	e608      	b.n	8004b90 <_dtoa_r+0x698>
 8004f7e:	9b07      	ldr	r3, [sp, #28]
 8004f80:	9a07      	ldr	r2, [sp, #28]
 8004f82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d028      	beq.n	8004fde <_dtoa_r+0xae6>
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	2300      	movs	r3, #0
 8004f90:	220a      	movs	r2, #10
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 f9d6 	bl	8005344 <__multadd>
 8004f98:	42af      	cmp	r7, r5
 8004f9a:	4681      	mov	r9, r0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f04f 020a 	mov.w	r2, #10
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	d107      	bne.n	8004fba <_dtoa_r+0xac2>
 8004faa:	f000 f9cb 	bl	8005344 <__multadd>
 8004fae:	4607      	mov	r7, r0
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	e774      	b.n	8004ea4 <_dtoa_r+0x9ac>
 8004fba:	f000 f9c3 	bl	8005344 <__multadd>
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	4658      	mov	r0, fp
 8004fc8:	f000 f9bc 	bl	8005344 <__multadd>
 8004fcc:	4605      	mov	r5, r0
 8004fce:	e7f0      	b.n	8004fb2 <_dtoa_r+0xaba>
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfcc      	ite	gt
 8004fd6:	461e      	movgt	r6, r3
 8004fd8:	2601      	movle	r6, #1
 8004fda:	4456      	add	r6, sl
 8004fdc:	2700      	movs	r7, #0
 8004fde:	4649      	mov	r1, r9
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fb5a 	bl	800569c <__lshift>
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4681      	mov	r9, r0
 8004fec:	f000 fbc2 	bl	8005774 <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	dcb0      	bgt.n	8004f56 <_dtoa_r+0xa5e>
 8004ff4:	d102      	bne.n	8004ffc <_dtoa_r+0xb04>
 8004ff6:	f018 0f01 	tst.w	r8, #1
 8004ffa:	d1ac      	bne.n	8004f56 <_dtoa_r+0xa5e>
 8004ffc:	4633      	mov	r3, r6
 8004ffe:	461e      	mov	r6, r3
 8005000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005004:	2a30      	cmp	r2, #48	@ 0x30
 8005006:	d0fa      	beq.n	8004ffe <_dtoa_r+0xb06>
 8005008:	e5c2      	b.n	8004b90 <_dtoa_r+0x698>
 800500a:	459a      	cmp	sl, r3
 800500c:	d1a4      	bne.n	8004f58 <_dtoa_r+0xa60>
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	2331      	movs	r3, #49	@ 0x31
 8005016:	f88a 3000 	strb.w	r3, [sl]
 800501a:	e5b9      	b.n	8004b90 <_dtoa_r+0x698>
 800501c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800501e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800507c <_dtoa_r+0xb84>
 8005022:	b11b      	cbz	r3, 800502c <_dtoa_r+0xb34>
 8005024:	f10a 0308 	add.w	r3, sl, #8
 8005028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4650      	mov	r0, sl
 800502e:	b019      	add	sp, #100	@ 0x64
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	f77f ae37 	ble.w	8004caa <_dtoa_r+0x7b2>
 800503c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800503e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005040:	2001      	movs	r0, #1
 8005042:	e655      	b.n	8004cf0 <_dtoa_r+0x7f8>
 8005044:	9b00      	ldr	r3, [sp, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f77f aed6 	ble.w	8004df8 <_dtoa_r+0x900>
 800504c:	4656      	mov	r6, sl
 800504e:	4621      	mov	r1, r4
 8005050:	4648      	mov	r0, r9
 8005052:	f7ff f9c8 	bl	80043e6 <quorem>
 8005056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800505a:	f806 8b01 	strb.w	r8, [r6], #1
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	eba6 020a 	sub.w	r2, r6, sl
 8005064:	4293      	cmp	r3, r2
 8005066:	ddb3      	ble.n	8004fd0 <_dtoa_r+0xad8>
 8005068:	4649      	mov	r1, r9
 800506a:	2300      	movs	r3, #0
 800506c:	220a      	movs	r2, #10
 800506e:	4658      	mov	r0, fp
 8005070:	f000 f968 	bl	8005344 <__multadd>
 8005074:	4681      	mov	r9, r0
 8005076:	e7ea      	b.n	800504e <_dtoa_r+0xb56>
 8005078:	08006b1c 	.word	0x08006b1c
 800507c:	08006aa0 	.word	0x08006aa0

08005080 <_free_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	2900      	cmp	r1, #0
 8005086:	d041      	beq.n	800510c <_free_r+0x8c>
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	18e4      	addlt	r4, r4, r3
 8005094:	f000 f8e8 	bl	8005268 <__malloc_lock>
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <_free_r+0x90>)
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	b933      	cbnz	r3, 80050ac <_free_r+0x2c>
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	6014      	str	r4, [r2, #0]
 80050a2:	4628      	mov	r0, r5
 80050a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a8:	f000 b8e4 	b.w	8005274 <__malloc_unlock>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d908      	bls.n	80050c2 <_free_r+0x42>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	e7ed      	b.n	800509e <_free_r+0x1e>
 80050c2:	461a      	mov	r2, r3
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b10b      	cbz	r3, 80050cc <_free_r+0x4c>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d9fa      	bls.n	80050c2 <_free_r+0x42>
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	1850      	adds	r0, r2, r1
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d10b      	bne.n	80050ec <_free_r+0x6c>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	4401      	add	r1, r0
 80050d8:	1850      	adds	r0, r2, r1
 80050da:	4283      	cmp	r3, r0
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	d1e0      	bne.n	80050a2 <_free_r+0x22>
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	6053      	str	r3, [r2, #4]
 80050e6:	4408      	add	r0, r1
 80050e8:	6010      	str	r0, [r2, #0]
 80050ea:	e7da      	b.n	80050a2 <_free_r+0x22>
 80050ec:	d902      	bls.n	80050f4 <_free_r+0x74>
 80050ee:	230c      	movs	r3, #12
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	e7d6      	b.n	80050a2 <_free_r+0x22>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf04      	itt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	bf04      	itt	eq
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	6054      	str	r4, [r2, #4]
 800510a:	e7ca      	b.n	80050a2 <_free_r+0x22>
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	200007ac 	.word	0x200007ac

08005114 <malloc>:
 8005114:	4b02      	ldr	r3, [pc, #8]	@ (8005120 <malloc+0xc>)
 8005116:	4601      	mov	r1, r0
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f000 b825 	b.w	8005168 <_malloc_r>
 800511e:	bf00      	nop
 8005120:	20000028 	.word	0x20000028

08005124 <sbrk_aligned>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0f      	ldr	r6, [pc, #60]	@ (8005164 <sbrk_aligned+0x40>)
 8005128:	460c      	mov	r4, r1
 800512a:	6831      	ldr	r1, [r6, #0]
 800512c:	4605      	mov	r5, r0
 800512e:	b911      	cbnz	r1, 8005136 <sbrk_aligned+0x12>
 8005130:	f001 f80c 	bl	800614c <_sbrk_r>
 8005134:	6030      	str	r0, [r6, #0]
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f001 f807 	bl	800614c <_sbrk_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d103      	bne.n	800514a <sbrk_aligned+0x26>
 8005142:	f04f 34ff 	mov.w	r4, #4294967295
 8005146:	4620      	mov	r0, r4
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	1cc4      	adds	r4, r0, #3
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	42a0      	cmp	r0, r4
 8005152:	d0f8      	beq.n	8005146 <sbrk_aligned+0x22>
 8005154:	1a21      	subs	r1, r4, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fff8 	bl	800614c <_sbrk_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d1f2      	bne.n	8005146 <sbrk_aligned+0x22>
 8005160:	e7ef      	b.n	8005142 <sbrk_aligned+0x1e>
 8005162:	bf00      	nop
 8005164:	200007a8 	.word	0x200007a8

08005168 <_malloc_r>:
 8005168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800516c:	1ccd      	adds	r5, r1, #3
 800516e:	f025 0503 	bic.w	r5, r5, #3
 8005172:	3508      	adds	r5, #8
 8005174:	2d0c      	cmp	r5, #12
 8005176:	bf38      	it	cc
 8005178:	250c      	movcc	r5, #12
 800517a:	2d00      	cmp	r5, #0
 800517c:	4606      	mov	r6, r0
 800517e:	db01      	blt.n	8005184 <_malloc_r+0x1c>
 8005180:	42a9      	cmp	r1, r5
 8005182:	d904      	bls.n	800518e <_malloc_r+0x26>
 8005184:	230c      	movs	r3, #12
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	2000      	movs	r0, #0
 800518a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005264 <_malloc_r+0xfc>
 8005192:	f000 f869 	bl	8005268 <__malloc_lock>
 8005196:	f8d8 3000 	ldr.w	r3, [r8]
 800519a:	461c      	mov	r4, r3
 800519c:	bb44      	cbnz	r4, 80051f0 <_malloc_r+0x88>
 800519e:	4629      	mov	r1, r5
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7ff ffbf 	bl	8005124 <sbrk_aligned>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	4604      	mov	r4, r0
 80051aa:	d158      	bne.n	800525e <_malloc_r+0xf6>
 80051ac:	f8d8 4000 	ldr.w	r4, [r8]
 80051b0:	4627      	mov	r7, r4
 80051b2:	2f00      	cmp	r7, #0
 80051b4:	d143      	bne.n	800523e <_malloc_r+0xd6>
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d04b      	beq.n	8005252 <_malloc_r+0xea>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	4639      	mov	r1, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	eb04 0903 	add.w	r9, r4, r3
 80051c4:	f000 ffc2 	bl	800614c <_sbrk_r>
 80051c8:	4581      	cmp	r9, r0
 80051ca:	d142      	bne.n	8005252 <_malloc_r+0xea>
 80051cc:	6821      	ldr	r1, [r4, #0]
 80051ce:	1a6d      	subs	r5, r5, r1
 80051d0:	4629      	mov	r1, r5
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ffa6 	bl	8005124 <sbrk_aligned>
 80051d8:	3001      	adds	r0, #1
 80051da:	d03a      	beq.n	8005252 <_malloc_r+0xea>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	442b      	add	r3, r5
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	f8d8 3000 	ldr.w	r3, [r8]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	bb62      	cbnz	r2, 8005244 <_malloc_r+0xdc>
 80051ea:	f8c8 7000 	str.w	r7, [r8]
 80051ee:	e00f      	b.n	8005210 <_malloc_r+0xa8>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	1b52      	subs	r2, r2, r5
 80051f4:	d420      	bmi.n	8005238 <_malloc_r+0xd0>
 80051f6:	2a0b      	cmp	r2, #11
 80051f8:	d917      	bls.n	800522a <_malloc_r+0xc2>
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	6025      	str	r5, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	6059      	strne	r1, [r3, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	bf08      	it	eq
 8005208:	f8c8 1000 	streq.w	r1, [r8]
 800520c:	5162      	str	r2, [r4, r5]
 800520e:	604b      	str	r3, [r1, #4]
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f82f 	bl	8005274 <__malloc_unlock>
 8005216:	f104 000b 	add.w	r0, r4, #11
 800521a:	1d23      	adds	r3, r4, #4
 800521c:	f020 0007 	bic.w	r0, r0, #7
 8005220:	1ac2      	subs	r2, r0, r3
 8005222:	bf1c      	itt	ne
 8005224:	1a1b      	subne	r3, r3, r0
 8005226:	50a3      	strne	r3, [r4, r2]
 8005228:	e7af      	b.n	800518a <_malloc_r+0x22>
 800522a:	6862      	ldr	r2, [r4, #4]
 800522c:	42a3      	cmp	r3, r4
 800522e:	bf0c      	ite	eq
 8005230:	f8c8 2000 	streq.w	r2, [r8]
 8005234:	605a      	strne	r2, [r3, #4]
 8005236:	e7eb      	b.n	8005210 <_malloc_r+0xa8>
 8005238:	4623      	mov	r3, r4
 800523a:	6864      	ldr	r4, [r4, #4]
 800523c:	e7ae      	b.n	800519c <_malloc_r+0x34>
 800523e:	463c      	mov	r4, r7
 8005240:	687f      	ldr	r7, [r7, #4]
 8005242:	e7b6      	b.n	80051b2 <_malloc_r+0x4a>
 8005244:	461a      	mov	r2, r3
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	d1fb      	bne.n	8005244 <_malloc_r+0xdc>
 800524c:	2300      	movs	r3, #0
 800524e:	6053      	str	r3, [r2, #4]
 8005250:	e7de      	b.n	8005210 <_malloc_r+0xa8>
 8005252:	230c      	movs	r3, #12
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	4630      	mov	r0, r6
 8005258:	f000 f80c 	bl	8005274 <__malloc_unlock>
 800525c:	e794      	b.n	8005188 <_malloc_r+0x20>
 800525e:	6005      	str	r5, [r0, #0]
 8005260:	e7d6      	b.n	8005210 <_malloc_r+0xa8>
 8005262:	bf00      	nop
 8005264:	200007ac 	.word	0x200007ac

08005268 <__malloc_lock>:
 8005268:	4801      	ldr	r0, [pc, #4]	@ (8005270 <__malloc_lock+0x8>)
 800526a:	f7ff b8ac 	b.w	80043c6 <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	200007a4 	.word	0x200007a4

08005274 <__malloc_unlock>:
 8005274:	4801      	ldr	r0, [pc, #4]	@ (800527c <__malloc_unlock+0x8>)
 8005276:	f7ff b8a7 	b.w	80043c8 <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	200007a4 	.word	0x200007a4

08005280 <_Balloc>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	69c6      	ldr	r6, [r0, #28]
 8005284:	4604      	mov	r4, r0
 8005286:	460d      	mov	r5, r1
 8005288:	b976      	cbnz	r6, 80052a8 <_Balloc+0x28>
 800528a:	2010      	movs	r0, #16
 800528c:	f7ff ff42 	bl	8005114 <malloc>
 8005290:	4602      	mov	r2, r0
 8005292:	61e0      	str	r0, [r4, #28]
 8005294:	b920      	cbnz	r0, 80052a0 <_Balloc+0x20>
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <_Balloc+0x78>)
 8005298:	4818      	ldr	r0, [pc, #96]	@ (80052fc <_Balloc+0x7c>)
 800529a:	216b      	movs	r1, #107	@ 0x6b
 800529c:	f000 ff66 	bl	800616c <__assert_func>
 80052a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052a4:	6006      	str	r6, [r0, #0]
 80052a6:	60c6      	str	r6, [r0, #12]
 80052a8:	69e6      	ldr	r6, [r4, #28]
 80052aa:	68f3      	ldr	r3, [r6, #12]
 80052ac:	b183      	cbz	r3, 80052d0 <_Balloc+0x50>
 80052ae:	69e3      	ldr	r3, [r4, #28]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052b6:	b9b8      	cbnz	r0, 80052e8 <_Balloc+0x68>
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f605 	lsl.w	r6, r1, r5
 80052be:	1d72      	adds	r2, r6, #5
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 ff70 	bl	80061a8 <_calloc_r>
 80052c8:	b160      	cbz	r0, 80052e4 <_Balloc+0x64>
 80052ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052ce:	e00e      	b.n	80052ee <_Balloc+0x6e>
 80052d0:	2221      	movs	r2, #33	@ 0x21
 80052d2:	2104      	movs	r1, #4
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 ff67 	bl	80061a8 <_calloc_r>
 80052da:	69e3      	ldr	r3, [r4, #28]
 80052dc:	60f0      	str	r0, [r6, #12]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e4      	bne.n	80052ae <_Balloc+0x2e>
 80052e4:	2000      	movs	r0, #0
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	6802      	ldr	r2, [r0, #0]
 80052ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052ee:	2300      	movs	r3, #0
 80052f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052f4:	e7f7      	b.n	80052e6 <_Balloc+0x66>
 80052f6:	bf00      	nop
 80052f8:	08006aad 	.word	0x08006aad
 80052fc:	08006b2d 	.word	0x08006b2d

08005300 <_Bfree>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	69c6      	ldr	r6, [r0, #28]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b976      	cbnz	r6, 8005328 <_Bfree+0x28>
 800530a:	2010      	movs	r0, #16
 800530c:	f7ff ff02 	bl	8005114 <malloc>
 8005310:	4602      	mov	r2, r0
 8005312:	61e8      	str	r0, [r5, #28]
 8005314:	b920      	cbnz	r0, 8005320 <_Bfree+0x20>
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <_Bfree+0x3c>)
 8005318:	4809      	ldr	r0, [pc, #36]	@ (8005340 <_Bfree+0x40>)
 800531a:	218f      	movs	r1, #143	@ 0x8f
 800531c:	f000 ff26 	bl	800616c <__assert_func>
 8005320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005324:	6006      	str	r6, [r0, #0]
 8005326:	60c6      	str	r6, [r0, #12]
 8005328:	b13c      	cbz	r4, 800533a <_Bfree+0x3a>
 800532a:	69eb      	ldr	r3, [r5, #28]
 800532c:	6862      	ldr	r2, [r4, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005334:	6021      	str	r1, [r4, #0]
 8005336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	08006aad 	.word	0x08006aad
 8005340:	08006b2d 	.word	0x08006b2d

08005344 <__multadd>:
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	690d      	ldr	r5, [r1, #16]
 800534a:	4607      	mov	r7, r0
 800534c:	460c      	mov	r4, r1
 800534e:	461e      	mov	r6, r3
 8005350:	f101 0c14 	add.w	ip, r1, #20
 8005354:	2000      	movs	r0, #0
 8005356:	f8dc 3000 	ldr.w	r3, [ip]
 800535a:	b299      	uxth	r1, r3
 800535c:	fb02 6101 	mla	r1, r2, r1, r6
 8005360:	0c1e      	lsrs	r6, r3, #16
 8005362:	0c0b      	lsrs	r3, r1, #16
 8005364:	fb02 3306 	mla	r3, r2, r6, r3
 8005368:	b289      	uxth	r1, r1
 800536a:	3001      	adds	r0, #1
 800536c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005370:	4285      	cmp	r5, r0
 8005372:	f84c 1b04 	str.w	r1, [ip], #4
 8005376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800537a:	dcec      	bgt.n	8005356 <__multadd+0x12>
 800537c:	b30e      	cbz	r6, 80053c2 <__multadd+0x7e>
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc19      	bgt.n	80053b8 <__multadd+0x74>
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	4638      	mov	r0, r7
 8005388:	3101      	adds	r1, #1
 800538a:	f7ff ff79 	bl	8005280 <_Balloc>
 800538e:	4680      	mov	r8, r0
 8005390:	b928      	cbnz	r0, 800539e <__multadd+0x5a>
 8005392:	4602      	mov	r2, r0
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <__multadd+0x84>)
 8005396:	480d      	ldr	r0, [pc, #52]	@ (80053cc <__multadd+0x88>)
 8005398:	21ba      	movs	r1, #186	@ 0xba
 800539a:	f000 fee7 	bl	800616c <__assert_func>
 800539e:	6922      	ldr	r2, [r4, #16]
 80053a0:	3202      	adds	r2, #2
 80053a2:	f104 010c 	add.w	r1, r4, #12
 80053a6:	0092      	lsls	r2, r2, #2
 80053a8:	300c      	adds	r0, #12
 80053aa:	f7ff f80e 	bl	80043ca <memcpy>
 80053ae:	4621      	mov	r1, r4
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ffa5 	bl	8005300 <_Bfree>
 80053b6:	4644      	mov	r4, r8
 80053b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053bc:	3501      	adds	r5, #1
 80053be:	615e      	str	r6, [r3, #20]
 80053c0:	6125      	str	r5, [r4, #16]
 80053c2:	4620      	mov	r0, r4
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	08006b1c 	.word	0x08006b1c
 80053cc:	08006b2d 	.word	0x08006b2d

080053d0 <__hi0bits>:
 80053d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80053d4:	4603      	mov	r3, r0
 80053d6:	bf36      	itet	cc
 80053d8:	0403      	lslcc	r3, r0, #16
 80053da:	2000      	movcs	r0, #0
 80053dc:	2010      	movcc	r0, #16
 80053de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e2:	bf3c      	itt	cc
 80053e4:	021b      	lslcc	r3, r3, #8
 80053e6:	3008      	addcc	r0, #8
 80053e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ec:	bf3c      	itt	cc
 80053ee:	011b      	lslcc	r3, r3, #4
 80053f0:	3004      	addcc	r0, #4
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	bf3c      	itt	cc
 80053f8:	009b      	lslcc	r3, r3, #2
 80053fa:	3002      	addcc	r0, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	db05      	blt.n	800540c <__hi0bits+0x3c>
 8005400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005404:	f100 0001 	add.w	r0, r0, #1
 8005408:	bf08      	it	eq
 800540a:	2020      	moveq	r0, #32
 800540c:	4770      	bx	lr

0800540e <__lo0bits>:
 800540e:	6803      	ldr	r3, [r0, #0]
 8005410:	4602      	mov	r2, r0
 8005412:	f013 0007 	ands.w	r0, r3, #7
 8005416:	d00b      	beq.n	8005430 <__lo0bits+0x22>
 8005418:	07d9      	lsls	r1, r3, #31
 800541a:	d421      	bmi.n	8005460 <__lo0bits+0x52>
 800541c:	0798      	lsls	r0, r3, #30
 800541e:	bf49      	itett	mi
 8005420:	085b      	lsrmi	r3, r3, #1
 8005422:	089b      	lsrpl	r3, r3, #2
 8005424:	2001      	movmi	r0, #1
 8005426:	6013      	strmi	r3, [r2, #0]
 8005428:	bf5c      	itt	pl
 800542a:	6013      	strpl	r3, [r2, #0]
 800542c:	2002      	movpl	r0, #2
 800542e:	4770      	bx	lr
 8005430:	b299      	uxth	r1, r3
 8005432:	b909      	cbnz	r1, 8005438 <__lo0bits+0x2a>
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	2010      	movs	r0, #16
 8005438:	b2d9      	uxtb	r1, r3
 800543a:	b909      	cbnz	r1, 8005440 <__lo0bits+0x32>
 800543c:	3008      	adds	r0, #8
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	0719      	lsls	r1, r3, #28
 8005442:	bf04      	itt	eq
 8005444:	091b      	lsreq	r3, r3, #4
 8005446:	3004      	addeq	r0, #4
 8005448:	0799      	lsls	r1, r3, #30
 800544a:	bf04      	itt	eq
 800544c:	089b      	lsreq	r3, r3, #2
 800544e:	3002      	addeq	r0, #2
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	d403      	bmi.n	800545c <__lo0bits+0x4e>
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f100 0001 	add.w	r0, r0, #1
 800545a:	d003      	beq.n	8005464 <__lo0bits+0x56>
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4770      	bx	lr
 8005460:	2000      	movs	r0, #0
 8005462:	4770      	bx	lr
 8005464:	2020      	movs	r0, #32
 8005466:	4770      	bx	lr

08005468 <__i2b>:
 8005468:	b510      	push	{r4, lr}
 800546a:	460c      	mov	r4, r1
 800546c:	2101      	movs	r1, #1
 800546e:	f7ff ff07 	bl	8005280 <_Balloc>
 8005472:	4602      	mov	r2, r0
 8005474:	b928      	cbnz	r0, 8005482 <__i2b+0x1a>
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <__i2b+0x24>)
 8005478:	4805      	ldr	r0, [pc, #20]	@ (8005490 <__i2b+0x28>)
 800547a:	f240 1145 	movw	r1, #325	@ 0x145
 800547e:	f000 fe75 	bl	800616c <__assert_func>
 8005482:	2301      	movs	r3, #1
 8005484:	6144      	str	r4, [r0, #20]
 8005486:	6103      	str	r3, [r0, #16]
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	08006b1c 	.word	0x08006b1c
 8005490:	08006b2d 	.word	0x08006b2d

08005494 <__multiply>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	4614      	mov	r4, r2
 800549a:	690a      	ldr	r2, [r1, #16]
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bfa8      	it	ge
 80054a2:	4623      	movge	r3, r4
 80054a4:	460f      	mov	r7, r1
 80054a6:	bfa4      	itt	ge
 80054a8:	460c      	movge	r4, r1
 80054aa:	461f      	movge	r7, r3
 80054ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80054b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	6861      	ldr	r1, [r4, #4]
 80054b8:	eb0a 0609 	add.w	r6, sl, r9
 80054bc:	42b3      	cmp	r3, r6
 80054be:	b085      	sub	sp, #20
 80054c0:	bfb8      	it	lt
 80054c2:	3101      	addlt	r1, #1
 80054c4:	f7ff fedc 	bl	8005280 <_Balloc>
 80054c8:	b930      	cbnz	r0, 80054d8 <__multiply+0x44>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b44      	ldr	r3, [pc, #272]	@ (80055e0 <__multiply+0x14c>)
 80054ce:	4845      	ldr	r0, [pc, #276]	@ (80055e4 <__multiply+0x150>)
 80054d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80054d4:	f000 fe4a 	bl	800616c <__assert_func>
 80054d8:	f100 0514 	add.w	r5, r0, #20
 80054dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054e0:	462b      	mov	r3, r5
 80054e2:	2200      	movs	r2, #0
 80054e4:	4543      	cmp	r3, r8
 80054e6:	d321      	bcc.n	800552c <__multiply+0x98>
 80054e8:	f107 0114 	add.w	r1, r7, #20
 80054ec:	f104 0214 	add.w	r2, r4, #20
 80054f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80054f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	1b13      	subs	r3, r2, r4
 80054fc:	3b15      	subs	r3, #21
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	3304      	adds	r3, #4
 8005504:	f104 0715 	add.w	r7, r4, #21
 8005508:	42ba      	cmp	r2, r7
 800550a:	bf38      	it	cc
 800550c:	2304      	movcc	r3, #4
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	428b      	cmp	r3, r1
 8005516:	d80c      	bhi.n	8005532 <__multiply+0x9e>
 8005518:	2e00      	cmp	r6, #0
 800551a:	dd03      	ble.n	8005524 <__multiply+0x90>
 800551c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05b      	beq.n	80055dc <__multiply+0x148>
 8005524:	6106      	str	r6, [r0, #16]
 8005526:	b005      	add	sp, #20
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	f843 2b04 	str.w	r2, [r3], #4
 8005530:	e7d8      	b.n	80054e4 <__multiply+0x50>
 8005532:	f8b1 a000 	ldrh.w	sl, [r1]
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	d024      	beq.n	8005586 <__multiply+0xf2>
 800553c:	f104 0e14 	add.w	lr, r4, #20
 8005540:	46a9      	mov	r9, r5
 8005542:	f04f 0c00 	mov.w	ip, #0
 8005546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800554a:	f8d9 3000 	ldr.w	r3, [r9]
 800554e:	fa1f fb87 	uxth.w	fp, r7
 8005552:	b29b      	uxth	r3, r3
 8005554:	fb0a 330b 	mla	r3, sl, fp, r3
 8005558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800555c:	f8d9 7000 	ldr.w	r7, [r9]
 8005560:	4463      	add	r3, ip
 8005562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005566:	fb0a c70b 	mla	r7, sl, fp, ip
 800556a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005574:	4572      	cmp	r2, lr
 8005576:	f849 3b04 	str.w	r3, [r9], #4
 800557a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800557e:	d8e2      	bhi.n	8005546 <__multiply+0xb2>
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	f845 c003 	str.w	ip, [r5, r3]
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800558c:	3104      	adds	r1, #4
 800558e:	f1b9 0f00 	cmp.w	r9, #0
 8005592:	d021      	beq.n	80055d8 <__multiply+0x144>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	f104 0c14 	add.w	ip, r4, #20
 800559a:	46ae      	mov	lr, r5
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f8bc b000 	ldrh.w	fp, [ip]
 80055a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80055a8:	fb09 770b 	mla	r7, r9, fp, r7
 80055ac:	4457      	add	r7, sl
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055b4:	f84e 3b04 	str.w	r3, [lr], #4
 80055b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055c0:	f8be 3000 	ldrh.w	r3, [lr]
 80055c4:	fb09 330a 	mla	r3, r9, sl, r3
 80055c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80055cc:	4562      	cmp	r2, ip
 80055ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055d2:	d8e5      	bhi.n	80055a0 <__multiply+0x10c>
 80055d4:	9f01      	ldr	r7, [sp, #4]
 80055d6:	51eb      	str	r3, [r5, r7]
 80055d8:	3504      	adds	r5, #4
 80055da:	e799      	b.n	8005510 <__multiply+0x7c>
 80055dc:	3e01      	subs	r6, #1
 80055de:	e79b      	b.n	8005518 <__multiply+0x84>
 80055e0:	08006b1c 	.word	0x08006b1c
 80055e4:	08006b2d 	.word	0x08006b2d

080055e8 <__pow5mult>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4615      	mov	r5, r2
 80055ee:	f012 0203 	ands.w	r2, r2, #3
 80055f2:	4607      	mov	r7, r0
 80055f4:	460e      	mov	r6, r1
 80055f6:	d007      	beq.n	8005608 <__pow5mult+0x20>
 80055f8:	4c25      	ldr	r4, [pc, #148]	@ (8005690 <__pow5mult+0xa8>)
 80055fa:	3a01      	subs	r2, #1
 80055fc:	2300      	movs	r3, #0
 80055fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005602:	f7ff fe9f 	bl	8005344 <__multadd>
 8005606:	4606      	mov	r6, r0
 8005608:	10ad      	asrs	r5, r5, #2
 800560a:	d03d      	beq.n	8005688 <__pow5mult+0xa0>
 800560c:	69fc      	ldr	r4, [r7, #28]
 800560e:	b97c      	cbnz	r4, 8005630 <__pow5mult+0x48>
 8005610:	2010      	movs	r0, #16
 8005612:	f7ff fd7f 	bl	8005114 <malloc>
 8005616:	4602      	mov	r2, r0
 8005618:	61f8      	str	r0, [r7, #28]
 800561a:	b928      	cbnz	r0, 8005628 <__pow5mult+0x40>
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <__pow5mult+0xac>)
 800561e:	481e      	ldr	r0, [pc, #120]	@ (8005698 <__pow5mult+0xb0>)
 8005620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005624:	f000 fda2 	bl	800616c <__assert_func>
 8005628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	60c4      	str	r4, [r0, #12]
 8005630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005638:	b94c      	cbnz	r4, 800564e <__pow5mult+0x66>
 800563a:	f240 2171 	movw	r1, #625	@ 0x271
 800563e:	4638      	mov	r0, r7
 8005640:	f7ff ff12 	bl	8005468 <__i2b>
 8005644:	2300      	movs	r3, #0
 8005646:	f8c8 0008 	str.w	r0, [r8, #8]
 800564a:	4604      	mov	r4, r0
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	07eb      	lsls	r3, r5, #31
 8005654:	d50a      	bpl.n	800566c <__pow5mult+0x84>
 8005656:	4631      	mov	r1, r6
 8005658:	4622      	mov	r2, r4
 800565a:	4638      	mov	r0, r7
 800565c:	f7ff ff1a 	bl	8005494 <__multiply>
 8005660:	4631      	mov	r1, r6
 8005662:	4680      	mov	r8, r0
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff fe4b 	bl	8005300 <_Bfree>
 800566a:	4646      	mov	r6, r8
 800566c:	106d      	asrs	r5, r5, #1
 800566e:	d00b      	beq.n	8005688 <__pow5mult+0xa0>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	b938      	cbnz	r0, 8005684 <__pow5mult+0x9c>
 8005674:	4622      	mov	r2, r4
 8005676:	4621      	mov	r1, r4
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ff0b 	bl	8005494 <__multiply>
 800567e:	6020      	str	r0, [r4, #0]
 8005680:	f8c0 9000 	str.w	r9, [r0]
 8005684:	4604      	mov	r4, r0
 8005686:	e7e4      	b.n	8005652 <__pow5mult+0x6a>
 8005688:	4630      	mov	r0, r6
 800568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568e:	bf00      	nop
 8005690:	08006b88 	.word	0x08006b88
 8005694:	08006aad 	.word	0x08006aad
 8005698:	08006b2d 	.word	0x08006b2d

0800569c <__lshift>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	6849      	ldr	r1, [r1, #4]
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	4607      	mov	r7, r0
 80056ae:	4691      	mov	r9, r2
 80056b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056b4:	f108 0601 	add.w	r6, r8, #1
 80056b8:	42b3      	cmp	r3, r6
 80056ba:	db0b      	blt.n	80056d4 <__lshift+0x38>
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fddf 	bl	8005280 <_Balloc>
 80056c2:	4605      	mov	r5, r0
 80056c4:	b948      	cbnz	r0, 80056da <__lshift+0x3e>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b28      	ldr	r3, [pc, #160]	@ (800576c <__lshift+0xd0>)
 80056ca:	4829      	ldr	r0, [pc, #164]	@ (8005770 <__lshift+0xd4>)
 80056cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80056d0:	f000 fd4c 	bl	800616c <__assert_func>
 80056d4:	3101      	adds	r1, #1
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	e7ee      	b.n	80056b8 <__lshift+0x1c>
 80056da:	2300      	movs	r3, #0
 80056dc:	f100 0114 	add.w	r1, r0, #20
 80056e0:	f100 0210 	add.w	r2, r0, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	4553      	cmp	r3, sl
 80056e8:	db33      	blt.n	8005752 <__lshift+0xb6>
 80056ea:	6920      	ldr	r0, [r4, #16]
 80056ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056f0:	f104 0314 	add.w	r3, r4, #20
 80056f4:	f019 091f 	ands.w	r9, r9, #31
 80056f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005700:	d02b      	beq.n	800575a <__lshift+0xbe>
 8005702:	f1c9 0e20 	rsb	lr, r9, #32
 8005706:	468a      	mov	sl, r1
 8005708:	2200      	movs	r2, #0
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	fa00 f009 	lsl.w	r0, r0, r9
 8005710:	4310      	orrs	r0, r2
 8005712:	f84a 0b04 	str.w	r0, [sl], #4
 8005716:	f853 2b04 	ldr.w	r2, [r3], #4
 800571a:	459c      	cmp	ip, r3
 800571c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005720:	d8f3      	bhi.n	800570a <__lshift+0x6e>
 8005722:	ebac 0304 	sub.w	r3, ip, r4
 8005726:	3b15      	subs	r3, #21
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	3304      	adds	r3, #4
 800572e:	f104 0015 	add.w	r0, r4, #21
 8005732:	4584      	cmp	ip, r0
 8005734:	bf38      	it	cc
 8005736:	2304      	movcc	r3, #4
 8005738:	50ca      	str	r2, [r1, r3]
 800573a:	b10a      	cbz	r2, 8005740 <__lshift+0xa4>
 800573c:	f108 0602 	add.w	r6, r8, #2
 8005740:	3e01      	subs	r6, #1
 8005742:	4638      	mov	r0, r7
 8005744:	612e      	str	r6, [r5, #16]
 8005746:	4621      	mov	r1, r4
 8005748:	f7ff fdda 	bl	8005300 <_Bfree>
 800574c:	4628      	mov	r0, r5
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	f842 0f04 	str.w	r0, [r2, #4]!
 8005756:	3301      	adds	r3, #1
 8005758:	e7c5      	b.n	80056e6 <__lshift+0x4a>
 800575a:	3904      	subs	r1, #4
 800575c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005760:	f841 2f04 	str.w	r2, [r1, #4]!
 8005764:	459c      	cmp	ip, r3
 8005766:	d8f9      	bhi.n	800575c <__lshift+0xc0>
 8005768:	e7ea      	b.n	8005740 <__lshift+0xa4>
 800576a:	bf00      	nop
 800576c:	08006b1c 	.word	0x08006b1c
 8005770:	08006b2d 	.word	0x08006b2d

08005774 <__mcmp>:
 8005774:	690a      	ldr	r2, [r1, #16]
 8005776:	4603      	mov	r3, r0
 8005778:	6900      	ldr	r0, [r0, #16]
 800577a:	1a80      	subs	r0, r0, r2
 800577c:	b530      	push	{r4, r5, lr}
 800577e:	d10e      	bne.n	800579e <__mcmp+0x2a>
 8005780:	3314      	adds	r3, #20
 8005782:	3114      	adds	r1, #20
 8005784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800578c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005794:	4295      	cmp	r5, r2
 8005796:	d003      	beq.n	80057a0 <__mcmp+0x2c>
 8005798:	d205      	bcs.n	80057a6 <__mcmp+0x32>
 800579a:	f04f 30ff 	mov.w	r0, #4294967295
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	d3f3      	bcc.n	800578c <__mcmp+0x18>
 80057a4:	e7fb      	b.n	800579e <__mcmp+0x2a>
 80057a6:	2001      	movs	r0, #1
 80057a8:	e7f9      	b.n	800579e <__mcmp+0x2a>
	...

080057ac <__mdiff>:
 80057ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	4689      	mov	r9, r1
 80057b2:	4606      	mov	r6, r0
 80057b4:	4611      	mov	r1, r2
 80057b6:	4648      	mov	r0, r9
 80057b8:	4614      	mov	r4, r2
 80057ba:	f7ff ffdb 	bl	8005774 <__mcmp>
 80057be:	1e05      	subs	r5, r0, #0
 80057c0:	d112      	bne.n	80057e8 <__mdiff+0x3c>
 80057c2:	4629      	mov	r1, r5
 80057c4:	4630      	mov	r0, r6
 80057c6:	f7ff fd5b 	bl	8005280 <_Balloc>
 80057ca:	4602      	mov	r2, r0
 80057cc:	b928      	cbnz	r0, 80057da <__mdiff+0x2e>
 80057ce:	4b3f      	ldr	r3, [pc, #252]	@ (80058cc <__mdiff+0x120>)
 80057d0:	f240 2137 	movw	r1, #567	@ 0x237
 80057d4:	483e      	ldr	r0, [pc, #248]	@ (80058d0 <__mdiff+0x124>)
 80057d6:	f000 fcc9 	bl	800616c <__assert_func>
 80057da:	2301      	movs	r3, #1
 80057dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057e0:	4610      	mov	r0, r2
 80057e2:	b003      	add	sp, #12
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	bfbc      	itt	lt
 80057ea:	464b      	movlt	r3, r9
 80057ec:	46a1      	movlt	r9, r4
 80057ee:	4630      	mov	r0, r6
 80057f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057f4:	bfba      	itte	lt
 80057f6:	461c      	movlt	r4, r3
 80057f8:	2501      	movlt	r5, #1
 80057fa:	2500      	movge	r5, #0
 80057fc:	f7ff fd40 	bl	8005280 <_Balloc>
 8005800:	4602      	mov	r2, r0
 8005802:	b918      	cbnz	r0, 800580c <__mdiff+0x60>
 8005804:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <__mdiff+0x120>)
 8005806:	f240 2145 	movw	r1, #581	@ 0x245
 800580a:	e7e3      	b.n	80057d4 <__mdiff+0x28>
 800580c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005810:	6926      	ldr	r6, [r4, #16]
 8005812:	60c5      	str	r5, [r0, #12]
 8005814:	f109 0310 	add.w	r3, r9, #16
 8005818:	f109 0514 	add.w	r5, r9, #20
 800581c:	f104 0e14 	add.w	lr, r4, #20
 8005820:	f100 0b14 	add.w	fp, r0, #20
 8005824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	46d9      	mov	r9, fp
 8005830:	f04f 0c00 	mov.w	ip, #0
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800583a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	fa1f f38a 	uxth.w	r3, sl
 8005844:	4619      	mov	r1, r3
 8005846:	b283      	uxth	r3, r0
 8005848:	1acb      	subs	r3, r1, r3
 800584a:	0c00      	lsrs	r0, r0, #16
 800584c:	4463      	add	r3, ip
 800584e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800585c:	4576      	cmp	r6, lr
 800585e:	f849 3b04 	str.w	r3, [r9], #4
 8005862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005866:	d8e5      	bhi.n	8005834 <__mdiff+0x88>
 8005868:	1b33      	subs	r3, r6, r4
 800586a:	3b15      	subs	r3, #21
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	3415      	adds	r4, #21
 8005872:	3304      	adds	r3, #4
 8005874:	42a6      	cmp	r6, r4
 8005876:	bf38      	it	cc
 8005878:	2304      	movcc	r3, #4
 800587a:	441d      	add	r5, r3
 800587c:	445b      	add	r3, fp
 800587e:	461e      	mov	r6, r3
 8005880:	462c      	mov	r4, r5
 8005882:	4544      	cmp	r4, r8
 8005884:	d30e      	bcc.n	80058a4 <__mdiff+0xf8>
 8005886:	f108 0103 	add.w	r1, r8, #3
 800588a:	1b49      	subs	r1, r1, r5
 800588c:	f021 0103 	bic.w	r1, r1, #3
 8005890:	3d03      	subs	r5, #3
 8005892:	45a8      	cmp	r8, r5
 8005894:	bf38      	it	cc
 8005896:	2100      	movcc	r1, #0
 8005898:	440b      	add	r3, r1
 800589a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800589e:	b191      	cbz	r1, 80058c6 <__mdiff+0x11a>
 80058a0:	6117      	str	r7, [r2, #16]
 80058a2:	e79d      	b.n	80057e0 <__mdiff+0x34>
 80058a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80058a8:	46e6      	mov	lr, ip
 80058aa:	0c08      	lsrs	r0, r1, #16
 80058ac:	fa1c fc81 	uxtah	ip, ip, r1
 80058b0:	4471      	add	r1, lr
 80058b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058b6:	b289      	uxth	r1, r1
 80058b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058bc:	f846 1b04 	str.w	r1, [r6], #4
 80058c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058c4:	e7dd      	b.n	8005882 <__mdiff+0xd6>
 80058c6:	3f01      	subs	r7, #1
 80058c8:	e7e7      	b.n	800589a <__mdiff+0xee>
 80058ca:	bf00      	nop
 80058cc:	08006b1c 	.word	0x08006b1c
 80058d0:	08006b2d 	.word	0x08006b2d

080058d4 <__d2b>:
 80058d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	460f      	mov	r7, r1
 80058da:	2101      	movs	r1, #1
 80058dc:	ec59 8b10 	vmov	r8, r9, d0
 80058e0:	4616      	mov	r6, r2
 80058e2:	f7ff fccd 	bl	8005280 <_Balloc>
 80058e6:	4604      	mov	r4, r0
 80058e8:	b930      	cbnz	r0, 80058f8 <__d2b+0x24>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b23      	ldr	r3, [pc, #140]	@ (800597c <__d2b+0xa8>)
 80058ee:	4824      	ldr	r0, [pc, #144]	@ (8005980 <__d2b+0xac>)
 80058f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80058f4:	f000 fc3a 	bl	800616c <__assert_func>
 80058f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005900:	b10d      	cbz	r5, 8005906 <__d2b+0x32>
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f1b8 0300 	subs.w	r3, r8, #0
 800590c:	d023      	beq.n	8005956 <__d2b+0x82>
 800590e:	4668      	mov	r0, sp
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	f7ff fd7c 	bl	800540e <__lo0bits>
 8005916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800591a:	b1d0      	cbz	r0, 8005952 <__d2b+0x7e>
 800591c:	f1c0 0320 	rsb	r3, r0, #32
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	430b      	orrs	r3, r1
 8005926:	40c2      	lsrs	r2, r0
 8005928:	6163      	str	r3, [r4, #20]
 800592a:	9201      	str	r2, [sp, #4]
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	61a3      	str	r3, [r4, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2201      	moveq	r2, #1
 8005936:	2202      	movne	r2, #2
 8005938:	6122      	str	r2, [r4, #16]
 800593a:	b1a5      	cbz	r5, 8005966 <__d2b+0x92>
 800593c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005940:	4405      	add	r5, r0
 8005942:	603d      	str	r5, [r7, #0]
 8005944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005948:	6030      	str	r0, [r6, #0]
 800594a:	4620      	mov	r0, r4
 800594c:	b003      	add	sp, #12
 800594e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005952:	6161      	str	r1, [r4, #20]
 8005954:	e7ea      	b.n	800592c <__d2b+0x58>
 8005956:	a801      	add	r0, sp, #4
 8005958:	f7ff fd59 	bl	800540e <__lo0bits>
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	6163      	str	r3, [r4, #20]
 8005960:	3020      	adds	r0, #32
 8005962:	2201      	movs	r2, #1
 8005964:	e7e8      	b.n	8005938 <__d2b+0x64>
 8005966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800596a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800596e:	6038      	str	r0, [r7, #0]
 8005970:	6918      	ldr	r0, [r3, #16]
 8005972:	f7ff fd2d 	bl	80053d0 <__hi0bits>
 8005976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800597a:	e7e5      	b.n	8005948 <__d2b+0x74>
 800597c:	08006b1c 	.word	0x08006b1c
 8005980:	08006b2d 	.word	0x08006b2d

08005984 <__ssputs_r>:
 8005984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	688e      	ldr	r6, [r1, #8]
 800598a:	461f      	mov	r7, r3
 800598c:	42be      	cmp	r6, r7
 800598e:	680b      	ldr	r3, [r1, #0]
 8005990:	4682      	mov	sl, r0
 8005992:	460c      	mov	r4, r1
 8005994:	4690      	mov	r8, r2
 8005996:	d82d      	bhi.n	80059f4 <__ssputs_r+0x70>
 8005998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800599c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059a0:	d026      	beq.n	80059f0 <__ssputs_r+0x6c>
 80059a2:	6965      	ldr	r5, [r4, #20]
 80059a4:	6909      	ldr	r1, [r1, #16]
 80059a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059aa:	eba3 0901 	sub.w	r9, r3, r1
 80059ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b2:	1c7b      	adds	r3, r7, #1
 80059b4:	444b      	add	r3, r9
 80059b6:	106d      	asrs	r5, r5, #1
 80059b8:	429d      	cmp	r5, r3
 80059ba:	bf38      	it	cc
 80059bc:	461d      	movcc	r5, r3
 80059be:	0553      	lsls	r3, r2, #21
 80059c0:	d527      	bpl.n	8005a12 <__ssputs_r+0x8e>
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7ff fbd0 	bl	8005168 <_malloc_r>
 80059c8:	4606      	mov	r6, r0
 80059ca:	b360      	cbz	r0, 8005a26 <__ssputs_r+0xa2>
 80059cc:	6921      	ldr	r1, [r4, #16]
 80059ce:	464a      	mov	r2, r9
 80059d0:	f7fe fcfb 	bl	80043ca <memcpy>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80059da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	6126      	str	r6, [r4, #16]
 80059e2:	6165      	str	r5, [r4, #20]
 80059e4:	444e      	add	r6, r9
 80059e6:	eba5 0509 	sub.w	r5, r5, r9
 80059ea:	6026      	str	r6, [r4, #0]
 80059ec:	60a5      	str	r5, [r4, #8]
 80059ee:	463e      	mov	r6, r7
 80059f0:	42be      	cmp	r6, r7
 80059f2:	d900      	bls.n	80059f6 <__ssputs_r+0x72>
 80059f4:	463e      	mov	r6, r7
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	4632      	mov	r2, r6
 80059fa:	4641      	mov	r1, r8
 80059fc:	f000 fb6a 	bl	80060d4 <memmove>
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	1b9b      	subs	r3, r3, r6
 8005a04:	60a3      	str	r3, [r4, #8]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	4433      	add	r3, r6
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a12:	462a      	mov	r2, r5
 8005a14:	f000 fbee 	bl	80061f4 <_realloc_r>
 8005a18:	4606      	mov	r6, r0
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d1e0      	bne.n	80059e0 <__ssputs_r+0x5c>
 8005a1e:	6921      	ldr	r1, [r4, #16]
 8005a20:	4650      	mov	r0, sl
 8005a22:	f7ff fb2d 	bl	8005080 <_free_r>
 8005a26:	230c      	movs	r3, #12
 8005a28:	f8ca 3000 	str.w	r3, [sl]
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	e7e9      	b.n	8005a0e <__ssputs_r+0x8a>
	...

08005a3c <_svfiprintf_r>:
 8005a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a40:	4698      	mov	r8, r3
 8005a42:	898b      	ldrh	r3, [r1, #12]
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	b09d      	sub	sp, #116	@ 0x74
 8005a48:	4607      	mov	r7, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	4614      	mov	r4, r2
 8005a4e:	d510      	bpl.n	8005a72 <_svfiprintf_r+0x36>
 8005a50:	690b      	ldr	r3, [r1, #16]
 8005a52:	b973      	cbnz	r3, 8005a72 <_svfiprintf_r+0x36>
 8005a54:	2140      	movs	r1, #64	@ 0x40
 8005a56:	f7ff fb87 	bl	8005168 <_malloc_r>
 8005a5a:	6028      	str	r0, [r5, #0]
 8005a5c:	6128      	str	r0, [r5, #16]
 8005a5e:	b930      	cbnz	r0, 8005a6e <_svfiprintf_r+0x32>
 8005a60:	230c      	movs	r3, #12
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	b01d      	add	sp, #116	@ 0x74
 8005a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6e:	2340      	movs	r3, #64	@ 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a80:	2330      	movs	r3, #48	@ 0x30
 8005a82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c20 <_svfiprintf_r+0x1e4>
 8005a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a8a:	f04f 0901 	mov.w	r9, #1
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x60>
 8005a98:	2a25      	cmp	r2, #37	@ 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x54>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7e>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6b 	bl	8005984 <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80a7 	beq.w	8005c02 <_svfiprintf_r+0x1c6>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 809f 	beq.w	8005c02 <_svfiprintf_r+0x1c6>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	484e      	ldr	r0, [pc, #312]	@ (8005c20 <_svfiprintf_r+0x1e4>)
 8005ae6:	f7fa fb73 	bl	80001d0 <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xea>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	@ 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xfa>
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	@ 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94b      	bls.n	8005bb8 <_svfiprintf_r+0x17c>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x114>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x114>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	46a2      	mov	sl, r4
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0xa0>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b54:	d10a      	bne.n	8005b6c <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b5a:	d132      	bne.n	8005bc2 <_svfiprintf_r+0x186>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b68:	3402      	adds	r4, #2
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c30 <_svfiprintf_r+0x1f4>
 8005b70:	7821      	ldrb	r1, [r4, #0]
 8005b72:	2203      	movs	r2, #3
 8005b74:	4650      	mov	r0, sl
 8005b76:	f7fa fb2b 	bl	80001d0 <memchr>
 8005b7a:	b138      	cbz	r0, 8005b8c <_svfiprintf_r+0x150>
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	eba0 000a 	sub.w	r0, r0, sl
 8005b82:	2240      	movs	r2, #64	@ 0x40
 8005b84:	4082      	lsls	r2, r0
 8005b86:	4313      	orrs	r3, r2
 8005b88:	3401      	adds	r4, #1
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b90:	4824      	ldr	r0, [pc, #144]	@ (8005c24 <_svfiprintf_r+0x1e8>)
 8005b92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b96:	2206      	movs	r2, #6
 8005b98:	f7fa fb1a 	bl	80001d0 <memchr>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d036      	beq.n	8005c0e <_svfiprintf_r+0x1d2>
 8005ba0:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <_svfiprintf_r+0x1ec>)
 8005ba2:	bb1b      	cbnz	r3, 8005bec <_svfiprintf_r+0x1b0>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	3307      	adds	r3, #7
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	3308      	adds	r3, #8
 8005bae:	9303      	str	r3, [sp, #12]
 8005bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb2:	4433      	add	r3, r6
 8005bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb6:	e76a      	b.n	8005a8e <_svfiprintf_r+0x52>
 8005bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	e7a8      	b.n	8005b14 <_svfiprintf_r+0xd8>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	3401      	adds	r4, #1
 8005bc6:	9305      	str	r3, [sp, #20]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f04f 0c0a 	mov.w	ip, #10
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd4:	3a30      	subs	r2, #48	@ 0x30
 8005bd6:	2a09      	cmp	r2, #9
 8005bd8:	d903      	bls.n	8005be2 <_svfiprintf_r+0x1a6>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0c6      	beq.n	8005b6c <_svfiprintf_r+0x130>
 8005bde:	9105      	str	r1, [sp, #20]
 8005be0:	e7c4      	b.n	8005b6c <_svfiprintf_r+0x130>
 8005be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005be6:	4604      	mov	r4, r0
 8005be8:	2301      	movs	r3, #1
 8005bea:	e7f0      	b.n	8005bce <_svfiprintf_r+0x192>
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8005c2c <_svfiprintf_r+0x1f0>)
 8005bf4:	a904      	add	r1, sp, #16
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f7fd fd86 	bl	8003708 <_printf_float>
 8005bfc:	1c42      	adds	r2, r0, #1
 8005bfe:	4606      	mov	r6, r0
 8005c00:	d1d6      	bne.n	8005bb0 <_svfiprintf_r+0x174>
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	065b      	lsls	r3, r3, #25
 8005c06:	f53f af2d 	bmi.w	8005a64 <_svfiprintf_r+0x28>
 8005c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c0c:	e72c      	b.n	8005a68 <_svfiprintf_r+0x2c>
 8005c0e:	ab03      	add	r3, sp, #12
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	462a      	mov	r2, r5
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <_svfiprintf_r+0x1f0>)
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7fe f80d 	bl	8003c38 <_printf_i>
 8005c1e:	e7ed      	b.n	8005bfc <_svfiprintf_r+0x1c0>
 8005c20:	08006c88 	.word	0x08006c88
 8005c24:	08006c92 	.word	0x08006c92
 8005c28:	08003709 	.word	0x08003709
 8005c2c:	08005985 	.word	0x08005985
 8005c30:	08006c8e 	.word	0x08006c8e

08005c34 <__sfputc_r>:
 8005c34:	6893      	ldr	r3, [r2, #8]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	b410      	push	{r4}
 8005c3c:	6093      	str	r3, [r2, #8]
 8005c3e:	da08      	bge.n	8005c52 <__sfputc_r+0x1e>
 8005c40:	6994      	ldr	r4, [r2, #24]
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	db01      	blt.n	8005c4a <__sfputc_r+0x16>
 8005c46:	290a      	cmp	r1, #10
 8005c48:	d103      	bne.n	8005c52 <__sfputc_r+0x1e>
 8005c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c4e:	f7fe baa8 	b.w	80041a2 <__swbuf_r>
 8005c52:	6813      	ldr	r3, [r2, #0]
 8005c54:	1c58      	adds	r0, r3, #1
 8005c56:	6010      	str	r0, [r2, #0]
 8005c58:	7019      	strb	r1, [r3, #0]
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <__sfputs_r>:
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	4614      	mov	r4, r2
 8005c6a:	18d5      	adds	r5, r2, r3
 8005c6c:	42ac      	cmp	r4, r5
 8005c6e:	d101      	bne.n	8005c74 <__sfputs_r+0x12>
 8005c70:	2000      	movs	r0, #0
 8005c72:	e007      	b.n	8005c84 <__sfputs_r+0x22>
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	463a      	mov	r2, r7
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffda 	bl	8005c34 <__sfputc_r>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d1f3      	bne.n	8005c6c <__sfputs_r+0xa>
 8005c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c88 <_vfiprintf_r>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	b09d      	sub	sp, #116	@ 0x74
 8005c90:	4614      	mov	r4, r2
 8005c92:	4698      	mov	r8, r3
 8005c94:	4606      	mov	r6, r0
 8005c96:	b118      	cbz	r0, 8005ca0 <_vfiprintf_r+0x18>
 8005c98:	6a03      	ldr	r3, [r0, #32]
 8005c9a:	b90b      	cbnz	r3, 8005ca0 <_vfiprintf_r+0x18>
 8005c9c:	f7fe f978 	bl	8003f90 <__sinit>
 8005ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d405      	bmi.n	8005cb2 <_vfiprintf_r+0x2a>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_vfiprintf_r+0x2a>
 8005cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cae:	f7fe fb8a 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	071b      	lsls	r3, r3, #28
 8005cb6:	d501      	bpl.n	8005cbc <_vfiprintf_r+0x34>
 8005cb8:	692b      	ldr	r3, [r5, #16]
 8005cba:	b99b      	cbnz	r3, 8005ce4 <_vfiprintf_r+0x5c>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7fe faae 	bl	8004220 <__swsetup_r>
 8005cc4:	b170      	cbz	r0, 8005ce4 <_vfiprintf_r+0x5c>
 8005cc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cc8:	07dc      	lsls	r4, r3, #31
 8005cca:	d504      	bpl.n	8005cd6 <_vfiprintf_r+0x4e>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b01d      	add	sp, #116	@ 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	0598      	lsls	r0, r3, #22
 8005cda:	d4f7      	bmi.n	8005ccc <_vfiprintf_r+0x44>
 8005cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cde:	f7fe fb73 	bl	80043c8 <__retarget_lock_release_recursive>
 8005ce2:	e7f3      	b.n	8005ccc <_vfiprintf_r+0x44>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ce8:	2320      	movs	r3, #32
 8005cea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cf2:	2330      	movs	r3, #48	@ 0x30
 8005cf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ea4 <_vfiprintf_r+0x21c>
 8005cf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cfc:	f04f 0901 	mov.w	r9, #1
 8005d00:	4623      	mov	r3, r4
 8005d02:	469a      	mov	sl, r3
 8005d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d08:	b10a      	cbz	r2, 8005d0e <_vfiprintf_r+0x86>
 8005d0a:	2a25      	cmp	r2, #37	@ 0x25
 8005d0c:	d1f9      	bne.n	8005d02 <_vfiprintf_r+0x7a>
 8005d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d12:	d00b      	beq.n	8005d2c <_vfiprintf_r+0xa4>
 8005d14:	465b      	mov	r3, fp
 8005d16:	4622      	mov	r2, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff ffa1 	bl	8005c62 <__sfputs_r>
 8005d20:	3001      	adds	r0, #1
 8005d22:	f000 80a7 	beq.w	8005e74 <_vfiprintf_r+0x1ec>
 8005d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d28:	445a      	add	r2, fp
 8005d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 809f 	beq.w	8005e74 <_vfiprintf_r+0x1ec>
 8005d36:	2300      	movs	r3, #0
 8005d38:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d40:	f10a 0a01 	add.w	sl, sl, #1
 8005d44:	9304      	str	r3, [sp, #16]
 8005d46:	9307      	str	r3, [sp, #28]
 8005d48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d4e:	4654      	mov	r4, sl
 8005d50:	2205      	movs	r2, #5
 8005d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d56:	4853      	ldr	r0, [pc, #332]	@ (8005ea4 <_vfiprintf_r+0x21c>)
 8005d58:	f7fa fa3a 	bl	80001d0 <memchr>
 8005d5c:	9a04      	ldr	r2, [sp, #16]
 8005d5e:	b9d8      	cbnz	r0, 8005d98 <_vfiprintf_r+0x110>
 8005d60:	06d1      	lsls	r1, r2, #27
 8005d62:	bf44      	itt	mi
 8005d64:	2320      	movmi	r3, #32
 8005d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d6a:	0713      	lsls	r3, r2, #28
 8005d6c:	bf44      	itt	mi
 8005d6e:	232b      	movmi	r3, #43	@ 0x2b
 8005d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d74:	f89a 3000 	ldrb.w	r3, [sl]
 8005d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d7a:	d015      	beq.n	8005da8 <_vfiprintf_r+0x120>
 8005d7c:	9a07      	ldr	r2, [sp, #28]
 8005d7e:	4654      	mov	r4, sl
 8005d80:	2000      	movs	r0, #0
 8005d82:	f04f 0c0a 	mov.w	ip, #10
 8005d86:	4621      	mov	r1, r4
 8005d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d8c:	3b30      	subs	r3, #48	@ 0x30
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d94b      	bls.n	8005e2a <_vfiprintf_r+0x1a2>
 8005d92:	b1b0      	cbz	r0, 8005dc2 <_vfiprintf_r+0x13a>
 8005d94:	9207      	str	r2, [sp, #28]
 8005d96:	e014      	b.n	8005dc2 <_vfiprintf_r+0x13a>
 8005d98:	eba0 0308 	sub.w	r3, r0, r8
 8005d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	46a2      	mov	sl, r4
 8005da6:	e7d2      	b.n	8005d4e <_vfiprintf_r+0xc6>
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	1d19      	adds	r1, r3, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	9103      	str	r1, [sp, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bfbb      	ittet	lt
 8005db4:	425b      	neglt	r3, r3
 8005db6:	f042 0202 	orrlt.w	r2, r2, #2
 8005dba:	9307      	strge	r3, [sp, #28]
 8005dbc:	9307      	strlt	r3, [sp, #28]
 8005dbe:	bfb8      	it	lt
 8005dc0:	9204      	strlt	r2, [sp, #16]
 8005dc2:	7823      	ldrb	r3, [r4, #0]
 8005dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dc6:	d10a      	bne.n	8005dde <_vfiprintf_r+0x156>
 8005dc8:	7863      	ldrb	r3, [r4, #1]
 8005dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dcc:	d132      	bne.n	8005e34 <_vfiprintf_r+0x1ac>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	9203      	str	r2, [sp, #12]
 8005dd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dda:	3402      	adds	r4, #2
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005eb4 <_vfiprintf_r+0x22c>
 8005de2:	7821      	ldrb	r1, [r4, #0]
 8005de4:	2203      	movs	r2, #3
 8005de6:	4650      	mov	r0, sl
 8005de8:	f7fa f9f2 	bl	80001d0 <memchr>
 8005dec:	b138      	cbz	r0, 8005dfe <_vfiprintf_r+0x176>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	eba0 000a 	sub.w	r0, r0, sl
 8005df4:	2240      	movs	r2, #64	@ 0x40
 8005df6:	4082      	lsls	r2, r0
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	3401      	adds	r4, #1
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e02:	4829      	ldr	r0, [pc, #164]	@ (8005ea8 <_vfiprintf_r+0x220>)
 8005e04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e08:	2206      	movs	r2, #6
 8005e0a:	f7fa f9e1 	bl	80001d0 <memchr>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d03f      	beq.n	8005e92 <_vfiprintf_r+0x20a>
 8005e12:	4b26      	ldr	r3, [pc, #152]	@ (8005eac <_vfiprintf_r+0x224>)
 8005e14:	bb1b      	cbnz	r3, 8005e5e <_vfiprintf_r+0x1d6>
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	3307      	adds	r3, #7
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	3308      	adds	r3, #8
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e24:	443b      	add	r3, r7
 8005e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e28:	e76a      	b.n	8005d00 <_vfiprintf_r+0x78>
 8005e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e2e:	460c      	mov	r4, r1
 8005e30:	2001      	movs	r0, #1
 8005e32:	e7a8      	b.n	8005d86 <_vfiprintf_r+0xfe>
 8005e34:	2300      	movs	r3, #0
 8005e36:	3401      	adds	r4, #1
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f04f 0c0a 	mov.w	ip, #10
 8005e40:	4620      	mov	r0, r4
 8005e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e46:	3a30      	subs	r2, #48	@ 0x30
 8005e48:	2a09      	cmp	r2, #9
 8005e4a:	d903      	bls.n	8005e54 <_vfiprintf_r+0x1cc>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0c6      	beq.n	8005dde <_vfiprintf_r+0x156>
 8005e50:	9105      	str	r1, [sp, #20]
 8005e52:	e7c4      	b.n	8005dde <_vfiprintf_r+0x156>
 8005e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e58:	4604      	mov	r4, r0
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e7f0      	b.n	8005e40 <_vfiprintf_r+0x1b8>
 8005e5e:	ab03      	add	r3, sp, #12
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	462a      	mov	r2, r5
 8005e64:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <_vfiprintf_r+0x228>)
 8005e66:	a904      	add	r1, sp, #16
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7fd fc4d 	bl	8003708 <_printf_float>
 8005e6e:	4607      	mov	r7, r0
 8005e70:	1c78      	adds	r0, r7, #1
 8005e72:	d1d6      	bne.n	8005e22 <_vfiprintf_r+0x19a>
 8005e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d405      	bmi.n	8005e86 <_vfiprintf_r+0x1fe>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	059a      	lsls	r2, r3, #22
 8005e7e:	d402      	bmi.n	8005e86 <_vfiprintf_r+0x1fe>
 8005e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e82:	f7fe faa1 	bl	80043c8 <__retarget_lock_release_recursive>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	065b      	lsls	r3, r3, #25
 8005e8a:	f53f af1f 	bmi.w	8005ccc <_vfiprintf_r+0x44>
 8005e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e90:	e71e      	b.n	8005cd0 <_vfiprintf_r+0x48>
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <_vfiprintf_r+0x228>)
 8005e9a:	a904      	add	r1, sp, #16
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7fd fecb 	bl	8003c38 <_printf_i>
 8005ea2:	e7e4      	b.n	8005e6e <_vfiprintf_r+0x1e6>
 8005ea4:	08006c88 	.word	0x08006c88
 8005ea8:	08006c92 	.word	0x08006c92
 8005eac:	08003709 	.word	0x08003709
 8005eb0:	08005c63 	.word	0x08005c63
 8005eb4:	08006c8e 	.word	0x08006c8e

08005eb8 <__sflush_r>:
 8005eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	0716      	lsls	r6, r2, #28
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	d454      	bmi.n	8005f72 <__sflush_r+0xba>
 8005ec8:	684b      	ldr	r3, [r1, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dc02      	bgt.n	8005ed4 <__sflush_r+0x1c>
 8005ece:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd48      	ble.n	8005f66 <__sflush_r+0xae>
 8005ed4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	d045      	beq.n	8005f66 <__sflush_r+0xae>
 8005eda:	2300      	movs	r3, #0
 8005edc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ee0:	682f      	ldr	r7, [r5, #0]
 8005ee2:	6a21      	ldr	r1, [r4, #32]
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	d030      	beq.n	8005f4a <__sflush_r+0x92>
 8005ee8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	0759      	lsls	r1, r3, #29
 8005eee:	d505      	bpl.n	8005efc <__sflush_r+0x44>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ef6:	b10b      	cbz	r3, 8005efc <__sflush_r+0x44>
 8005ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005efa:	1ad2      	subs	r2, r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f00:	6a21      	ldr	r1, [r4, #32]
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b0      	blx	r6
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	d106      	bne.n	8005f1a <__sflush_r+0x62>
 8005f0c:	6829      	ldr	r1, [r5, #0]
 8005f0e:	291d      	cmp	r1, #29
 8005f10:	d82b      	bhi.n	8005f6a <__sflush_r+0xb2>
 8005f12:	4a2a      	ldr	r2, [pc, #168]	@ (8005fbc <__sflush_r+0x104>)
 8005f14:	410a      	asrs	r2, r1
 8005f16:	07d6      	lsls	r6, r2, #31
 8005f18:	d427      	bmi.n	8005f6a <__sflush_r+0xb2>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6062      	str	r2, [r4, #4]
 8005f1e:	04d9      	lsls	r1, r3, #19
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	d504      	bpl.n	8005f30 <__sflush_r+0x78>
 8005f26:	1c42      	adds	r2, r0, #1
 8005f28:	d101      	bne.n	8005f2e <__sflush_r+0x76>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	b903      	cbnz	r3, 8005f30 <__sflush_r+0x78>
 8005f2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f32:	602f      	str	r7, [r5, #0]
 8005f34:	b1b9      	cbz	r1, 8005f66 <__sflush_r+0xae>
 8005f36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	d002      	beq.n	8005f44 <__sflush_r+0x8c>
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7ff f89e 	bl	8005080 <_free_r>
 8005f44:	2300      	movs	r3, #0
 8005f46:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f48:	e00d      	b.n	8005f66 <__sflush_r+0xae>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b0      	blx	r6
 8005f50:	4602      	mov	r2, r0
 8005f52:	1c50      	adds	r0, r2, #1
 8005f54:	d1c9      	bne.n	8005eea <__sflush_r+0x32>
 8005f56:	682b      	ldr	r3, [r5, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0c6      	beq.n	8005eea <__sflush_r+0x32>
 8005f5c:	2b1d      	cmp	r3, #29
 8005f5e:	d001      	beq.n	8005f64 <__sflush_r+0xac>
 8005f60:	2b16      	cmp	r3, #22
 8005f62:	d11e      	bne.n	8005fa2 <__sflush_r+0xea>
 8005f64:	602f      	str	r7, [r5, #0]
 8005f66:	2000      	movs	r0, #0
 8005f68:	e022      	b.n	8005fb0 <__sflush_r+0xf8>
 8005f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f6e:	b21b      	sxth	r3, r3
 8005f70:	e01b      	b.n	8005faa <__sflush_r+0xf2>
 8005f72:	690f      	ldr	r7, [r1, #16]
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	d0f6      	beq.n	8005f66 <__sflush_r+0xae>
 8005f78:	0793      	lsls	r3, r2, #30
 8005f7a:	680e      	ldr	r6, [r1, #0]
 8005f7c:	bf08      	it	eq
 8005f7e:	694b      	ldreq	r3, [r1, #20]
 8005f80:	600f      	str	r7, [r1, #0]
 8005f82:	bf18      	it	ne
 8005f84:	2300      	movne	r3, #0
 8005f86:	eba6 0807 	sub.w	r8, r6, r7
 8005f8a:	608b      	str	r3, [r1, #8]
 8005f8c:	f1b8 0f00 	cmp.w	r8, #0
 8005f90:	dde9      	ble.n	8005f66 <__sflush_r+0xae>
 8005f92:	6a21      	ldr	r1, [r4, #32]
 8005f94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f96:	4643      	mov	r3, r8
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b0      	blx	r6
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	dc08      	bgt.n	8005fb4 <__sflush_r+0xfc>
 8005fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb4:	4407      	add	r7, r0
 8005fb6:	eba8 0800 	sub.w	r8, r8, r0
 8005fba:	e7e7      	b.n	8005f8c <__sflush_r+0xd4>
 8005fbc:	dfbffffe 	.word	0xdfbffffe

08005fc0 <_fflush_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b913      	cbnz	r3, 8005fd0 <_fflush_r+0x10>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	4628      	mov	r0, r5
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	b118      	cbz	r0, 8005fda <_fflush_r+0x1a>
 8005fd2:	6a03      	ldr	r3, [r0, #32]
 8005fd4:	b90b      	cbnz	r3, 8005fda <_fflush_r+0x1a>
 8005fd6:	f7fd ffdb 	bl	8003f90 <__sinit>
 8005fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f3      	beq.n	8005fca <_fflush_r+0xa>
 8005fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fe4:	07d0      	lsls	r0, r2, #31
 8005fe6:	d404      	bmi.n	8005ff2 <_fflush_r+0x32>
 8005fe8:	0599      	lsls	r1, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_fflush_r+0x32>
 8005fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fee:	f7fe f9ea 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	f7ff ff5f 	bl	8005eb8 <__sflush_r>
 8005ffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ffc:	07da      	lsls	r2, r3, #31
 8005ffe:	4605      	mov	r5, r0
 8006000:	d4e4      	bmi.n	8005fcc <_fflush_r+0xc>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	d4e1      	bmi.n	8005fcc <_fflush_r+0xc>
 8006008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800600a:	f7fe f9dd 	bl	80043c8 <__retarget_lock_release_recursive>
 800600e:	e7dd      	b.n	8005fcc <_fflush_r+0xc>

08006010 <__swhatbuf_r>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	460c      	mov	r4, r1
 8006014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006018:	2900      	cmp	r1, #0
 800601a:	b096      	sub	sp, #88	@ 0x58
 800601c:	4615      	mov	r5, r2
 800601e:	461e      	mov	r6, r3
 8006020:	da0d      	bge.n	800603e <__swhatbuf_r+0x2e>
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	bf14      	ite	ne
 800602e:	2340      	movne	r3, #64	@ 0x40
 8006030:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006034:	2000      	movs	r0, #0
 8006036:	6031      	str	r1, [r6, #0]
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	b016      	add	sp, #88	@ 0x58
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	466a      	mov	r2, sp
 8006040:	f000 f862 	bl	8006108 <_fstat_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	dbec      	blt.n	8006022 <__swhatbuf_r+0x12>
 8006048:	9901      	ldr	r1, [sp, #4]
 800604a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800604e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006052:	4259      	negs	r1, r3
 8006054:	4159      	adcs	r1, r3
 8006056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800605a:	e7eb      	b.n	8006034 <__swhatbuf_r+0x24>

0800605c <__smakebuf_r>:
 800605c:	898b      	ldrh	r3, [r1, #12]
 800605e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006060:	079d      	lsls	r5, r3, #30
 8006062:	4606      	mov	r6, r0
 8006064:	460c      	mov	r4, r1
 8006066:	d507      	bpl.n	8006078 <__smakebuf_r+0x1c>
 8006068:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	2301      	movs	r3, #1
 8006072:	6163      	str	r3, [r4, #20]
 8006074:	b003      	add	sp, #12
 8006076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006078:	ab01      	add	r3, sp, #4
 800607a:	466a      	mov	r2, sp
 800607c:	f7ff ffc8 	bl	8006010 <__swhatbuf_r>
 8006080:	9f00      	ldr	r7, [sp, #0]
 8006082:	4605      	mov	r5, r0
 8006084:	4639      	mov	r1, r7
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff f86e 	bl	8005168 <_malloc_r>
 800608c:	b948      	cbnz	r0, 80060a2 <__smakebuf_r+0x46>
 800608e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006092:	059a      	lsls	r2, r3, #22
 8006094:	d4ee      	bmi.n	8006074 <__smakebuf_r+0x18>
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	f043 0302 	orr.w	r3, r3, #2
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	e7e2      	b.n	8006068 <__smakebuf_r+0xc>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	6020      	str	r0, [r4, #0]
 80060a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060aa:	81a3      	strh	r3, [r4, #12]
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060b2:	b15b      	cbz	r3, 80060cc <__smakebuf_r+0x70>
 80060b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060b8:	4630      	mov	r0, r6
 80060ba:	f000 f837 	bl	800612c <_isatty_r>
 80060be:	b128      	cbz	r0, 80060cc <__smakebuf_r+0x70>
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	f043 0301 	orr.w	r3, r3, #1
 80060ca:	81a3      	strh	r3, [r4, #12]
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	431d      	orrs	r5, r3
 80060d0:	81a5      	strh	r5, [r4, #12]
 80060d2:	e7cf      	b.n	8006074 <__smakebuf_r+0x18>

080060d4 <memmove>:
 80060d4:	4288      	cmp	r0, r1
 80060d6:	b510      	push	{r4, lr}
 80060d8:	eb01 0402 	add.w	r4, r1, r2
 80060dc:	d902      	bls.n	80060e4 <memmove+0x10>
 80060de:	4284      	cmp	r4, r0
 80060e0:	4623      	mov	r3, r4
 80060e2:	d807      	bhi.n	80060f4 <memmove+0x20>
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	42a1      	cmp	r1, r4
 80060e8:	d008      	beq.n	80060fc <memmove+0x28>
 80060ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f2:	e7f8      	b.n	80060e6 <memmove+0x12>
 80060f4:	4402      	add	r2, r0
 80060f6:	4601      	mov	r1, r0
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d100      	bne.n	80060fe <memmove+0x2a>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006106:	e7f7      	b.n	80060f8 <memmove+0x24>

08006108 <_fstat_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d07      	ldr	r5, [pc, #28]	@ (8006128 <_fstat_r+0x20>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	4611      	mov	r1, r2
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	f7fb fd3b 	bl	8001b90 <_fstat>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d102      	bne.n	8006124 <_fstat_r+0x1c>
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	b103      	cbz	r3, 8006124 <_fstat_r+0x1c>
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop
 8006128:	200007a0 	.word	0x200007a0

0800612c <_isatty_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	@ (8006148 <_isatty_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb fd3a 	bl	8001bb0 <_isatty>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_isatty_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_isatty_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200007a0 	.word	0x200007a0

0800614c <_sbrk_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d06      	ldr	r5, [pc, #24]	@ (8006168 <_sbrk_r+0x1c>)
 8006150:	2300      	movs	r3, #0
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	f7fb fd50 	bl	8001bfc <_sbrk>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_sbrk_r+0x1a>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_sbrk_r+0x1a>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	200007a0 	.word	0x200007a0

0800616c <__assert_func>:
 800616c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800616e:	4614      	mov	r4, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4b09      	ldr	r3, [pc, #36]	@ (8006198 <__assert_func+0x2c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4605      	mov	r5, r0
 8006178:	68d8      	ldr	r0, [r3, #12]
 800617a:	b954      	cbnz	r4, 8006192 <__assert_func+0x26>
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <__assert_func+0x30>)
 800617e:	461c      	mov	r4, r3
 8006180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006184:	9100      	str	r1, [sp, #0]
 8006186:	462b      	mov	r3, r5
 8006188:	4905      	ldr	r1, [pc, #20]	@ (80061a0 <__assert_func+0x34>)
 800618a:	f000 f86f 	bl	800626c <fiprintf>
 800618e:	f000 f87f 	bl	8006290 <abort>
 8006192:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <__assert_func+0x38>)
 8006194:	e7f4      	b.n	8006180 <__assert_func+0x14>
 8006196:	bf00      	nop
 8006198:	20000028 	.word	0x20000028
 800619c:	08006cde 	.word	0x08006cde
 80061a0:	08006cb0 	.word	0x08006cb0
 80061a4:	08006ca3 	.word	0x08006ca3

080061a8 <_calloc_r>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	fba1 5402 	umull	r5, r4, r1, r2
 80061ae:	b93c      	cbnz	r4, 80061c0 <_calloc_r+0x18>
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fe ffd9 	bl	8005168 <_malloc_r>
 80061b6:	4606      	mov	r6, r0
 80061b8:	b928      	cbnz	r0, 80061c6 <_calloc_r+0x1e>
 80061ba:	2600      	movs	r6, #0
 80061bc:	4630      	mov	r0, r6
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	220c      	movs	r2, #12
 80061c2:	6002      	str	r2, [r0, #0]
 80061c4:	e7f9      	b.n	80061ba <_calloc_r+0x12>
 80061c6:	462a      	mov	r2, r5
 80061c8:	4621      	mov	r1, r4
 80061ca:	f7fe f87f 	bl	80042cc <memset>
 80061ce:	e7f5      	b.n	80061bc <_calloc_r+0x14>

080061d0 <__ascii_mbtowc>:
 80061d0:	b082      	sub	sp, #8
 80061d2:	b901      	cbnz	r1, 80061d6 <__ascii_mbtowc+0x6>
 80061d4:	a901      	add	r1, sp, #4
 80061d6:	b142      	cbz	r2, 80061ea <__ascii_mbtowc+0x1a>
 80061d8:	b14b      	cbz	r3, 80061ee <__ascii_mbtowc+0x1e>
 80061da:	7813      	ldrb	r3, [r2, #0]
 80061dc:	600b      	str	r3, [r1, #0]
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	1e10      	subs	r0, r2, #0
 80061e2:	bf18      	it	ne
 80061e4:	2001      	movne	r0, #1
 80061e6:	b002      	add	sp, #8
 80061e8:	4770      	bx	lr
 80061ea:	4610      	mov	r0, r2
 80061ec:	e7fb      	b.n	80061e6 <__ascii_mbtowc+0x16>
 80061ee:	f06f 0001 	mvn.w	r0, #1
 80061f2:	e7f8      	b.n	80061e6 <__ascii_mbtowc+0x16>

080061f4 <_realloc_r>:
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	4680      	mov	r8, r0
 80061fa:	4615      	mov	r5, r2
 80061fc:	460c      	mov	r4, r1
 80061fe:	b921      	cbnz	r1, 800620a <_realloc_r+0x16>
 8006200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006204:	4611      	mov	r1, r2
 8006206:	f7fe bfaf 	b.w	8005168 <_malloc_r>
 800620a:	b92a      	cbnz	r2, 8006218 <_realloc_r+0x24>
 800620c:	f7fe ff38 	bl	8005080 <_free_r>
 8006210:	2400      	movs	r4, #0
 8006212:	4620      	mov	r0, r4
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006218:	f000 f841 	bl	800629e <_malloc_usable_size_r>
 800621c:	4285      	cmp	r5, r0
 800621e:	4606      	mov	r6, r0
 8006220:	d802      	bhi.n	8006228 <_realloc_r+0x34>
 8006222:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006226:	d8f4      	bhi.n	8006212 <_realloc_r+0x1e>
 8006228:	4629      	mov	r1, r5
 800622a:	4640      	mov	r0, r8
 800622c:	f7fe ff9c 	bl	8005168 <_malloc_r>
 8006230:	4607      	mov	r7, r0
 8006232:	2800      	cmp	r0, #0
 8006234:	d0ec      	beq.n	8006210 <_realloc_r+0x1c>
 8006236:	42b5      	cmp	r5, r6
 8006238:	462a      	mov	r2, r5
 800623a:	4621      	mov	r1, r4
 800623c:	bf28      	it	cs
 800623e:	4632      	movcs	r2, r6
 8006240:	f7fe f8c3 	bl	80043ca <memcpy>
 8006244:	4621      	mov	r1, r4
 8006246:	4640      	mov	r0, r8
 8006248:	f7fe ff1a 	bl	8005080 <_free_r>
 800624c:	463c      	mov	r4, r7
 800624e:	e7e0      	b.n	8006212 <_realloc_r+0x1e>

08006250 <__ascii_wctomb>:
 8006250:	4603      	mov	r3, r0
 8006252:	4608      	mov	r0, r1
 8006254:	b141      	cbz	r1, 8006268 <__ascii_wctomb+0x18>
 8006256:	2aff      	cmp	r2, #255	@ 0xff
 8006258:	d904      	bls.n	8006264 <__ascii_wctomb+0x14>
 800625a:	228a      	movs	r2, #138	@ 0x8a
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	4770      	bx	lr
 8006264:	700a      	strb	r2, [r1, #0]
 8006266:	2001      	movs	r0, #1
 8006268:	4770      	bx	lr
	...

0800626c <fiprintf>:
 800626c:	b40e      	push	{r1, r2, r3}
 800626e:	b503      	push	{r0, r1, lr}
 8006270:	4601      	mov	r1, r0
 8006272:	ab03      	add	r3, sp, #12
 8006274:	4805      	ldr	r0, [pc, #20]	@ (800628c <fiprintf+0x20>)
 8006276:	f853 2b04 	ldr.w	r2, [r3], #4
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	f7ff fd03 	bl	8005c88 <_vfiprintf_r>
 8006282:	b002      	add	sp, #8
 8006284:	f85d eb04 	ldr.w	lr, [sp], #4
 8006288:	b003      	add	sp, #12
 800628a:	4770      	bx	lr
 800628c:	20000028 	.word	0x20000028

08006290 <abort>:
 8006290:	b508      	push	{r3, lr}
 8006292:	2006      	movs	r0, #6
 8006294:	f000 f834 	bl	8006300 <raise>
 8006298:	2001      	movs	r0, #1
 800629a:	f7fb fc29 	bl	8001af0 <_exit>

0800629e <_malloc_usable_size_r>:
 800629e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a2:	1f18      	subs	r0, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfbc      	itt	lt
 80062a8:	580b      	ldrlt	r3, [r1, r0]
 80062aa:	18c0      	addlt	r0, r0, r3
 80062ac:	4770      	bx	lr

080062ae <_raise_r>:
 80062ae:	291f      	cmp	r1, #31
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	d904      	bls.n	80062c2 <_raise_r+0x14>
 80062b8:	2316      	movs	r3, #22
 80062ba:	6003      	str	r3, [r0, #0]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062c4:	b112      	cbz	r2, 80062cc <_raise_r+0x1e>
 80062c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062ca:	b94b      	cbnz	r3, 80062e0 <_raise_r+0x32>
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 f831 	bl	8006334 <_getpid_r>
 80062d2:	4622      	mov	r2, r4
 80062d4:	4601      	mov	r1, r0
 80062d6:	4628      	mov	r0, r5
 80062d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062dc:	f000 b818 	b.w	8006310 <_kill_r>
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d00a      	beq.n	80062fa <_raise_r+0x4c>
 80062e4:	1c59      	adds	r1, r3, #1
 80062e6:	d103      	bne.n	80062f0 <_raise_r+0x42>
 80062e8:	2316      	movs	r3, #22
 80062ea:	6003      	str	r3, [r0, #0]
 80062ec:	2001      	movs	r0, #1
 80062ee:	e7e7      	b.n	80062c0 <_raise_r+0x12>
 80062f0:	2100      	movs	r1, #0
 80062f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062f6:	4620      	mov	r0, r4
 80062f8:	4798      	blx	r3
 80062fa:	2000      	movs	r0, #0
 80062fc:	e7e0      	b.n	80062c0 <_raise_r+0x12>
	...

08006300 <raise>:
 8006300:	4b02      	ldr	r3, [pc, #8]	@ (800630c <raise+0xc>)
 8006302:	4601      	mov	r1, r0
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	f7ff bfd2 	b.w	80062ae <_raise_r>
 800630a:	bf00      	nop
 800630c:	20000028 	.word	0x20000028

08006310 <_kill_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	@ (8006330 <_kill_r+0x20>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	f7fb fbd7 	bl	8001ad0 <_kill>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d102      	bne.n	800632c <_kill_r+0x1c>
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	b103      	cbz	r3, 800632c <_kill_r+0x1c>
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	200007a0 	.word	0x200007a0

08006334 <_getpid_r>:
 8006334:	f7fb bbc4 	b.w	8001ac0 <_getpid>

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr
