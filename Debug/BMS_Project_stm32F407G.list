
BMS_Project_stm32F407G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001208  0800a880  0800a880  0000b880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba88  0800ba88  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba88  0800ba88  0000ca88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba90  0800ba90  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba90  0800ba90  0000ca90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba94  0800ba94  0000ca94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ba98  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000007f4  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c8  200009c8  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123aa  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003121  00000000  00000000  0001f5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  000226d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc3  00000000  00000000  000238a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025248  00000000  00000000  0002466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001884e  00000000  00000000  000498b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbcd1  00000000  00000000  00062101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ddd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cc0  00000000  00000000  0013de18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00143ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a864 	.word	0x0800a864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a864 	.word	0x0800a864

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMS_Init>:
#include "bms_data.h"
#include "constants.h"
#include <string.h>
BMS_Data_t BMS_Data;  // <<<< GLOBAL DEFINITION
BMS_Data_t BMS_Data_Received;
void BMS_Init(void) {
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    memset(&BMS_Data, 0, sizeof(BMS_Data));
 8000f3c:	2240      	movs	r2, #64	@ 0x40
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <BMS_Init+0x60>)
 8000f42:	f007 f9c6 	bl	80082d2 <memset>
    strcpy(BMS_Data.batteryName, BATTERY_NAME);
 8000f46:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <BMS_Init+0x60>)
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <BMS_Init+0x64>)
 8000f4a:	4614      	mov	r4, r2
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	c403      	stmia	r4!, {r0, r1}
 8000f58:	8022      	strh	r2, [r4, #0]
    BMS_Data.nominalVoltage_mV = NOMINAL_VOLTAGE_MV;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <BMS_Init+0x60>)
 8000f5c:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000f60:	835a      	strh	r2, [r3, #26]
    BMS_Data.nominalCapacity_mAh = BATTERY_CAPACITY_MAH;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <BMS_Init+0x60>)
 8000f64:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000f68:	839a      	strh	r2, [r3, #28]
    BMS_Data.maxChargeCurrent_mA = MAXIMUM_CHARGE_CURRENT_MA;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <BMS_Init+0x60>)
 8000f6c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000f70:	83da      	strh	r2, [r3, #30]
    BMS_Data.maxBatteryVoltage_mV = MAXIMUM_VOLTAGE_MV;
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <BMS_Init+0x60>)
 8000f74:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000f78:	841a      	strh	r2, [r3, #32]
    BMS_Data.minBatteryVoltage_mV = MINIMUM_VOLTAGE_MV;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <BMS_Init+0x60>)
 8000f7c:	f640 22be 	movw	r2, #2750	@ 0xabe
 8000f80:	845a      	strh	r2, [r3, #34]	@ 0x22
    BMS_Data.temperatureLowerBound_C = CHARGING_TEMPERATURE_MINIMUM_C;
 8000f82:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <BMS_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    BMS_Data.temperatureUpperBound_C = CHARGING_TEMPERATURE_MAXIMUM_C;
 8000f8a:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <BMS_Init+0x60>)
 8000f8c:	222d      	movs	r2, #45	@ 0x2d
 8000f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

}
 8000f92:	bf00      	nop
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001f0 	.word	0x200001f0
 8000f9c:	0800a880 	.word	0x0800a880

08000fa0 <BMS_Data_Received_Init>:
void BMS_Data_Received_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	memset(&BMS_Data_Received, 0, sizeof(BMS_Data));
 8000fa4:	2240      	movs	r2, #64	@ 0x40
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <BMS_Data_Received_Init+0x14>)
 8000faa:	f007 f992 	bl	80082d2 <memset>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000230 	.word	0x20000230

08000fb8 <BMS_SaveToEEPROM>:
void BMS_SaveToEEPROM(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
	   uint8_t buffer[16]; // each page contains up to 16 bytes, prevent page wrap-around

	    // To keep track of the device address
	    // Because Bit3,2,1 depend on A10, A9, A8
	    uint8_t current_devblockaddress = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75fb      	strb	r3, [r7, #23]

	    // ================Block 0: Battery Information==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(0);
 8000fc2:	23a0      	movs	r3, #160	@ 0xa0
 8000fc4:	75fb      	strb	r3, [r7, #23]

	    // ================== First Page: First 10 Characters ==================
	    memset(buffer, 0, 16);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2210      	movs	r2, #16
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 f980 	bl	80082d2 <memset>
	    memcpy(buffer, BMS_Data.batteryName, 10);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	4971      	ldr	r1, [pc, #452]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 f9fa 	bl	80083d2 <memcpy>
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 10);
 8000fde:	1d3a      	adds	r2, r7, #4
 8000fe0:	7df8      	ldrb	r0, [r7, #23]
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f000 fd15 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Second Page: Last 16 Characters ==================
	    printf("batteryName Address: %p\n", (void*)BMS_Data.batteryName);
 8000fea:	496c      	ldr	r1, [pc, #432]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8000fec:	486c      	ldr	r0, [pc, #432]	@ (80011a0 <BMS_SaveToEEPROM+0x1e8>)
 8000fee:	f007 f8c7 	bl	8008180 <iprintf>
	    printf("Accessing Address: %p\n", (void*)(BMS_Data.batteryName + 10));
 8000ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80011a4 <BMS_SaveToEEPROM+0x1ec>)
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	486c      	ldr	r0, [pc, #432]	@ (80011a8 <BMS_SaveToEEPROM+0x1f0>)
 8000ff8:	f007 f8c2 	bl	8008180 <iprintf>
	    printf("BATTERY_NAME_MAX_LEN: %d\n", BATTERY_NAME_MAX_LEN);
 8000ffc:	211a      	movs	r1, #26
 8000ffe:	486b      	ldr	r0, [pc, #428]	@ (80011ac <BMS_SaveToEEPROM+0x1f4>)
 8001000:	f007 f8be 	bl	8008180 <iprintf>
	    memcpy(buffer, BMS_Data.batteryName + 10, 15);
 8001004:	4967      	ldr	r1, [pc, #412]	@ (80011a4 <BMS_SaveToEEPROM+0x1ec>)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	220f      	movs	r2, #15
 800100a:	4618      	mov	r0, r3
 800100c:	f007 f9e1 	bl	80083d2 <memcpy>
	    EEPROM_WritePage(current_devblockaddress, 0x10, buffer, 16);
 8001010:	1d3a      	adds	r2, r7, #4
 8001012:	7df8      	ldrb	r0, [r7, #23]
 8001014:	2310      	movs	r3, #16
 8001016:	2110      	movs	r1, #16
 8001018:	f000 fcfc 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Third Page: Remaining Battery Information ==================
	    memset(buffer, 0, 16);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2210      	movs	r2, #16
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f007 f955 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.nominalVoltage_mV, 2);
 8001028:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 800102a:	8b5b      	ldrh	r3, [r3, #26]
 800102c:	80bb      	strh	r3, [r7, #4]
	    memcpy(buffer + 2, &BMS_Data.nominalCapacity_mAh, 2);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	3302      	adds	r3, #2
 8001032:	4a5a      	ldr	r2, [pc, #360]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001034:	8b92      	ldrh	r2, [r2, #28]
 8001036:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 4, &BMS_Data.maxChargeCurrent_mA, 2);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	3304      	adds	r3, #4
 800103c:	4a57      	ldr	r2, [pc, #348]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 800103e:	8bd2      	ldrh	r2, [r2, #30]
 8001040:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 6, &BMS_Data.maxBatteryVoltage_mV, 2);
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	3306      	adds	r3, #6
 8001046:	4a55      	ldr	r2, [pc, #340]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001048:	8c12      	ldrh	r2, [r2, #32]
 800104a:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 8, &BMS_Data.minBatteryVoltage_mV, 2);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	3308      	adds	r3, #8
 8001050:	4a52      	ldr	r2, [pc, #328]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001052:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001054:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 10, &BMS_Data.temperatureLowerBound_C, 1);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	330a      	adds	r3, #10
 800105a:	4a50      	ldr	r2, [pc, #320]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 800105c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8001060:	701a      	strb	r2, [r3, #0]
	    memcpy(buffer + 11, &BMS_Data.temperatureUpperBound_C, 1);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	330b      	adds	r3, #11
 8001066:	4a4d      	ldr	r2, [pc, #308]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001068:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 800106c:	701a      	strb	r2, [r3, #0]
	    EEPROM_WritePage(current_devblockaddress, 0x20, buffer, 16);
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	7df8      	ldrb	r0, [r7, #23]
 8001072:	2310      	movs	r3, #16
 8001074:	2120      	movs	r1, #32
 8001076:	f000 fccd 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Block 1: Measurements ==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(1);
 800107a:	23a2      	movs	r3, #162	@ 0xa2
 800107c:	75fb      	strb	r3, [r7, #23]
	    memset(buffer, 0, 16);
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2210      	movs	r2, #16
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f007 f924 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.averageVoltage_mV, 2);
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 800108c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800108e:	80bb      	strh	r3, [r7, #4]
	    memcpy(buffer + 2, &BMS_Data.averageCurrent_mA, 2);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	3302      	adds	r3, #2
 8001094:	4a41      	ldr	r2, [pc, #260]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001096:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8001098:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 4, &BMS_Data.averageTemperature_C, 1);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	3304      	adds	r3, #4
 800109e:	4a3f      	ldr	r2, [pc, #252]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 80010a0:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80010a4:	701a      	strb	r2, [r3, #0]
	    memcpy(buffer + 6, &BMS_Data.averagePower_mW, 2); // prevent bus fault
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	3306      	adds	r3, #6
 80010aa:	4a3c      	ldr	r2, [pc, #240]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 80010ac:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80010ae:	801a      	strh	r2, [r3, #0]
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 16);
 80010b0:	1d3a      	adds	r2, r7, #4
 80010b2:	7df8      	ldrb	r0, [r7, #23]
 80010b4:	2310      	movs	r3, #16
 80010b6:	2100      	movs	r1, #0
 80010b8:	f000 fcac 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Block 2: State of Charge & Health ==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(2);
 80010bc:	23a4      	movs	r3, #164	@ 0xa4
 80010be:	75fb      	strb	r3, [r7, #23]
	    memset(buffer, 0, 16);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2210      	movs	r2, #16
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 f903 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.stateOfCharge_percent, 1);
 80010cc:	4b33      	ldr	r3, [pc, #204]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 80010ce:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80010d2:	713b      	strb	r3, [r7, #4]
	    memcpy(buffer + 1, &BMS_Data.stateOfHealth_percent, 1);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a30      	ldr	r2, [pc, #192]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 80010da:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80010de:	701a      	strb	r2, [r3, #0]
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 16);
 80010e0:	1d3a      	adds	r2, r7, #4
 80010e2:	7df8      	ldrb	r0, [r7, #23]
 80010e4:	2310      	movs	r3, #16
 80010e6:	2100      	movs	r1, #0
 80010e8:	f000 fc94 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Block 3: Lifetime Statistics ==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(3);
 80010ec:	23a6      	movs	r3, #166	@ 0xa6
 80010ee:	75fb      	strb	r3, [r7, #23]
	    memset(buffer, 0, 16);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2210      	movs	r2, #16
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 f8eb 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.totalEnergyCharged_mWh, 2);
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 80010fe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001100:	80bb      	strh	r3, [r7, #4]
	    memcpy(buffer + 2, &BMS_Data.maxVoltage_mV, 2);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	3302      	adds	r3, #2
 8001106:	4a25      	ldr	r2, [pc, #148]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001108:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800110a:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 4, &BMS_Data.maxCurrent_mA, 2);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	3304      	adds	r3, #4
 8001110:	4a22      	ldr	r2, [pc, #136]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001112:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8001114:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 6, &BMS_Data.maxTemperature_C, 2);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	3306      	adds	r3, #6
 800111a:	4a20      	ldr	r2, [pc, #128]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 800111c:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 800111e:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 8, &BMS_Data.totalChargingTime_seconds, 2);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	3308      	adds	r3, #8
 8001124:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001126:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8001128:	801a      	strh	r2, [r3, #0]
	    memcpy(buffer + 10, &BMS_Data.totalChargeCycles, 1);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	330a      	adds	r3, #10
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001130:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8001134:	701a      	strb	r2, [r3, #0]
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 16);
 8001136:	1d3a      	adds	r2, r7, #4
 8001138:	7df8      	ldrb	r0, [r7, #23]
 800113a:	2310      	movs	r3, #16
 800113c:	2100      	movs	r1, #0
 800113e:	f000 fc69 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Block 4: Flags & Counters ==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(4);
 8001142:	23a8      	movs	r3, #168	@ 0xa8
 8001144:	75fb      	strb	r3, [r7, #23]
	    memset(buffer, 0, 16);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2210      	movs	r2, #16
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f007 f8c0 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.fault_flag, 1);
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001154:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001158:	713b      	strb	r3, [r7, #4]
	    memcpy(buffer + 1, &BMS_Data.charge_up_flag, 1);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	3301      	adds	r3, #1
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001160:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
 8001164:	701a      	strb	r2, [r3, #0]
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 16);
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	7df8      	ldrb	r0, [r7, #23]
 800116a:	2310      	movs	r3, #16
 800116c:	2100      	movs	r1, #0
 800116e:	f000 fc51 	bl	8001a14 <EEPROM_WritePage>

	    // ================== Block 5: Checksum ==================
	    current_devblockaddress = EEPROM_WRITE_ADDRESS(5);
 8001172:	23aa      	movs	r3, #170	@ 0xaa
 8001174:	75fb      	strb	r3, [r7, #23]
	    memset(buffer, 0, 16);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2210      	movs	r2, #16
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f007 f8a8 	bl	80082d2 <memset>
	    memcpy(buffer, &BMS_Data.checksum, 2);
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <BMS_SaveToEEPROM+0x1e4>)
 8001184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001186:	80bb      	strh	r3, [r7, #4]
	    EEPROM_WritePage(current_devblockaddress, 0x00, buffer, 16);
 8001188:	1d3a      	adds	r2, r7, #4
 800118a:	7df8      	ldrb	r0, [r7, #23]
 800118c:	2310      	movs	r3, #16
 800118e:	2100      	movs	r1, #0
 8001190:	f000 fc40 	bl	8001a14 <EEPROM_WritePage>
}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	0800a89c 	.word	0x0800a89c
 80011a4:	200001fa 	.word	0x200001fa
 80011a8:	0800a8b8 	.word	0x0800a8b8
 80011ac:	0800a8d0 	.word	0x0800a8d0

080011b0 <BMS_LoadFromEEPROM>:
void BMS_LoadFromEEPROM(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
    uint8_t buffer[16]; // 16-byte page buffer
    uint8_t current_devblockaddress = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]

    // ================ Block 0: Battery Information ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(0);
 80011ba:	23a0      	movs	r3, #160	@ 0xa0
 80011bc:	75fb      	strb	r3, [r7, #23]

    // ========== First Page: First 10 Characters of batteryName ==========
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 10);
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	7df8      	ldrb	r0, [r7, #23]
 80011c2:	230a      	movs	r3, #10
 80011c4:	2100      	movs	r1, #0
 80011c6:	f000 fc61 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(BMS_Data_Received.batteryName, buffer, 10);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	220a      	movs	r2, #10
 80011ce:	4619      	mov	r1, r3
 80011d0:	485b      	ldr	r0, [pc, #364]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80011d2:	f007 f8fe 	bl	80083d2 <memcpy>

    // ========== Second Page: Last 16 Characters of batteryName ==========
    EEPROM_ReadPage(current_devblockaddress, 0x10, buffer, 16);
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	7df8      	ldrb	r0, [r7, #23]
 80011da:	2310      	movs	r3, #16
 80011dc:	2110      	movs	r1, #16
 80011de:	f000 fc55 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(BMS_Data_Received.batteryName + 10, buffer, 16);
 80011e2:	4b58      	ldr	r3, [pc, #352]	@ (8001344 <BMS_LoadFromEEPROM+0x194>)
 80011e4:	461d      	mov	r5, r3
 80011e6:	1d3c      	adds	r4, r7, #4
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	6028      	str	r0, [r5, #0]
 80011ec:	6069      	str	r1, [r5, #4]
 80011ee:	60aa      	str	r2, [r5, #8]
 80011f0:	60eb      	str	r3, [r5, #12]

    // ========== Third Page: Remaining Battery Information ==========
    EEPROM_ReadPage(current_devblockaddress, 0x20, buffer, 16);
 80011f2:	1d3a      	adds	r2, r7, #4
 80011f4:	7df8      	ldrb	r0, [r7, #23]
 80011f6:	2310      	movs	r3, #16
 80011f8:	2120      	movs	r1, #32
 80011fa:	f000 fc47 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.nominalVoltage_mV, buffer, 2);
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001202:	835a      	strh	r2, [r3, #26]
    memcpy(&BMS_Data_Received.nominalCapacity_mAh, buffer + 2, 2);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	3302      	adds	r3, #2
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800120e:	839a      	strh	r2, [r3, #28]
    memcpy(&BMS_Data_Received.maxChargeCurrent_mA, buffer + 4, 2);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	3304      	adds	r3, #4
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800121a:	83da      	strh	r2, [r3, #30]
    memcpy(&BMS_Data_Received.maxBatteryVoltage_mV, buffer + 6, 2);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	3306      	adds	r3, #6
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b46      	ldr	r3, [pc, #280]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001226:	841a      	strh	r2, [r3, #32]
    memcpy(&BMS_Data_Received.minBatteryVoltage_mV, buffer + 8, 2);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	3308      	adds	r3, #8
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b43      	ldr	r3, [pc, #268]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001232:	845a      	strh	r2, [r3, #34]	@ 0x22
    memcpy(&BMS_Data_Received.temperatureLowerBound_C, buffer + 10, 1);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	330a      	adds	r3, #10
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800123c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    memcpy(&BMS_Data_Received.temperatureUpperBound_C, buffer + 11, 1);
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	330b      	adds	r3, #11
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    // ================ Block 1: Measurements ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(1);
 800124c:	23a2      	movs	r3, #162	@ 0xa2
 800124e:	75fb      	strb	r3, [r7, #23]
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 16);
 8001250:	1d3a      	adds	r2, r7, #4
 8001252:	7df8      	ldrb	r0, [r7, #23]
 8001254:	2310      	movs	r3, #16
 8001256:	2100      	movs	r1, #0
 8001258:	f000 fc18 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.averageVoltage_mV, buffer, 2);
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001260:	84da      	strh	r2, [r3, #38]	@ 0x26
    memcpy(&BMS_Data_Received.averageCurrent_mA, buffer + 2, 2);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	3302      	adds	r3, #2
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800126c:	851a      	strh	r2, [r3, #40]	@ 0x28
    memcpy(&BMS_Data_Received.averageTemperature_C, buffer + 4, 1);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	3304      	adds	r3, #4
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001276:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    memcpy(&BMS_Data_Received.averagePower_mW, buffer + 6, 2);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	3306      	adds	r3, #6
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001284:	859a      	strh	r2, [r3, #44]	@ 0x2c

    // ================ Block 2: State of Charge & Health ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(2);
 8001286:	23a4      	movs	r3, #164	@ 0xa4
 8001288:	75fb      	strb	r3, [r7, #23]
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 16);
 800128a:	1d3a      	adds	r2, r7, #4
 800128c:	7df8      	ldrb	r0, [r7, #23]
 800128e:	2310      	movs	r3, #16
 8001290:	2100      	movs	r1, #0
 8001292:	f000 fbfb 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.stateOfCharge_percent, buffer, 1);
 8001296:	793a      	ldrb	r2, [r7, #4]
 8001298:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800129a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    memcpy(&BMS_Data_Received.stateOfHealth_percent, buffer + 1, 1);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	3301      	adds	r3, #1
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    // ================ Block 3: Lifetime Statistics ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(3);
 80012aa:	23a6      	movs	r3, #166	@ 0xa6
 80012ac:	75fb      	strb	r3, [r7, #23]
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 16);
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	7df8      	ldrb	r0, [r7, #23]
 80012b2:	2310      	movs	r3, #16
 80012b4:	2100      	movs	r1, #0
 80012b6:	f000 fbe9 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.totalEnergyCharged_mWh, buffer, 2);
 80012ba:	88ba      	ldrh	r2, [r7, #4]
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012be:	861a      	strh	r2, [r3, #48]	@ 0x30
    memcpy(&BMS_Data_Received.maxVoltage_mV, buffer + 2, 2);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	3302      	adds	r3, #2
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012ca:	865a      	strh	r2, [r3, #50]	@ 0x32
    memcpy(&BMS_Data_Received.maxCurrent_mA, buffer + 4, 2);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	3304      	adds	r3, #4
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012d6:	869a      	strh	r2, [r3, #52]	@ 0x34
    memcpy(&BMS_Data_Received.maxTemperature_C, buffer + 6, 2);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	3306      	adds	r3, #6
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    memcpy(&BMS_Data_Received.totalChargingTime_seconds, buffer + 8, 2);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	3308      	adds	r3, #8
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012ee:	871a      	strh	r2, [r3, #56]	@ 0x38
    memcpy(&BMS_Data_Received.totalChargeCycles, buffer + 10, 1);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	330a      	adds	r3, #10
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 80012f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    // ================ Block 4: Flags & Counters ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(4);
 80012fc:	23a8      	movs	r3, #168	@ 0xa8
 80012fe:	75fb      	strb	r3, [r7, #23]
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 16);
 8001300:	1d3a      	adds	r2, r7, #4
 8001302:	7df8      	ldrb	r0, [r7, #23]
 8001304:	2310      	movs	r3, #16
 8001306:	2100      	movs	r1, #0
 8001308:	f000 fbc0 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.fault_flag, buffer, 1);
 800130c:	793a      	ldrb	r2, [r7, #4]
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001310:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    memcpy(&BMS_Data_Received.charge_up_flag, buffer + 1, 1);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	3301      	adds	r3, #1
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    // ================ Block 5: Checksum ==================
    current_devblockaddress = EEPROM_WRITE_ADDRESS(5);
 8001320:	23aa      	movs	r3, #170	@ 0xaa
 8001322:	75fb      	strb	r3, [r7, #23]
    EEPROM_ReadPage(current_devblockaddress, 0x00, buffer, 16);
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	7df8      	ldrb	r0, [r7, #23]
 8001328:	2310      	movs	r3, #16
 800132a:	2100      	movs	r1, #0
 800132c:	f000 fbae 	bl	8001a8c <EEPROM_ReadPage>
    memcpy(&BMS_Data_Received.checksum, buffer, 2);
 8001330:	88ba      	ldrh	r2, [r7, #4]
 8001332:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <BMS_LoadFromEEPROM+0x190>)
 8001334:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}
 800133e:	bf00      	nop
 8001340:	20000230 	.word	0x20000230
 8001344:	2000023a 	.word	0x2000023a

08001348 <buzzer_init>:
#include "buzzer.h"

void buzzer_init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <buzzer_init+0x60>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <buzzer_init+0x60>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <buzzer_init+0x60>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137e:	480b      	ldr	r0, [pc, #44]	@ (80013ac <buzzer_init+0x64>)
 8001380:	f004 f87e 	bl	8005480 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001388:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4804      	ldr	r0, [pc, #16]	@ (80013ac <buzzer_init+0x64>)
 800139c:	f003 fdd8 	bl	8004f50 <HAL_GPIO_Init>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020800 	.word	0x40020800

080013b0 <batteryStatusToString>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "stdio.h"
#include "main.h"

const char* batteryStatusToString(BatteryStatus status) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    switch (status) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d00a      	beq.n	80013d6 <batteryStatusToString+0x26>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dc0a      	bgt.n	80013da <batteryStatusToString+0x2a>
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <batteryStatusToString+0x1e>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d002      	beq.n	80013d2 <batteryStatusToString+0x22>
 80013cc:	e005      	b.n	80013da <batteryStatusToString+0x2a>
        case IDLE: return "Idle";
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <batteryStatusToString+0x38>)
 80013d0:	e004      	b.n	80013dc <batteryStatusToString+0x2c>
        case CHARGING: return "Charging";
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <batteryStatusToString+0x3c>)
 80013d4:	e002      	b.n	80013dc <batteryStatusToString+0x2c>
        case FULL: return "Full";
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <batteryStatusToString+0x40>)
 80013d8:	e000      	b.n	80013dc <batteryStatusToString+0x2c>
        default: return "Unknown";
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <batteryStatusToString+0x44>)
    }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	0800a8ec 	.word	0x0800a8ec
 80013ec:	0800a8f4 	.word	0x0800a8f4
 80013f0:	0800a900 	.word	0x0800a900
 80013f4:	0800a908 	.word	0x0800a908

080013f8 <oled_init>:


// OLED Initialization Function
void oled_init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80013fc:	f000 f90c 	bl	8001618 <ssd1306_Init>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <oled_display>:

// OLED Data Display Function
void oled_display(float voltage,float current, int soc, float power, float temperature,
		int soh, BatteryStatus batteryStatus, int hours, int minutes)
 {
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b092      	sub	sp, #72	@ 0x48
 8001408:	af02      	add	r7, sp, #8
 800140a:	ed87 0a07 	vstr	s0, [r7, #28]
 800140e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001412:	6178      	str	r0, [r7, #20]
 8001414:	ed87 1a04 	vstr	s2, [r7, #16]
 8001418:	edc7 1a03 	vstr	s3, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	71fb      	strb	r3, [r7, #7]
    char buffer[30];
    ssd1306_Fill(Black);
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f961 	bl	80016ec <ssd1306_Fill>
    // **Voltage and Temperature Line**
    //ssd1306_SetCursor(2, 2);
    //sprintf(buffer, "                 "); // Clear previous text
    //ssd1306_WriteString(buffer, Font_6x8, Black);
    if (power<0.5 && batteryStatus==CHARGING)
 800142a:	edd7 7a04 	vldr	s15, [r7, #16]
 800142e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d510      	bpl.n	800145e <oled_display+0x5a>
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10d      	bne.n	800145e <oled_display+0x5a>
    {
    	ssd1306_SetCursor(2, 32);
 8001442:	2120      	movs	r1, #32
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fa9b 	bl	8001980 <ssd1306_SetCursor>
    	ssd1306_WriteString("Initializing", Font_7x10, White);
 800144a:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <oled_display+0x17c>)
 800144c:	2201      	movs	r2, #1
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001452:	484c      	ldr	r0, [pc, #304]	@ (8001584 <oled_display+0x180>)
 8001454:	f000 fa6e 	bl	8001934 <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 8001458:	f000 f960 	bl	800171c <ssd1306_UpdateScreen>
 800145c:	e08c      	b.n	8001578 <oled_display+0x174>
    	return;

    }
    ssd1306_SetCursor(2, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	2002      	movs	r0, #2
 8001462:	f000 fa8d 	bl	8001980 <ssd1306_SetCursor>
    sprintf(buffer, "V: %.2fV  T: %.1fC", voltage/1000, temperature); // show voltage in V
 8001466:	edd7 7a07 	vldr	s15, [r7, #28]
 800146a:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001588 <oled_display+0x184>
 800146e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001472:	ee16 0a90 	vmov	r0, s13
 8001476:	f7ff f867 	bl	8000548 <__aeabi_f2d>
 800147a:	4604      	mov	r4, r0
 800147c:	460d      	mov	r5, r1
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f107 0020 	add.w	r0, r7, #32
 800148c:	e9cd 2300 	strd	r2, r3, [sp]
 8001490:	4622      	mov	r2, r4
 8001492:	462b      	mov	r3, r5
 8001494:	493d      	ldr	r1, [pc, #244]	@ (800158c <oled_display+0x188>)
 8001496:	f006 feb9 	bl	800820c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <oled_display+0x18c>)
 800149c:	f107 0020 	add.w	r0, r7, #32
 80014a0:	2201      	movs	r2, #1
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a6:	f000 fa45 	bl	8001934 <ssd1306_WriteString>
    // **Current and Power Line**
    //ssd1306_SetCursor(2, 12);
    //sprintf(buffer, "                 ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 12);
 80014aa:	210c      	movs	r1, #12
 80014ac:	2002      	movs	r0, #2
 80014ae:	f000 fa67 	bl	8001980 <ssd1306_SetCursor>
    sprintf(buffer, "I: %.2fA P: %.2fW", current/1000, power); // Show current in A
 80014b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001588 <oled_display+0x184>
 80014ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014be:	ee16 0a90 	vmov	r0, s13
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	f7ff f83c 	bl	8000548 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	f107 0020 	add.w	r0, r7, #32
 80014d8:	e9cd 2300 	strd	r2, r3, [sp]
 80014dc:	4622      	mov	r2, r4
 80014de:	462b      	mov	r3, r5
 80014e0:	492c      	ldr	r1, [pc, #176]	@ (8001594 <oled_display+0x190>)
 80014e2:	f006 fe93 	bl	800820c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <oled_display+0x18c>)
 80014e8:	f107 0020 	add.w	r0, r7, #32
 80014ec:	2201      	movs	r2, #1
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	f000 fa1f 	bl	8001934 <ssd1306_WriteString>
    // **SOC and SOH Line**
    //ssd1306_SetCursor(2, 22);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 22);
 80014f6:	2116      	movs	r1, #22
 80014f8:	2002      	movs	r0, #2
 80014fa:	f000 fa41 	bl	8001980 <ssd1306_SetCursor>
    snprintf(buffer, sizeof(buffer), "SOC: %d%%  SOH: %d%%", soc, soh);
 80014fe:	f107 0020 	add.w	r0, r7, #32
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	4a23      	ldr	r2, [pc, #140]	@ (8001598 <oled_display+0x194>)
 800150a:	211e      	movs	r1, #30
 800150c:	f006 fe4a 	bl	80081a4 <sniprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <oled_display+0x18c>)
 8001512:	f107 0020 	add.w	r0, r7, #32
 8001516:	2201      	movs	r2, #1
 8001518:	9200      	str	r2, [sp, #0]
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	f000 fa0a 	bl	8001934 <ssd1306_WriteString>
    // **Charging/Discharging Status**
    //ssd1306_SetCursor(2, 32);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 32);
 8001520:	2120      	movs	r1, #32
 8001522:	2002      	movs	r0, #2
 8001524:	f000 fa2c 	bl	8001980 <ssd1306_SetCursor>
    sprintf(buffer, "Status: %s", batteryStatusToString(batteryStatus));
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff40 	bl	80013b0 <batteryStatusToString>
 8001530:	4602      	mov	r2, r0
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4919      	ldr	r1, [pc, #100]	@ (800159c <oled_display+0x198>)
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fe67 	bl	800820c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <oled_display+0x18c>)
 8001540:	f107 0020 	add.w	r0, r7, #32
 8001544:	2201      	movs	r2, #1
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154a:	f000 f9f3 	bl	8001934 <ssd1306_WriteString>
    // **Time Remaining**
    //ssd1306_SetCursor(2, 42);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 42);
 800154e:	212a      	movs	r1, #42	@ 0x2a
 8001550:	2002      	movs	r0, #2
 8001552:	f000 fa15 	bl	8001980 <ssd1306_SetCursor>
    sprintf(buffer, "Time Left: %dh %dm", hours, minutes);
 8001556:	f107 0020 	add.w	r0, r7, #32
 800155a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4910      	ldr	r1, [pc, #64]	@ (80015a0 <oled_display+0x19c>)
 8001560:	f006 fe54 	bl	800820c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <oled_display+0x18c>)
 8001566:	f107 0020 	add.w	r0, r7, #32
 800156a:	2201      	movs	r2, #1
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	f000 f9e0 	bl	8001934 <ssd1306_WriteString>

    // **Update OLED screen**
    ssd1306_UpdateScreen();
 8001574:	f000 f8d2 	bl	800171c <ssd1306_UpdateScreen>
}
 8001578:	3740      	adds	r7, #64	@ 0x40
 800157a:	46bd      	mov	sp, r7
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
 800157e:	bf00      	nop
 8001580:	0800b6e8 	.word	0x0800b6e8
 8001584:	0800a910 	.word	0x0800a910
 8001588:	447a0000 	.word	0x447a0000
 800158c:	0800a920 	.word	0x0800a920
 8001590:	0800b6dc 	.word	0x0800b6dc
 8001594:	0800a934 	.word	0x0800a934
 8001598:	0800a948 	.word	0x0800a948
 800159c:	0800a960 	.word	0x0800a960
 80015a0:	0800a96c 	.word	0x0800a96c

080015a4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2200      	movs	r2, #0
 80015d0:	2178      	movs	r1, #120	@ 0x78
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <ssd1306_WriteCommand+0x2c>)
 80015d4:	f004 f8b2 	bl	800573c <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000768 	.word	0x20000768

080015e4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
 80015f6:	9202      	str	r2, [sp, #8]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	2178      	movs	r1, #120	@ 0x78
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <ssd1306_WriteData+0x30>)
 8001606:	f004 f899 	bl	800573c <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000768 	.word	0x20000768

08001618 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800161c:	f7ff ffc2 	bl	80015a4 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8001620:	2064      	movs	r0, #100	@ 0x64
 8001622:	f002 f899 	bl	8003758 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f9d6 	bl	80019d8 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800162c:	2020      	movs	r0, #32
 800162e:	f7ff ffc1 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ffbe 	bl	80015b4 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001638:	20b0      	movs	r0, #176	@ 0xb0
 800163a:	f7ff ffbb 	bl	80015b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800163e:	20c8      	movs	r0, #200	@ 0xc8
 8001640:	f7ff ffb8 	bl	80015b4 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff ffb5 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800164a:	2010      	movs	r0, #16
 800164c:	f7ff ffb2 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001650:	2040      	movs	r0, #64	@ 0x40
 8001652:	f7ff ffaf 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 8001656:	20ff      	movs	r0, #255	@ 0xff
 8001658:	f000 f9aa 	bl	80019b0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800165c:	20a1      	movs	r0, #161	@ 0xa1
 800165e:	f7ff ffa9 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8001662:	20a6      	movs	r0, #166	@ 0xa6
 8001664:	f7ff ffa6 	bl	80015b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001668:	20a8      	movs	r0, #168	@ 0xa8
 800166a:	f7ff ffa3 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 800166e:	203f      	movs	r0, #63	@ 0x3f
 8001670:	f7ff ffa0 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001674:	20a4      	movs	r0, #164	@ 0xa4
 8001676:	f7ff ff9d 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800167a:	20d3      	movs	r0, #211	@ 0xd3
 800167c:	f7ff ff9a 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ff97 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001686:	20d5      	movs	r0, #213	@ 0xd5
 8001688:	f7ff ff94 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800168c:	20f0      	movs	r0, #240	@ 0xf0
 800168e:	f7ff ff91 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001692:	20d9      	movs	r0, #217	@ 0xd9
 8001694:	f7ff ff8e 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001698:	2022      	movs	r0, #34	@ 0x22
 800169a:	f7ff ff8b 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800169e:	20da      	movs	r0, #218	@ 0xda
 80016a0:	f7ff ff88 	bl	80015b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80016a4:	2012      	movs	r0, #18
 80016a6:	f7ff ff85 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80016aa:	20db      	movs	r0, #219	@ 0xdb
 80016ac:	f7ff ff82 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016b0:	2020      	movs	r0, #32
 80016b2:	f7ff ff7f 	bl	80015b4 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016b6:	208d      	movs	r0, #141	@ 0x8d
 80016b8:	f7ff ff7c 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80016bc:	2014      	movs	r0, #20
 80016be:	f7ff ff79 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 f988 	bl	80019d8 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f80f 	bl	80016ec <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80016ce:	f000 f825 	bl	800171c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <ssd1306_Init+0xd0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <ssd1306_Init+0xd0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80016de:	4b02      	ldr	r3, [pc, #8]	@ (80016e8 <ssd1306_Init+0xd0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000670 	.word	0x20000670

080016ec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <ssd1306_Fill+0x14>
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <ssd1306_Fill+0x16>
 8001700:	23ff      	movs	r3, #255	@ 0xff
 8001702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001706:	4619      	mov	r1, r3
 8001708:	4803      	ldr	r0, [pc, #12]	@ (8001718 <ssd1306_Fill+0x2c>)
 800170a:	f006 fde2 	bl	80082d2 <memset>
			sizeof(SSD1306_Buffer));
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000270 	.word	0x20000270

0800171c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e016      	b.n	8001756 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	3b50      	subs	r3, #80	@ 0x50
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff40 	bl	80015b4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ff3d 	bl	80015b4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800173a:	2010      	movs	r0, #16
 800173c:	f7ff ff3a 	bl	80015b4 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <ssd1306_UpdateScreen+0x4c>)
 8001746:	4413      	add	r3, r2
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff4a 	bl	80015e4 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3301      	adds	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b07      	cmp	r3, #7
 800175a:	d9e5      	bls.n	8001728 <ssd1306_UpdateScreen+0xc>
	}
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000270 	.word	0x20000270

0800176c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	460b      	mov	r3, r1
 8001778:	71bb      	strb	r3, [r7, #6]
 800177a:	4613      	mov	r3, r2
 800177c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db3d      	blt.n	8001802 <ssd1306_DrawPixel+0x96>
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	2b3f      	cmp	r3, #63	@ 0x3f
 800178a:	d83a      	bhi.n	8001802 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 800178c:	797b      	ldrb	r3, [r7, #5]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d11a      	bne.n	80017c8 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	b2d8      	uxtb	r0, r3
 800179a:	4603      	mov	r3, r0
 800179c:	01db      	lsls	r3, r3, #7
 800179e:	4413      	add	r3, r2
 80017a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <ssd1306_DrawPixel+0xa4>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b259      	sxtb	r1, r3
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	4603      	mov	r3, r0
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	4413      	add	r3, r2
 80017c0:	b2c9      	uxtb	r1, r1
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <ssd1306_DrawPixel+0xa4>)
 80017c4:	54d1      	strb	r1, [r2, r3]
 80017c6:	e01d      	b.n	8001804 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	b2d8      	uxtb	r0, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	01db      	lsls	r3, r3, #7
 80017d4:	4413      	add	r3, r2
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <ssd1306_DrawPixel+0xa4>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	b25a      	sxtb	r2, r3
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4013      	ands	r3, r2
 80017f0:	b259      	sxtb	r1, r3
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4603      	mov	r3, r0
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	4413      	add	r3, r2
 80017fa:	b2c9      	uxtb	r1, r1
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <ssd1306_DrawPixel+0xa4>)
 80017fe:	54d1      	strb	r1, [r2, r3]
 8001800:	e000      	b.n	8001804 <ssd1306_DrawPixel+0x98>
		return;
 8001802:	bf00      	nop
	}
}
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000270 	.word	0x20000270

08001814 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	4604      	mov	r4, r0
 800181c:	4638      	mov	r0, r7
 800181e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001822:	4623      	mov	r3, r4
 8001824:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b1f      	cmp	r3, #31
 800182a:	d902      	bls.n	8001832 <ssd1306_WriteChar+0x1e>
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001830:	d901      	bls.n	8001836 <ssd1306_WriteChar+0x22>
		return 0;
 8001832:	2300      	movs	r3, #0
 8001834:	e077      	b.n	8001926 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001836:	4b3e      	ldr	r3, [pc, #248]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	783b      	ldrb	r3, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	2b80      	cmp	r3, #128	@ 0x80
 8001842:	dc06      	bgt.n	8001852 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	461a      	mov	r2, r3
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800184e:	2b40      	cmp	r3, #64	@ 0x40
 8001850:	dd01      	ble.n	8001856 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8001852:	2300      	movs	r3, #0
 8001854:	e067      	b.n	8001926 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e04e      	b.n	80018fa <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	3b20      	subs	r3, #32
 8001862:	7879      	ldrb	r1, [r7, #1]
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4619      	mov	r1, r3
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e036      	b.n	80018ea <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b2d8      	uxtb	r0, r3
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 800189c:	885b      	ldrh	r3, [r3, #2]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff ff5d 	bl	800176c <ssd1306_DrawPixel>
 80018b2:	e017      	b.n	80018e4 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b2d8      	uxtb	r0, r3
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 80018c4:	885b      	ldrh	r3, [r3, #2]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	f7ff ff44 	bl	800176c <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	783b      	ldrb	r3, [r7, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d3c3      	bcc.n	800187c <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	787b      	ldrb	r3, [r7, #1]
 80018fc:	461a      	mov	r2, r3
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4293      	cmp	r3, r2
 8001902:	d3ab      	bcc.n	800185c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001904:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	2a00      	cmp	r2, #0
 800190c:	d005      	beq.n	800191a <ssd1306_WriteChar+0x106>
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	3a20      	subs	r2, #32
 8001914:	440a      	add	r2, r1
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	e000      	b.n	800191c <ssd1306_WriteChar+0x108>
 800191a:	783a      	ldrb	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <ssd1306_WriteChar+0x11c>)
 8001922:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	20000670 	.word	0x20000670

08001934 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	4638      	mov	r0, r7
 800193e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8001942:	e013      	b.n	800196c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	7818      	ldrb	r0, [r3, #0]
 8001948:	7e3b      	ldrb	r3, [r7, #24]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	463b      	mov	r3, r7
 800194e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001950:	f7ff ff60 	bl	8001814 <ssd1306_WriteChar>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d002      	beq.n	8001966 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	e008      	b.n	8001978 <ssd1306_WriteString+0x44>
		}
		str++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e7      	bne.n	8001944 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	781b      	ldrb	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <ssd1306_SetCursor+0x2c>)
 8001996:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <ssd1306_SetCursor+0x2c>)
 800199e:	805a      	strh	r2, [r3, #2]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000670 	.word	0x20000670

080019b0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80019ba:	2381      	movs	r3, #129	@ 0x81
 80019bc:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fdf7 	bl	80015b4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fdf3 	bl	80015b4 <ssd1306_WriteCommand>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80019e8:	23af      	movs	r3, #175	@ 0xaf
 80019ea:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <ssd1306_SetDisplayOn+0x38>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	715a      	strb	r2, [r3, #5]
 80019f2:	e004      	b.n	80019fe <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80019f4:	23ae      	movs	r3, #174	@ 0xae
 80019f6:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <ssd1306_SetDisplayOn+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fdd7 	bl	80015b4 <ssd1306_WriteCommand>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000670 	.word	0x20000670

08001a14 <EEPROM_WritePage>:
//page size: 16 bytes
// Total pages: 128 pages
//Address Range: 0x0000 to 0x07ff

HAL_StatusTypeDef EEPROM_WritePage(uint8_t DevBlockAddress, uint16_t MemAddress, uint8_t* pBuffer, uint16_t NumByteToWrite)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	460b      	mov	r3, r1
 8001a24:	81bb      	strh	r3, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
	/* Write EEPROM_PAGESIZE */
	status=HAL_I2C_Mem_Write(&hi2c1, DevBlockAddress, MemAddress, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(pBuffer), NumByteToWrite, 100);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	b299      	uxth	r1, r3
 8001a32:	89ba      	ldrh	r2, [r7, #12]
 8001a34:	2364      	movs	r3, #100	@ 0x64
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <EEPROM_WritePage+0x74>)
 8001a44:	f003 fe7a 	bl	800573c <HAL_I2C_Mem_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8001a4c:	bf00      	nop
 8001a4e:	480e      	ldr	r0, [pc, #56]	@ (8001a88 <EEPROM_WritePage+0x74>)
 8001a50:	f004 face 	bl	8005ff0 <HAL_I2C_GetState>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d1f9      	bne.n	8001a4e <EEPROM_WritePage+0x3a>
	{

	}

	/* Check if the EEPROM is ready for a new operation */
	while (HAL_I2C_IsDeviceReady(&hi2c1, DevBlockAddress, EEPROM_MAX_TRIALS, I2Cx_TIMEOUT_MAX) == HAL_TIMEOUT);
 8001a5a:	bf00      	nop
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	2332      	movs	r3, #50	@ 0x32
 8001a62:	2264      	movs	r2, #100	@ 0x64
 8001a64:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <EEPROM_WritePage+0x74>)
 8001a66:	f004 f995 	bl	8005d94 <HAL_I2C_IsDeviceReady>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d0f5      	beq.n	8001a5c <EEPROM_WritePage+0x48>

	/* Wait for the end of the transfer */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8001a70:	bf00      	nop
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <EEPROM_WritePage+0x74>)
 8001a74:	f004 fabc 	bl	8005ff0 <HAL_I2C_GetState>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d1f9      	bne.n	8001a72 <EEPROM_WritePage+0x5e>
	{

	}
	return status;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000768 	.word	0x20000768

08001a8c <EEPROM_ReadPage>:
HAL_StatusTypeDef EEPROM_ReadPage(uint8_t DevBlockAddress, uint16_t MemAddress, uint8_t* pBuffer, uint16_t NumByteToRead)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	81bb      	strh	r3, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]

    /* Ensure EEPROM is ready before attempting to read */
    while (HAL_I2C_IsDeviceReady(&hi2c1, DevBlockAddress, EEPROM_MAX_TRIALS, I2Cx_TIMEOUT_MAX) != HAL_OK);
 8001aa6:	bf00      	nop
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	2332      	movs	r3, #50	@ 0x32
 8001aae:	2264      	movs	r2, #100	@ 0x64
 8001ab0:	4810      	ldr	r0, [pc, #64]	@ (8001af4 <EEPROM_ReadPage+0x68>)
 8001ab2:	f004 f96f 	bl	8005d94 <HAL_I2C_IsDeviceReady>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f5      	bne.n	8001aa8 <EEPROM_ReadPage+0x1c>

    /* Read data from EEPROM memory */
    status = HAL_I2C_Mem_Read(&hi2c1, DevBlockAddress, MemAddress, I2C_MEMADD_SIZE_8BIT, pBuffer, NumByteToRead, I2Cx_TIMEOUT_MAX);
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	89ba      	ldrh	r2, [r7, #12]
 8001ac2:	2332      	movs	r3, #50	@ 0x32
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <EEPROM_ReadPage+0x68>)
 8001ad2:	f003 ff2d 	bl	8005930 <HAL_I2C_Mem_Read>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]

    /* Wait for the end of the transfer */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001ada:	bf00      	nop
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <EEPROM_ReadPage+0x68>)
 8001ade:	f004 fa87 	bl	8005ff0 <HAL_I2C_GetState>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d1f9      	bne.n	8001adc <EEPROM_ReadPage+0x50>

    return status;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000768 	.word	0x20000768

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afe:	f001 fdb9 	bl	8003674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b02:	f000 f8ad 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b06:	f000 fa65 	bl	8001fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b0a:	f000 fa43 	bl	8001f94 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b0e:	f000 f9c5 	bl	8001e9c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b12:	f000 f90f 	bl	8001d34 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b16:	f000 f977 	bl	8001e08 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001b1a:	f000 f9ed 	bl	8001ef8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize bms_data structure*/
  BMS_Init();
 8001b1e:	f7ff fa0b 	bl	8000f38 <BMS_Init>
  /* Initialize OLED and Buzzer*/
  oled_init();
 8001b22:	f7ff fc69 	bl	80013f8 <oled_init>
  buzzer_init();
 8001b26:	f7ff fc0f 	bl	8001348 <buzzer_init>

  /* Start Timer2 to trigger ADC conversions every 100ms */
  HAL_TIM_Base_Start(&htim2);
 8001b2a:	483f      	ldr	r0, [pc, #252]	@ (8001c28 <main+0x130>)
 8001b2c:	f005 faf6 	bl	800711c <HAL_TIM_Base_Start>

  /* Enable ADC DMA */
  HAL_ADC_Start(&hadc2);
 8001b30:	483e      	ldr	r0, [pc, #248]	@ (8001c2c <main+0x134>)
 8001b32:	f001 feab 	bl	800388c <HAL_ADC_Start>

  HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 8);  //  Capture 8 words
 8001b36:	2208      	movs	r2, #8
 8001b38:	493d      	ldr	r1, [pc, #244]	@ (8001c30 <main+0x138>)
 8001b3a:	483e      	ldr	r0, [pc, #248]	@ (8001c34 <main+0x13c>)
 8001b3c:	f002 f836 	bl	8003bac <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (voltage_and_current_reading_flag)
 8001b40:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <main+0x140>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02d      	beq.n	8001ba6 <main+0xae>
	    {
	        voltage_and_current_reading_flag = 0;  // Reset flag
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <main+0x140>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	        process_voltage_and_current_data();
 8001b50:	f001 fd02 	bl	8003558 <process_voltage_and_current_data>
	        processing();
 8001b54:	f000 fe84 	bl	8002860 <processing>
	        oled_display(voltage, current, BMS_Data.stateOfCharge_percent, power, temperature, BMS_Data.stateOfHealth_percent, batteryStatus, time_pack.hours, time_pack.minutes);
 8001b58:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <main+0x144>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <main+0x148>)
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <main+0x14c>)
 8001b66:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <main+0x150>)
 8001b6e:	edd3 6a00 	vldr	s13, [r3]
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <main+0x154>)
 8001b74:	ed93 6a00 	vldr	s12, [r3]
 8001b78:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <main+0x14c>)
 8001b7a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001b7e:	461c      	mov	r4, r3
 8001b80:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <main+0x158>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <main+0x15c>)
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <main+0x15c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4621      	mov	r1, r4
 8001b92:	eef0 1a46 	vmov.f32	s3, s12
 8001b96:	eeb0 1a66 	vmov.f32	s2, s13
 8001b9a:	eef0 0a47 	vmov.f32	s1, s14
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	f7ff fc2f 	bl	8001404 <oled_display>
	    }
	    if (temperature_update_flag)
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <main+0x160>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02f      	beq.n	8001c10 <main+0x118>
	    {
	    	temperature_update_flag = 0;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <main+0x160>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
	    	reconfigure_to_temperature_channel();
 8001bb6:	f001 faed 	bl	8003194 <reconfigure_to_temperature_channel>
	    	read_temperature();
 8001bba:	f001 fb5b 	bl	8003274 <read_temperature>
	    	reconfigure_to_dual_mode();
 8001bbe:	f001 facd 	bl	800315c <reconfigure_to_dual_mode>
	    	oled_display(voltage, current, BMS_Data.stateOfCharge_percent, power, temperature, BMS_Data.stateOfHealth_percent, batteryStatus, time_pack.hours, time_pack.minutes);
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <main+0x144>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <main+0x148>)
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <main+0x14c>)
 8001bd0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <main+0x150>)
 8001bd8:	edd3 6a00 	vldr	s13, [r3]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <main+0x154>)
 8001bde:	ed93 6a00 	vldr	s12, [r3]
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <main+0x14c>)
 8001be4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001be8:	461c      	mov	r4, r3
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <main+0x158>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <main+0x15c>)
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <main+0x15c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	eef0 1a46 	vmov.f32	s3, s12
 8001c00:	eeb0 1a66 	vmov.f32	s2, s13
 8001c04:	eef0 0a47 	vmov.f32	s1, s14
 8001c08:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0c:	f7ff fbfa 	bl	8001404 <oled_display>
	    }
	    if (BMS_Data.fault_flag)
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <main+0x14c>)
 8001c12:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d092      	beq.n	8001b40 <main+0x48>
	    {
	    	buzzer_on();
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c20:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <main+0x164>)
 8001c22:	f003 fc2d 	bl	8005480 <HAL_GPIO_WritePin>
	    if (voltage_and_current_reading_flag)
 8001c26:	e78b      	b.n	8001b40 <main+0x48>
 8001c28:	200007bc 	.word	0x200007bc
 8001c2c:	200006c0 	.word	0x200006c0
 8001c30:	20000830 	.word	0x20000830
 8001c34:	20000678 	.word	0x20000678
 8001c38:	20000805 	.word	0x20000805
 8001c3c:	2000086c 	.word	0x2000086c
 8001c40:	20000870 	.word	0x20000870
 8001c44:	200001f0 	.word	0x200001f0
 8001c48:	2000080c 	.word	0x2000080c
 8001c4c:	20000874 	.word	0x20000874
 8001c50:	20000804 	.word	0x20000804
 8001c54:	20000810 	.word	0x20000810
 8001c58:	20000806 	.word	0x20000806
 8001c5c:	40020800 	.word	0x40020800

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	@ 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	@ 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f006 fb2f 	bl	80082d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <SystemClock_Config+0xcc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <SystemClock_Config+0xd0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cd4:	23a8      	movs	r3, #168	@ 0xa8
 8001cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cdc:	2307      	movs	r3, #7
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 fd45 	bl	8006774 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf0:	f000 fabc 	bl	800226c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2105      	movs	r1, #5
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 ffa6 	bl	8006c64 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d1e:	f000 faa5 	bl	800226c <Error_Handler>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3750      	adds	r7, #80	@ 0x50
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d54:	4a2b      	ldr	r2, [pc, #172]	@ (8001e04 <MX_ADC1_Init+0xd0>)
 8001d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d84:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001d88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da4:	4816      	ldr	r0, [pc, #88]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001da6:	f001 fcfb 	bl	80037a0 <HAL_ADC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001db0:	f000 fa5c 	bl	800226c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001db4:	2306      	movs	r3, #6
 8001db6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dbc:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001dca:	f002 fb2b 	bl	8004424 <HAL_ADCEx_MultiModeConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001dd4:	f000 fa4a 	bl	800226c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001de0:	2303      	movs	r3, #3
 8001de2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_ADC1_Init+0xcc>)
 8001dea:	f002 f87b 	bl	8003ee4 <HAL_ADC_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001df4:	f000 fa3a 	bl	800226c <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000678 	.word	0x20000678
 8001e04:	40012000 	.word	0x40012000

08001e08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0e:	463b      	mov	r3, r7
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <MX_ADC2_Init+0x90>)
 8001e1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e5c:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e5e:	f001 fc9f 	bl	80037a0 <HAL_ADC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001e68:	f000 fa00 	bl	800226c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001e74:	2303      	movs	r3, #3
 8001e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <MX_ADC2_Init+0x8c>)
 8001e7e:	f002 f831 	bl	8003ee4 <HAL_ADC_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001e88:	f000 f9f0 	bl	800226c <Error_Handler>
  // Step 2: Start ADC2 in normal mode before enabling ADC1 dual mode


  /* USER CODE END ADC2_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200006c0 	.word	0x200006c0
 8001e98:	40012100 	.word	0x40012100

08001e9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <MX_I2C1_Init+0x54>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <MX_I2C1_Init+0x58>)
 8001eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eda:	f003 faeb 	bl	80054b4 <HAL_I2C_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ee4:	f000 f9c2 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000768 	.word	0x20000768
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	000186a0 	.word	0x000186a0

08001ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f14:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f1e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f3e:	4814      	ldr	r0, [pc, #80]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f40:	f005 f89c 	bl	800707c <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f4a:	f000 f98f 	bl	800226c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480d      	ldr	r0, [pc, #52]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f5c:	f005 f96d 	bl	800723a <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f66:	f000 f981 	bl	800226c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f72:	463b      	mov	r3, r7
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	@ (8001f90 <MX_TIM2_Init+0x98>)
 8001f78:	f005 fb6c 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f82:	f000 f973 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200007bc 	.word	0x200007bc

08001f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_DMA_Init+0x3c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <MX_DMA_Init+0x3c>)
 8001fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_DMA_Init+0x3c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2038      	movs	r0, #56	@ 0x38
 8001fbc:	f002 fb53 	bl	8004666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fc0:	2038      	movs	r0, #56	@ 0x38
 8001fc2:	f002 fb6c 	bl	800469e <HAL_NVIC_EnableIRQ>

}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b99      	ldr	r3, [pc, #612]	@ (8002254 <MX_GPIO_Init+0x280>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a98      	ldr	r2, [pc, #608]	@ (8002254 <MX_GPIO_Init+0x280>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b96      	ldr	r3, [pc, #600]	@ (8002254 <MX_GPIO_Init+0x280>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b92      	ldr	r3, [pc, #584]	@ (8002254 <MX_GPIO_Init+0x280>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a91      	ldr	r2, [pc, #580]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b8f      	ldr	r3, [pc, #572]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b8b      	ldr	r3, [pc, #556]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a8a      	ldr	r2, [pc, #552]	@ (8002254 <MX_GPIO_Init+0x280>)
 800202c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b84      	ldr	r3, [pc, #528]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a83      	ldr	r2, [pc, #524]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b81      	ldr	r3, [pc, #516]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b7d      	ldr	r3, [pc, #500]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a7c      	ldr	r2, [pc, #496]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b7a      	ldr	r3, [pc, #488]	@ (8002254 <MX_GPIO_Init+0x280>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <MX_GPIO_Init+0x280>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b73      	ldr	r3, [pc, #460]	@ (8002254 <MX_GPIO_Init+0x280>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	4870      	ldr	r0, [pc, #448]	@ (8002258 <MX_GPIO_Init+0x284>)
 8002098:	f003 f9f2 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	486e      	ldr	r0, [pc, #440]	@ (800225c <MX_GPIO_Init+0x288>)
 80020a2:	f003 f9ed 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020a6:	2200      	movs	r2, #0
 80020a8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80020ac:	486c      	ldr	r0, [pc, #432]	@ (8002260 <MX_GPIO_Init+0x28c>)
 80020ae:	f003 f9e7 	bl	8005480 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80020b2:	2308      	movs	r3, #8
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4863      	ldr	r0, [pc, #396]	@ (8002258 <MX_GPIO_Init+0x284>)
 80020ca:	f002 ff41 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	485d      	ldr	r0, [pc, #372]	@ (800225c <MX_GPIO_Init+0x288>)
 80020e6:	f002 ff33 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80020ea:	2308      	movs	r3, #8
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fa:	2305      	movs	r3, #5
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4855      	ldr	r0, [pc, #340]	@ (800225c <MX_GPIO_Init+0x288>)
 8002106:	f002 ff23 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4851      	ldr	r0, [pc, #324]	@ (8002264 <MX_GPIO_Init+0x290>)
 8002120:	f002 ff16 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002124:	2310      	movs	r3, #16
 8002126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002134:	2306      	movs	r3, #6
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4849      	ldr	r0, [pc, #292]	@ (8002264 <MX_GPIO_Init+0x290>)
 8002140:	f002 ff06 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002144:	23e0      	movs	r3, #224	@ 0xe0
 8002146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002154:	2305      	movs	r3, #5
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4841      	ldr	r0, [pc, #260]	@ (8002264 <MX_GPIO_Init+0x290>)
 8002160:	f002 fef6 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002164:	2304      	movs	r3, #4
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	483c      	ldr	r0, [pc, #240]	@ (8002268 <MX_GPIO_Init+0x294>)
 8002178:	f002 feea 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800217c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218e:	2305      	movs	r3, #5
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4833      	ldr	r0, [pc, #204]	@ (8002268 <MX_GPIO_Init+0x294>)
 800219a:	f002 fed9 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800219e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80021a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	482a      	ldr	r0, [pc, #168]	@ (8002260 <MX_GPIO_Init+0x28c>)
 80021b8:	f002 feca 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80021bc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ce:	2306      	movs	r3, #6
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4820      	ldr	r0, [pc, #128]	@ (800225c <MX_GPIO_Init+0x288>)
 80021da:	f002 feb9 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80021de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	481c      	ldr	r0, [pc, #112]	@ (8002264 <MX_GPIO_Init+0x290>)
 80021f4:	f002 feac 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80021f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800220a:	230a      	movs	r3, #10
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4813      	ldr	r0, [pc, #76]	@ (8002264 <MX_GPIO_Init+0x290>)
 8002216:	f002 fe9b 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800221a:	2320      	movs	r3, #32
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	480c      	ldr	r0, [pc, #48]	@ (8002260 <MX_GPIO_Init+0x28c>)
 800222e:	f002 fe8f 	bl	8004f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002232:	2302      	movs	r3, #2
 8002234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002236:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800223a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4804      	ldr	r0, [pc, #16]	@ (8002258 <MX_GPIO_Init+0x284>)
 8002248:	f002 fe82 	bl	8004f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800224c:	bf00      	nop
 800224e:	3730      	adds	r7, #48	@ 0x30
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	40021000 	.word	0x40021000
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400

0800226c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002270:	b672      	cpsid	i
}
 8002272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <Error_Handler+0x8>

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	4a0f      	ldr	r2, [pc, #60]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228c:	6453      	str	r3, [r2, #68]	@ 0x44
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	@ 0x30
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a50      	ldr	r2, [pc, #320]	@ (8002428 <HAL_ADC_MspInit+0x160>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d16c      	bne.n	80023c4 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b4f      	ldr	r3, [pc, #316]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a4e      	ldr	r2, [pc, #312]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b4c      	ldr	r3, [pc, #304]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	4b48      	ldr	r3, [pc, #288]	@ (800242c <HAL_ADC_MspInit+0x164>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a47      	ldr	r2, [pc, #284]	@ (800242c <HAL_ADC_MspInit+0x164>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b45      	ldr	r3, [pc, #276]	@ (800242c <HAL_ADC_MspInit+0x164>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002322:	230a      	movs	r3, #10
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002326:	2303      	movs	r3, #3
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	483e      	ldr	r0, [pc, #248]	@ (8002430 <HAL_ADC_MspInit+0x168>)
 8002336:	f002 fe0b 	bl	8004f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    if (hadc->Instance == ADC1 && hadc->Init.DMAContinuousRequests == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a3a      	ldr	r2, [pc, #232]	@ (8002428 <HAL_ADC_MspInit+0x160>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d16c      	bne.n	800241e <HAL_ADC_MspInit+0x156>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800234a:	2b01      	cmp	r3, #1
 800234c:	d167      	bne.n	800241e <HAL_ADC_MspInit+0x156>
    {
    	hdma_adc1.Instance = DMA2_Stream0;
 800234e:	4b39      	ldr	r3, [pc, #228]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002350:	4a39      	ldr	r2, [pc, #228]	@ (8002438 <HAL_ADC_MspInit+0x170>)
 8002352:	601a      	str	r2, [r3, #0]
    	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002354:	4b37      	ldr	r3, [pc, #220]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
    	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800235a:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
    	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002360:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
    	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002366:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800236c:	611a      	str	r2, [r3, #16]
    	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002374:	615a      	str	r2, [r3, #20]
    	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002376:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002378:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800237c:	619a      	str	r2, [r3, #24]
    	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800237e:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002384:	61da      	str	r2, [r3, #28]
    	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002386:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
    	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800238c:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 800238e:	2204      	movs	r2, #4
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24
    	    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002392:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 8002394:	2203      	movs	r2, #3
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
    	    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002398:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
    	    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 80023a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023a6:	4823      	ldr	r0, [pc, #140]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 80023a8:	f002 f994 	bl	80046d4 <HAL_DMA_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_ADC_MspInit+0xee>
    	    {
    	      Error_Handler();
 80023b2:	f7ff ff5b 	bl	800226c <Error_Handler>
    	    }

    	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80023bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_ADC_MspInit+0x16c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c2:	e02c      	b.n	800241e <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_ADC_MspInit+0x174>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d127      	bne.n	800241e <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a15      	ldr	r2, [pc, #84]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b13      	ldr	r3, [pc, #76]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_ADC_MspInit+0x164>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002406:	2304      	movs	r3, #4
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	@ (8002430 <HAL_ADC_MspInit+0x168>)
 800241a:	f002 fd99 	bl	8004f50 <HAL_GPIO_Init>
}
 800241e:	bf00      	nop
 8002420:	3730      	adds	r7, #48	@ 0x30
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40012000 	.word	0x40012000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000
 8002434:	20000708 	.word	0x20000708
 8002438:	40026410 	.word	0x40026410
 800243c:	40012100 	.word	0x40012100

08002440 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <HAL_ADC_MspDeInit+0x58>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10f      	bne.n	8002472 <HAL_ADC_MspDeInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_ADC_MspDeInit+0x5c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	4a11      	ldr	r2, [pc, #68]	@ (800249c <HAL_ADC_MspDeInit+0x5c>)
 8002458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 800245e:	210a      	movs	r1, #10
 8002460:	480f      	ldr	r0, [pc, #60]	@ (80024a0 <HAL_ADC_MspDeInit+0x60>)
 8002462:	f002 ff11 	bl	8005288 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	4618      	mov	r0, r3
 800246c:	f002 f9e0 	bl	8004830 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8002470:	e00e      	b.n	8002490 <HAL_ADC_MspDeInit+0x50>
  else if(hadc->Instance==ADC2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <HAL_ADC_MspDeInit+0x64>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d109      	bne.n	8002490 <HAL_ADC_MspDeInit+0x50>
    __HAL_RCC_ADC2_CLK_DISABLE();
 800247c:	4b07      	ldr	r3, [pc, #28]	@ (800249c <HAL_ADC_MspDeInit+0x5c>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	4a06      	ldr	r2, [pc, #24]	@ (800249c <HAL_ADC_MspDeInit+0x5c>)
 8002482:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002486:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8002488:	2104      	movs	r1, #4
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <HAL_ADC_MspDeInit+0x60>)
 800248c:	f002 fefc 	bl	8005288 <HAL_GPIO_DeInit>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40012000 	.word	0x40012000
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40012100 	.word	0x40012100

080024a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <HAL_I2C_MspInit+0x84>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d12c      	bne.n	8002524 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ec:	2312      	movs	r3, #18
 80024ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024f8:	2304      	movs	r3, #4
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	@ (8002534 <HAL_I2C_MspInit+0x8c>)
 8002504:	f002 fd24 	bl	8004f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 8002512:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002516:	6413      	str	r3, [r2, #64]	@ 0x40
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_I2C_MspInit+0x88>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	@ 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40005400 	.word	0x40005400
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400

08002538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002548:	d10d      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_TIM_Base_MspInit+0x3c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <NMI_Handler+0x4>

08002580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <HardFault_Handler+0x4>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <MemManage_Handler+0x4>

08002590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <UsageFault_Handler+0x4>

080025a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ce:	f001 f8a3 	bl	8003718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <DMA2_Stream0_IRQHandler+0x10>)
 80025de:	f002 fa4d 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000708 	.word	0x20000708

080025ec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)  // Ensure callback is triggered by ADC1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002630 <HAL_ADC_ConvCpltCallback+0x44>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d112      	bne.n	8002624 <HAL_ADC_ConvCpltCallback+0x38>
    {
        voltage_and_current_reading_flag = 1;  // Set flag when DMA transfer is done
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x48>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
        temperature_counter++;  // Increment temperature counter every 0.4s
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x4c>)
 800260e:	701a      	strb	r2, [r3, #0]
        if (temperature_counter >= 13)
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d905      	bls.n	8002624 <HAL_ADC_ConvCpltCallback+0x38>
        {
        	temperature_counter = 0; // reset temperature counter
 8002618:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_ADC_ConvCpltCallback+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
        	temperature_update_flag = 1; // set a flag for temperature update
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_ADC_ConvCpltCallback+0x50>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012000 	.word	0x40012000
 8002634:	20000805 	.word	0x20000805
 8002638:	20000807 	.word	0x20000807
 800263c:	20000806 	.word	0x20000806

08002640 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002648:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800264c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002658:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800265c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002660:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002668:	e000      	b.n	800266c <ITM_SendChar+0x2c>
    {
      __NOP();
 800266a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800266c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f9      	beq.n	800266a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002676:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  return 1;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_kill>:

int _kill(int pid, int sig)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026a8:	f005 fe66 	bl	8008378 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2216      	movs	r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_exit>:

void _exit (int status)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffe7 	bl	800269e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <_exit+0x12>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
  }

  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f840 	bl	80027ae <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
  }
  return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800276e:	605a      	str	r2, [r3, #4]
  return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <__io_putchar>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int __io_putchar(int ch) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);  // Send character to SWV ITM console
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff41 	bl	8002640 <ITM_SendChar>
    return ch;
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 fdbe 	bl	8008378 <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20020000 	.word	0x20020000
 8002828:	00000400 	.word	0x00000400
 800282c:	20000808 	.word	0x20000808
 8002830:	200009c8 	.word	0x200009c8

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
    /* FPU settings */
	//printf("[DEBUG] SCB->VTOR: 0x%08lX\n", SCB->VTOR);
    #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* Set CP10 and CP11 Full Access */
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <SystemInit+0x28>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	4a07      	ldr	r2, [pc, #28]	@ (800285c <SystemInit+0x28>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location */
    #if defined (USER_VECT_TAB_ADDRESS)
        SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
    #else
        SCB->VTOR = 0x08000000;  // ✅ Always set VTOR to Flash
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <SystemInit+0x28>)
 800284a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800284e:	609a      	str	r2, [r3, #8]
    #endif
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <processing>:
void processing(void);


//soh wrong triggered. soc miscalcualted after the voltage spike.current is 0 A?
void processing(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	determine_status();
 8002864:	f000 f894 	bl	8002990 <determine_status>
	// oled requires voltage, current, soc, power, temperature, soh, status, hours, minutes
	if ((batteryStatus == IDLE || batteryStatus == FULL)&&power < 0.5)
 8002868:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <processing+0x114>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <processing+0x18>
 8002870:	4b40      	ldr	r3, [pc, #256]	@ (8002974 <processing+0x114>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d110      	bne.n	800289a <processing+0x3a>
 8002878:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <processing+0x118>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d506      	bpl.n	800289a <processing+0x3a>
	{
		BMS_Data.stateOfCharge_percent = calculate_soc();
 800288c:	f000 f908 	bl	8002aa0 <calculate_soc>
 8002890:	4603      	mov	r3, r0
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b39      	ldr	r3, [pc, #228]	@ (800297c <processing+0x11c>)
 8002896:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	if (batteryStatus == FULL && (!BMS_Data.charge_up_flag))
 800289a:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <processing+0x114>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d10f      	bne.n	80028c2 <processing+0x62>
 80028a2:	4b36      	ldr	r3, [pc, #216]	@ (800297c <processing+0x11c>)
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <processing+0x62>
	{
		BMS_Data.charge_up_flag = 1;
 80028ac:	4b33      	ldr	r3, [pc, #204]	@ (800297c <processing+0x11c>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		BMS_Data.stateOfHealth_percent = calculate_soh();
 80028b4:	f000 f924 	bl	8002b00 <calculate_soh>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <processing+0x11c>)
 80028be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}
	if (batteryStatus == CHARGING  &&  current > 50)
 80028c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002974 <processing+0x114>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d14f      	bne.n	800296a <processing+0x10a>
 80028ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <processing+0x120>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002984 <processing+0x124>
 80028d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	dd45      	ble.n	800296a <processing+0x10a>
	{
		power = calculate_power();
 80028de:	f000 f94d 	bl	8002b7c <calculate_power>
 80028e2:	eef0 7a40 	vmov.f32	s15, s0
 80028e6:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <processing+0x118>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
		number_of_sample++;
 80028ec:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <processing+0x128>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <processing+0x128>)
 80028f4:	6013      	str	r3, [r2, #0]
		BMS_Data.averageVoltage_mV = calculate_average_voltage();
 80028f6:	f000 fa05 	bl	8002d04 <calculate_average_voltage>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <processing+0x11c>)
 8002900:	84da      	strh	r2, [r3, #38]	@ 0x26
		BMS_Data.averageCurrent_mA = calculate_average_current();
 8002902:	f000 fa2d 	bl	8002d60 <calculate_average_current>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <processing+0x11c>)
 800290c:	851a      	strh	r2, [r3, #40]	@ 0x28
		BMS_Data.averagePower_mW = calculate_average_power();
 800290e:	f000 fa95 	bl	8002e3c <calculate_average_power>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <processing+0x11c>)
 8002918:	859a      	strh	r2, [r3, #44]	@ 0x2c
		BMS_Data.averageTemperature_C = calculate_average_temperature();
 800291a:	f000 fa4f 	bl	8002dbc <calculate_average_temperature>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	4b16      	ldr	r3, [pc, #88]	@ (800297c <processing+0x11c>)
 8002924:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		calculate_total_energy_charged();
 8002928:	f000 fabe 	bl	8002ea8 <calculate_total_energy_charged>
		record_total_charging_time();
 800292c:	f000 fb78 	bl	8003020 <record_total_charging_time>
		track_maximum_voltage_current_temperature();
 8002930:	f000 fb1e 	bl	8002f70 <track_maximum_voltage_current_temperature>
		detect_overvoltage();
 8002934:	f000 fb92 	bl	800305c <detect_overvoltage>
		detect_undervoltage();
 8002938:	f000 fbac 	bl	8003094 <detect_undervoltage>
		detect_overcurrent();
 800293c:	f000 fbc6 	bl	80030cc <detect_overcurrent>
		detect_short_circuit();
 8002940:	f000 fbe0 	bl	8003104 <detect_short_circuit>


		if (++tracker >=30)
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <processing+0x12c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <processing+0x12c>)
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <processing+0x12c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b1d      	cmp	r3, #29
 8002956:	d908      	bls.n	800296a <processing+0x10a>
		{
			tracker = 0;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <processing+0x12c>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
			BMS_SaveToEEPROM();
 800295e:	f7fe fb2b 	bl	8000fb8 <BMS_SaveToEEPROM>
			BMS_Data_Received_Init();
 8002962:	f7fe fb1d 	bl	8000fa0 <BMS_Data_Received_Init>
			BMS_LoadFromEEPROM();
 8002966:	f7fe fc23 	bl	80011b0 <BMS_LoadFromEEPROM>
		}
	}

	calculate_remaining_time();
 800296a:	f000 f929 	bl	8002bc0 <calculate_remaining_time>
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000804 	.word	0x20000804
 8002978:	2000080c 	.word	0x2000080c
 800297c:	200001f0 	.word	0x200001f0
 8002980:	20000870 	.word	0x20000870
 8002984:	42480000 	.word	0x42480000
 8002988:	20000824 	.word	0x20000824
 800298c:	2000082d 	.word	0x2000082d

08002990 <determine_status>:

void determine_status(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	// this function is used to determine the status of the battery, either in charging/full/idle
	// if voltage difference is positive, then it is charging, otherwise, idel
	if (voltage - previous_voltage >= 75 ) // current voltage is 0.01V greater than the last voltage
 8002994:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <determine_status+0xf0>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <determine_status+0xf4>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002a88 <determine_status+0xf8>
 80029a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	db07      	blt.n	80029c2 <determine_status+0x32>
	{
		batteryStatus = CHARGING;
 80029b2:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <determine_status+0xfc>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		same_voltage_counter = 0;
 80029b8:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <determine_status+0x100>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e031      	b.n	8002a26 <determine_status+0x96>
	}
	//if no voltage variation, very low power(cause by noise)
	else if (voltage-previous_voltage <50 && previous_voltage - voltage <50 && power < 0.5)//a noise buffer range
 80029c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <determine_status+0xf0>)
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a84 <determine_status+0xf4>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002a94 <determine_status+0x104>
 80029d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	d522      	bpl.n	8002a26 <determine_status+0x96>
 80029e0:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <determine_status+0xf4>)
 80029e2:	ed93 7a00 	vldr	s14, [r3]
 80029e6:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <determine_status+0xf0>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002a94 <determine_status+0x104>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d513      	bpl.n	8002a26 <determine_status+0x96>
 80029fe:	4b26      	ldr	r3, [pc, #152]	@ (8002a98 <determine_status+0x108>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d509      	bpl.n	8002a26 <determine_status+0x96>
	{
		same_voltage_counter++;// if it is not continuously increasing, reset to zero
 8002a12:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <determine_status+0x100>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <determine_status+0x100>)
 8002a22:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_voltage = voltage;
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <determine_status+0xf0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <determine_status+0xf4>)
 8002a2c:	6013      	str	r3, [r2, #0]

	if (same_voltage_counter >=13) // if the same voltage state last for 10s
 8002a2e:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <determine_status+0x100>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	db14      	blt.n	8002a6c <determine_status+0xdc>
	{
		if (voltage >=4150)
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <determine_status+0xf0>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002a9c <determine_status+0x10c>
 8002a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	db03      	blt.n	8002a5e <determine_status+0xce>
		{
			batteryStatus = FULL;
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <determine_status+0xfc>)
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <determine_status+0xd4>
		}
		else
		{
			batteryStatus = IDLE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <determine_status+0xfc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
		}
		same_voltage_counter = 0;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <determine_status+0x100>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
	}
	previous_voltage = voltage;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <determine_status+0xf0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <determine_status+0xf4>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2000086c 	.word	0x2000086c
 8002a84:	2000081c 	.word	0x2000081c
 8002a88:	42960000 	.word	0x42960000
 8002a8c:	20000804 	.word	0x20000804
 8002a90:	20000820 	.word	0x20000820
 8002a94:	42480000 	.word	0x42480000
 8002a98:	2000080c 	.word	0x2000080c
 8002a9c:	4581b000 	.word	0x4581b000

08002aa0 <calculate_soc>:
static int calculate_soc(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
    int soc = (voltage - MINIMUM_VOLTAGE_MV) * 100 / (MAXIMUM_VOLTAGE_MV - MINIMUM_VOLTAGE_MV);
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <calculate_soc+0x50>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002af4 <calculate_soc+0x54>
 8002ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ab4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002af8 <calculate_soc+0x58>
 8002ab8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002abc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002afc <calculate_soc+0x5c>
 8002ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac8:	ee17 3a90 	vmov	r3, s15
 8002acc:	607b      	str	r3, [r7, #4]
    if (soc < 0) soc = 0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da01      	bge.n	8002ad8 <calculate_soc+0x38>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
    if (soc > 100) soc = 100;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	dd01      	ble.n	8002ae2 <calculate_soc+0x42>
 8002ade:	2364      	movs	r3, #100	@ 0x64
 8002ae0:	607b      	str	r3, [r7, #4]
    return soc;
 8002ae2:	687b      	ldr	r3, [r7, #4]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	2000086c 	.word	0x2000086c
 8002af4:	452be000 	.word	0x452be000
 8002af8:	42c80000 	.word	0x42c80000
 8002afc:	44b54000 	.word	0x44b54000

08002b00 <calculate_soh>:
static int calculate_soh(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
    if (current == 0.0f && voltage >= 4000.0f)  // Battery fully charged
 8002b06:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <calculate_soh+0x68>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	d121      	bne.n	8002b5a <calculate_soh+0x5a>
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <calculate_soh+0x6c>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002b70 <calculate_soh+0x70>
 8002b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	db17      	blt.n	8002b5a <calculate_soh+0x5a>
    {
        // Example Formula: Compare maximum voltage with nominal voltage
    	uint8_t soh = (voltage / MAXIMUM_VOLTAGE_MV) * 100;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <calculate_soh+0x6c>)
 8002b2c:	ed93 7a00 	vldr	s14, [r3]
 8002b30:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002b74 <calculate_soh+0x74>
 8002b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b38:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002b78 <calculate_soh+0x78>
 8002b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b44:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b48:	793b      	ldrb	r3, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]

        // Ensure SOH is within 0-100%
        if (soh > 100) soh = 100;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <calculate_soh+0x56>
 8002b52:	2364      	movs	r3, #100	@ 0x64
 8002b54:	73fb      	strb	r3, [r7, #15]
        if (soh < 0) soh = 0;
        return soh;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	e000      	b.n	8002b5c <calculate_soh+0x5c>
    }
    else
    {
        return 0;  // Not fully charged, can't measure SOH
 8002b5a:	2300      	movs	r3, #0
    }

}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	20000870 	.word	0x20000870
 8002b6c:	2000086c 	.word	0x2000086c
 8002b70:	457a0000 	.word	0x457a0000
 8002b74:	45834000 	.word	0x45834000
 8002b78:	42c80000 	.word	0x42c80000

08002b7c <calculate_power>:

static inline float calculate_power(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
    return voltage/1000 * current/1000; // Convert mV and mA to W
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <calculate_power+0x34>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002bb4 <calculate_power+0x38>
 8002b8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <calculate_power+0x3c>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b98:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002bb4 <calculate_power+0x38>
 8002b9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ba0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	2000086c 	.word	0x2000086c
 8002bb4:	447a0000 	.word	0x447a0000
 8002bb8:	20000870 	.word	0x20000870
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <calculate_remaining_time>:
static void calculate_remaining_time(void)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	if (batteryStatus == CHARGING && power > 0.5)
 8002bc4:	4b46      	ldr	r3, [pc, #280]	@ (8002ce0 <calculate_remaining_time+0x120>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d175      	bne.n	8002cb8 <calculate_remaining_time+0xf8>
 8002bcc:	4b45      	ldr	r3, [pc, #276]	@ (8002ce4 <calculate_remaining_time+0x124>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	dd6b      	ble.n	8002cb8 <calculate_remaining_time+0xf8>
	{
		time_pack.secs = ((1.0-(float)BMS_Data.stateOfCharge_percent/100) *(float)BATTERY_CAPACITY_MWH/1000 * 3600) / power;
 8002be0:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <calculate_remaining_time+0x128>)
 8002be2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bee:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002cec <calculate_remaining_time+0x12c>
 8002bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bf6:	ee16 0a90 	vmov	r0, s13
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	493a      	ldr	r1, [pc, #232]	@ (8002cf0 <calculate_remaining_time+0x130>)
 8002c08:	f7fd fb3e 	bl	8000288 <__aeabi_dsub>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	a32e      	add	r3, pc, #184	@ (adr r3, 8002cd0 <calculate_remaining_time+0x110>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fced 	bl	80005f8 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <calculate_remaining_time+0x134>)
 8002c2c:	f7fd fe0e 	bl	800084c <__aeabi_ddiv>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	a327      	add	r3, pc, #156	@ (adr r3, 8002cd8 <calculate_remaining_time+0x118>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fcdb 	bl	80005f8 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4614      	mov	r4, r2
 8002c48:	461d      	mov	r5, r3
 8002c4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ce4 <calculate_remaining_time+0x124>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc7a 	bl	8000548 <__aeabi_f2d>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fdf6 	bl	800084c <__aeabi_ddiv>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ff76 	bl	8000b58 <__aeabi_d2iz>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002c70:	6093      	str	r3, [r2, #8]
		time_pack.hours = time_pack.secs / 3600;
 8002c72:	4b21      	ldr	r3, [pc, #132]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <calculate_remaining_time+0x13c>)
 8002c78:	fb82 1203 	smull	r1, r2, r2, r3
 8002c7c:	441a      	add	r2, r3
 8002c7e:	12d2      	asrs	r2, r2, #11
 8002c80:	17db      	asrs	r3, r3, #31
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002c86:	6013      	str	r3, [r2, #0]
		time_pack.minutes = time_pack.secs % 3600 / 60;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <calculate_remaining_time+0x13c>)
 8002c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8002c92:	4413      	add	r3, r2
 8002c94:	12d9      	asrs	r1, r3, #11
 8002c96:	17d3      	asrs	r3, r2, #31
 8002c98:	1acb      	subs	r3, r1, r3
 8002c9a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <calculate_remaining_time+0x140>)
 8002ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	1152      	asrs	r2, r2, #5
 8002cae:	17db      	asrs	r3, r3, #31
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a11      	ldr	r2, [pc, #68]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002cb4:	6053      	str	r3, [r2, #4]
 8002cb6:	e006      	b.n	8002cc6 <calculate_remaining_time+0x106>
	}
	else
	{
		time_pack.hours = 0;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
		time_pack.minutes = 0;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <calculate_remaining_time+0x138>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	605a      	str	r2, [r3, #4]
	}

}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	40b89c00 	.word	0x40b89c00
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	40ac2000 	.word	0x40ac2000
 8002ce0:	20000804 	.word	0x20000804
 8002ce4:	2000080c 	.word	0x2000080c
 8002ce8:	200001f0 	.word	0x200001f0
 8002cec:	42c80000 	.word	0x42c80000
 8002cf0:	3ff00000 	.word	0x3ff00000
 8002cf4:	408f4000 	.word	0x408f4000
 8002cf8:	20000810 	.word	0x20000810
 8002cfc:	91a2b3c5 	.word	0x91a2b3c5
 8002d00:	88888889 	.word	0x88888889

08002d04 <calculate_average_voltage>:
static inline uint16_t calculate_average_voltage(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
	return BMS_Data.averageVoltage_mV + (voltage - BMS_Data.averageVoltage_mV) / number_of_sample;
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <calculate_average_voltage+0x50>)
 8002d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d14:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <calculate_average_voltage+0x54>)
 8002d16:	edd3 6a00 	vldr	s13, [r3]
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <calculate_average_voltage+0x50>)
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d26:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <calculate_average_voltage+0x58>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d42:	ee17 3a90 	vmov	r3, s15
 8002d46:	b29b      	uxth	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	200001f0 	.word	0x200001f0
 8002d58:	2000086c 	.word	0x2000086c
 8002d5c:	20000824 	.word	0x20000824

08002d60 <calculate_average_current>:

static inline uint16_t calculate_average_current(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
	return BMS_Data.averageCurrent_mA + (current - BMS_Data.averageCurrent_mA) / number_of_sample;
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <calculate_average_current+0x50>)
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d70:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <calculate_average_current+0x54>)
 8002d72:	edd3 6a00 	vldr	s13, [r3]
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <calculate_average_current+0x50>)
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d82:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <calculate_average_current+0x58>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d92:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9e:	ee17 3a90 	vmov	r3, s15
 8002da2:	b29b      	uxth	r3, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	200001f0 	.word	0x200001f0
 8002db4:	20000870 	.word	0x20000870
 8002db8:	20000824 	.word	0x20000824

08002dbc <calculate_average_temperature>:

static uint8_t calculate_average_temperature(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
	if (temperature > 10)
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <calculate_average_temperature+0x74>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	dd23      	ble.n	8002e1e <calculate_average_temperature+0x62>
	{
		return BMS_Data.averageTemperature_C + (temperature - BMS_Data.averageTemperature_C) / number_of_sample;
 8002dd6:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <calculate_average_temperature+0x78>)
 8002dd8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <calculate_average_temperature+0x74>)
 8002de6:	edd3 6a00 	vldr	s13, [r3]
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <calculate_average_temperature+0x78>)
 8002dec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <calculate_average_temperature+0x7c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e08:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e18:	793b      	ldrb	r3, [r7, #4]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e002      	b.n	8002e24 <calculate_average_temperature+0x68>
	}
	else
	{
		return BMS_Data.averageTemperature_C;
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <calculate_average_temperature+0x78>)
 8002e20:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	}

}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000874 	.word	0x20000874
 8002e34:	200001f0 	.word	0x200001f0
 8002e38:	20000824 	.word	0x20000824

08002e3c <calculate_average_power>:

static inline uint16_t calculate_average_power(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	ed2d 8b02 	vpush	{d8}
 8002e42:	af00      	add	r7, sp, #0
	return BMS_Data.averagePower_mW + (calculate_power() * 1000 - BMS_Data.averagePower_mW) / number_of_sample;
 8002e44:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <calculate_average_power+0x5c>)
 8002e46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002e50:	f7ff fe94 	bl	8002b7c <calculate_power>
 8002e54:	eef0 7a40 	vmov.f32	s15, s0
 8002e58:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002e9c <calculate_average_power+0x60>
 8002e5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e60:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <calculate_average_power+0x5c>)
 8002e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <calculate_average_power+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e80:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e88:	ee17 3a90 	vmov	r3, s15
 8002e8c:	b29b      	uxth	r3, r3
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	ecbd 8b02 	vpop	{d8}
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	200001f0 	.word	0x200001f0
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	20000824 	.word	0x20000824
 8002ea4:	00000000 	.word	0x00000000

08002ea8 <calculate_total_energy_charged>:


static void calculate_total_energy_charged(void)
{
 8002ea8:	b5b0      	push	{r4, r5, r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
    energyAccumulator += power * TIME_INTERVAL_S * 1000.0f / 3600.0f;
 8002eac:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <calculate_total_energy_charged+0xb8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb49 	bl	8000548 <__aeabi_f2d>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	460d      	mov	r5, r1
 8002eba:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <calculate_total_energy_charged+0xbc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fb42 	bl	8000548 <__aeabi_f2d>
 8002ec4:	a322      	add	r3, pc, #136	@ (adr r3, 8002f50 <calculate_total_energy_charged+0xa8>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fb95 	bl	80005f8 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <calculate_total_energy_charged+0xc0>)
 8002edc:	f7fd fb8c 	bl	80005f8 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	a31b      	add	r3, pc, #108	@ (adr r3, 8002f58 <calculate_total_energy_charged+0xb0>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd fcad 	bl	800084c <__aeabi_ddiv>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7fd f9c7 	bl	800028c <__adddf3>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe4f 	bl	8000ba8 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <calculate_total_energy_charged+0xb8>)
 8002f0e:	6013      	str	r3, [r2, #0]
    while (energyAccumulator >= 1.0f) {
 8002f10:	e00f      	b.n	8002f32 <calculate_total_energy_charged+0x8a>
        BMS_Data.totalEnergyCharged_mWh++;
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <calculate_total_energy_charged+0xc4>)
 8002f14:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <calculate_total_energy_charged+0xc4>)
 8002f1c:	861a      	strh	r2, [r3, #48]	@ 0x30
        energyAccumulator -= 1.0f; // Remove the integer part
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <calculate_total_energy_charged+0xb8>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <calculate_total_energy_charged+0xb8>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
    while (energyAccumulator >= 1.0f) {
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <calculate_total_energy_charged+0xb8>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	dae5      	bge.n	8002f12 <calculate_total_energy_charged+0x6a>
    }
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4c:	f3af 8000 	nop.w
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	3fe99999 	.word	0x3fe99999
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	40ac2000 	.word	0x40ac2000
 8002f60:	20000828 	.word	0x20000828
 8002f64:	2000080c 	.word	0x2000080c
 8002f68:	408f4000 	.word	0x408f4000
 8002f6c:	200001f0 	.word	0x200001f0

08002f70 <track_maximum_voltage_current_temperature>:
static void track_maximum_voltage_current_temperature(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
	if (voltage>BMS_Data.maxVoltage_mV)
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8002f76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f80:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <track_maximum_voltage_current_temperature+0xa4>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	d509      	bpl.n	8002fa4 <track_maximum_voltage_current_temperature+0x34>
	{
		BMS_Data.maxVoltage_mV = voltage;
 8002f90:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <track_maximum_voltage_current_temperature+0xa4>)
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9a:	ee17 3a90 	vmov	r3, s15
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8002fa2:	865a      	strh	r2, [r3, #50]	@ 0x32
	}
	if (current>BMS_Data.maxCurrent_mA)
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8002fa6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <track_maximum_voltage_current_temperature+0xa8>)
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	d509      	bpl.n	8002fd4 <track_maximum_voltage_current_temperature+0x64>
	{
		BMS_Data.maxCurrent_mA = current;
 8002fc0:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <track_maximum_voltage_current_temperature+0xa8>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fca:	ee17 3a90 	vmov	r3, s15
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8002fd2:	869a      	strh	r2, [r3, #52]	@ 0x34
	}
	if (temperature>BMS_Data.maxTemperature_C)
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <track_maximum_voltage_current_temperature+0xac>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d400      	bmi.n	8002ff2 <track_maximum_voltage_current_temperature+0x82>
	{
		BMS_Data.maxTemperature_C = temperature;
	}
}
 8002ff0:	e009      	b.n	8003006 <track_maximum_voltage_current_temperature+0x96>
		BMS_Data.maxTemperature_C = temperature;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <track_maximum_voltage_current_temperature+0xac>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <track_maximum_voltage_current_temperature+0xa0>)
 8003004:	86da      	strh	r2, [r3, #54]	@ 0x36
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	200001f0 	.word	0x200001f0
 8003014:	2000086c 	.word	0x2000086c
 8003018:	20000870 	.word	0x20000870
 800301c:	20000874 	.word	0x20000874

08003020 <record_total_charging_time>:
static void record_total_charging_time(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

	if (++total_charging_time_counter >=5)
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <record_total_charging_time+0x34>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <record_total_charging_time+0x34>)
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <record_total_charging_time+0x34>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b04      	cmp	r3, #4
 8003036:	d908      	bls.n	800304a <record_total_charging_time+0x2a>
	{
		total_charging_time_counter =0;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <record_total_charging_time+0x34>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
		BMS_Data.totalChargingTime_seconds += 4;
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <record_total_charging_time+0x38>)
 8003040:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003042:	3304      	adds	r3, #4
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <record_total_charging_time+0x38>)
 8003048:	871a      	strh	r2, [r3, #56]	@ 0x38
	}
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	2000082c 	.word	0x2000082c
 8003058:	200001f0 	.word	0x200001f0

0800305c <detect_overvoltage>:
	//read the total charged cycles
	//increment the charged cycles and update the eeprom
	return;
}
void detect_overvoltage(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
	if (voltage > MAXIMUM_VOLTAGE_MV)
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <detect_overvoltage+0x2c>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800308c <detect_overvoltage+0x30>
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	dc00      	bgt.n	8003076 <detect_overvoltage+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 8003074:	e003      	b.n	800307e <detect_overvoltage+0x22>
		BMS_Data.fault_flag = 1;
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <detect_overvoltage+0x34>)
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	2000086c 	.word	0x2000086c
 800308c:	45834000 	.word	0x45834000
 8003090:	200001f0 	.word	0x200001f0

08003094 <detect_undervoltage>:
void detect_undervoltage(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	if (voltage < MINIMUM_VOLTAGE_MV)
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <detect_undervoltage+0x2c>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80030c4 <detect_undervoltage+0x30>
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	d400      	bmi.n	80030ae <detect_undervoltage+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 80030ac:	e003      	b.n	80030b6 <detect_undervoltage+0x22>
		BMS_Data.fault_flag = 1;
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <detect_undervoltage+0x34>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	2000086c 	.word	0x2000086c
 80030c4:	452be000 	.word	0x452be000
 80030c8:	200001f0 	.word	0x200001f0

080030cc <detect_overcurrent>:
void detect_overcurrent(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
	if (current>MAXIMUM_CHARGE_CURRENT_MA)
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <detect_overcurrent+0x2c>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80030fc <detect_overcurrent+0x30>
 80030da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	dc00      	bgt.n	80030e6 <detect_overcurrent+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 80030e4:	e003      	b.n	80030ee <detect_overcurrent+0x22>
		BMS_Data.fault_flag = 1;
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <detect_overcurrent+0x34>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	20000870 	.word	0x20000870
 80030fc:	44e10000 	.word	0x44e10000
 8003100:	200001f0 	.word	0x200001f0

08003104 <detect_short_circuit>:
void detect_short_circuit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD_MV && current>SHORT_CIRCUIT_CURRENT_THRESHOLD_MA)
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <detect_short_circuit+0x44>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800314c <detect_short_circuit+0x48>
 8003112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	d400      	bmi.n	800311e <detect_short_circuit+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 800311c:	e00e      	b.n	800313c <detect_short_circuit+0x38>
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD_MV && current>SHORT_CIRCUIT_CURRENT_THRESHOLD_MA)
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <detect_short_circuit+0x4c>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003154 <detect_short_circuit+0x50>
 8003128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	dc00      	bgt.n	8003134 <detect_short_circuit+0x30>
}
 8003132:	e003      	b.n	800313c <detect_short_circuit+0x38>
		BMS_Data.fault_flag = 1;
 8003134:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <detect_short_circuit+0x54>)
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	2000086c 	.word	0x2000086c
 800314c:	453b8000 	.word	0x453b8000
 8003150:	20000870 	.word	0x20000870
 8003154:	459c4000 	.word	0x459c4000
 8003158:	200001f0 	.word	0x200001f0

0800315c <reconfigure_to_dual_mode>:
static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw);
static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw);
void process_voltage_and_current_data(void);

void reconfigure_to_dual_mode(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 8003160:	4808      	ldr	r0, [pc, #32]	@ (8003184 <reconfigure_to_dual_mode+0x28>)
 8003162:	f000 fb60 	bl	8003826 <HAL_ADC_DeInit>
	MX_ADC1_Init();
 8003166:	f7fe fde5 	bl	8001d34 <MX_ADC1_Init>
    //restart dual mode
    HAL_TIM_Base_Start(&htim2);
 800316a:	4807      	ldr	r0, [pc, #28]	@ (8003188 <reconfigure_to_dual_mode+0x2c>)
 800316c:	f003 ffd6 	bl	800711c <HAL_TIM_Base_Start>
    HAL_ADC_Start(&hadc2);
 8003170:	4806      	ldr	r0, [pc, #24]	@ (800318c <reconfigure_to_dual_mode+0x30>)
 8003172:	f000 fb8b 	bl	800388c <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 8);
 8003176:	2208      	movs	r2, #8
 8003178:	4905      	ldr	r1, [pc, #20]	@ (8003190 <reconfigure_to_dual_mode+0x34>)
 800317a:	4802      	ldr	r0, [pc, #8]	@ (8003184 <reconfigure_to_dual_mode+0x28>)
 800317c:	f000 fd16 	bl	8003bac <HAL_ADC_Start_DMA>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000678 	.word	0x20000678
 8003188:	200007bc 	.word	0x200007bc
 800318c:	200006c0 	.word	0x200006c0
 8003190:	20000830 	.word	0x20000830

08003194 <reconfigure_to_temperature_channel>:


void reconfigure_to_temperature_channel(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
	// stop dual mode
	HAL_ADC_Stop_DMA(&hadc1);
 800319a:	4831      	ldr	r0, [pc, #196]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 800319c:	f000 fe26 	bl	8003dec <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop(&hadc2);
 80031a0:	4830      	ldr	r0, [pc, #192]	@ (8003264 <reconfigure_to_temperature_channel+0xd0>)
 80031a2:	f000 fc45 	bl	8003a30 <HAL_ADC_Stop>
	HAL_TIM_Base_Stop(&htim2);
 80031a6:	4830      	ldr	r0, [pc, #192]	@ (8003268 <reconfigure_to_temperature_channel+0xd4>)
 80031a8:	f004 f820 	bl	80071ec <HAL_TIM_Base_Stop>

	//switch ADC1 to independent mode

	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 80031ac:	482c      	ldr	r0, [pc, #176]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031ae:	f000 fb3a 	bl	8003826 <HAL_ADC_DeInit>

	hadc1.Instance = ADC1;
 80031b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031b4:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <reconfigure_to_temperature_channel+0xd8>)
 80031b6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031b8:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031be:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031c0:	4b27      	ldr	r3, [pc, #156]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80031c6:	4b26      	ldr	r3, [pc, #152]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80031cc:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031d2:	4b23      	ldr	r3, [pc, #140]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031da:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031dc:	4a24      	ldr	r2, [pc, #144]	@ (8003270 <reconfigure_to_temperature_channel+0xdc>)
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80031ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	615a      	str	r2, [r3, #20]

    HAL_ADC_Init(&hadc1);
 8003200:	4817      	ldr	r0, [pc, #92]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 8003202:	f000 facd 	bl	80037a0 <HAL_ADC_Init>

    ADC_MultiModeTypeDef multimode = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	4810      	ldr	r0, [pc, #64]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 800321e:	f001 f901 	bl	8004424 <HAL_ADCEx_MultiModeConfigChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <reconfigure_to_temperature_channel+0x98>
    {
        Error_Handler();
 8003228:	f7ff f820 	bl	800226c <Error_Handler>
    }

    // Switch ADC1 to PA3 (Temperature)
    ADC_ChannelConfTypeDef sConfig1 = {0}; // Use a local struct
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
    sConfig1.Channel = ADC_CHANNEL_3;
 8003238:	2303      	movs	r3, #3
 800323a:	607b      	str	r3, [r7, #4]
    sConfig1.Rank = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
    sConfig1.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003240:	2303      	movs	r3, #3
 8003242:	60fb      	str	r3, [r7, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig1) != HAL_OK)
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4805      	ldr	r0, [pc, #20]	@ (8003260 <reconfigure_to_temperature_channel+0xcc>)
 800324a:	f000 fe4b 	bl	8003ee4 <HAL_ADC_ConfigChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <reconfigure_to_temperature_channel+0xc4>
    {
      Error_Handler();
 8003254:	f7ff f80a 	bl	800226c <Error_Handler>
    }

}
 8003258:	bf00      	nop
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000678 	.word	0x20000678
 8003264:	200006c0 	.word	0x200006c0
 8003268:	200007bc 	.word	0x200007bc
 800326c:	40012000 	.word	0x40012000
 8003270:	0f000001 	.word	0x0f000001

08003274 <read_temperature>:


void read_temperature(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
   adc_temperature_raw = 0;  // Reset previous readings
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <read_temperature+0x44>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

   // Start ADC Conversion
   // ✅ Start ADC Conversion (Software Trigger)
   HAL_ADC_Start(&hadc1);
 800327e:	480f      	ldr	r0, [pc, #60]	@ (80032bc <read_temperature+0x48>)
 8003280:	f000 fb04 	bl	800388c <HAL_ADC_Start>

   // Wait for ADC conversion to complete
   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	480c      	ldr	r0, [pc, #48]	@ (80032bc <read_temperature+0x48>)
 800328a:	f000 fc04 	bl	8003a96 <HAL_ADC_PollForConversion>

   // Read ADC value
   adc_temperature_raw = HAL_ADC_GetValue(&hadc1);
 800328e:	480b      	ldr	r0, [pc, #44]	@ (80032bc <read_temperature+0x48>)
 8003290:	f000 fe06 	bl	8003ea0 <HAL_ADC_GetValue>
 8003294:	4603      	mov	r3, r0
 8003296:	4a08      	ldr	r2, [pc, #32]	@ (80032b8 <read_temperature+0x44>)
 8003298:	6013      	str	r3, [r2, #0]

   // Stop ADC after reading
   HAL_ADC_Stop(&hadc1);
 800329a:	4808      	ldr	r0, [pc, #32]	@ (80032bc <read_temperature+0x48>)
 800329c:	f000 fbc8 	bl	8003a30 <HAL_ADC_Stop>

   //get the temperature value
   temperature = convert_adc_raw_temperature(adc_temperature_raw);
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <read_temperature+0x44>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f8b7 	bl	8003418 <convert_adc_raw_temperature>
 80032aa:	eef0 7a40 	vmov.f32	s15, s0
 80032ae:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <read_temperature+0x4c>)
 80032b0:	edc3 7a00 	vstr	s15, [r3]
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000868 	.word	0x20000868
 80032bc:	20000678 	.word	0x20000678
 80032c0:	20000874 	.word	0x20000874
 80032c4:	00000000 	.word	0x00000000

080032c8 <convert_adc_raw_voltage_in_mV>:
static inline float convert_adc_raw_voltage_in_mV(uint32_t adc_voltage_raw) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    return (((float)adc_voltage_raw * VREF_ACTUAL1) / 4095.0 * 1.5 * 1000);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ee17 0a90 	vmov	r0, s15
 80032de:	f7fd f933 	bl	8000548 <__aeabi_f2d>
 80032e2:	a319      	add	r3, pc, #100	@ (adr r3, 8003348 <convert_adc_raw_voltage_in_mV+0x80>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd f986 	bl	80005f8 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	a316      	add	r3, pc, #88	@ (adr r3, 8003350 <convert_adc_raw_voltage_in_mV+0x88>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd faa7 	bl	800084c <__aeabi_ddiv>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <convert_adc_raw_voltage_in_mV+0x78>)
 800330c:	f7fd f974 	bl	80005f8 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <convert_adc_raw_voltage_in_mV+0x7c>)
 800331e:	f7fd f96b 	bl	80005f8 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f7fd fc3d 	bl	8000ba8 <__aeabi_d2f>
 800332e:	4603      	mov	r3, r0
 8003330:	ee07 3a90 	vmov	s15, r3
}
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	3ff80000 	.word	0x3ff80000
 8003344:	408f4000 	.word	0x408f4000
 8003348:	b851eb85 	.word	0xb851eb85
 800334c:	4007851e 	.word	0x4007851e
 8003350:	00000000 	.word	0x00000000
 8003354:	40affe00 	.word	0x40affe00

08003358 <convert_adc_raw_current_in_mA>:


static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    float Vout = ((float)adc_current_raw * VREF_ACTUAL1) / 4095.0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	ee17 0a90 	vmov	r0, s15
 800336e:	f7fd f8eb 	bl	8000548 <__aeabi_f2d>
 8003372:	a320      	add	r3, pc, #128	@ (adr r3, 80033f4 <convert_adc_raw_current_in_mA+0x9c>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fd f93e 	bl	80005f8 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	a31d      	add	r3, pc, #116	@ (adr r3, 80033fc <convert_adc_raw_current_in_mA+0xa4>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f7fd fa5f 	bl	800084c <__aeabi_ddiv>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fc07 	bl	8000ba8 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	60fb      	str	r3, [r7, #12]
    return (Vout - ZERO_CURRENT_OFFSET) / SENSITIVITY * 1000;  // ✅ Only returns the result, no side effects
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7fd f8d2 	bl	8000548 <__aeabi_f2d>
 80033a4:	a317      	add	r3, pc, #92	@ (adr r3, 8003404 <convert_adc_raw_current_in_mA+0xac>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc ff6d 	bl	8000288 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	a315      	add	r3, pc, #84	@ (adr r3, 800340c <convert_adc_raw_current_in_mA+0xb4>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd fa46 	bl	800084c <__aeabi_ddiv>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <convert_adc_raw_current_in_mA+0x98>)
 80033ce:	f7fd f913 	bl	80005f8 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	f7fd fbe5 	bl	8000ba8 <__aeabi_d2f>
 80033de:	4603      	mov	r3, r0
 80033e0:	ee07 3a90 	vmov	s15, r3
}
 80033e4:	eeb0 0a67 	vmov.f32	s0, s15
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	408f4000 	.word	0x408f4000
 80033f4:	b851eb85 	.word	0xb851eb85
 80033f8:	4007851e 	.word	0x4007851e
 80033fc:	00000000 	.word	0x00000000
 8003400:	40affe00 	.word	0x40affe00
 8003404:	c28f5c29 	.word	0xc28f5c29
 8003408:	400428f5 	.word	0x400428f5
 800340c:	2de00d1b 	.word	0x2de00d1b
 8003410:	3fc8a090 	.word	0x3fc8a090
 8003414:	00000000 	.word	0x00000000

08003418 <convert_adc_raw_temperature>:

static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw) {
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    float Vntc = ((float)adc_temperature_raw * VREF_ACTUAL1) / 4095.0;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	ee17 0a90 	vmov	r0, s15
 800342e:	f7fd f88b 	bl	8000548 <__aeabi_f2d>
 8003432:	a33d      	add	r3, pc, #244	@ (adr r3, 8003528 <convert_adc_raw_temperature+0x110>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	a342      	add	r3, pc, #264	@ (adr r3, 8003550 <convert_adc_raw_temperature+0x138>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f9ff 	bl	800084c <__aeabi_ddiv>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fba7 	bl	8000ba8 <__aeabi_d2f>
 800345a:	4603      	mov	r3, r0
 800345c:	60fb      	str	r3, [r7, #12]
    float Rntc = (Vntc * UPPER_RESISTANCE) / (VREF_ACTUAL1 - Vntc);
 800345e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003462:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003548 <convert_adc_raw_temperature+0x130>
 8003466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346a:	ee17 0a90 	vmov	r0, s15
 800346e:	f7fd f86b 	bl	8000548 <__aeabi_f2d>
 8003472:	4604      	mov	r4, r0
 8003474:	460d      	mov	r5, r1
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7fd f866 	bl	8000548 <__aeabi_f2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	a129      	add	r1, pc, #164	@ (adr r1, 8003528 <convert_adc_raw_temperature+0x110>)
 8003482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003486:	f7fc feff 	bl	8000288 <__aeabi_dsub>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4620      	mov	r0, r4
 8003490:	4629      	mov	r1, r5
 8003492:	f7fd f9db 	bl	800084c <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fb83 	bl	8000ba8 <__aeabi_d2f>
 80034a2:	4603      	mov	r3, r0
 80034a4:	60bb      	str	r3, [r7, #8]

    return (1.0f / ((log(Rntc / UPPER_RESISTANCE) / BETA_NTC) + (1.0f / ROOM_TEMPERATURE))) - 273.15f;
 80034a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034aa:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003548 <convert_adc_raw_temperature+0x130>
 80034ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034b2:	ee16 0a90 	vmov	r0, s13
 80034b6:	f7fd f847 	bl	8000548 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ec43 2b10 	vmov	d0, r2, r3
 80034c2:	f006 ffd1 	bl	800a468 <log>
 80034c6:	ec51 0b10 	vmov	r0, r1, d0
 80034ca:	a319      	add	r3, pc, #100	@ (adr r3, 8003530 <convert_adc_raw_temperature+0x118>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f7fd f9bc 	bl	800084c <__aeabi_ddiv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	a316      	add	r3, pc, #88	@ (adr r3, 8003538 <convert_adc_raw_temperature+0x120>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fc fed3 	bl	800028c <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	4917      	ldr	r1, [pc, #92]	@ (800354c <convert_adc_raw_temperature+0x134>)
 80034f0:	f7fd f9ac 	bl	800084c <__aeabi_ddiv>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	a310      	add	r3, pc, #64	@ (adr r3, 8003540 <convert_adc_raw_temperature+0x128>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fc fec1 	bl	8000288 <__aeabi_dsub>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	f7fd fb4b 	bl	8000ba8 <__aeabi_d2f>
 8003512:	4603      	mov	r3, r0
 8003514:	ee07 3a90 	vmov	s15, r3
}
 8003518:	eeb0 0a67 	vmov.f32	s0, s15
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	b851eb85 	.word	0xb851eb85
 800352c:	4007851e 	.word	0x4007851e
 8003530:	00000000 	.word	0x00000000
 8003534:	40b00400 	.word	0x40b00400
 8003538:	dcb5db83 	.word	0xdcb5db83
 800353c:	3f6b79e1 	.word	0x3f6b79e1
 8003540:	60000000 	.word	0x60000000
 8003544:	40711266 	.word	0x40711266
 8003548:	461c4000 	.word	0x461c4000
 800354c:	3ff00000 	.word	0x3ff00000
 8003550:	00000000 	.word	0x00000000
 8003554:	40affe00 	.word	0x40affe00

08003558 <process_voltage_and_current_data>:

void process_voltage_and_current_data(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
	adc_voltage_raw_sum = 0;
 800355e:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <process_voltage_and_current_data+0xac>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
	adc_current_raw_sum = 0;
 8003564:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <process_voltage_and_current_data+0xb0>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
	//collect voltage and current raw data, add them to sum for averaging

	for (int counter = 0;counter<8;counter++)
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	e016      	b.n	800359e <process_voltage_and_current_data+0x46>
	{
		adc_voltage_raw_sum += (dma_adc_buffer[counter] & 0xFFFF);
 8003570:	4a26      	ldr	r2, [pc, #152]	@ (800360c <process_voltage_and_current_data+0xb4>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003578:	b29a      	uxth	r2, r3
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <process_voltage_and_current_data+0xac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a20      	ldr	r2, [pc, #128]	@ (8003604 <process_voltage_and_current_data+0xac>)
 8003582:	6013      	str	r3, [r2, #0]
		adc_current_raw_sum += (dma_adc_buffer[counter] >> 16);
 8003584:	4a21      	ldr	r2, [pc, #132]	@ (800360c <process_voltage_and_current_data+0xb4>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	0c1a      	lsrs	r2, r3, #16
 800358e:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <process_voltage_and_current_data+0xb0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <process_voltage_and_current_data+0xb0>)
 8003596:	6013      	str	r3, [r2, #0]
	for (int counter = 0;counter<8;counter++)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3301      	adds	r3, #1
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	dde5      	ble.n	8003570 <process_voltage_and_current_data+0x18>
	}

	adc_voltage_raw = adc_voltage_raw_sum / 8;
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <process_voltage_and_current_data+0xac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <process_voltage_and_current_data+0xb8>)
 80035ac:	6013      	str	r3, [r2, #0]
	adc_current_raw = adc_current_raw_sum / 8;
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <process_voltage_and_current_data+0xb0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <process_voltage_and_current_data+0xbc>)
 80035b6:	6013      	str	r3, [r2, #0]
	voltage = convert_adc_raw_voltage_in_mV(adc_voltage_raw);
 80035b8:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <process_voltage_and_current_data+0xb8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fe83 	bl	80032c8 <convert_adc_raw_voltage_in_mV>
 80035c2:	eef0 7a40 	vmov.f32	s15, s0
 80035c6:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <process_voltage_and_current_data+0xc0>)
 80035c8:	edc3 7a00 	vstr	s15, [r3]
	current = convert_adc_raw_current_in_mA(adc_current_raw);
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <process_voltage_and_current_data+0xbc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fec1 	bl	8003358 <convert_adc_raw_current_in_mA>
 80035d6:	eef0 7a40 	vmov.f32	s15, s0
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <process_voltage_and_current_data+0xc4>)
 80035dc:	edc3 7a00 	vstr	s15, [r3]
	// the current should never less than zero, if it does, just set it to 0
	if (current <0)
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <process_voltage_and_current_data+0xc4>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d400      	bmi.n	80035f2 <process_voltage_and_current_data+0x9a>
	{
		current = 0.0;
	}

}
 80035f0:	e003      	b.n	80035fa <process_voltage_and_current_data+0xa2>
		current = 0.0;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <process_voltage_and_current_data+0xc4>)
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000858 	.word	0x20000858
 8003608:	2000085c 	.word	0x2000085c
 800360c:	20000830 	.word	0x20000830
 8003610:	20000860 	.word	0x20000860
 8003614:	20000864 	.word	0x20000864
 8003618:	2000086c 	.word	0x2000086c
 800361c:	20000870 	.word	0x20000870

08003620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003658 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003624:	f7ff f906 	bl	8002834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	@ (800365c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	@ (8003660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	@ (800366c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800364e:	f004 fe99 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003652:	f7fe fa51 	bl	8001af8 <main>
  bx  lr    
 8003656:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003664:	0800ba98 	.word	0x0800ba98
  ldr r2, =_sbss
 8003668:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800366c:	200009c8 	.word	0x200009c8

08003670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC_IRQHandler>
	...

08003674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003678:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_Init+0x40>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_Init+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <HAL_Init+0x40>)
 800368a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800368e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003690:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a07      	ldr	r2, [pc, #28]	@ (80036b4 <HAL_Init+0x40>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369c:	2003      	movs	r0, #3
 800369e:	f000 ffd7 	bl	8004650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a2:	200f      	movs	r0, #15
 80036a4:	f000 f808 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a8:	f7fe fde6 	bl	8002278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c0:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_InitTick+0x54>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_InitTick+0x58>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 ffef 	bl	80046ba <HAL_SYSTICK_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00e      	b.n	8003704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d80a      	bhi.n	8003702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ec:	2200      	movs	r2, #0
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f000 ffb7 	bl	8004666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f8:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <HAL_InitTick+0x5c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000000 	.word	0x20000000
 8003710:	20000008 	.word	0x20000008
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <HAL_IncTick+0x20>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x24>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4413      	add	r3, r2
 8003728:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_IncTick+0x24>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008
 800373c:	20000878 	.word	0x20000878

08003740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return uwTick;
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000878 	.word	0x20000878

08003758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_Delay+0x44>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffde 	bl	8003740 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000008 	.word	0x20000008

080037a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e033      	b.n	800381e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fd82 	bl	80022c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037e6:	f023 0302 	bic.w	r3, r3, #2
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fc98 	bl	8004128 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
 800380e:	e001      	b.n	8003814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e022      	b.n	8003882 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f043 0202 	orr.w	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe fdea 	bl	8002440 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_Start+0x1a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e0b2      	b.n	8003a0c <HAL_ADC_Start+0x180>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d018      	beq.n	80038ee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038cc:	4b52      	ldr	r3, [pc, #328]	@ (8003a18 <HAL_ADC_Start+0x18c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_ADC_Start+0x190>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9a      	lsrs	r2, r3, #18
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80038e0:	e002      	b.n	80038e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d17a      	bne.n	80039f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003926:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d106      	bne.n	800394a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f023 0206 	bic.w	r2, r3, #6
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
 8003948:	e002      	b.n	8003950 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003958:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <HAL_ADC_Start+0x194>)
 800395a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003964:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2b00      	cmp	r3, #0
 8003970:	d12a      	bne.n	80039c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2b      	ldr	r2, [pc, #172]	@ (8003a24 <HAL_ADC_Start+0x198>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d015      	beq.n	80039a8 <HAL_ADC_Start+0x11c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <HAL_ADC_Start+0x19c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d105      	bne.n	8003992 <HAL_ADC_Start+0x106>
 8003986:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <HAL_ADC_Start+0x194>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a25      	ldr	r2, [pc, #148]	@ (8003a2c <HAL_ADC_Start+0x1a0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d136      	bne.n	8003a0a <HAL_ADC_Start+0x17e>
 800399c:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_ADC_Start+0x194>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d130      	bne.n	8003a0a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d129      	bne.n	8003a0a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	e020      	b.n	8003a0a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <HAL_ADC_Start+0x198>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d11b      	bne.n	8003a0a <HAL_ADC_Start+0x17e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d114      	bne.n	8003a0a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e00b      	b.n	8003a0a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	431bde83 	.word	0x431bde83
 8003a20:	40012300 	.word	0x40012300
 8003a24:	40012000 	.word	0x40012000
 8003a28:	40012100 	.word	0x40012100
 8003a2c:	40012200 	.word	0x40012200

08003a30 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_Stop+0x16>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e021      	b.n	8003a8a <HAL_ADC_Stop+0x5a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d113      	bne.n	8003adc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac2:	d10b      	bne.n	8003adc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e063      	b.n	8003ba4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003adc:	f7ff fe30 	bl	8003740 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ae2:	e021      	b.n	8003b28 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d01d      	beq.n	8003b28 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_ADC_PollForConversion+0x6c>
 8003af2:	f7ff fe25 	bl	8003740 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d212      	bcs.n	8003b28 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d00b      	beq.n	8003b28 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e03d      	b.n	8003ba4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d1d6      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0212 	mvn.w	r2, #18
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d123      	bne.n	8003ba2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d11f      	bne.n	8003ba2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d111      	bne.n	8003ba2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Start_DMA+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0f7      	b.n	8003dba <HAL_ADC_Start_DMA+0x20e>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d018      	beq.n	8003c12 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bf0:	4b74      	ldr	r3, [pc, #464]	@ (8003dc4 <HAL_ADC_Start_DMA+0x218>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a74      	ldr	r2, [pc, #464]	@ (8003dc8 <HAL_ADC_Start_DMA+0x21c>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9a      	lsrs	r2, r3, #18
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c20:	d107      	bne.n	8003c32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 80af 	bne.w	8003da0 <HAL_ADC_Start_DMA+0x1f4>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c80:	d106      	bne.n	8003c90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f023 0206 	bic.w	r2, r3, #6
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c8e:	e002      	b.n	8003c96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <HAL_ADC_Start_DMA+0x220>)
 8003ca0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd0 <HAL_ADC_Start_DMA+0x224>)
 8003ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	4a49      	ldr	r2, [pc, #292]	@ (8003dd4 <HAL_ADC_Start_DMA+0x228>)
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	4a48      	ldr	r2, [pc, #288]	@ (8003dd8 <HAL_ADC_Start_DMA+0x22c>)
 8003cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cd2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    // modification to adjust CDR
        // 🚨 Fix for Dual ADC Mode 🚨
        if (READ_BIT(ADC->CCR, ADC_CCR_MULTI) != 0) {
 8003ce4:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_ADC_Start_DMA+0x220>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_ADC_Start_DMA+0x154>
            // If ADC is in Dual Mode, use the Common Data Register
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4938      	ldr	r1, [pc, #224]	@ (8003ddc <HAL_ADC_Start_DMA+0x230>)
 8003cfa:	f000 fdf7 	bl	80048ec <HAL_DMA_Start_IT>
 8003cfe:	e009      	b.n	8003d14 <HAL_ADC_Start_DMA+0x168>
        } else {
            // Otherwise, use the default single ADC DR
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	334c      	adds	r3, #76	@ 0x4c
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f000 fdec 	bl	80048ec <HAL_DMA_Start_IT>
        }
    //HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12a      	bne.n	8003d76 <HAL_ADC_Start_DMA+0x1ca>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <HAL_ADC_Start_DMA+0x234>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d015      	beq.n	8003d56 <HAL_ADC_Start_DMA+0x1aa>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <HAL_ADC_Start_DMA+0x238>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_Start_DMA+0x194>
 8003d34:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <HAL_ADC_Start_DMA+0x220>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_ADC_Start_DMA+0x1aa>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a28      	ldr	r2, [pc, #160]	@ (8003de8 <HAL_ADC_Start_DMA+0x23c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d136      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
 8003d4a:	4b20      	ldr	r3, [pc, #128]	@ (8003dcc <HAL_ADC_Start_DMA+0x220>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d130      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d129      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	e020      	b.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	@ (8003de0 <HAL_ADC_Start_DMA+0x234>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d11b      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d114      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	e00b      	b.n	8003db8 <HAL_ADC_Start_DMA+0x20c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f043 0210 	orr.w	r2, r3, #16
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	431bde83 	.word	0x431bde83
 8003dcc:	40012300 	.word	0x40012300
 8003dd0:	08004321 	.word	0x08004321
 8003dd4:	080043db 	.word	0x080043db
 8003dd8:	080043f7 	.word	0x080043f7
 8003ddc:	40012308 	.word	0x40012308
 8003de0:	40012000 	.word	0x40012000
 8003de4:	40012100 	.word	0x40012100
 8003de8:	40012200 	.word	0x40012200

08003dec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_Stop_DMA+0x1a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e048      	b.n	8003e98 <HAL_ADC_Stop_DMA+0xac>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d130      	bne.n	8003e8e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e3a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d10f      	bne.n	8003e6a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fda4 	bl	800499c <HAL_DMA_Abort>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003e78:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1c>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e105      	b.n	800410c <HAL_ADC_ConfigChannel+0x228>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d925      	bls.n	8003f5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68d9      	ldr	r1, [r3, #12]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	3b1e      	subs	r3, #30
 8003f26:	2207      	movs	r2, #7
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	400a      	ands	r2, r1
 8003f34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68d9      	ldr	r1, [r3, #12]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4403      	add	r3, r0
 8003f4e:	3b1e      	subs	r3, #30
 8003f50:	409a      	lsls	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e022      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6919      	ldr	r1, [r3, #16]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	2207      	movs	r2, #7
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4618      	mov	r0, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4403      	add	r3, r0
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d824      	bhi.n	8003ff4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	3b05      	subs	r3, #5
 8003fbc:	221f      	movs	r2, #31
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	400a      	ands	r2, r1
 8003fca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3b05      	subs	r3, #5
 8003fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ff2:	e04c      	b.n	800408e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	d824      	bhi.n	8004046 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	3b23      	subs	r3, #35	@ 0x23
 800400e:	221f      	movs	r2, #31
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43da      	mvns	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	400a      	ands	r2, r1
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	4618      	mov	r0, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	3b23      	subs	r3, #35	@ 0x23
 8004038:	fa00 f203 	lsl.w	r2, r0, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
 8004044:	e023      	b.n	800408e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	3b41      	subs	r3, #65	@ 0x41
 8004058:	221f      	movs	r2, #31
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	400a      	ands	r2, r1
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	4618      	mov	r0, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	3b41      	subs	r3, #65	@ 0x41
 8004082:	fa00 f203 	lsl.w	r2, r0, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800408e:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <HAL_ADC_ConfigChannel+0x234>)
 8004090:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	@ (800411c <HAL_ADC_ConfigChannel+0x238>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1cc>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d105      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <HAL_ADC_ConfigChannel+0x238>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d123      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x21e>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d003      	beq.n	80040ca <HAL_ADC_ConfigChannel+0x1e6>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b11      	cmp	r3, #17
 80040c8:	d11b      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d111      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040de:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_ADC_ConfigChannel+0x23c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <HAL_ADC_ConfigChannel+0x240>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	0c9a      	lsrs	r2, r3, #18
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040f4:	e002      	b.n	80040fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f9      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40012300 	.word	0x40012300
 800411c:	40012000 	.word	0x40012000
 8004120:	20000000 	.word	0x20000000
 8004124:	431bde83 	.word	0x431bde83

08004128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004130:	4b79      	ldr	r3, [pc, #484]	@ (8004318 <ADC_Init+0x1f0>)
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800415c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	021a      	lsls	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	4a58      	ldr	r2, [pc, #352]	@ (800431c <ADC_Init+0x1f4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	e00f      	b.n	8004226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004224:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0202 	bic.w	r2, r2, #2
 8004234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7e1b      	ldrb	r3, [r3, #24]
 8004240:	005a      	lsls	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004262:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	3b01      	subs	r3, #1
 8004280:	035a      	lsls	r2, r3, #13
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e007      	b.n	800429c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	051a      	lsls	r2, r3, #20
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6899      	ldr	r1, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042de:	025a      	lsls	r2, r3, #9
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	029a      	lsls	r2, r3, #10
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40012300 	.word	0x40012300
 800431c:	0f000001 	.word	0x0f000001

08004320 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004336:	2b00      	cmp	r3, #0
 8004338:	d13c      	bne.n	80043b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d12b      	bne.n	80043ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004358:	2b00      	cmp	r3, #0
 800435a:	d127      	bne.n	80043ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004374:	2b00      	cmp	r3, #0
 8004376:	d119      	bne.n	80043ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0220 	bic.w	r2, r2, #32
 8004386:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7fe f91d 	bl	80025ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043b2:	e00e      	b.n	80043d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fd84 	bl	8003ece <HAL_ADC_ErrorCallback>
}
 80043c6:	e004      	b.n	80043d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fd66 	bl	8003eba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fd59 	bl	8003ece <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004438:	2302      	movs	r3, #2
 800443a:	e031      	b.n	80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004446:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 021f 	bic.w	r2, r3, #31
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	431a      	orrs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40012300 	.word	0x40012300

080044b0 <__NVIC_SetPriorityGrouping>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044cc:	4013      	ands	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e2:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	60d3      	str	r3, [r2, #12]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_GetPriorityGrouping>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <__NVIC_GetPriorityGrouping+0x18>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 0307 	and.w	r3, r3, #7
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_EnableIRQ>:
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	2b00      	cmp	r3, #0
 8004524:	db0b      	blt.n	800453e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f003 021f 	and.w	r2, r3, #31
 800452c:	4907      	ldr	r1, [pc, #28]	@ (800454c <__NVIC_EnableIRQ+0x38>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2001      	movs	r0, #1
 8004536:	fa00 f202 	lsl.w	r2, r0, r2
 800453a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e100 	.word	0xe000e100

08004550 <__NVIC_SetPriority>:
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db0a      	blt.n	800457a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	490c      	ldr	r1, [pc, #48]	@ (800459c <__NVIC_SetPriority+0x4c>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	0112      	lsls	r2, r2, #4
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	440b      	add	r3, r1
 8004574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004578:	e00a      	b.n	8004590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4908      	ldr	r1, [pc, #32]	@ (80045a0 <__NVIC_SetPriority+0x50>)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	3b04      	subs	r3, #4
 8004588:	0112      	lsls	r2, r2, #4
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	440b      	add	r3, r1
 800458e:	761a      	strb	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000e100 	.word	0xe000e100
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <NVIC_EncodePriority>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	@ 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf28      	it	cs
 80045c2:	2304      	movcs	r3, #4
 80045c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d902      	bls.n	80045d4 <NVIC_EncodePriority+0x30>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3b03      	subs	r3, #3
 80045d2:	e000      	b.n	80045d6 <NVIC_EncodePriority+0x32>
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	401a      	ands	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ec:	f04f 31ff 	mov.w	r1, #4294967295
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	43d9      	mvns	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	4313      	orrs	r3, r2
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	@ 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <SysTick_Config>:
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800461c:	d301      	bcc.n	8004622 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800461e:	2301      	movs	r3, #1
 8004620:	e00f      	b.n	8004642 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004622:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <SysTick_Config+0x40>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462a:	210f      	movs	r1, #15
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	f7ff ff8e 	bl	8004550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <SysTick_Config+0x40>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463a:	4b04      	ldr	r3, [pc, #16]	@ (800464c <SysTick_Config+0x40>)
 800463c:	2207      	movs	r2, #7
 800463e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000e010 	.word	0xe000e010

08004650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff29 	bl	80044b0 <__NVIC_SetPriorityGrouping>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004678:	f7ff ff3e 	bl	80044f8 <__NVIC_GetPriorityGrouping>
 800467c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff ff8e 	bl	80045a4 <NVIC_EncodePriority>
 8004688:	4602      	mov	r2, r0
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff5d 	bl	8004550 <__NVIC_SetPriority>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff31 	bl	8004514 <__NVIC_EnableIRQ>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ffa2 	bl	800460c <SysTick_Config>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046e0:	f7ff f82e 	bl	8003740 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e099      	b.n	8004824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004710:	e00f      	b.n	8004732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004712:	f7ff f815 	bl	8003740 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b05      	cmp	r3, #5
 800471e:	d908      	bls.n	8004732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2203      	movs	r2, #3
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e078      	b.n	8004824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e8      	bne.n	8004712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4b38      	ldr	r3, [pc, #224]	@ (800482c <HAL_DMA_Init+0x158>)
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800475e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	2b04      	cmp	r3, #4
 800478a:	d107      	bne.n	800479c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	4313      	orrs	r3, r2
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d117      	bne.n	80047f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb3d 	bl	8004e58 <DMA_CheckFifoParam>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2240      	movs	r2, #64	@ 0x40
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047f2:	2301      	movs	r3, #1
 80047f4:	e016      	b.n	8004824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 faf4 	bl	8004dec <DMA_CalcBaseAndBitshift>
 8004804:	4603      	mov	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480c:	223f      	movs	r2, #63	@ 0x3f
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	f010803f 	.word	0xf010803f

08004830 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e050      	b.n	80048e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d101      	bne.n	8004852 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
 8004850:	e048      	b.n	80048e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2221      	movs	r2, #33	@ 0x21
 8004890:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 faaa 	bl	8004dec <DMA_CalcBaseAndBitshift>
 8004898:	4603      	mov	r3, r0
 800489a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	223f      	movs	r2, #63	@ 0x3f
 80048c6:	409a      	lsls	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_DMA_Start_IT+0x26>
 800490e:	2302      	movs	r3, #2
 8004910:	e040      	b.n	8004994 <HAL_DMA_Start_IT+0xa8>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d12f      	bne.n	8004986 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fa28 	bl	8004d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	223f      	movs	r2, #63	@ 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0216 	orr.w	r2, r2, #22
 800495a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7fe fec9 	bl	8003740 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d008      	beq.n	80049ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e052      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0216 	bic.w	r2, r2, #22
 80049dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_DMA_Abort+0x62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a1e:	e013      	b.n	8004a48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a20:	f7fe fe8e 	bl	8003740 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d90c      	bls.n	8004a48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e015      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e4      	bne.n	8004a20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	223f      	movs	r2, #63	@ 0x3f
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a88:	4b8e      	ldr	r3, [pc, #568]	@ (8004cc4 <HAL_DMA_IRQHandler+0x248>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8004cc8 <HAL_DMA_IRQHandler+0x24c>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a9b      	lsrs	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aec:	2201      	movs	r2, #1
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2204      	movs	r2, #4
 8004b24:	409a      	lsls	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d012      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b40:	2204      	movs	r2, #4
 8004b42:	409a      	lsls	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	2210      	movs	r2, #16
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d043      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03c      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	2210      	movs	r2, #16
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d024      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
 8004baa:	e01f      	b.n	8004bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
 8004bbc:	e016      	b.n	8004bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0208 	bic.w	r2, r2, #8
 8004bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 808f 	beq.w	8004d1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8087 	beq.w	8004d1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c12:	2220      	movs	r2, #32
 8004c14:	409a      	lsls	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d136      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0216 	bic.w	r2, r2, #22
 8004c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x1da>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6a:	223f      	movs	r2, #63	@ 0x3f
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d07e      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
        }
        return;
 8004c92:	e079      	b.n	8004d88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10d      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d031      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
 8004cc0:	e02c      	b.n	8004d1c <HAL_DMA_IRQHandler+0x2a0>
 8004cc2:	bf00      	nop
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d023      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e01e      	b.n	8004d1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0210 	bic.w	r2, r2, #16
 8004cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d032      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2205      	movs	r2, #5
 8004d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d307      	bcc.n	8004d64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f2      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x2cc>
 8004d62:	e000      	b.n	8004d66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
 8004d86:	e000      	b.n	8004d8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d88:	bf00      	nop
    }
  }
}
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	d108      	bne.n	8004dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dce:	e007      	b.n	8004de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3b10      	subs	r3, #16
 8004dfc:	4a14      	ldr	r2, [pc, #80]	@ (8004e50 <DMA_CalcBaseAndBitshift+0x64>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e06:	4a13      	ldr	r2, [pc, #76]	@ (8004e54 <DMA_CalcBaseAndBitshift+0x68>)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d909      	bls.n	8004e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	1d1a      	adds	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e2c:	e007      	b.n	8004e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	aaaaaaab 	.word	0xaaaaaaab
 8004e54:	0800b70c 	.word	0x0800b70c

08004e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d11f      	bne.n	8004eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d856      	bhi.n	8004f26 <DMA_CheckFifoParam+0xce>
 8004e78:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <DMA_CheckFifoParam+0x28>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004ea3 	.word	0x08004ea3
 8004e88:	08004e91 	.word	0x08004e91
 8004e8c:	08004f27 	.word	0x08004f27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d046      	beq.n	8004f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea0:	e043      	b.n	8004f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004eaa:	d140      	bne.n	8004f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e03d      	b.n	8004f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eba:	d121      	bne.n	8004f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d837      	bhi.n	8004f32 <DMA_CheckFifoParam+0xda>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <DMA_CheckFifoParam+0x70>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004ed9 	.word	0x08004ed9
 8004ecc:	08004edf 	.word	0x08004edf
 8004ed0:	08004ed9 	.word	0x08004ed9
 8004ed4:	08004ef1 	.word	0x08004ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e030      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d025      	beq.n	8004f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e022      	b.n	8004f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ef8:	d11f      	bne.n	8004f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004efe:	e01c      	b.n	8004f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d903      	bls.n	8004f0e <DMA_CheckFifoParam+0xb6>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d003      	beq.n	8004f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f0c:	e018      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
      break;
 8004f12:	e015      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e00b      	b.n	8004f3e <DMA_CheckFifoParam+0xe6>
      break;
 8004f26:	bf00      	nop
 8004f28:	e00a      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e008      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e006      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;
 8004f32:	bf00      	nop
 8004f34:	e004      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <DMA_CheckFifoParam+0xe8>
      break;
 8004f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	@ 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	e16b      	b.n	8005244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	f040 815a 	bne.w	800523e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d005      	beq.n	8004fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d130      	bne.n	8005004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2203      	movs	r2, #3
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fd8:	2201      	movs	r2, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 0201 	and.w	r2, r3, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d017      	beq.n	8005040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	2203      	movs	r2, #3
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d123      	bne.n	8005094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	08da      	lsrs	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3208      	adds	r2, #8
 8005054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	220f      	movs	r2, #15
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	08da      	lsrs	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3208      	adds	r2, #8
 800508e:	69b9      	ldr	r1, [r7, #24]
 8005090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2203      	movs	r2, #3
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0203 	and.w	r2, r3, #3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80b4 	beq.w	800523e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	4b60      	ldr	r3, [pc, #384]	@ (800525c <HAL_GPIO_Init+0x30c>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	4a5f      	ldr	r2, [pc, #380]	@ (800525c <HAL_GPIO_Init+0x30c>)
 80050e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050e6:	4b5d      	ldr	r3, [pc, #372]	@ (800525c <HAL_GPIO_Init+0x30c>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005260 <HAL_GPIO_Init+0x310>)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	3302      	adds	r3, #2
 80050fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	220f      	movs	r2, #15
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a52      	ldr	r2, [pc, #328]	@ (8005264 <HAL_GPIO_Init+0x314>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02b      	beq.n	8005176 <HAL_GPIO_Init+0x226>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a51      	ldr	r2, [pc, #324]	@ (8005268 <HAL_GPIO_Init+0x318>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d025      	beq.n	8005172 <HAL_GPIO_Init+0x222>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a50      	ldr	r2, [pc, #320]	@ (800526c <HAL_GPIO_Init+0x31c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01f      	beq.n	800516e <HAL_GPIO_Init+0x21e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a4f      	ldr	r2, [pc, #316]	@ (8005270 <HAL_GPIO_Init+0x320>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d019      	beq.n	800516a <HAL_GPIO_Init+0x21a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a4e      	ldr	r2, [pc, #312]	@ (8005274 <HAL_GPIO_Init+0x324>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_GPIO_Init+0x216>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a4d      	ldr	r2, [pc, #308]	@ (8005278 <HAL_GPIO_Init+0x328>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00d      	beq.n	8005162 <HAL_GPIO_Init+0x212>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a4c      	ldr	r2, [pc, #304]	@ (800527c <HAL_GPIO_Init+0x32c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <HAL_GPIO_Init+0x20e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a4b      	ldr	r2, [pc, #300]	@ (8005280 <HAL_GPIO_Init+0x330>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <HAL_GPIO_Init+0x20a>
 8005156:	2307      	movs	r3, #7
 8005158:	e00e      	b.n	8005178 <HAL_GPIO_Init+0x228>
 800515a:	2308      	movs	r3, #8
 800515c:	e00c      	b.n	8005178 <HAL_GPIO_Init+0x228>
 800515e:	2306      	movs	r3, #6
 8005160:	e00a      	b.n	8005178 <HAL_GPIO_Init+0x228>
 8005162:	2305      	movs	r3, #5
 8005164:	e008      	b.n	8005178 <HAL_GPIO_Init+0x228>
 8005166:	2304      	movs	r3, #4
 8005168:	e006      	b.n	8005178 <HAL_GPIO_Init+0x228>
 800516a:	2303      	movs	r3, #3
 800516c:	e004      	b.n	8005178 <HAL_GPIO_Init+0x228>
 800516e:	2302      	movs	r3, #2
 8005170:	e002      	b.n	8005178 <HAL_GPIO_Init+0x228>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_GPIO_Init+0x228>
 8005176:	2300      	movs	r3, #0
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	f002 0203 	and.w	r2, r2, #3
 800517e:	0092      	lsls	r2, r2, #2
 8005180:	4093      	lsls	r3, r2
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005188:	4935      	ldr	r1, [pc, #212]	@ (8005260 <HAL_GPIO_Init+0x310>)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	3302      	adds	r3, #2
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005196:	4b3b      	ldr	r3, [pc, #236]	@ (8005284 <HAL_GPIO_Init+0x334>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ba:	4a32      	ldr	r2, [pc, #200]	@ (8005284 <HAL_GPIO_Init+0x334>)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051c0:	4b30      	ldr	r3, [pc, #192]	@ (8005284 <HAL_GPIO_Init+0x334>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e4:	4a27      	ldr	r2, [pc, #156]	@ (8005284 <HAL_GPIO_Init+0x334>)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ea:	4b26      	ldr	r3, [pc, #152]	@ (8005284 <HAL_GPIO_Init+0x334>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520e:	4a1d      	ldr	r2, [pc, #116]	@ (8005284 <HAL_GPIO_Init+0x334>)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_GPIO_Init+0x334>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005238:	4a12      	ldr	r2, [pc, #72]	@ (8005284 <HAL_GPIO_Init+0x334>)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3301      	adds	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	f67f ae90 	bls.w	8004f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	3724      	adds	r7, #36	@ 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	40013800 	.word	0x40013800
 8005264:	40020000 	.word	0x40020000
 8005268:	40020400 	.word	0x40020400
 800526c:	40020800 	.word	0x40020800
 8005270:	40020c00 	.word	0x40020c00
 8005274:	40021000 	.word	0x40021000
 8005278:	40021400 	.word	0x40021400
 800527c:	40021800 	.word	0x40021800
 8005280:	40021c00 	.word	0x40021c00
 8005284:	40013c00 	.word	0x40013c00

08005288 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e0cd      	b.n	8005440 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a4:	2201      	movs	r2, #1
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4013      	ands	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	f040 80bd 	bne.w	800543a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_GPIO_DeInit+0x1d0>)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	3302      	adds	r3, #2
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	220f      	movs	r2, #15
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a5d      	ldr	r2, [pc, #372]	@ (800545c <HAL_GPIO_DeInit+0x1d4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02b      	beq.n	8005342 <HAL_GPIO_DeInit+0xba>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005460 <HAL_GPIO_DeInit+0x1d8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d025      	beq.n	800533e <HAL_GPIO_DeInit+0xb6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005464 <HAL_GPIO_DeInit+0x1dc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01f      	beq.n	800533a <HAL_GPIO_DeInit+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005468 <HAL_GPIO_DeInit+0x1e0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d019      	beq.n	8005336 <HAL_GPIO_DeInit+0xae>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a59      	ldr	r2, [pc, #356]	@ (800546c <HAL_GPIO_DeInit+0x1e4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_GPIO_DeInit+0xaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a58      	ldr	r2, [pc, #352]	@ (8005470 <HAL_GPIO_DeInit+0x1e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00d      	beq.n	800532e <HAL_GPIO_DeInit+0xa6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a57      	ldr	r2, [pc, #348]	@ (8005474 <HAL_GPIO_DeInit+0x1ec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_GPIO_DeInit+0xa2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a56      	ldr	r2, [pc, #344]	@ (8005478 <HAL_GPIO_DeInit+0x1f0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d101      	bne.n	8005326 <HAL_GPIO_DeInit+0x9e>
 8005322:	2307      	movs	r3, #7
 8005324:	e00e      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 8005326:	2308      	movs	r3, #8
 8005328:	e00c      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 800532a:	2306      	movs	r3, #6
 800532c:	e00a      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 800532e:	2305      	movs	r3, #5
 8005330:	e008      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 8005332:	2304      	movs	r3, #4
 8005334:	e006      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 8005336:	2303      	movs	r3, #3
 8005338:	e004      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 800533a:	2302      	movs	r3, #2
 800533c:	e002      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_GPIO_DeInit+0xbc>
 8005342:	2300      	movs	r3, #0
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	f002 0203 	and.w	r2, r2, #3
 800534a:	0092      	lsls	r2, r2, #2
 800534c:	4093      	lsls	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d132      	bne.n	80053ba <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005354:	4b49      	ldr	r3, [pc, #292]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43db      	mvns	r3, r3
 800535c:	4947      	ldr	r1, [pc, #284]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 800535e:	4013      	ands	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005362:	4b46      	ldr	r3, [pc, #280]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	43db      	mvns	r3, r3
 800536a:	4944      	ldr	r1, [pc, #272]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 800536c:	4013      	ands	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005370:	4b42      	ldr	r3, [pc, #264]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43db      	mvns	r3, r3
 8005378:	4940      	ldr	r1, [pc, #256]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 800537a:	4013      	ands	r3, r2
 800537c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800537e:	4b3f      	ldr	r3, [pc, #252]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	43db      	mvns	r3, r3
 8005386:	493d      	ldr	r1, [pc, #244]	@ (800547c <HAL_GPIO_DeInit+0x1f4>)
 8005388:	4013      	ands	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	220f      	movs	r2, #15
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800539c:	4a2e      	ldr	r2, [pc, #184]	@ (8005458 <HAL_GPIO_DeInit+0x1d0>)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	3302      	adds	r3, #2
 80053a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	43da      	mvns	r2, r3
 80053ac:	482a      	ldr	r0, [pc, #168]	@ (8005458 <HAL_GPIO_DeInit+0x1d0>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	400a      	ands	r2, r1
 80053b4:	3302      	adds	r3, #2
 80053b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	2103      	movs	r1, #3
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	08da      	lsrs	r2, r3, #3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3208      	adds	r2, #8
 80053d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	08d2      	lsrs	r2, r2, #3
 80053f0:	4019      	ands	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	2103      	movs	r1, #3
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	401a      	ands	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2101      	movs	r1, #1
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2103      	movs	r1, #3
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	401a      	ands	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3301      	adds	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b0f      	cmp	r3, #15
 8005444:	f67f af2e 	bls.w	80052a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40013800 	.word	0x40013800
 800545c:	40020000 	.word	0x40020000
 8005460:	40020400 	.word	0x40020400
 8005464:	40020800 	.word	0x40020800
 8005468:	40020c00 	.word	0x40020c00
 800546c:	40021000 	.word	0x40021000
 8005470:	40021400 	.word	0x40021400
 8005474:	40021800 	.word	0x40021800
 8005478:	40021c00 	.word	0x40021c00
 800547c:	40013c00 	.word	0x40013c00

08005480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
 800548c:	4613      	mov	r3, r2
 800548e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005490:	787b      	ldrb	r3, [r7, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800549c:	e003      	b.n	80054a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	041a      	lsls	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	619a      	str	r2, [r3, #24]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e12b      	b.n	800571e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc ffe4 	bl	80024a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	@ 0x24
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005518:	f001 fd9c 	bl	8007054 <HAL_RCC_GetPCLK1Freq>
 800551c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4a81      	ldr	r2, [pc, #516]	@ (8005728 <HAL_I2C_Init+0x274>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d807      	bhi.n	8005538 <HAL_I2C_Init+0x84>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4a80      	ldr	r2, [pc, #512]	@ (800572c <HAL_I2C_Init+0x278>)
 800552c:	4293      	cmp	r3, r2
 800552e:	bf94      	ite	ls
 8005530:	2301      	movls	r3, #1
 8005532:	2300      	movhi	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e006      	b.n	8005546 <HAL_I2C_Init+0x92>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a7d      	ldr	r2, [pc, #500]	@ (8005730 <HAL_I2C_Init+0x27c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	bf94      	ite	ls
 8005540:	2301      	movls	r3, #1
 8005542:	2300      	movhi	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e0e7      	b.n	800571e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a78      	ldr	r2, [pc, #480]	@ (8005734 <HAL_I2C_Init+0x280>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	0c9b      	lsrs	r3, r3, #18
 8005558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a6a      	ldr	r2, [pc, #424]	@ (8005728 <HAL_I2C_Init+0x274>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d802      	bhi.n	8005588 <HAL_I2C_Init+0xd4>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3301      	adds	r3, #1
 8005586:	e009      	b.n	800559c <HAL_I2C_Init+0xe8>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	4a69      	ldr	r2, [pc, #420]	@ (8005738 <HAL_I2C_Init+0x284>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	3301      	adds	r3, #1
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	495c      	ldr	r1, [pc, #368]	@ (8005728 <HAL_I2C_Init+0x274>)
 80055b8:	428b      	cmp	r3, r1
 80055ba:	d819      	bhi.n	80055f0 <HAL_I2C_Init+0x13c>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e59      	subs	r1, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055d0:	400b      	ands	r3, r1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_I2C_Init+0x138>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1e59      	subs	r1, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ea:	e051      	b.n	8005690 <HAL_I2C_Init+0x1dc>
 80055ec:	2304      	movs	r3, #4
 80055ee:	e04f      	b.n	8005690 <HAL_I2C_Init+0x1dc>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d111      	bne.n	800561c <HAL_I2C_Init+0x168>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e58      	subs	r0, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	440b      	add	r3, r1
 8005606:	fbb0 f3f3 	udiv	r3, r0, r3
 800560a:	3301      	adds	r3, #1
 800560c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	e012      	b.n	8005642 <HAL_I2C_Init+0x18e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1e58      	subs	r0, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	0099      	lsls	r1, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005632:	3301      	adds	r3, #1
 8005634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Init+0x196>
 8005646:	2301      	movs	r3, #1
 8005648:	e022      	b.n	8005690 <HAL_I2C_Init+0x1dc>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10e      	bne.n	8005670 <HAL_I2C_Init+0x1bc>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1e58      	subs	r0, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	440b      	add	r3, r1
 8005660:	fbb0 f3f3 	udiv	r3, r0, r3
 8005664:	3301      	adds	r3, #1
 8005666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800566e:	e00f      	b.n	8005690 <HAL_I2C_Init+0x1dc>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1e58      	subs	r0, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	0099      	lsls	r1, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	fbb0 f3f3 	udiv	r3, r0, r3
 8005686:	3301      	adds	r3, #1
 8005688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	6809      	ldr	r1, [r1, #0]
 8005694:	4313      	orrs	r3, r2
 8005696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6911      	ldr	r1, [r2, #16]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68d2      	ldr	r2, [r2, #12]
 80056ca:	4311      	orrs	r1, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	000186a0 	.word	0x000186a0
 800572c:	001e847f 	.word	0x001e847f
 8005730:	003d08ff 	.word	0x003d08ff
 8005734:	431bde83 	.word	0x431bde83
 8005738:	10624dd3 	.word	0x10624dd3

0800573c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	4608      	mov	r0, r1
 8005746:	4611      	mov	r1, r2
 8005748:	461a      	mov	r2, r3
 800574a:	4603      	mov	r3, r0
 800574c:	817b      	strh	r3, [r7, #10]
 800574e:	460b      	mov	r3, r1
 8005750:	813b      	strh	r3, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005756:	f7fd fff3 	bl	8003740 <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b20      	cmp	r3, #32
 8005766:	f040 80d9 	bne.w	800591c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	2319      	movs	r3, #25
 8005770:	2201      	movs	r2, #1
 8005772:	496d      	ldr	r1, [pc, #436]	@ (8005928 <HAL_I2C_Mem_Write+0x1ec>)
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fdc7 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
 8005782:	e0cc      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Mem_Write+0x56>
 800578e:	2302      	movs	r3, #2
 8005790:	e0c5      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d007      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2221      	movs	r2, #33	@ 0x21
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2240      	movs	r2, #64	@ 0x40
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a4d      	ldr	r2, [pc, #308]	@ (800592c <HAL_I2C_Mem_Write+0x1f0>)
 80057f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057fa:	88f8      	ldrh	r0, [r7, #6]
 80057fc:	893a      	ldrh	r2, [r7, #8]
 80057fe:	8979      	ldrh	r1, [r7, #10]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4603      	mov	r3, r0
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fbfe 	bl	800600c <I2C_RequestMemoryWrite>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d052      	beq.n	80058bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e081      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fe8c 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2b04      	cmp	r3, #4
 8005830:	d107      	bne.n	8005842 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e06b      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b04      	cmp	r3, #4
 8005882:	d11b      	bne.n	80058bc <HAL_I2C_Mem_Write+0x180>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1aa      	bne.n	800581a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fe7f 	bl	80065cc <I2C_WaitOnBTFFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d107      	bne.n	80058ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e016      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e000      	b.n	800591e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	00100002 	.word	0x00100002
 800592c:	ffff0000 	.word	0xffff0000

08005930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	@ 0x30
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	460b      	mov	r3, r1
 8005944:	813b      	strh	r3, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800594a:	f7fd fef9 	bl	8003740 <HAL_GetTick>
 800594e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b20      	cmp	r3, #32
 800595a:	f040 8214 	bne.w	8005d86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	2319      	movs	r3, #25
 8005964:	2201      	movs	r2, #1
 8005966:	497b      	ldr	r1, [pc, #492]	@ (8005b54 <HAL_I2C_Mem_Read+0x224>)
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fccd 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005974:	2302      	movs	r3, #2
 8005976:	e207      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Mem_Read+0x56>
 8005982:	2302      	movs	r3, #2
 8005984:	e200      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d007      	beq.n	80059ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2222      	movs	r2, #34	@ 0x22
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2240      	movs	r2, #64	@ 0x40
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005b58 <HAL_I2C_Mem_Read+0x228>)
 80059ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ee:	88f8      	ldrh	r0, [r7, #6]
 80059f0:	893a      	ldrh	r2, [r7, #8]
 80059f2:	8979      	ldrh	r1, [r7, #10]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	4603      	mov	r3, r0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fb9a 	bl	8006138 <I2C_RequestMemoryRead>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e1bc      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d113      	bne.n	8005a3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a16:	2300      	movs	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e190      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d11b      	bne.n	8005a7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e170      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d11b      	bne.n	8005abe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	e150      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ad4:	e144      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	f200 80f1 	bhi.w	8005cc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d123      	bne.n	8005b30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fdb5 	bl	800665c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e145      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b2e:	e117      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d14e      	bne.n	8005bd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4906      	ldr	r1, [pc, #24]	@ (8005b5c <HAL_I2C_Mem_Read+0x22c>)
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fbe0 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e11a      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
 8005b52:	bf00      	nop
 8005b54:	00100002 	.word	0x00100002
 8005b58:	ffff0000 	.word	0xffff0000
 8005b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bd4:	e0c4      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	2200      	movs	r2, #0
 8005bde:	496c      	ldr	r1, [pc, #432]	@ (8005d90 <HAL_I2C_Mem_Read+0x460>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fb91 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0cb      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4955      	ldr	r1, [pc, #340]	@ (8005d90 <HAL_I2C_Mem_Read+0x460>)
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fb63 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e09d      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cc0:	e04e      	b.n	8005d60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fcc8 	bl	800665c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e058      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d124      	bne.n	8005d60 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d107      	bne.n	8005d2e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d2c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f47f aeb6 	bne.w	8005ad6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3728      	adds	r7, #40	@ 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	00010004 	.word	0x00010004

08005d94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	@ 0x28
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	460b      	mov	r3, r1
 8005da2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005da4:	f7fd fccc 	bl	8003740 <HAL_GetTick>
 8005da8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	f040 8111 	bne.w	8005fde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2319      	movs	r3, #25
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4988      	ldr	r1, [pc, #544]	@ (8005fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fa9e 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e104      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_I2C_IsDeviceReady+0x50>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e0fd      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d007      	beq.n	8005e0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2224      	movs	r2, #36	@ 0x24
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4a70      	ldr	r2, [pc, #448]	@ (8005fec <HAL_I2C_IsDeviceReady+0x258>)
 8005e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa5c 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d103      	bne.n	8005e6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0b6      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e82:	f7fd fc5d 	bl	8003740 <HAL_GetTick>
 8005e86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005eb6:	e025      	b.n	8005f04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eb8:	f7fd fc42 	bl	8003740 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <HAL_I2C_IsDeviceReady+0x13a>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	22a0      	movs	r2, #160	@ 0xa0
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f0e:	d005      	beq.n	8005f1c <HAL_I2C_IsDeviceReady+0x188>
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_I2C_IsDeviceReady+0x188>
 8005f16:	7dbb      	ldrb	r3, [r7, #22]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0cd      	beq.n	8005eb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d129      	bne.n	8005f86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2319      	movs	r3, #25
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4921      	ldr	r1, [pc, #132]	@ (8005fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f9d0 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e036      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e02c      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2319      	movs	r3, #25
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	490f      	ldr	r1, [pc, #60]	@ (8005fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f9ac 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e012      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f4ff af32 	bcc.w	8005e2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	00100002 	.word	0x00100002
 8005fec:	ffff0000 	.word	0xffff0000

08005ff0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2200      	movs	r2, #0
 800603e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f960 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605c:	d103      	bne.n	8006066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006064:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e05f      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	492d      	ldr	r1, [pc, #180]	@ (8006134 <I2C_RequestMemoryWrite+0x128>)
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f9bb 	bl	80063fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e04c      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a8:	6a39      	ldr	r1, [r7, #32]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa46 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d107      	bne.n	80060ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e02b      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	611a      	str	r2, [r3, #16]
 80060e2:	e021      	b.n	8006128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f4:	6a39      	ldr	r1, [r7, #32]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fa20 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b04      	cmp	r3, #4
 8006108:	d107      	bne.n	800611a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e005      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	00010002 	.word	0x00010002

08006138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4603      	mov	r3, r0
 8006148:	817b      	strh	r3, [r7, #10]
 800614a:	460b      	mov	r3, r1
 800614c:	813b      	strh	r3, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	2200      	movs	r2, #0
 800617a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f8c2 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d103      	bne.n	80061a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0aa      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	4952      	ldr	r1, [pc, #328]	@ (8006304 <I2C_RequestMemoryRead+0x1cc>)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f91d 	bl	80063fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e097      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e4:	6a39      	ldr	r1, [r7, #32]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f9a8 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d107      	bne.n	800620a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e076      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006214:	893b      	ldrh	r3, [r7, #8]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	611a      	str	r2, [r3, #16]
 800621e:	e021      	b.n	8006264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006220:	893b      	ldrh	r3, [r7, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	b29b      	uxth	r3, r3
 8006226:	b2da      	uxtb	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006230:	6a39      	ldr	r1, [r7, #32]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f982 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	2b04      	cmp	r3, #4
 8006244:	d107      	bne.n	8006256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e050      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006266:	6a39      	ldr	r1, [r7, #32]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f967 	bl	800653c <I2C_WaitOnTXEFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	2b04      	cmp	r3, #4
 800627a:	d107      	bne.n	800628c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800628a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e035      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800629e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f82b 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c6:	d103      	bne.n	80062d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e013      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062d4:	897b      	ldrh	r3, [r7, #10]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	4906      	ldr	r1, [pc, #24]	@ (8006304 <I2C_RequestMemoryRead+0x1cc>)
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f886 	bl	80063fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	00010002 	.word	0x00010002

08006308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006318:	e048      	b.n	80063ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d044      	beq.n	80063ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7fd fa0d 	bl	8003740 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d139      	bne.n	80063ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10d      	bne.n	800635e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	43da      	mvns	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4013      	ands	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	e00c      	b.n	8006378 <I2C_WaitOnFlagUntilTimeout+0x70>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	43da      	mvns	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4013      	ands	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf0c      	ite	eq
 8006370:	2301      	moveq	r3, #1
 8006372:	2300      	movne	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	429a      	cmp	r2, r3
 800637c:	d116      	bne.n	80063ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006398:	f043 0220 	orr.w	r2, r3, #32
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e023      	b.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10d      	bne.n	80063d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	43da      	mvns	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4013      	ands	r3, r2
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	e00c      	b.n	80063ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	43da      	mvns	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d093      	beq.n	800631a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800640a:	e071      	b.n	80064f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641a:	d123      	bne.n	8006464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800642a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	f043 0204 	orr.w	r2, r3, #4
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e067      	b.n	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d041      	beq.n	80064f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646c:	f7fd f968 	bl	8003740 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d136      	bne.n	80064f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10c      	bne.n	80064a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	43da      	mvns	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf14      	ite	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	2300      	moveq	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	e00b      	b.n	80064be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	43da      	mvns	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e021      	b.n	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d10c      	bne.n	8006514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	43da      	mvns	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e00b      	b.n	800652c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	43da      	mvns	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	f47f af6d 	bne.w	800640c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006548:	e034      	b.n	80065b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f8e3 	bl	8006716 <I2C_IsAcknowledgeFailed>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e034      	b.n	80065c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d028      	beq.n	80065b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fd f8ed 	bl	8003740 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11d      	bne.n	80065b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006582:	2b80      	cmp	r3, #128	@ 0x80
 8006584:	d016      	beq.n	80065b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e007      	b.n	80065c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065be:	2b80      	cmp	r3, #128	@ 0x80
 80065c0:	d1c3      	bne.n	800654a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065d8:	e034      	b.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f89b 	bl	8006716 <I2C_IsAcknowledgeFailed>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e034      	b.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d028      	beq.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fd f8a5 	bl	8003740 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11d      	bne.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d016      	beq.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e007      	b.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b04      	cmp	r3, #4
 8006650:	d1c3      	bne.n	80065da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006668:	e049      	b.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b10      	cmp	r3, #16
 8006676:	d119      	bne.n	80066ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0210 	mvn.w	r2, #16
 8006680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e030      	b.n	800670e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ac:	f7fd f848 	bl	8003740 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d302      	bcc.n	80066c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11d      	bne.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b40      	cmp	r3, #64	@ 0x40
 80066ce:	d016      	beq.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e007      	b.n	800670e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d1ae      	bne.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800672c:	d11b      	bne.n	8006766 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006736:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f043 0204 	orr.w	r2, r3, #4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e267      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d075      	beq.n	800687e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006792:	4b88      	ldr	r3, [pc, #544]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 030c 	and.w	r3, r3, #12
 800679a:	2b04      	cmp	r3, #4
 800679c:	d00c      	beq.n	80067b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800679e:	4b85      	ldr	r3, [pc, #532]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d112      	bne.n	80067d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067aa:	4b82      	ldr	r3, [pc, #520]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067b6:	d10b      	bne.n	80067d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b8:	4b7e      	ldr	r3, [pc, #504]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d05b      	beq.n	800687c <HAL_RCC_OscConfig+0x108>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d157      	bne.n	800687c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e242      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d8:	d106      	bne.n	80067e8 <HAL_RCC_OscConfig+0x74>
 80067da:	4b76      	ldr	r3, [pc, #472]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a75      	ldr	r2, [pc, #468]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e01d      	b.n	8006824 <HAL_RCC_OscConfig+0xb0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0x98>
 80067f2:	4b70      	ldr	r3, [pc, #448]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6f      	ldr	r2, [pc, #444]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80067f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b6d      	ldr	r3, [pc, #436]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6c      	ldr	r2, [pc, #432]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e00b      	b.n	8006824 <HAL_RCC_OscConfig+0xb0>
 800680c:	4b69      	ldr	r3, [pc, #420]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a68      	ldr	r2, [pc, #416]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b66      	ldr	r3, [pc, #408]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a65      	ldr	r2, [pc, #404]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 800681e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc ff88 	bl	8003740 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006834:	f7fc ff84 	bl	8003740 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	@ 0x64
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e207      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b5b      	ldr	r3, [pc, #364]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0xc0>
 8006852:	e014      	b.n	800687e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fc ff74 	bl	8003740 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800685c:	f7fc ff70 	bl	8003740 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b64      	cmp	r3, #100	@ 0x64
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e1f3      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800686e:	4b51      	ldr	r3, [pc, #324]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0xe8>
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d063      	beq.n	8006952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800688a:	4b4a      	ldr	r3, [pc, #296]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006896:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d11c      	bne.n	80068dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068a2:	4b44      	ldr	r3, [pc, #272]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d116      	bne.n	80068dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ae:	4b41      	ldr	r3, [pc, #260]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_RCC_OscConfig+0x152>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e1c7      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c6:	4b3b      	ldr	r3, [pc, #236]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4937      	ldr	r1, [pc, #220]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	e03a      	b.n	8006952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e4:	4b34      	ldr	r3, [pc, #208]	@ (80069b8 <HAL_RCC_OscConfig+0x244>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ea:	f7fc ff29 	bl	8003740 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fc ff25 	bl	8003740 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1a8      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006904:	4b2b      	ldr	r3, [pc, #172]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4925      	ldr	r1, [pc, #148]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
 8006924:	e015      	b.n	8006952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006926:	4b24      	ldr	r3, [pc, #144]	@ (80069b8 <HAL_RCC_OscConfig+0x244>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc ff08 	bl	8003740 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fc ff04 	bl	8003740 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e187      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006946:	4b1b      	ldr	r3, [pc, #108]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d036      	beq.n	80069cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006966:	4b15      	ldr	r3, [pc, #84]	@ (80069bc <HAL_RCC_OscConfig+0x248>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fc fee8 	bl	8003740 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006974:	f7fc fee4 	bl	8003740 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e167      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <HAL_RCC_OscConfig+0x240>)
 8006988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x200>
 8006992:	e01b      	b.n	80069cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <HAL_RCC_OscConfig+0x248>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800699a:	f7fc fed1 	bl	8003740 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a0:	e00e      	b.n	80069c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a2:	f7fc fecd 	bl	8003740 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d907      	bls.n	80069c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e150      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	42470000 	.word	0x42470000
 80069bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c0:	4b88      	ldr	r3, [pc, #544]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 80069c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1ea      	bne.n	80069a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8097 	beq.w	8006b08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069de:	4b81      	ldr	r3, [pc, #516]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	4b7d      	ldr	r3, [pc, #500]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	4a7c      	ldr	r2, [pc, #496]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 80069f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069fa:	4b7a      	ldr	r3, [pc, #488]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0a:	4b77      	ldr	r3, [pc, #476]	@ (8006be8 <HAL_RCC_OscConfig+0x474>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d118      	bne.n	8006a48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a16:	4b74      	ldr	r3, [pc, #464]	@ (8006be8 <HAL_RCC_OscConfig+0x474>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a73      	ldr	r2, [pc, #460]	@ (8006be8 <HAL_RCC_OscConfig+0x474>)
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a22:	f7fc fe8d 	bl	8003740 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2a:	f7fc fe89 	bl	8003740 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e10c      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCC_OscConfig+0x474>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCC_OscConfig+0x2ea>
 8006a50:	4b64      	ldr	r3, [pc, #400]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a54:	4a63      	ldr	r2, [pc, #396]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a5c:	e01c      	b.n	8006a98 <HAL_RCC_OscConfig+0x324>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d10c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x30c>
 8006a66:	4b5f      	ldr	r3, [pc, #380]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a72:	4b5c      	ldr	r3, [pc, #368]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a76:	4a5b      	ldr	r2, [pc, #364]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a7e:	e00b      	b.n	8006a98 <HAL_RCC_OscConfig+0x324>
 8006a80:	4b58      	ldr	r3, [pc, #352]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a84:	4a57      	ldr	r2, [pc, #348]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a8c:	4b55      	ldr	r3, [pc, #340]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a90:	4a54      	ldr	r2, [pc, #336]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006a92:	f023 0304 	bic.w	r3, r3, #4
 8006a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d015      	beq.n	8006acc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fc fe4e 	bl	8003740 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fc fe4a 	bl	8003740 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e0cb      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	4b49      	ldr	r3, [pc, #292]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0ee      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x334>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006acc:	f7fc fe38 	bl	8003740 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad4:	f7fc fe34 	bl	8003740 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0b5      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aea:	4b3e      	ldr	r3, [pc, #248]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afc:	4b39      	ldr	r3, [pc, #228]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b00:	4a38      	ldr	r2, [pc, #224]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80a1 	beq.w	8006c54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b12:	4b34      	ldr	r3, [pc, #208]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d05c      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d141      	bne.n	8006baa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	4b31      	ldr	r3, [pc, #196]	@ (8006bec <HAL_RCC_OscConfig+0x478>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2c:	f7fc fe08 	bl	8003740 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fc fe04 	bl	8003740 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e087      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b46:	4b27      	ldr	r3, [pc, #156]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	491b      	ldr	r1, [pc, #108]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <HAL_RCC_OscConfig+0x478>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b82:	f7fc fddd 	bl	8003740 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc fdd9 	bl	8003740 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e05c      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9c:	4b11      	ldr	r3, [pc, #68]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x416>
 8006ba8:	e054      	b.n	8006c54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4b10      	ldr	r3, [pc, #64]	@ (8006bec <HAL_RCC_OscConfig+0x478>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fc fdc6 	bl	8003740 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fc fdc2 	bl	8003740 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e045      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bca:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x444>
 8006bd6:	e03d      	b.n	8006c54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e038      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40007000 	.word	0x40007000
 8006bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <HAL_RCC_OscConfig+0x4ec>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d028      	beq.n	8006c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d121      	bne.n	8006c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d11a      	bne.n	8006c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d111      	bne.n	8006c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	40023800 	.word	0x40023800

08006c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0cc      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c78:	4b68      	ldr	r3, [pc, #416]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90c      	bls.n	8006ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c86:	4b65      	ldr	r3, [pc, #404]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8e:	4b63      	ldr	r3, [pc, #396]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0b8      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cb8:	4b59      	ldr	r3, [pc, #356]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4a58      	ldr	r2, [pc, #352]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cd0:	4b53      	ldr	r3, [pc, #332]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	4a52      	ldr	r2, [pc, #328]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cdc:	4b50      	ldr	r3, [pc, #320]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	494d      	ldr	r1, [pc, #308]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d044      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d107      	bne.n	8006d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	4b47      	ldr	r3, [pc, #284]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d119      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e07f      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d003      	beq.n	8006d22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d107      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d22:	4b3f      	ldr	r3, [pc, #252]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e06f      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d32:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e067      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d42:	4b37      	ldr	r3, [pc, #220]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 0203 	bic.w	r2, r3, #3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4934      	ldr	r1, [pc, #208]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d54:	f7fc fcf4 	bl	8003740 <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d5c:	f7fc fcf0 	bl	8003740 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e04f      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d72:	4b2b      	ldr	r3, [pc, #172]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 020c 	and.w	r2, r3, #12
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d1eb      	bne.n	8006d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d84:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d20c      	bcs.n	8006dac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d92:	4b22      	ldr	r3, [pc, #136]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9a:	4b20      	ldr	r3, [pc, #128]	@ (8006e1c <HAL_RCC_ClockConfig+0x1b8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e032      	b.n	8006e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db8:	4b19      	ldr	r3, [pc, #100]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4916      	ldr	r1, [pc, #88]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dd6:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	490e      	ldr	r1, [pc, #56]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dea:	f000 f821 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8006dee:	4602      	mov	r2, r0
 8006df0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	490a      	ldr	r1, [pc, #40]	@ (8006e24 <HAL_RCC_ClockConfig+0x1c0>)
 8006dfc:	5ccb      	ldrb	r3, [r1, r3]
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	4a09      	ldr	r2, [pc, #36]	@ (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e06:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fc fc54 	bl	80036b8 <HAL_InitTick>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40023c00 	.word	0x40023c00
 8006e20:	40023800 	.word	0x40023800
 8006e24:	0800b6f4 	.word	0x0800b6f4
 8006e28:	20000000 	.word	0x20000000
 8006e2c:	20000004 	.word	0x20000004

08006e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e34:	b094      	sub	sp, #80	@ 0x50
 8006e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e48:	4b79      	ldr	r3, [pc, #484]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 030c 	and.w	r3, r3, #12
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d00d      	beq.n	8006e70 <HAL_RCC_GetSysClockFreq+0x40>
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	f200 80e1 	bhi.w	800701c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x34>
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d003      	beq.n	8006e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e62:	e0db      	b.n	800701c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e64:	4b73      	ldr	r3, [pc, #460]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e68:	e0db      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e6a:	4b73      	ldr	r3, [pc, #460]	@ (8007038 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e6e:	e0d8      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e70:	4b6f      	ldr	r3, [pc, #444]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d063      	beq.n	8006f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e86:	4b6a      	ldr	r3, [pc, #424]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	f04f 0000 	mov.w	r0, #0
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	0159      	lsls	r1, r3, #5
 8006eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb4:	0150      	lsls	r0, r2, #5
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4621      	mov	r1, r4
 8006ebc:	1a51      	subs	r1, r2, r1
 8006ebe:	6139      	str	r1, [r7, #16]
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	018b      	lsls	r3, r1, #6
 8006ed8:	4651      	mov	r1, sl
 8006eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ede:	4651      	mov	r1, sl
 8006ee0:	018a      	lsls	r2, r1, #6
 8006ee2:	4651      	mov	r1, sl
 8006ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ee8:	4659      	mov	r1, fp
 8006eea:	eb63 0901 	sbc.w	r9, r3, r1
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f02:	4690      	mov	r8, r2
 8006f04:	4699      	mov	r9, r3
 8006f06:	4623      	mov	r3, r4
 8006f08:	eb18 0303 	adds.w	r3, r8, r3
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	462b      	mov	r3, r5
 8006f10:	eb49 0303 	adc.w	r3, r9, r3
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f22:	4629      	mov	r1, r5
 8006f24:	024b      	lsls	r3, r1, #9
 8006f26:	4621      	mov	r1, r4
 8006f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	024a      	lsls	r2, r1, #9
 8006f30:	4610      	mov	r0, r2
 8006f32:	4619      	mov	r1, r3
 8006f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f36:	2200      	movs	r2, #0
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f40:	f7f9 fe82 	bl	8000c48 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4613      	mov	r3, r2
 8006f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f4c:	e058      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f4e:	4b38      	ldr	r3, [pc, #224]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	099b      	lsrs	r3, r3, #6
 8006f54:	2200      	movs	r2, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	4611      	mov	r1, r2
 8006f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f5e:	623b      	str	r3, [r7, #32]
 8006f60:	2300      	movs	r3, #0
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f04f 0000 	mov.w	r0, #0
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	0159      	lsls	r1, r3, #5
 8006f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f7a:	0150      	lsls	r0, r2, #5
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4641      	mov	r1, r8
 8006f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	00eb      	lsls	r3, r5, #3
 8006fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fb6:	00e2      	lsls	r2, r4, #3
 8006fb8:	4614      	mov	r4, r2
 8006fba:	461d      	mov	r5, r3
 8006fbc:	4643      	mov	r3, r8
 8006fbe:	18e3      	adds	r3, r4, r3
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	eb45 0303 	adc.w	r3, r5, r3
 8006fc8:	607b      	str	r3, [r7, #4]
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	028b      	lsls	r3, r1, #10
 8006fda:	4621      	mov	r1, r4
 8006fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	028a      	lsls	r2, r1, #10
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fea:	2200      	movs	r2, #0
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	61fa      	str	r2, [r7, #28]
 8006ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ff4:	f7f9 fe28 	bl	8000c48 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007000:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <HAL_RCC_GetSysClockFreq+0x200>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	3301      	adds	r3, #1
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007014:	fbb2 f3f3 	udiv	r3, r2, r3
 8007018:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800701a:	e002      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_RCC_GetSysClockFreq+0x204>)
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007024:	4618      	mov	r0, r3
 8007026:	3750      	adds	r7, #80	@ 0x50
 8007028:	46bd      	mov	sp, r7
 800702a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800702e:	bf00      	nop
 8007030:	40023800 	.word	0x40023800
 8007034:	00f42400 	.word	0x00f42400
 8007038:	007a1200 	.word	0x007a1200

0800703c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007040:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <HAL_RCC_GetHCLKFreq+0x14>)
 8007042:	681b      	ldr	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20000000 	.word	0x20000000

08007054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007058:	f7ff fff0 	bl	800703c <HAL_RCC_GetHCLKFreq>
 800705c:	4602      	mov	r2, r0
 800705e:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	0a9b      	lsrs	r3, r3, #10
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	4903      	ldr	r1, [pc, #12]	@ (8007078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40023800 	.word	0x40023800
 8007078:	0800b704 	.word	0x0800b704

0800707c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e041      	b.n	8007112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fb fa48 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f000 f984 	bl	80073c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d001      	beq.n	8007134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e046      	b.n	80071c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a23      	ldr	r2, [pc, #140]	@ (80071d0 <HAL_TIM_Base_Start+0xb4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d022      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d01d      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1f      	ldr	r2, [pc, #124]	@ (80071d4 <HAL_TIM_Base_Start+0xb8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d018      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1e      	ldr	r2, [pc, #120]	@ (80071d8 <HAL_TIM_Base_Start+0xbc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1c      	ldr	r2, [pc, #112]	@ (80071dc <HAL_TIM_Base_Start+0xc0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00e      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1b      	ldr	r2, [pc, #108]	@ (80071e0 <HAL_TIM_Base_Start+0xc4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a19      	ldr	r2, [pc, #100]	@ (80071e4 <HAL_TIM_Base_Start+0xc8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIM_Base_Start+0x70>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a18      	ldr	r2, [pc, #96]	@ (80071e8 <HAL_TIM_Base_Start+0xcc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d111      	bne.n	80071b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b06      	cmp	r3, #6
 800719c:	d010      	beq.n	80071c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ae:	e007      	b.n	80071c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40001800 	.word	0x40001800

080071ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a1a      	ldr	r2, [r3, #32]
 80071fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <HAL_TIM_Base_Stop+0x38>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	f240 4344 	movw	r3, #1092	@ 0x444
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <HAL_TIM_Base_Stop+0x38>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_TIM_ConfigClockSource+0x1c>
 8007252:	2302      	movs	r3, #2
 8007254:	e0b4      	b.n	80073c0 <HAL_TIM_ConfigClockSource+0x186>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007274:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800727c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728e:	d03e      	beq.n	800730e <HAL_TIM_ConfigClockSource+0xd4>
 8007290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007294:	f200 8087 	bhi.w	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729c:	f000 8086 	beq.w	80073ac <HAL_TIM_ConfigClockSource+0x172>
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a4:	d87f      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072a6:	2b70      	cmp	r3, #112	@ 0x70
 80072a8:	d01a      	beq.n	80072e0 <HAL_TIM_ConfigClockSource+0xa6>
 80072aa:	2b70      	cmp	r3, #112	@ 0x70
 80072ac:	d87b      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072ae:	2b60      	cmp	r3, #96	@ 0x60
 80072b0:	d050      	beq.n	8007354 <HAL_TIM_ConfigClockSource+0x11a>
 80072b2:	2b60      	cmp	r3, #96	@ 0x60
 80072b4:	d877      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072b6:	2b50      	cmp	r3, #80	@ 0x50
 80072b8:	d03c      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0xfa>
 80072ba:	2b50      	cmp	r3, #80	@ 0x50
 80072bc:	d873      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	d058      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0x13a>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d86f      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072c6:	2b30      	cmp	r3, #48	@ 0x30
 80072c8:	d064      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x15a>
 80072ca:	2b30      	cmp	r3, #48	@ 0x30
 80072cc:	d86b      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d060      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x15a>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d867      	bhi.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d05c      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x15a>
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d05a      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x15a>
 80072de:	e062      	b.n	80073a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072f0:	f000 f990 	bl	8007614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007302:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
      break;
 800730c:	e04f      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800731e:	f000 f979 	bl	8007614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007330:	609a      	str	r2, [r3, #8]
      break;
 8007332:	e03c      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007340:	461a      	mov	r2, r3
 8007342:	f000 f8ed 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2150      	movs	r1, #80	@ 0x50
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f946 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007352:	e02c      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007360:	461a      	mov	r2, r3
 8007362:	f000 f90c 	bl	800757e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2160      	movs	r1, #96	@ 0x60
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f936 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007372:	e01c      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007380:	461a      	mov	r2, r3
 8007382:	f000 f8cd 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2140      	movs	r1, #64	@ 0x40
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f926 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007392:	e00c      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f000 f91d 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 80073a4:	e003      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	73fb      	strb	r3, [r7, #15]
      break;
 80073aa:	e000      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a46      	ldr	r2, [pc, #280]	@ (80074f4 <TIM_Base_SetConfig+0x12c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e6:	d00f      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a43      	ldr	r2, [pc, #268]	@ (80074f8 <TIM_Base_SetConfig+0x130>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a42      	ldr	r2, [pc, #264]	@ (80074fc <TIM_Base_SetConfig+0x134>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a41      	ldr	r2, [pc, #260]	@ (8007500 <TIM_Base_SetConfig+0x138>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a40      	ldr	r2, [pc, #256]	@ (8007504 <TIM_Base_SetConfig+0x13c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d108      	bne.n	800741a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <TIM_Base_SetConfig+0x12c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d02b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007428:	d027      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a32      	ldr	r2, [pc, #200]	@ (80074f8 <TIM_Base_SetConfig+0x130>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d023      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a31      	ldr	r2, [pc, #196]	@ (80074fc <TIM_Base_SetConfig+0x134>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01f      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <TIM_Base_SetConfig+0x138>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2f      	ldr	r2, [pc, #188]	@ (8007504 <TIM_Base_SetConfig+0x13c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d017      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2e      	ldr	r2, [pc, #184]	@ (8007508 <TIM_Base_SetConfig+0x140>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2d      	ldr	r2, [pc, #180]	@ (800750c <TIM_Base_SetConfig+0x144>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00f      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <TIM_Base_SetConfig+0x148>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a2b      	ldr	r2, [pc, #172]	@ (8007514 <TIM_Base_SetConfig+0x14c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2a      	ldr	r2, [pc, #168]	@ (8007518 <TIM_Base_SetConfig+0x150>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a29      	ldr	r2, [pc, #164]	@ (800751c <TIM_Base_SetConfig+0x154>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d108      	bne.n	800748c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a10      	ldr	r2, [pc, #64]	@ (80074f4 <TIM_Base_SetConfig+0x12c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_Base_SetConfig+0xf8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a12      	ldr	r2, [pc, #72]	@ (8007504 <TIM_Base_SetConfig+0x13c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d103      	bne.n	80074c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d105      	bne.n	80074e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f023 0201 	bic.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	611a      	str	r2, [r3, #16]
  }
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40010400 	.word	0x40010400
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800
 8007514:	40001800 	.word	0x40001800
 8007518:	40001c00 	.word	0x40001c00
 800751c:	40002000 	.word	0x40002000

08007520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 030a 	bic.w	r3, r3, #10
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757e:	b480      	push	{r7}
 8007580:	b087      	sub	sp, #28
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f023 0210 	bic.w	r2, r3, #16
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f043 0307 	orr.w	r3, r3, #7
 8007600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800762e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	021a      	lsls	r2, r3, #8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	431a      	orrs	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4313      	orrs	r3, r2
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007668:	2302      	movs	r3, #2
 800766a:	e05a      	b.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a21      	ldr	r2, [pc, #132]	@ (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d022      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b8:	d01d      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1d      	ldr	r2, [pc, #116]	@ (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d018      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1a      	ldr	r2, [pc, #104]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a18      	ldr	r2, [pc, #96]	@ (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d009      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a15      	ldr	r2, [pc, #84]	@ (8007748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10c      	bne.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4313      	orrs	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40000400 	.word	0x40000400
 8007738:	40000800 	.word	0x40000800
 800773c:	40000c00 	.word	0x40000c00
 8007740:	40010400 	.word	0x40010400
 8007744:	40014000 	.word	0x40014000
 8007748:	40001800 	.word	0x40001800

0800774c <__cvt>:
 800774c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	ec57 6b10 	vmov	r6, r7, d0
 8007754:	2f00      	cmp	r7, #0
 8007756:	460c      	mov	r4, r1
 8007758:	4619      	mov	r1, r3
 800775a:	463b      	mov	r3, r7
 800775c:	bfbb      	ittet	lt
 800775e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007762:	461f      	movlt	r7, r3
 8007764:	2300      	movge	r3, #0
 8007766:	232d      	movlt	r3, #45	@ 0x2d
 8007768:	700b      	strb	r3, [r1, #0]
 800776a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800776c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007770:	4691      	mov	r9, r2
 8007772:	f023 0820 	bic.w	r8, r3, #32
 8007776:	bfbc      	itt	lt
 8007778:	4632      	movlt	r2, r6
 800777a:	4616      	movlt	r6, r2
 800777c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007780:	d005      	beq.n	800778e <__cvt+0x42>
 8007782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007786:	d100      	bne.n	800778a <__cvt+0x3e>
 8007788:	3401      	adds	r4, #1
 800778a:	2102      	movs	r1, #2
 800778c:	e000      	b.n	8007790 <__cvt+0x44>
 800778e:	2103      	movs	r1, #3
 8007790:	ab03      	add	r3, sp, #12
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	ab02      	add	r3, sp, #8
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	ec47 6b10 	vmov	d0, r6, r7
 800779c:	4653      	mov	r3, sl
 800779e:	4622      	mov	r2, r4
 80077a0:	f000 feae 	bl	8008500 <_dtoa_r>
 80077a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077a8:	4605      	mov	r5, r0
 80077aa:	d119      	bne.n	80077e0 <__cvt+0x94>
 80077ac:	f019 0f01 	tst.w	r9, #1
 80077b0:	d00e      	beq.n	80077d0 <__cvt+0x84>
 80077b2:	eb00 0904 	add.w	r9, r0, r4
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f9 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c2:	b108      	cbz	r0, 80077c8 <__cvt+0x7c>
 80077c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80077c8:	2230      	movs	r2, #48	@ 0x30
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	454b      	cmp	r3, r9
 80077ce:	d31e      	bcc.n	800780e <__cvt+0xc2>
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077d4:	1b5b      	subs	r3, r3, r5
 80077d6:	4628      	mov	r0, r5
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	b004      	add	sp, #16
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077e4:	eb00 0904 	add.w	r9, r0, r4
 80077e8:	d1e5      	bne.n	80077b6 <__cvt+0x6a>
 80077ea:	7803      	ldrb	r3, [r0, #0]
 80077ec:	2b30      	cmp	r3, #48	@ 0x30
 80077ee:	d10a      	bne.n	8007806 <__cvt+0xba>
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	4630      	mov	r0, r6
 80077f6:	4639      	mov	r1, r7
 80077f8:	f7f9 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fc:	b918      	cbnz	r0, 8007806 <__cvt+0xba>
 80077fe:	f1c4 0401 	rsb	r4, r4, #1
 8007802:	f8ca 4000 	str.w	r4, [sl]
 8007806:	f8da 3000 	ldr.w	r3, [sl]
 800780a:	4499      	add	r9, r3
 800780c:	e7d3      	b.n	80077b6 <__cvt+0x6a>
 800780e:	1c59      	adds	r1, r3, #1
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e7d9      	b.n	80077ca <__cvt+0x7e>

08007816 <__exponent>:
 8007816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007818:	2900      	cmp	r1, #0
 800781a:	bfba      	itte	lt
 800781c:	4249      	neglt	r1, r1
 800781e:	232d      	movlt	r3, #45	@ 0x2d
 8007820:	232b      	movge	r3, #43	@ 0x2b
 8007822:	2909      	cmp	r1, #9
 8007824:	7002      	strb	r2, [r0, #0]
 8007826:	7043      	strb	r3, [r0, #1]
 8007828:	dd29      	ble.n	800787e <__exponent+0x68>
 800782a:	f10d 0307 	add.w	r3, sp, #7
 800782e:	461d      	mov	r5, r3
 8007830:	270a      	movs	r7, #10
 8007832:	461a      	mov	r2, r3
 8007834:	fbb1 f6f7 	udiv	r6, r1, r7
 8007838:	fb07 1416 	mls	r4, r7, r6, r1
 800783c:	3430      	adds	r4, #48	@ 0x30
 800783e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007842:	460c      	mov	r4, r1
 8007844:	2c63      	cmp	r4, #99	@ 0x63
 8007846:	f103 33ff 	add.w	r3, r3, #4294967295
 800784a:	4631      	mov	r1, r6
 800784c:	dcf1      	bgt.n	8007832 <__exponent+0x1c>
 800784e:	3130      	adds	r1, #48	@ 0x30
 8007850:	1e94      	subs	r4, r2, #2
 8007852:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007856:	1c41      	adds	r1, r0, #1
 8007858:	4623      	mov	r3, r4
 800785a:	42ab      	cmp	r3, r5
 800785c:	d30a      	bcc.n	8007874 <__exponent+0x5e>
 800785e:	f10d 0309 	add.w	r3, sp, #9
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	42ac      	cmp	r4, r5
 8007866:	bf88      	it	hi
 8007868:	2300      	movhi	r3, #0
 800786a:	3302      	adds	r3, #2
 800786c:	4403      	add	r3, r0
 800786e:	1a18      	subs	r0, r3, r0
 8007870:	b003      	add	sp, #12
 8007872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007874:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800787c:	e7ed      	b.n	800785a <__exponent+0x44>
 800787e:	2330      	movs	r3, #48	@ 0x30
 8007880:	3130      	adds	r1, #48	@ 0x30
 8007882:	7083      	strb	r3, [r0, #2]
 8007884:	70c1      	strb	r1, [r0, #3]
 8007886:	1d03      	adds	r3, r0, #4
 8007888:	e7f1      	b.n	800786e <__exponent+0x58>
	...

0800788c <_printf_float>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	b08d      	sub	sp, #52	@ 0x34
 8007892:	460c      	mov	r4, r1
 8007894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007898:	4616      	mov	r6, r2
 800789a:	461f      	mov	r7, r3
 800789c:	4605      	mov	r5, r0
 800789e:	f000 fd21 	bl	80082e4 <_localeconv_r>
 80078a2:	6803      	ldr	r3, [r0, #0]
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f8 fce2 	bl	8000270 <strlen>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b0:	f8d8 3000 	ldr.w	r3, [r8]
 80078b4:	9005      	str	r0, [sp, #20]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	f103 0208 	add.w	r2, r3, #8
 80078c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078c4:	f8d4 b000 	ldr.w	fp, [r4]
 80078c8:	f8c8 2000 	str.w	r2, [r8]
 80078cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80078da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007b54 <_printf_float+0x2c8>)
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	f7f9 f920 	bl	8000b2c <__aeabi_dcmpun>
 80078ec:	bb70      	cbnz	r0, 800794c <_printf_float+0xc0>
 80078ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078f2:	4b98      	ldr	r3, [pc, #608]	@ (8007b54 <_printf_float+0x2c8>)
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	f7f9 f8fa 	bl	8000af0 <__aeabi_dcmple>
 80078fc:	bb30      	cbnz	r0, 800794c <_printf_float+0xc0>
 80078fe:	2200      	movs	r2, #0
 8007900:	2300      	movs	r3, #0
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f9 f8e9 	bl	8000adc <__aeabi_dcmplt>
 800790a:	b110      	cbz	r0, 8007912 <_printf_float+0x86>
 800790c:	232d      	movs	r3, #45	@ 0x2d
 800790e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007912:	4a91      	ldr	r2, [pc, #580]	@ (8007b58 <_printf_float+0x2cc>)
 8007914:	4b91      	ldr	r3, [pc, #580]	@ (8007b5c <_printf_float+0x2d0>)
 8007916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800791a:	bf94      	ite	ls
 800791c:	4690      	movls	r8, r2
 800791e:	4698      	movhi	r8, r3
 8007920:	2303      	movs	r3, #3
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	f02b 0304 	bic.w	r3, fp, #4
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	f04f 0900 	mov.w	r9, #0
 800792e:	9700      	str	r7, [sp, #0]
 8007930:	4633      	mov	r3, r6
 8007932:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f9d2 	bl	8007ce0 <_printf_common>
 800793c:	3001      	adds	r0, #1
 800793e:	f040 808d 	bne.w	8007a5c <_printf_float+0x1d0>
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
 8007946:	b00d      	add	sp, #52	@ 0x34
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f9 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8007958:	b140      	cbz	r0, 800796c <_printf_float+0xe0>
 800795a:	464b      	mov	r3, r9
 800795c:	2b00      	cmp	r3, #0
 800795e:	bfbc      	itt	lt
 8007960:	232d      	movlt	r3, #45	@ 0x2d
 8007962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007966:	4a7e      	ldr	r2, [pc, #504]	@ (8007b60 <_printf_float+0x2d4>)
 8007968:	4b7e      	ldr	r3, [pc, #504]	@ (8007b64 <_printf_float+0x2d8>)
 800796a:	e7d4      	b.n	8007916 <_printf_float+0x8a>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007972:	9206      	str	r2, [sp, #24]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	d13b      	bne.n	80079f0 <_printf_float+0x164>
 8007978:	2306      	movs	r3, #6
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007980:	2300      	movs	r3, #0
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	9303      	str	r3, [sp, #12]
 8007986:	ab0a      	add	r3, sp, #40	@ 0x28
 8007988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800798c:	ab09      	add	r3, sp, #36	@ 0x24
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	6861      	ldr	r1, [r4, #4]
 8007992:	ec49 8b10 	vmov	d0, r8, r9
 8007996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800799a:	4628      	mov	r0, r5
 800799c:	f7ff fed6 	bl	800774c <__cvt>
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079a4:	2b47      	cmp	r3, #71	@ 0x47
 80079a6:	4680      	mov	r8, r0
 80079a8:	d129      	bne.n	80079fe <_printf_float+0x172>
 80079aa:	1cc8      	adds	r0, r1, #3
 80079ac:	db02      	blt.n	80079b4 <_printf_float+0x128>
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	4299      	cmp	r1, r3
 80079b2:	dd41      	ble.n	8007a38 <_printf_float+0x1ac>
 80079b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80079b8:	fa5f fa8a 	uxtb.w	sl, sl
 80079bc:	3901      	subs	r1, #1
 80079be:	4652      	mov	r2, sl
 80079c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80079c6:	f7ff ff26 	bl	8007816 <__exponent>
 80079ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079cc:	1813      	adds	r3, r2, r0
 80079ce:	2a01      	cmp	r2, #1
 80079d0:	4681      	mov	r9, r0
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	dc02      	bgt.n	80079dc <_printf_float+0x150>
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	07d2      	lsls	r2, r2, #31
 80079da:	d501      	bpl.n	80079e0 <_printf_float+0x154>
 80079dc:	3301      	adds	r3, #1
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0a2      	beq.n	800792e <_printf_float+0xa2>
 80079e8:	232d      	movs	r3, #45	@ 0x2d
 80079ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ee:	e79e      	b.n	800792e <_printf_float+0xa2>
 80079f0:	9a06      	ldr	r2, [sp, #24]
 80079f2:	2a47      	cmp	r2, #71	@ 0x47
 80079f4:	d1c2      	bne.n	800797c <_printf_float+0xf0>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1c0      	bne.n	800797c <_printf_float+0xf0>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7bd      	b.n	800797a <_printf_float+0xee>
 80079fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a02:	d9db      	bls.n	80079bc <_printf_float+0x130>
 8007a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a08:	d118      	bne.n	8007a3c <_printf_float+0x1b0>
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	dd0b      	ble.n	8007a28 <_printf_float+0x19c>
 8007a10:	6121      	str	r1, [r4, #16]
 8007a12:	b913      	cbnz	r3, 8007a1a <_printf_float+0x18e>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	07d0      	lsls	r0, r2, #31
 8007a18:	d502      	bpl.n	8007a20 <_printf_float+0x194>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	440b      	add	r3, r1
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	e7db      	b.n	80079e0 <_printf_float+0x154>
 8007a28:	b913      	cbnz	r3, 8007a30 <_printf_float+0x1a4>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	07d2      	lsls	r2, r2, #31
 8007a2e:	d501      	bpl.n	8007a34 <_printf_float+0x1a8>
 8007a30:	3302      	adds	r3, #2
 8007a32:	e7f4      	b.n	8007a1e <_printf_float+0x192>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e7f2      	b.n	8007a1e <_printf_float+0x192>
 8007a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	db05      	blt.n	8007a4e <_printf_float+0x1c2>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	6121      	str	r1, [r4, #16]
 8007a46:	07d8      	lsls	r0, r3, #31
 8007a48:	d5ea      	bpl.n	8007a20 <_printf_float+0x194>
 8007a4a:	1c4b      	adds	r3, r1, #1
 8007a4c:	e7e7      	b.n	8007a1e <_printf_float+0x192>
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	bfd4      	ite	le
 8007a52:	f1c1 0202 	rsble	r2, r1, #2
 8007a56:	2201      	movgt	r2, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	e7e0      	b.n	8007a1e <_printf_float+0x192>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	055a      	lsls	r2, r3, #21
 8007a60:	d407      	bmi.n	8007a72 <_printf_float+0x1e6>
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	4642      	mov	r2, r8
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d12b      	bne.n	8007ac8 <_printf_float+0x23c>
 8007a70:	e767      	b.n	8007942 <_printf_float+0xb6>
 8007a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a76:	f240 80dd 	bls.w	8007c34 <_printf_float+0x3a8>
 8007a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	f7f9 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d033      	beq.n	8007af2 <_printf_float+0x266>
 8007a8a:	4a37      	ldr	r2, [pc, #220]	@ (8007b68 <_printf_float+0x2dc>)
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	f43f af54 	beq.w	8007942 <_printf_float+0xb6>
 8007a9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	db02      	blt.n	8007aa8 <_printf_float+0x21c>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	07d8      	lsls	r0, r3, #31
 8007aa6:	d50f      	bpl.n	8007ac8 <_printf_float+0x23c>
 8007aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f af45 	beq.w	8007942 <_printf_float+0xb6>
 8007ab8:	f04f 0900 	mov.w	r9, #0
 8007abc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ac0:	f104 0a1a 	add.w	sl, r4, #26
 8007ac4:	45c8      	cmp	r8, r9
 8007ac6:	dc09      	bgt.n	8007adc <_printf_float+0x250>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	079b      	lsls	r3, r3, #30
 8007acc:	f100 8103 	bmi.w	8007cd6 <_printf_float+0x44a>
 8007ad0:	68e0      	ldr	r0, [r4, #12]
 8007ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ad4:	4298      	cmp	r0, r3
 8007ad6:	bfb8      	it	lt
 8007ad8:	4618      	movlt	r0, r3
 8007ada:	e734      	b.n	8007946 <_printf_float+0xba>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4652      	mov	r2, sl
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af2b 	beq.w	8007942 <_printf_float+0xb6>
 8007aec:	f109 0901 	add.w	r9, r9, #1
 8007af0:	e7e8      	b.n	8007ac4 <_printf_float+0x238>
 8007af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dc39      	bgt.n	8007b6c <_printf_float+0x2e0>
 8007af8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b68 <_printf_float+0x2dc>)
 8007afa:	2301      	movs	r3, #1
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f af1d 	beq.w	8007942 <_printf_float+0xb6>
 8007b08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b10:	d102      	bne.n	8007b18 <_printf_float+0x28c>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07d9      	lsls	r1, r3, #31
 8007b16:	d5d7      	bpl.n	8007ac8 <_printf_float+0x23c>
 8007b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af0d 	beq.w	8007942 <_printf_float+0xb6>
 8007b28:	f04f 0a00 	mov.w	sl, #0
 8007b2c:	f104 0b1a 	add.w	fp, r4, #26
 8007b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b32:	425b      	negs	r3, r3
 8007b34:	4553      	cmp	r3, sl
 8007b36:	dc01      	bgt.n	8007b3c <_printf_float+0x2b0>
 8007b38:	464b      	mov	r3, r9
 8007b3a:	e793      	b.n	8007a64 <_printf_float+0x1d8>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	465a      	mov	r2, fp
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f aefb 	beq.w	8007942 <_printf_float+0xb6>
 8007b4c:	f10a 0a01 	add.w	sl, sl, #1
 8007b50:	e7ee      	b.n	8007b30 <_printf_float+0x2a4>
 8007b52:	bf00      	nop
 8007b54:	7fefffff 	.word	0x7fefffff
 8007b58:	0800b714 	.word	0x0800b714
 8007b5c:	0800b718 	.word	0x0800b718
 8007b60:	0800b71c 	.word	0x0800b71c
 8007b64:	0800b720 	.word	0x0800b720
 8007b68:	0800b724 	.word	0x0800b724
 8007b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b72:	4553      	cmp	r3, sl
 8007b74:	bfa8      	it	ge
 8007b76:	4653      	movge	r3, sl
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	4699      	mov	r9, r3
 8007b7c:	dc36      	bgt.n	8007bec <_printf_float+0x360>
 8007b7e:	f04f 0b00 	mov.w	fp, #0
 8007b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b86:	f104 021a 	add.w	r2, r4, #26
 8007b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b8c:	9306      	str	r3, [sp, #24]
 8007b8e:	eba3 0309 	sub.w	r3, r3, r9
 8007b92:	455b      	cmp	r3, fp
 8007b94:	dc31      	bgt.n	8007bfa <_printf_float+0x36e>
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	459a      	cmp	sl, r3
 8007b9a:	dc3a      	bgt.n	8007c12 <_printf_float+0x386>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d437      	bmi.n	8007c12 <_printf_float+0x386>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8007ba8:	9b06      	ldr	r3, [sp, #24]
 8007baa:	ebaa 0303 	sub.w	r3, sl, r3
 8007bae:	4599      	cmp	r9, r3
 8007bb0:	bfa8      	it	ge
 8007bb2:	4699      	movge	r9, r3
 8007bb4:	f1b9 0f00 	cmp.w	r9, #0
 8007bb8:	dc33      	bgt.n	8007c22 <_printf_float+0x396>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc2:	f104 0b1a 	add.w	fp, r4, #26
 8007bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bcc:	eba3 0309 	sub.w	r3, r3, r9
 8007bd0:	4543      	cmp	r3, r8
 8007bd2:	f77f af79 	ble.w	8007ac8 <_printf_float+0x23c>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	465a      	mov	r2, fp
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f aeae 	beq.w	8007942 <_printf_float+0xb6>
 8007be6:	f108 0801 	add.w	r8, r8, #1
 8007bea:	e7ec      	b.n	8007bc6 <_printf_float+0x33a>
 8007bec:	4642      	mov	r2, r8
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1c2      	bne.n	8007b7e <_printf_float+0x2f2>
 8007bf8:	e6a3      	b.n	8007942 <_printf_float+0xb6>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	9206      	str	r2, [sp, #24]
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae9c 	beq.w	8007942 <_printf_float+0xb6>
 8007c0a:	9a06      	ldr	r2, [sp, #24]
 8007c0c:	f10b 0b01 	add.w	fp, fp, #1
 8007c10:	e7bb      	b.n	8007b8a <_printf_float+0x2fe>
 8007c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d1c0      	bne.n	8007ba2 <_printf_float+0x316>
 8007c20:	e68f      	b.n	8007942 <_printf_float+0xb6>
 8007c22:	9a06      	ldr	r2, [sp, #24]
 8007c24:	464b      	mov	r3, r9
 8007c26:	4442      	add	r2, r8
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d1c3      	bne.n	8007bba <_printf_float+0x32e>
 8007c32:	e686      	b.n	8007942 <_printf_float+0xb6>
 8007c34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c38:	f1ba 0f01 	cmp.w	sl, #1
 8007c3c:	dc01      	bgt.n	8007c42 <_printf_float+0x3b6>
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	d536      	bpl.n	8007cb0 <_printf_float+0x424>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4642      	mov	r2, r8
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f ae78 	beq.w	8007942 <_printf_float+0xb6>
 8007c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae70 	beq.w	8007942 <_printf_float+0xb6>
 8007c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c6e:	f7f8 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c72:	b9c0      	cbnz	r0, 8007ca6 <_printf_float+0x41a>
 8007c74:	4653      	mov	r3, sl
 8007c76:	f108 0201 	add.w	r2, r8, #1
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d10c      	bne.n	8007c9e <_printf_float+0x412>
 8007c84:	e65d      	b.n	8007942 <_printf_float+0xb6>
 8007c86:	2301      	movs	r3, #1
 8007c88:	465a      	mov	r2, fp
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f ae56 	beq.w	8007942 <_printf_float+0xb6>
 8007c96:	f108 0801 	add.w	r8, r8, #1
 8007c9a:	45d0      	cmp	r8, sl
 8007c9c:	dbf3      	blt.n	8007c86 <_printf_float+0x3fa>
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ca4:	e6df      	b.n	8007a66 <_printf_float+0x1da>
 8007ca6:	f04f 0800 	mov.w	r8, #0
 8007caa:	f104 0b1a 	add.w	fp, r4, #26
 8007cae:	e7f4      	b.n	8007c9a <_printf_float+0x40e>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4642      	mov	r2, r8
 8007cb4:	e7e1      	b.n	8007c7a <_printf_float+0x3ee>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	464a      	mov	r2, r9
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f ae3e 	beq.w	8007942 <_printf_float+0xb6>
 8007cc6:	f108 0801 	add.w	r8, r8, #1
 8007cca:	68e3      	ldr	r3, [r4, #12]
 8007ccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cce:	1a5b      	subs	r3, r3, r1
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	dcf0      	bgt.n	8007cb6 <_printf_float+0x42a>
 8007cd4:	e6fc      	b.n	8007ad0 <_printf_float+0x244>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	f104 0919 	add.w	r9, r4, #25
 8007cde:	e7f4      	b.n	8007cca <_printf_float+0x43e>

08007ce0 <_printf_common>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	4698      	mov	r8, r3
 8007ce8:	688a      	ldr	r2, [r1, #8]
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bfb8      	it	lt
 8007cf4:	4613      	movlt	r3, r2
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b10a      	cbz	r2, 8007d06 <_printf_common+0x26>
 8007d02:	3301      	adds	r3, #1
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	0699      	lsls	r1, r3, #26
 8007d0a:	bf42      	ittt	mi
 8007d0c:	6833      	ldrmi	r3, [r6, #0]
 8007d0e:	3302      	addmi	r3, #2
 8007d10:	6033      	strmi	r3, [r6, #0]
 8007d12:	6825      	ldr	r5, [r4, #0]
 8007d14:	f015 0506 	ands.w	r5, r5, #6
 8007d18:	d106      	bne.n	8007d28 <_printf_common+0x48>
 8007d1a:	f104 0a19 	add.w	sl, r4, #25
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	6832      	ldr	r2, [r6, #0]
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dc26      	bgt.n	8007d76 <_printf_common+0x96>
 8007d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	3b00      	subs	r3, #0
 8007d30:	bf18      	it	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	0692      	lsls	r2, r2, #26
 8007d36:	d42b      	bmi.n	8007d90 <_printf_common+0xb0>
 8007d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c8      	blx	r9
 8007d42:	3001      	adds	r0, #1
 8007d44:	d01e      	beq.n	8007d84 <_printf_common+0xa4>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	f003 0306 	and.w	r3, r3, #6
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	bf02      	ittt	eq
 8007d52:	68e5      	ldreq	r5, [r4, #12]
 8007d54:	6833      	ldreq	r3, [r6, #0]
 8007d56:	1aed      	subeq	r5, r5, r3
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	bf0c      	ite	eq
 8007d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d60:	2500      	movne	r5, #0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bfc4      	itt	gt
 8007d66:	1a9b      	subgt	r3, r3, r2
 8007d68:	18ed      	addgt	r5, r5, r3
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	341a      	adds	r4, #26
 8007d6e:	42b5      	cmp	r5, r6
 8007d70:	d11a      	bne.n	8007da8 <_printf_common+0xc8>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e008      	b.n	8007d88 <_printf_common+0xa8>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4641      	mov	r1, r8
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	47c8      	blx	r9
 8007d80:	3001      	adds	r0, #1
 8007d82:	d103      	bne.n	8007d8c <_printf_common+0xac>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	e7c6      	b.n	8007d1e <_printf_common+0x3e>
 8007d90:	18e1      	adds	r1, r4, r3
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	2030      	movs	r0, #48	@ 0x30
 8007d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d9a:	4422      	add	r2, r4
 8007d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007da4:	3302      	adds	r3, #2
 8007da6:	e7c7      	b.n	8007d38 <_printf_common+0x58>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4622      	mov	r2, r4
 8007dac:	4641      	mov	r1, r8
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c8      	blx	r9
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0e6      	beq.n	8007d84 <_printf_common+0xa4>
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7d9      	b.n	8007d6e <_printf_common+0x8e>
	...

08007dbc <_printf_i>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	7e0f      	ldrb	r7, [r1, #24]
 8007dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dc4:	2f78      	cmp	r7, #120	@ 0x78
 8007dc6:	4691      	mov	r9, r2
 8007dc8:	4680      	mov	r8, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	469a      	mov	sl, r3
 8007dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dd2:	d807      	bhi.n	8007de4 <_printf_i+0x28>
 8007dd4:	2f62      	cmp	r7, #98	@ 0x62
 8007dd6:	d80a      	bhi.n	8007dee <_printf_i+0x32>
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	f000 80d2 	beq.w	8007f82 <_printf_i+0x1c6>
 8007dde:	2f58      	cmp	r7, #88	@ 0x58
 8007de0:	f000 80b9 	beq.w	8007f56 <_printf_i+0x19a>
 8007de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dec:	e03a      	b.n	8007e64 <_printf_i+0xa8>
 8007dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007df2:	2b15      	cmp	r3, #21
 8007df4:	d8f6      	bhi.n	8007de4 <_printf_i+0x28>
 8007df6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dfc <_printf_i+0x40>)
 8007df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dfc:	08007e55 	.word	0x08007e55
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007de5 	.word	0x08007de5
 8007e08:	08007de5 	.word	0x08007de5
 8007e0c:	08007de5 	.word	0x08007de5
 8007e10:	08007de5 	.word	0x08007de5
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007de5 	.word	0x08007de5
 8007e1c:	08007de5 	.word	0x08007de5
 8007e20:	08007de5 	.word	0x08007de5
 8007e24:	08007de5 	.word	0x08007de5
 8007e28:	08007f69 	.word	0x08007f69
 8007e2c:	08007e93 	.word	0x08007e93
 8007e30:	08007f23 	.word	0x08007f23
 8007e34:	08007de5 	.word	0x08007de5
 8007e38:	08007de5 	.word	0x08007de5
 8007e3c:	08007f8b 	.word	0x08007f8b
 8007e40:	08007de5 	.word	0x08007de5
 8007e44:	08007e93 	.word	0x08007e93
 8007e48:	08007de5 	.word	0x08007de5
 8007e4c:	08007de5 	.word	0x08007de5
 8007e50:	08007f2b 	.word	0x08007f2b
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6032      	str	r2, [r6, #0]
 8007e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e64:	2301      	movs	r3, #1
 8007e66:	e09d      	b.n	8007fa4 <_printf_i+0x1e8>
 8007e68:	6833      	ldr	r3, [r6, #0]
 8007e6a:	6820      	ldr	r0, [r4, #0]
 8007e6c:	1d19      	adds	r1, r3, #4
 8007e6e:	6031      	str	r1, [r6, #0]
 8007e70:	0606      	lsls	r6, r0, #24
 8007e72:	d501      	bpl.n	8007e78 <_printf_i+0xbc>
 8007e74:	681d      	ldr	r5, [r3, #0]
 8007e76:	e003      	b.n	8007e80 <_printf_i+0xc4>
 8007e78:	0645      	lsls	r5, r0, #25
 8007e7a:	d5fb      	bpl.n	8007e74 <_printf_i+0xb8>
 8007e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	da03      	bge.n	8007e8c <_printf_i+0xd0>
 8007e84:	232d      	movs	r3, #45	@ 0x2d
 8007e86:	426d      	negs	r5, r5
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e8c:	4859      	ldr	r0, [pc, #356]	@ (8007ff4 <_printf_i+0x238>)
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e011      	b.n	8007eb6 <_printf_i+0xfa>
 8007e92:	6821      	ldr	r1, [r4, #0]
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	0608      	lsls	r0, r1, #24
 8007e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e9c:	d402      	bmi.n	8007ea4 <_printf_i+0xe8>
 8007e9e:	0649      	lsls	r1, r1, #25
 8007ea0:	bf48      	it	mi
 8007ea2:	b2ad      	uxthmi	r5, r5
 8007ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ea6:	4853      	ldr	r0, [pc, #332]	@ (8007ff4 <_printf_i+0x238>)
 8007ea8:	6033      	str	r3, [r6, #0]
 8007eaa:	bf14      	ite	ne
 8007eac:	230a      	movne	r3, #10
 8007eae:	2308      	moveq	r3, #8
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007eb6:	6866      	ldr	r6, [r4, #4]
 8007eb8:	60a6      	str	r6, [r4, #8]
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	bfa2      	ittt	ge
 8007ebe:	6821      	ldrge	r1, [r4, #0]
 8007ec0:	f021 0104 	bicge.w	r1, r1, #4
 8007ec4:	6021      	strge	r1, [r4, #0]
 8007ec6:	b90d      	cbnz	r5, 8007ecc <_printf_i+0x110>
 8007ec8:	2e00      	cmp	r6, #0
 8007eca:	d04b      	beq.n	8007f64 <_printf_i+0x1a8>
 8007ecc:	4616      	mov	r6, r2
 8007ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ed6:	5dc7      	ldrb	r7, [r0, r7]
 8007ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007edc:	462f      	mov	r7, r5
 8007ede:	42bb      	cmp	r3, r7
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	d9f4      	bls.n	8007ece <_printf_i+0x112>
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d10b      	bne.n	8007f00 <_printf_i+0x144>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	07df      	lsls	r7, r3, #31
 8007eec:	d508      	bpl.n	8007f00 <_printf_i+0x144>
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	6861      	ldr	r1, [r4, #4]
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	bfde      	ittt	le
 8007ef6:	2330      	movle	r3, #48	@ 0x30
 8007ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007efc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f00:	1b92      	subs	r2, r2, r6
 8007f02:	6122      	str	r2, [r4, #16]
 8007f04:	f8cd a000 	str.w	sl, [sp]
 8007f08:	464b      	mov	r3, r9
 8007f0a:	aa03      	add	r2, sp, #12
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f7ff fee6 	bl	8007ce0 <_printf_common>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d14a      	bne.n	8007fae <_printf_i+0x1f2>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	b004      	add	sp, #16
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	f043 0320 	orr.w	r3, r3, #32
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	4833      	ldr	r0, [pc, #204]	@ (8007ff8 <_printf_i+0x23c>)
 8007f2c:	2778      	movs	r7, #120	@ 0x78
 8007f2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	6831      	ldr	r1, [r6, #0]
 8007f36:	061f      	lsls	r7, r3, #24
 8007f38:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f3c:	d402      	bmi.n	8007f44 <_printf_i+0x188>
 8007f3e:	065f      	lsls	r7, r3, #25
 8007f40:	bf48      	it	mi
 8007f42:	b2ad      	uxthmi	r5, r5
 8007f44:	6031      	str	r1, [r6, #0]
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	bf44      	itt	mi
 8007f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4e:	6023      	strmi	r3, [r4, #0]
 8007f50:	b11d      	cbz	r5, 8007f5a <_printf_i+0x19e>
 8007f52:	2310      	movs	r3, #16
 8007f54:	e7ac      	b.n	8007eb0 <_printf_i+0xf4>
 8007f56:	4827      	ldr	r0, [pc, #156]	@ (8007ff4 <_printf_i+0x238>)
 8007f58:	e7e9      	b.n	8007f2e <_printf_i+0x172>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f023 0320 	bic.w	r3, r3, #32
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	e7f6      	b.n	8007f52 <_printf_i+0x196>
 8007f64:	4616      	mov	r6, r2
 8007f66:	e7bd      	b.n	8007ee4 <_printf_i+0x128>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6030      	str	r0, [r6, #0]
 8007f72:	062e      	lsls	r6, r5, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1c0>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1c6>
 8007f7c:	0668      	lsls	r0, r5, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1bc>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4616      	mov	r6, r2
 8007f88:	e7bc      	b.n	8007f04 <_printf_i+0x148>
 8007f8a:	6833      	ldr	r3, [r6, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	6032      	str	r2, [r6, #0]
 8007f90:	681e      	ldr	r6, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7f8 f91a 	bl	80001d0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1e6>
 8007f9e:	1b80      	subs	r0, r0, r6
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fac:	e7aa      	b.n	8007f04 <_printf_i+0x148>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ad      	beq.n	8007f18 <_printf_i+0x15c>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x22e>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a6      	b.n	8007f1c <_printf_i+0x160>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09d      	beq.n	8007f18 <_printf_i+0x15c>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x212>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x206>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x222>
 8007ff2:	bf00      	nop
 8007ff4:	0800b726 	.word	0x0800b726
 8007ff8:	0800b737 	.word	0x0800b737

08007ffc <std>:
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	b510      	push	{r4, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	e9c0 3300 	strd	r3, r3, [r0]
 8008006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800800a:	6083      	str	r3, [r0, #8]
 800800c:	8181      	strh	r1, [r0, #12]
 800800e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008010:	81c2      	strh	r2, [r0, #14]
 8008012:	6183      	str	r3, [r0, #24]
 8008014:	4619      	mov	r1, r3
 8008016:	2208      	movs	r2, #8
 8008018:	305c      	adds	r0, #92	@ 0x5c
 800801a:	f000 f95a 	bl	80082d2 <memset>
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <std+0x58>)
 8008020:	6263      	str	r3, [r4, #36]	@ 0x24
 8008022:	4b0d      	ldr	r3, [pc, #52]	@ (8008058 <std+0x5c>)
 8008024:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008026:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <std+0x60>)
 8008028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800802a:	4b0d      	ldr	r3, [pc, #52]	@ (8008060 <std+0x64>)
 800802c:	6323      	str	r3, [r4, #48]	@ 0x30
 800802e:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <std+0x68>)
 8008030:	6224      	str	r4, [r4, #32]
 8008032:	429c      	cmp	r4, r3
 8008034:	d006      	beq.n	8008044 <std+0x48>
 8008036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800803a:	4294      	cmp	r4, r2
 800803c:	d002      	beq.n	8008044 <std+0x48>
 800803e:	33d0      	adds	r3, #208	@ 0xd0
 8008040:	429c      	cmp	r4, r3
 8008042:	d105      	bne.n	8008050 <std+0x54>
 8008044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804c:	f000 b9be 	b.w	80083cc <__retarget_lock_init_recursive>
 8008050:	bd10      	pop	{r4, pc}
 8008052:	bf00      	nop
 8008054:	0800824d 	.word	0x0800824d
 8008058:	0800826f 	.word	0x0800826f
 800805c:	080082a7 	.word	0x080082a7
 8008060:	080082cb 	.word	0x080082cb
 8008064:	2000087c 	.word	0x2000087c

08008068 <stdio_exit_handler>:
 8008068:	4a02      	ldr	r2, [pc, #8]	@ (8008074 <stdio_exit_handler+0xc>)
 800806a:	4903      	ldr	r1, [pc, #12]	@ (8008078 <stdio_exit_handler+0x10>)
 800806c:	4803      	ldr	r0, [pc, #12]	@ (800807c <stdio_exit_handler+0x14>)
 800806e:	f000 b869 	b.w	8008144 <_fwalk_sglue>
 8008072:	bf00      	nop
 8008074:	2000000c 	.word	0x2000000c
 8008078:	08009fc9 	.word	0x08009fc9
 800807c:	2000001c 	.word	0x2000001c

08008080 <cleanup_stdio>:
 8008080:	6841      	ldr	r1, [r0, #4]
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <cleanup_stdio+0x34>)
 8008084:	4299      	cmp	r1, r3
 8008086:	b510      	push	{r4, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	d001      	beq.n	8008090 <cleanup_stdio+0x10>
 800808c:	f001 ff9c 	bl	8009fc8 <_fflush_r>
 8008090:	68a1      	ldr	r1, [r4, #8]
 8008092:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <cleanup_stdio+0x38>)
 8008094:	4299      	cmp	r1, r3
 8008096:	d002      	beq.n	800809e <cleanup_stdio+0x1e>
 8008098:	4620      	mov	r0, r4
 800809a:	f001 ff95 	bl	8009fc8 <_fflush_r>
 800809e:	68e1      	ldr	r1, [r4, #12]
 80080a0:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <cleanup_stdio+0x3c>)
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d004      	beq.n	80080b0 <cleanup_stdio+0x30>
 80080a6:	4620      	mov	r0, r4
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f001 bf8c 	b.w	8009fc8 <_fflush_r>
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	bf00      	nop
 80080b4:	2000087c 	.word	0x2000087c
 80080b8:	200008e4 	.word	0x200008e4
 80080bc:	2000094c 	.word	0x2000094c

080080c0 <global_stdio_init.part.0>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <global_stdio_init.part.0+0x30>)
 80080c4:	4c0b      	ldr	r4, [pc, #44]	@ (80080f4 <global_stdio_init.part.0+0x34>)
 80080c6:	4a0c      	ldr	r2, [pc, #48]	@ (80080f8 <global_stdio_init.part.0+0x38>)
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	4620      	mov	r0, r4
 80080cc:	2200      	movs	r2, #0
 80080ce:	2104      	movs	r1, #4
 80080d0:	f7ff ff94 	bl	8007ffc <std>
 80080d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080d8:	2201      	movs	r2, #1
 80080da:	2109      	movs	r1, #9
 80080dc:	f7ff ff8e 	bl	8007ffc <std>
 80080e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080e4:	2202      	movs	r2, #2
 80080e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ea:	2112      	movs	r1, #18
 80080ec:	f7ff bf86 	b.w	8007ffc <std>
 80080f0:	200009b4 	.word	0x200009b4
 80080f4:	2000087c 	.word	0x2000087c
 80080f8:	08008069 	.word	0x08008069

080080fc <__sfp_lock_acquire>:
 80080fc:	4801      	ldr	r0, [pc, #4]	@ (8008104 <__sfp_lock_acquire+0x8>)
 80080fe:	f000 b966 	b.w	80083ce <__retarget_lock_acquire_recursive>
 8008102:	bf00      	nop
 8008104:	200009bd 	.word	0x200009bd

08008108 <__sfp_lock_release>:
 8008108:	4801      	ldr	r0, [pc, #4]	@ (8008110 <__sfp_lock_release+0x8>)
 800810a:	f000 b961 	b.w	80083d0 <__retarget_lock_release_recursive>
 800810e:	bf00      	nop
 8008110:	200009bd 	.word	0x200009bd

08008114 <__sinit>:
 8008114:	b510      	push	{r4, lr}
 8008116:	4604      	mov	r4, r0
 8008118:	f7ff fff0 	bl	80080fc <__sfp_lock_acquire>
 800811c:	6a23      	ldr	r3, [r4, #32]
 800811e:	b11b      	cbz	r3, 8008128 <__sinit+0x14>
 8008120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008124:	f7ff bff0 	b.w	8008108 <__sfp_lock_release>
 8008128:	4b04      	ldr	r3, [pc, #16]	@ (800813c <__sinit+0x28>)
 800812a:	6223      	str	r3, [r4, #32]
 800812c:	4b04      	ldr	r3, [pc, #16]	@ (8008140 <__sinit+0x2c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f5      	bne.n	8008120 <__sinit+0xc>
 8008134:	f7ff ffc4 	bl	80080c0 <global_stdio_init.part.0>
 8008138:	e7f2      	b.n	8008120 <__sinit+0xc>
 800813a:	bf00      	nop
 800813c:	08008081 	.word	0x08008081
 8008140:	200009b4 	.word	0x200009b4

08008144 <_fwalk_sglue>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	4607      	mov	r7, r0
 800814a:	4688      	mov	r8, r1
 800814c:	4614      	mov	r4, r2
 800814e:	2600      	movs	r6, #0
 8008150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008154:	f1b9 0901 	subs.w	r9, r9, #1
 8008158:	d505      	bpl.n	8008166 <_fwalk_sglue+0x22>
 800815a:	6824      	ldr	r4, [r4, #0]
 800815c:	2c00      	cmp	r4, #0
 800815e:	d1f7      	bne.n	8008150 <_fwalk_sglue+0xc>
 8008160:	4630      	mov	r0, r6
 8008162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d907      	bls.n	800817c <_fwalk_sglue+0x38>
 800816c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008170:	3301      	adds	r3, #1
 8008172:	d003      	beq.n	800817c <_fwalk_sglue+0x38>
 8008174:	4629      	mov	r1, r5
 8008176:	4638      	mov	r0, r7
 8008178:	47c0      	blx	r8
 800817a:	4306      	orrs	r6, r0
 800817c:	3568      	adds	r5, #104	@ 0x68
 800817e:	e7e9      	b.n	8008154 <_fwalk_sglue+0x10>

08008180 <iprintf>:
 8008180:	b40f      	push	{r0, r1, r2, r3}
 8008182:	b507      	push	{r0, r1, r2, lr}
 8008184:	4906      	ldr	r1, [pc, #24]	@ (80081a0 <iprintf+0x20>)
 8008186:	ab04      	add	r3, sp, #16
 8008188:	6808      	ldr	r0, [r1, #0]
 800818a:	f853 2b04 	ldr.w	r2, [r3], #4
 800818e:	6881      	ldr	r1, [r0, #8]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	f001 fd7d 	bl	8009c90 <_vfiprintf_r>
 8008196:	b003      	add	sp, #12
 8008198:	f85d eb04 	ldr.w	lr, [sp], #4
 800819c:	b004      	add	sp, #16
 800819e:	4770      	bx	lr
 80081a0:	20000018 	.word	0x20000018

080081a4 <sniprintf>:
 80081a4:	b40c      	push	{r2, r3}
 80081a6:	b530      	push	{r4, r5, lr}
 80081a8:	4b17      	ldr	r3, [pc, #92]	@ (8008208 <sniprintf+0x64>)
 80081aa:	1e0c      	subs	r4, r1, #0
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	b09d      	sub	sp, #116	@ 0x74
 80081b0:	da08      	bge.n	80081c4 <sniprintf+0x20>
 80081b2:	238b      	movs	r3, #139	@ 0x8b
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	b01d      	add	sp, #116	@ 0x74
 80081bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c0:	b002      	add	sp, #8
 80081c2:	4770      	bx	lr
 80081c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80081c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081cc:	bf14      	ite	ne
 80081ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081d2:	4623      	moveq	r3, r4
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081dc:	9002      	str	r0, [sp, #8]
 80081de:	9006      	str	r0, [sp, #24]
 80081e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081e6:	ab21      	add	r3, sp, #132	@ 0x84
 80081e8:	a902      	add	r1, sp, #8
 80081ea:	4628      	mov	r0, r5
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	f001 fc29 	bl	8009a44 <_svfiprintf_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	bfbc      	itt	lt
 80081f6:	238b      	movlt	r3, #139	@ 0x8b
 80081f8:	602b      	strlt	r3, [r5, #0]
 80081fa:	2c00      	cmp	r4, #0
 80081fc:	d0dd      	beq.n	80081ba <sniprintf+0x16>
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	2200      	movs	r2, #0
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e7d9      	b.n	80081ba <sniprintf+0x16>
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018

0800820c <siprintf>:
 800820c:	b40e      	push	{r1, r2, r3}
 800820e:	b500      	push	{lr}
 8008210:	b09c      	sub	sp, #112	@ 0x70
 8008212:	ab1d      	add	r3, sp, #116	@ 0x74
 8008214:	9002      	str	r0, [sp, #8]
 8008216:	9006      	str	r0, [sp, #24]
 8008218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800821c:	4809      	ldr	r0, [pc, #36]	@ (8008244 <siprintf+0x38>)
 800821e:	9107      	str	r1, [sp, #28]
 8008220:	9104      	str	r1, [sp, #16]
 8008222:	4909      	ldr	r1, [pc, #36]	@ (8008248 <siprintf+0x3c>)
 8008224:	f853 2b04 	ldr.w	r2, [r3], #4
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	6800      	ldr	r0, [r0, #0]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	a902      	add	r1, sp, #8
 8008230:	f001 fc08 	bl	8009a44 <_svfiprintf_r>
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	b01c      	add	sp, #112	@ 0x70
 800823c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008240:	b003      	add	sp, #12
 8008242:	4770      	bx	lr
 8008244:	20000018 	.word	0x20000018
 8008248:	ffff0208 	.word	0xffff0208

0800824c <__sread>:
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	f000 f86c 	bl	8008330 <_read_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	bfab      	itete	ge
 800825c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800825e:	89a3      	ldrhlt	r3, [r4, #12]
 8008260:	181b      	addge	r3, r3, r0
 8008262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008266:	bfac      	ite	ge
 8008268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800826a:	81a3      	strhlt	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}

0800826e <__swrite>:
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	461f      	mov	r7, r3
 8008274:	898b      	ldrh	r3, [r1, #12]
 8008276:	05db      	lsls	r3, r3, #23
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4616      	mov	r6, r2
 800827e:	d505      	bpl.n	800828c <__swrite+0x1e>
 8008280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008284:	2302      	movs	r3, #2
 8008286:	2200      	movs	r2, #0
 8008288:	f000 f840 	bl	800830c <_lseek_r>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	4632      	mov	r2, r6
 800829a:	463b      	mov	r3, r7
 800829c:	4628      	mov	r0, r5
 800829e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a2:	f000 b857 	b.w	8008354 <_write_r>

080082a6 <__sseek>:
 80082a6:	b510      	push	{r4, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 f82d 	bl	800830c <_lseek_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	bf15      	itete	ne
 80082b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082c2:	81a3      	strheq	r3, [r4, #12]
 80082c4:	bf18      	it	ne
 80082c6:	81a3      	strhne	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__sclose>:
 80082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ce:	f000 b80d 	b.w	80082ec <_close_r>

080082d2 <memset>:
 80082d2:	4402      	add	r2, r0
 80082d4:	4603      	mov	r3, r0
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d100      	bne.n	80082dc <memset+0xa>
 80082da:	4770      	bx	lr
 80082dc:	f803 1b01 	strb.w	r1, [r3], #1
 80082e0:	e7f9      	b.n	80082d6 <memset+0x4>
	...

080082e4 <_localeconv_r>:
 80082e4:	4800      	ldr	r0, [pc, #0]	@ (80082e8 <_localeconv_r+0x4>)
 80082e6:	4770      	bx	lr
 80082e8:	20000158 	.word	0x20000158

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d06      	ldr	r5, [pc, #24]	@ (8008308 <_close_r+0x1c>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fa fa25 	bl	8002746 <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	200009b8 	.word	0x200009b8

0800830c <_lseek_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	@ (800832c <_lseek_r+0x20>)
 8008310:	4604      	mov	r4, r0
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7fa fa3a 	bl	8002794 <_lseek>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_lseek_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_lseek_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	200009b8 	.word	0x200009b8

08008330 <_read_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	@ (8008350 <_read_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7fa f9c8 	bl	80026d4 <_read>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_read_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_read_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	200009b8 	.word	0x200009b8

08008354 <_write_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	@ (8008374 <_write_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7fa f9d3 	bl	800270e <_write>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_write_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_write_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	200009b8 	.word	0x200009b8

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	@ (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000018 	.word	0x20000018

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4d0d      	ldr	r5, [pc, #52]	@ (80083bc <__libc_init_array+0x38>)
 8008388:	4c0d      	ldr	r4, [pc, #52]	@ (80083c0 <__libc_init_array+0x3c>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	2600      	movs	r6, #0
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	4d0b      	ldr	r5, [pc, #44]	@ (80083c4 <__libc_init_array+0x40>)
 8008396:	4c0c      	ldr	r4, [pc, #48]	@ (80083c8 <__libc_init_array+0x44>)
 8008398:	f002 fa64 	bl	800a864 <_init>
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	2600      	movs	r6, #0
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	0800ba90 	.word	0x0800ba90
 80083c0:	0800ba90 	.word	0x0800ba90
 80083c4:	0800ba90 	.word	0x0800ba90
 80083c8:	0800ba94 	.word	0x0800ba94

080083cc <__retarget_lock_init_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_acquire_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <__retarget_lock_release_recursive>:
 80083d0:	4770      	bx	lr

080083d2 <memcpy>:
 80083d2:	440a      	add	r2, r1
 80083d4:	4291      	cmp	r1, r2
 80083d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083da:	d100      	bne.n	80083de <memcpy+0xc>
 80083dc:	4770      	bx	lr
 80083de:	b510      	push	{r4, lr}
 80083e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e8:	4291      	cmp	r1, r2
 80083ea:	d1f9      	bne.n	80083e0 <memcpy+0xe>
 80083ec:	bd10      	pop	{r4, pc}

080083ee <quorem>:
 80083ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f2:	6903      	ldr	r3, [r0, #16]
 80083f4:	690c      	ldr	r4, [r1, #16]
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	4607      	mov	r7, r0
 80083fa:	db7e      	blt.n	80084fa <quorem+0x10c>
 80083fc:	3c01      	subs	r4, #1
 80083fe:	f101 0814 	add.w	r8, r1, #20
 8008402:	00a3      	lsls	r3, r4, #2
 8008404:	f100 0514 	add.w	r5, r0, #20
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008418:	3301      	adds	r3, #1
 800841a:	429a      	cmp	r2, r3
 800841c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008420:	fbb2 f6f3 	udiv	r6, r2, r3
 8008424:	d32e      	bcc.n	8008484 <quorem+0x96>
 8008426:	f04f 0a00 	mov.w	sl, #0
 800842a:	46c4      	mov	ip, r8
 800842c:	46ae      	mov	lr, r5
 800842e:	46d3      	mov	fp, sl
 8008430:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008434:	b298      	uxth	r0, r3
 8008436:	fb06 a000 	mla	r0, r6, r0, sl
 800843a:	0c02      	lsrs	r2, r0, #16
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	fb06 2303 	mla	r3, r6, r3, r2
 8008442:	f8de 2000 	ldr.w	r2, [lr]
 8008446:	b280      	uxth	r0, r0
 8008448:	b292      	uxth	r2, r2
 800844a:	1a12      	subs	r2, r2, r0
 800844c:	445a      	add	r2, fp
 800844e:	f8de 0000 	ldr.w	r0, [lr]
 8008452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008456:	b29b      	uxth	r3, r3
 8008458:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800845c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008460:	b292      	uxth	r2, r2
 8008462:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008466:	45e1      	cmp	r9, ip
 8008468:	f84e 2b04 	str.w	r2, [lr], #4
 800846c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008470:	d2de      	bcs.n	8008430 <quorem+0x42>
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	58eb      	ldr	r3, [r5, r3]
 8008476:	b92b      	cbnz	r3, 8008484 <quorem+0x96>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	3b04      	subs	r3, #4
 800847c:	429d      	cmp	r5, r3
 800847e:	461a      	mov	r2, r3
 8008480:	d32f      	bcc.n	80084e2 <quorem+0xf4>
 8008482:	613c      	str	r4, [r7, #16]
 8008484:	4638      	mov	r0, r7
 8008486:	f001 f979 	bl	800977c <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	db25      	blt.n	80084da <quorem+0xec>
 800848e:	4629      	mov	r1, r5
 8008490:	2000      	movs	r0, #0
 8008492:	f858 2b04 	ldr.w	r2, [r8], #4
 8008496:	f8d1 c000 	ldr.w	ip, [r1]
 800849a:	fa1f fe82 	uxth.w	lr, r2
 800849e:	fa1f f38c 	uxth.w	r3, ip
 80084a2:	eba3 030e 	sub.w	r3, r3, lr
 80084a6:	4403      	add	r3, r0
 80084a8:	0c12      	lsrs	r2, r2, #16
 80084aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b8:	45c1      	cmp	r9, r8
 80084ba:	f841 3b04 	str.w	r3, [r1], #4
 80084be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084c2:	d2e6      	bcs.n	8008492 <quorem+0xa4>
 80084c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084cc:	b922      	cbnz	r2, 80084d8 <quorem+0xea>
 80084ce:	3b04      	subs	r3, #4
 80084d0:	429d      	cmp	r5, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	d30b      	bcc.n	80084ee <quorem+0x100>
 80084d6:	613c      	str	r4, [r7, #16]
 80084d8:	3601      	adds	r6, #1
 80084da:	4630      	mov	r0, r6
 80084dc:	b003      	add	sp, #12
 80084de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d1cb      	bne.n	8008482 <quorem+0x94>
 80084ea:	3c01      	subs	r4, #1
 80084ec:	e7c6      	b.n	800847c <quorem+0x8e>
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	3b04      	subs	r3, #4
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d1ef      	bne.n	80084d6 <quorem+0xe8>
 80084f6:	3c01      	subs	r4, #1
 80084f8:	e7ea      	b.n	80084d0 <quorem+0xe2>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7ee      	b.n	80084dc <quorem+0xee>
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	69c7      	ldr	r7, [r0, #28]
 8008506:	b099      	sub	sp, #100	@ 0x64
 8008508:	ed8d 0b02 	vstr	d0, [sp, #8]
 800850c:	ec55 4b10 	vmov	r4, r5, d0
 8008510:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008512:	9109      	str	r1, [sp, #36]	@ 0x24
 8008514:	4683      	mov	fp, r0
 8008516:	920e      	str	r2, [sp, #56]	@ 0x38
 8008518:	9313      	str	r3, [sp, #76]	@ 0x4c
 800851a:	b97f      	cbnz	r7, 800853c <_dtoa_r+0x3c>
 800851c:	2010      	movs	r0, #16
 800851e:	f000 fdfd 	bl	800911c <malloc>
 8008522:	4602      	mov	r2, r0
 8008524:	f8cb 001c 	str.w	r0, [fp, #28]
 8008528:	b920      	cbnz	r0, 8008534 <_dtoa_r+0x34>
 800852a:	4ba7      	ldr	r3, [pc, #668]	@ (80087c8 <_dtoa_r+0x2c8>)
 800852c:	21ef      	movs	r1, #239	@ 0xef
 800852e:	48a7      	ldr	r0, [pc, #668]	@ (80087cc <_dtoa_r+0x2cc>)
 8008530:	f001 fe30 	bl	800a194 <__assert_func>
 8008534:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008538:	6007      	str	r7, [r0, #0]
 800853a:	60c7      	str	r7, [r0, #12]
 800853c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008540:	6819      	ldr	r1, [r3, #0]
 8008542:	b159      	cbz	r1, 800855c <_dtoa_r+0x5c>
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	604a      	str	r2, [r1, #4]
 8008548:	2301      	movs	r3, #1
 800854a:	4093      	lsls	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
 800854e:	4658      	mov	r0, fp
 8008550:	f000 feda 	bl	8009308 <_Bfree>
 8008554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	1e2b      	subs	r3, r5, #0
 800855e:	bfb9      	ittee	lt
 8008560:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008564:	9303      	strlt	r3, [sp, #12]
 8008566:	2300      	movge	r3, #0
 8008568:	6033      	strge	r3, [r6, #0]
 800856a:	9f03      	ldr	r7, [sp, #12]
 800856c:	4b98      	ldr	r3, [pc, #608]	@ (80087d0 <_dtoa_r+0x2d0>)
 800856e:	bfbc      	itt	lt
 8008570:	2201      	movlt	r2, #1
 8008572:	6032      	strlt	r2, [r6, #0]
 8008574:	43bb      	bics	r3, r7
 8008576:	d112      	bne.n	800859e <_dtoa_r+0x9e>
 8008578:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800857a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008584:	4323      	orrs	r3, r4
 8008586:	f000 854d 	beq.w	8009024 <_dtoa_r+0xb24>
 800858a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800858c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80087e4 <_dtoa_r+0x2e4>
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 854f 	beq.w	8009034 <_dtoa_r+0xb34>
 8008596:	f10a 0303 	add.w	r3, sl, #3
 800859a:	f000 bd49 	b.w	8009030 <_dtoa_r+0xb30>
 800859e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	ec51 0b17 	vmov	r0, r1, d7
 80085a8:	2300      	movs	r3, #0
 80085aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80085ae:	f7f8 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b2:	4680      	mov	r8, r0
 80085b4:	b158      	cbz	r0, 80085ce <_dtoa_r+0xce>
 80085b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80085b8:	2301      	movs	r3, #1
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085be:	b113      	cbz	r3, 80085c6 <_dtoa_r+0xc6>
 80085c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085c2:	4b84      	ldr	r3, [pc, #528]	@ (80087d4 <_dtoa_r+0x2d4>)
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80087e8 <_dtoa_r+0x2e8>
 80085ca:	f000 bd33 	b.w	8009034 <_dtoa_r+0xb34>
 80085ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085d2:	aa16      	add	r2, sp, #88	@ 0x58
 80085d4:	a917      	add	r1, sp, #92	@ 0x5c
 80085d6:	4658      	mov	r0, fp
 80085d8:	f001 f980 	bl	80098dc <__d2b>
 80085dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085e0:	4681      	mov	r9, r0
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d077      	beq.n	80086d6 <_dtoa_r+0x1d6>
 80085e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80085ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008600:	4619      	mov	r1, r3
 8008602:	2200      	movs	r2, #0
 8008604:	4b74      	ldr	r3, [pc, #464]	@ (80087d8 <_dtoa_r+0x2d8>)
 8008606:	f7f7 fe3f 	bl	8000288 <__aeabi_dsub>
 800860a:	a369      	add	r3, pc, #420	@ (adr r3, 80087b0 <_dtoa_r+0x2b0>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	a368      	add	r3, pc, #416	@ (adr r3, 80087b8 <_dtoa_r+0x2b8>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f7 fe37 	bl	800028c <__adddf3>
 800861e:	4604      	mov	r4, r0
 8008620:	4630      	mov	r0, r6
 8008622:	460d      	mov	r5, r1
 8008624:	f7f7 ff7e 	bl	8000524 <__aeabi_i2d>
 8008628:	a365      	add	r3, pc, #404	@ (adr r3, 80087c0 <_dtoa_r+0x2c0>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f7 fe27 	bl	800028c <__adddf3>
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	f7f8 fa89 	bl	8000b58 <__aeabi_d2iz>
 8008646:	2200      	movs	r2, #0
 8008648:	4607      	mov	r7, r0
 800864a:	2300      	movs	r3, #0
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	f7f8 fa44 	bl	8000adc <__aeabi_dcmplt>
 8008654:	b140      	cbz	r0, 8008668 <_dtoa_r+0x168>
 8008656:	4638      	mov	r0, r7
 8008658:	f7f7 ff64 	bl	8000524 <__aeabi_i2d>
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	f7f8 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008664:	b900      	cbnz	r0, 8008668 <_dtoa_r+0x168>
 8008666:	3f01      	subs	r7, #1
 8008668:	2f16      	cmp	r7, #22
 800866a:	d851      	bhi.n	8008710 <_dtoa_r+0x210>
 800866c:	4b5b      	ldr	r3, [pc, #364]	@ (80087dc <_dtoa_r+0x2dc>)
 800866e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800867a:	f7f8 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	d048      	beq.n	8008714 <_dtoa_r+0x214>
 8008682:	3f01      	subs	r7, #1
 8008684:	2300      	movs	r3, #0
 8008686:	9312      	str	r3, [sp, #72]	@ 0x48
 8008688:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800868a:	1b9b      	subs	r3, r3, r6
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	bf44      	itt	mi
 8008690:	f1c3 0801 	rsbmi	r8, r3, #1
 8008694:	2300      	movmi	r3, #0
 8008696:	9208      	str	r2, [sp, #32]
 8008698:	bf54      	ite	pl
 800869a:	f04f 0800 	movpl.w	r8, #0
 800869e:	9308      	strmi	r3, [sp, #32]
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	db39      	blt.n	8008718 <_dtoa_r+0x218>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80086a8:	443b      	add	r3, r7
 80086aa:	9308      	str	r3, [sp, #32]
 80086ac:	2300      	movs	r3, #0
 80086ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b2:	2b09      	cmp	r3, #9
 80086b4:	d864      	bhi.n	8008780 <_dtoa_r+0x280>
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	bfc4      	itt	gt
 80086ba:	3b04      	subgt	r3, #4
 80086bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	f1a3 0302 	sub.w	r3, r3, #2
 80086c4:	bfcc      	ite	gt
 80086c6:	2400      	movgt	r4, #0
 80086c8:	2401      	movle	r4, #1
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d863      	bhi.n	8008796 <_dtoa_r+0x296>
 80086ce:	e8df f003 	tbb	[pc, r3]
 80086d2:	372a      	.short	0x372a
 80086d4:	5535      	.short	0x5535
 80086d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80086da:	441e      	add	r6, r3
 80086dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	bfc1      	itttt	gt
 80086e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086e8:	409f      	lslgt	r7, r3
 80086ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086f2:	bfd6      	itet	le
 80086f4:	f1c3 0320 	rsble	r3, r3, #32
 80086f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80086fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008700:	f7f7 ff00 	bl	8000504 <__aeabi_ui2d>
 8008704:	2201      	movs	r2, #1
 8008706:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800870a:	3e01      	subs	r6, #1
 800870c:	9214      	str	r2, [sp, #80]	@ 0x50
 800870e:	e777      	b.n	8008600 <_dtoa_r+0x100>
 8008710:	2301      	movs	r3, #1
 8008712:	e7b8      	b.n	8008686 <_dtoa_r+0x186>
 8008714:	9012      	str	r0, [sp, #72]	@ 0x48
 8008716:	e7b7      	b.n	8008688 <_dtoa_r+0x188>
 8008718:	427b      	negs	r3, r7
 800871a:	930a      	str	r3, [sp, #40]	@ 0x28
 800871c:	2300      	movs	r3, #0
 800871e:	eba8 0807 	sub.w	r8, r8, r7
 8008722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008724:	e7c4      	b.n	80086b0 <_dtoa_r+0x1b0>
 8008726:	2300      	movs	r3, #0
 8008728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800872a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	dc35      	bgt.n	800879c <_dtoa_r+0x29c>
 8008730:	2301      	movs	r3, #1
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	9307      	str	r3, [sp, #28]
 8008736:	461a      	mov	r2, r3
 8008738:	920e      	str	r2, [sp, #56]	@ 0x38
 800873a:	e00b      	b.n	8008754 <_dtoa_r+0x254>
 800873c:	2301      	movs	r3, #1
 800873e:	e7f3      	b.n	8008728 <_dtoa_r+0x228>
 8008740:	2300      	movs	r3, #0
 8008742:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	2b01      	cmp	r3, #1
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	bfb8      	it	lt
 8008752:	2301      	movlt	r3, #1
 8008754:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008758:	2100      	movs	r1, #0
 800875a:	2204      	movs	r2, #4
 800875c:	f102 0514 	add.w	r5, r2, #20
 8008760:	429d      	cmp	r5, r3
 8008762:	d91f      	bls.n	80087a4 <_dtoa_r+0x2a4>
 8008764:	6041      	str	r1, [r0, #4]
 8008766:	4658      	mov	r0, fp
 8008768:	f000 fd8e 	bl	8009288 <_Balloc>
 800876c:	4682      	mov	sl, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d13c      	bne.n	80087ec <_dtoa_r+0x2ec>
 8008772:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <_dtoa_r+0x2e0>)
 8008774:	4602      	mov	r2, r0
 8008776:	f240 11af 	movw	r1, #431	@ 0x1af
 800877a:	e6d8      	b.n	800852e <_dtoa_r+0x2e>
 800877c:	2301      	movs	r3, #1
 800877e:	e7e0      	b.n	8008742 <_dtoa_r+0x242>
 8008780:	2401      	movs	r4, #1
 8008782:	2300      	movs	r3, #0
 8008784:	9309      	str	r3, [sp, #36]	@ 0x24
 8008786:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	9307      	str	r3, [sp, #28]
 8008790:	2200      	movs	r2, #0
 8008792:	2312      	movs	r3, #18
 8008794:	e7d0      	b.n	8008738 <_dtoa_r+0x238>
 8008796:	2301      	movs	r3, #1
 8008798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800879a:	e7f5      	b.n	8008788 <_dtoa_r+0x288>
 800879c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	9307      	str	r3, [sp, #28]
 80087a2:	e7d7      	b.n	8008754 <_dtoa_r+0x254>
 80087a4:	3101      	adds	r1, #1
 80087a6:	0052      	lsls	r2, r2, #1
 80087a8:	e7d8      	b.n	800875c <_dtoa_r+0x25c>
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	636f4361 	.word	0x636f4361
 80087b4:	3fd287a7 	.word	0x3fd287a7
 80087b8:	8b60c8b3 	.word	0x8b60c8b3
 80087bc:	3fc68a28 	.word	0x3fc68a28
 80087c0:	509f79fb 	.word	0x509f79fb
 80087c4:	3fd34413 	.word	0x3fd34413
 80087c8:	0800b755 	.word	0x0800b755
 80087cc:	0800b76c 	.word	0x0800b76c
 80087d0:	7ff00000 	.word	0x7ff00000
 80087d4:	0800b725 	.word	0x0800b725
 80087d8:	3ff80000 	.word	0x3ff80000
 80087dc:	0800b868 	.word	0x0800b868
 80087e0:	0800b7c4 	.word	0x0800b7c4
 80087e4:	0800b751 	.word	0x0800b751
 80087e8:	0800b724 	.word	0x0800b724
 80087ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087f0:	6018      	str	r0, [r3, #0]
 80087f2:	9b07      	ldr	r3, [sp, #28]
 80087f4:	2b0e      	cmp	r3, #14
 80087f6:	f200 80a4 	bhi.w	8008942 <_dtoa_r+0x442>
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	f000 80a1 	beq.w	8008942 <_dtoa_r+0x442>
 8008800:	2f00      	cmp	r7, #0
 8008802:	dd33      	ble.n	800886c <_dtoa_r+0x36c>
 8008804:	4bad      	ldr	r3, [pc, #692]	@ (8008abc <_dtoa_r+0x5bc>)
 8008806:	f007 020f 	and.w	r2, r7, #15
 800880a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800880e:	ed93 7b00 	vldr	d7, [r3]
 8008812:	05f8      	lsls	r0, r7, #23
 8008814:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800881c:	d516      	bpl.n	800884c <_dtoa_r+0x34c>
 800881e:	4ba8      	ldr	r3, [pc, #672]	@ (8008ac0 <_dtoa_r+0x5c0>)
 8008820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008824:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008828:	f7f8 f810 	bl	800084c <__aeabi_ddiv>
 800882c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008830:	f004 040f 	and.w	r4, r4, #15
 8008834:	2603      	movs	r6, #3
 8008836:	4da2      	ldr	r5, [pc, #648]	@ (8008ac0 <_dtoa_r+0x5c0>)
 8008838:	b954      	cbnz	r4, 8008850 <_dtoa_r+0x350>
 800883a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800883e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008842:	f7f8 f803 	bl	800084c <__aeabi_ddiv>
 8008846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800884a:	e028      	b.n	800889e <_dtoa_r+0x39e>
 800884c:	2602      	movs	r6, #2
 800884e:	e7f2      	b.n	8008836 <_dtoa_r+0x336>
 8008850:	07e1      	lsls	r1, r4, #31
 8008852:	d508      	bpl.n	8008866 <_dtoa_r+0x366>
 8008854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800885c:	f7f7 fecc 	bl	80005f8 <__aeabi_dmul>
 8008860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008864:	3601      	adds	r6, #1
 8008866:	1064      	asrs	r4, r4, #1
 8008868:	3508      	adds	r5, #8
 800886a:	e7e5      	b.n	8008838 <_dtoa_r+0x338>
 800886c:	f000 80d2 	beq.w	8008a14 <_dtoa_r+0x514>
 8008870:	427c      	negs	r4, r7
 8008872:	4b92      	ldr	r3, [pc, #584]	@ (8008abc <_dtoa_r+0x5bc>)
 8008874:	4d92      	ldr	r5, [pc, #584]	@ (8008ac0 <_dtoa_r+0x5c0>)
 8008876:	f004 020f 	and.w	r2, r4, #15
 800887a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008886:	f7f7 feb7 	bl	80005f8 <__aeabi_dmul>
 800888a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800888e:	1124      	asrs	r4, r4, #4
 8008890:	2300      	movs	r3, #0
 8008892:	2602      	movs	r6, #2
 8008894:	2c00      	cmp	r4, #0
 8008896:	f040 80b2 	bne.w	80089fe <_dtoa_r+0x4fe>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1d3      	bne.n	8008846 <_dtoa_r+0x346>
 800889e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80b7 	beq.w	8008a18 <_dtoa_r+0x518>
 80088aa:	4b86      	ldr	r3, [pc, #536]	@ (8008ac4 <_dtoa_r+0x5c4>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f8 f913 	bl	8000adc <__aeabi_dcmplt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f000 80ae 	beq.w	8008a18 <_dtoa_r+0x518>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80aa 	beq.w	8008a18 <_dtoa_r+0x518>
 80088c4:	9b00      	ldr	r3, [sp, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd37      	ble.n	800893a <_dtoa_r+0x43a>
 80088ca:	1e7b      	subs	r3, r7, #1
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	4620      	mov	r0, r4
 80088d0:	4b7d      	ldr	r3, [pc, #500]	@ (8008ac8 <_dtoa_r+0x5c8>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088de:	9c00      	ldr	r4, [sp, #0]
 80088e0:	3601      	adds	r6, #1
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7f7 fe1e 	bl	8000524 <__aeabi_i2d>
 80088e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ec:	f7f7 fe84 	bl	80005f8 <__aeabi_dmul>
 80088f0:	4b76      	ldr	r3, [pc, #472]	@ (8008acc <_dtoa_r+0x5cc>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	f7f7 fcca 	bl	800028c <__adddf3>
 80088f8:	4605      	mov	r5, r0
 80088fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088fe:	2c00      	cmp	r4, #0
 8008900:	f040 808d 	bne.w	8008a1e <_dtoa_r+0x51e>
 8008904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008908:	4b71      	ldr	r3, [pc, #452]	@ (8008ad0 <_dtoa_r+0x5d0>)
 800890a:	2200      	movs	r2, #0
 800890c:	f7f7 fcbc 	bl	8000288 <__aeabi_dsub>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008918:	462a      	mov	r2, r5
 800891a:	4633      	mov	r3, r6
 800891c:	f7f8 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	f040 828b 	bne.w	8008e3c <_dtoa_r+0x93c>
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	462a      	mov	r2, r5
 800892c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008930:	f7f8 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8008934:	2800      	cmp	r0, #0
 8008936:	f040 8128 	bne.w	8008b8a <_dtoa_r+0x68a>
 800893a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800893e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008942:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008944:	2b00      	cmp	r3, #0
 8008946:	f2c0 815a 	blt.w	8008bfe <_dtoa_r+0x6fe>
 800894a:	2f0e      	cmp	r7, #14
 800894c:	f300 8157 	bgt.w	8008bfe <_dtoa_r+0x6fe>
 8008950:	4b5a      	ldr	r3, [pc, #360]	@ (8008abc <_dtoa_r+0x5bc>)
 8008952:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008956:	ed93 7b00 	vldr	d7, [r3]
 800895a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	ed8d 7b00 	vstr	d7, [sp]
 8008962:	da03      	bge.n	800896c <_dtoa_r+0x46c>
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f340 8101 	ble.w	8008b6e <_dtoa_r+0x66e>
 800896c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008970:	4656      	mov	r6, sl
 8008972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 ff67 	bl	800084c <__aeabi_ddiv>
 800897e:	f7f8 f8eb 	bl	8000b58 <__aeabi_d2iz>
 8008982:	4680      	mov	r8, r0
 8008984:	f7f7 fdce 	bl	8000524 <__aeabi_i2d>
 8008988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800899c:	f7f7 fc74 	bl	8000288 <__aeabi_dsub>
 80089a0:	f806 4b01 	strb.w	r4, [r6], #1
 80089a4:	9d07      	ldr	r5, [sp, #28]
 80089a6:	eba6 040a 	sub.w	r4, r6, sl
 80089aa:	42a5      	cmp	r5, r4
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	f040 8117 	bne.w	8008be2 <_dtoa_r+0x6e2>
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089bc:	4604      	mov	r4, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	f7f8 f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 80f9 	bne.w	8008bbc <_dtoa_r+0x6bc>
 80089ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f8 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d6:	b118      	cbz	r0, 80089e0 <_dtoa_r+0x4e0>
 80089d8:	f018 0f01 	tst.w	r8, #1
 80089dc:	f040 80ee 	bne.w	8008bbc <_dtoa_r+0x6bc>
 80089e0:	4649      	mov	r1, r9
 80089e2:	4658      	mov	r0, fp
 80089e4:	f000 fc90 	bl	8009308 <_Bfree>
 80089e8:	2300      	movs	r3, #0
 80089ea:	7033      	strb	r3, [r6, #0]
 80089ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ee:	3701      	adds	r7, #1
 80089f0:	601f      	str	r7, [r3, #0]
 80089f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 831d 	beq.w	8009034 <_dtoa_r+0xb34>
 80089fa:	601e      	str	r6, [r3, #0]
 80089fc:	e31a      	b.n	8009034 <_dtoa_r+0xb34>
 80089fe:	07e2      	lsls	r2, r4, #31
 8008a00:	d505      	bpl.n	8008a0e <_dtoa_r+0x50e>
 8008a02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a06:	f7f7 fdf7 	bl	80005f8 <__aeabi_dmul>
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	1064      	asrs	r4, r4, #1
 8008a10:	3508      	adds	r5, #8
 8008a12:	e73f      	b.n	8008894 <_dtoa_r+0x394>
 8008a14:	2602      	movs	r6, #2
 8008a16:	e742      	b.n	800889e <_dtoa_r+0x39e>
 8008a18:	9c07      	ldr	r4, [sp, #28]
 8008a1a:	9704      	str	r7, [sp, #16]
 8008a1c:	e761      	b.n	80088e2 <_dtoa_r+0x3e2>
 8008a1e:	4b27      	ldr	r3, [pc, #156]	@ (8008abc <_dtoa_r+0x5bc>)
 8008a20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a2a:	4454      	add	r4, sl
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d053      	beq.n	8008ad8 <_dtoa_r+0x5d8>
 8008a30:	4928      	ldr	r1, [pc, #160]	@ (8008ad4 <_dtoa_r+0x5d4>)
 8008a32:	2000      	movs	r0, #0
 8008a34:	f7f7 ff0a 	bl	800084c <__aeabi_ddiv>
 8008a38:	4633      	mov	r3, r6
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	f7f7 fc24 	bl	8000288 <__aeabi_dsub>
 8008a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a44:	4656      	mov	r6, sl
 8008a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4a:	f7f8 f885 	bl	8000b58 <__aeabi_d2iz>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	f7f7 fd68 	bl	8000524 <__aeabi_i2d>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5c:	f7f7 fc14 	bl	8000288 <__aeabi_dsub>
 8008a60:	3530      	adds	r5, #48	@ 0x30
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a6a:	f806 5b01 	strb.w	r5, [r6], #1
 8008a6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a72:	f7f8 f833 	bl	8000adc <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d171      	bne.n	8008b5e <_dtoa_r+0x65e>
 8008a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a7e:	4911      	ldr	r1, [pc, #68]	@ (8008ac4 <_dtoa_r+0x5c4>)
 8008a80:	2000      	movs	r0, #0
 8008a82:	f7f7 fc01 	bl	8000288 <__aeabi_dsub>
 8008a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a8a:	f7f8 f827 	bl	8000adc <__aeabi_dcmplt>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f040 8095 	bne.w	8008bbe <_dtoa_r+0x6be>
 8008a94:	42a6      	cmp	r6, r4
 8008a96:	f43f af50 	beq.w	800893a <_dtoa_r+0x43a>
 8008a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac8 <_dtoa_r+0x5c8>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f7f7 fda9 	bl	80005f8 <__aeabi_dmul>
 8008aa6:	4b08      	ldr	r3, [pc, #32]	@ (8008ac8 <_dtoa_r+0x5c8>)
 8008aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008aac:	2200      	movs	r2, #0
 8008aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab2:	f7f7 fda1 	bl	80005f8 <__aeabi_dmul>
 8008ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aba:	e7c4      	b.n	8008a46 <_dtoa_r+0x546>
 8008abc:	0800b868 	.word	0x0800b868
 8008ac0:	0800b840 	.word	0x0800b840
 8008ac4:	3ff00000 	.word	0x3ff00000
 8008ac8:	40240000 	.word	0x40240000
 8008acc:	401c0000 	.word	0x401c0000
 8008ad0:	40140000 	.word	0x40140000
 8008ad4:	3fe00000 	.word	0x3fe00000
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7f7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8008ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ae4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ae6:	4656      	mov	r6, sl
 8008ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aec:	f7f8 f834 	bl	8000b58 <__aeabi_d2iz>
 8008af0:	4605      	mov	r5, r0
 8008af2:	f7f7 fd17 	bl	8000524 <__aeabi_i2d>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afe:	f7f7 fbc3 	bl	8000288 <__aeabi_dsub>
 8008b02:	3530      	adds	r5, #48	@ 0x30
 8008b04:	f806 5b01 	strb.w	r5, [r6], #1
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b12:	f04f 0200 	mov.w	r2, #0
 8008b16:	d124      	bne.n	8008b62 <_dtoa_r+0x662>
 8008b18:	4bac      	ldr	r3, [pc, #688]	@ (8008dcc <_dtoa_r+0x8cc>)
 8008b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b1e:	f7f7 fbb5 	bl	800028c <__adddf3>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2a:	f7f7 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d145      	bne.n	8008bbe <_dtoa_r+0x6be>
 8008b32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b36:	49a5      	ldr	r1, [pc, #660]	@ (8008dcc <_dtoa_r+0x8cc>)
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f7f7 fba5 	bl	8000288 <__aeabi_dsub>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b46:	f7f7 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f43f aef5 	beq.w	800893a <_dtoa_r+0x43a>
 8008b50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b52:	1e73      	subs	r3, r6, #1
 8008b54:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b5a:	2b30      	cmp	r3, #48	@ 0x30
 8008b5c:	d0f8      	beq.n	8008b50 <_dtoa_r+0x650>
 8008b5e:	9f04      	ldr	r7, [sp, #16]
 8008b60:	e73e      	b.n	80089e0 <_dtoa_r+0x4e0>
 8008b62:	4b9b      	ldr	r3, [pc, #620]	@ (8008dd0 <_dtoa_r+0x8d0>)
 8008b64:	f7f7 fd48 	bl	80005f8 <__aeabi_dmul>
 8008b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6c:	e7bc      	b.n	8008ae8 <_dtoa_r+0x5e8>
 8008b6e:	d10c      	bne.n	8008b8a <_dtoa_r+0x68a>
 8008b70:	4b98      	ldr	r3, [pc, #608]	@ (8008dd4 <_dtoa_r+0x8d4>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b78:	f7f7 fd3e 	bl	80005f8 <__aeabi_dmul>
 8008b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b80:	f7f7 ffc0 	bl	8000b04 <__aeabi_dcmpge>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f000 8157 	beq.w	8008e38 <_dtoa_r+0x938>
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	4625      	mov	r5, r4
 8008b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b90:	43db      	mvns	r3, r3
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	4656      	mov	r6, sl
 8008b96:	2700      	movs	r7, #0
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f000 fbb4 	bl	8009308 <_Bfree>
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	d0dc      	beq.n	8008b5e <_dtoa_r+0x65e>
 8008ba4:	b12f      	cbz	r7, 8008bb2 <_dtoa_r+0x6b2>
 8008ba6:	42af      	cmp	r7, r5
 8008ba8:	d003      	beq.n	8008bb2 <_dtoa_r+0x6b2>
 8008baa:	4639      	mov	r1, r7
 8008bac:	4658      	mov	r0, fp
 8008bae:	f000 fbab 	bl	8009308 <_Bfree>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4658      	mov	r0, fp
 8008bb6:	f000 fba7 	bl	8009308 <_Bfree>
 8008bba:	e7d0      	b.n	8008b5e <_dtoa_r+0x65e>
 8008bbc:	9704      	str	r7, [sp, #16]
 8008bbe:	4633      	mov	r3, r6
 8008bc0:	461e      	mov	r6, r3
 8008bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc6:	2a39      	cmp	r2, #57	@ 0x39
 8008bc8:	d107      	bne.n	8008bda <_dtoa_r+0x6da>
 8008bca:	459a      	cmp	sl, r3
 8008bcc:	d1f8      	bne.n	8008bc0 <_dtoa_r+0x6c0>
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	9204      	str	r2, [sp, #16]
 8008bd4:	2230      	movs	r2, #48	@ 0x30
 8008bd6:	f88a 2000 	strb.w	r2, [sl]
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	3201      	adds	r2, #1
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	e7bd      	b.n	8008b5e <_dtoa_r+0x65e>
 8008be2:	4b7b      	ldr	r3, [pc, #492]	@ (8008dd0 <_dtoa_r+0x8d0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	f7f7 fd07 	bl	80005f8 <__aeabi_dmul>
 8008bea:	2200      	movs	r2, #0
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	f7f7 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f43f aebb 	beq.w	8008972 <_dtoa_r+0x472>
 8008bfc:	e6f0      	b.n	80089e0 <_dtoa_r+0x4e0>
 8008bfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	f000 80db 	beq.w	8008dbc <_dtoa_r+0x8bc>
 8008c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c08:	2a01      	cmp	r2, #1
 8008c0a:	f300 80bf 	bgt.w	8008d8c <_dtoa_r+0x88c>
 8008c0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	f000 80b7 	beq.w	8008d84 <_dtoa_r+0x884>
 8008c16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c1c:	4646      	mov	r6, r8
 8008c1e:	9a08      	ldr	r2, [sp, #32]
 8008c20:	2101      	movs	r1, #1
 8008c22:	441a      	add	r2, r3
 8008c24:	4658      	mov	r0, fp
 8008c26:	4498      	add	r8, r3
 8008c28:	9208      	str	r2, [sp, #32]
 8008c2a:	f000 fc21 	bl	8009470 <__i2b>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	b15e      	cbz	r6, 8008c4a <_dtoa_r+0x74a>
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd08      	ble.n	8008c4a <_dtoa_r+0x74a>
 8008c38:	42b3      	cmp	r3, r6
 8008c3a:	9a08      	ldr	r2, [sp, #32]
 8008c3c:	bfa8      	it	ge
 8008c3e:	4633      	movge	r3, r6
 8008c40:	eba8 0803 	sub.w	r8, r8, r3
 8008c44:	1af6      	subs	r6, r6, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c4c:	b1f3      	cbz	r3, 8008c8c <_dtoa_r+0x78c>
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80b7 	beq.w	8008dc4 <_dtoa_r+0x8c4>
 8008c56:	b18c      	cbz	r4, 8008c7c <_dtoa_r+0x77c>
 8008c58:	4629      	mov	r1, r5
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	f000 fcc7 	bl	80095f0 <__pow5mult>
 8008c62:	464a      	mov	r2, r9
 8008c64:	4601      	mov	r1, r0
 8008c66:	4605      	mov	r5, r0
 8008c68:	4658      	mov	r0, fp
 8008c6a:	f000 fc17 	bl	800949c <__multiply>
 8008c6e:	4649      	mov	r1, r9
 8008c70:	9004      	str	r0, [sp, #16]
 8008c72:	4658      	mov	r0, fp
 8008c74:	f000 fb48 	bl	8009308 <_Bfree>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	4699      	mov	r9, r3
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7e:	1b1a      	subs	r2, r3, r4
 8008c80:	d004      	beq.n	8008c8c <_dtoa_r+0x78c>
 8008c82:	4649      	mov	r1, r9
 8008c84:	4658      	mov	r0, fp
 8008c86:	f000 fcb3 	bl	80095f0 <__pow5mult>
 8008c8a:	4681      	mov	r9, r0
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f000 fbee 	bl	8009470 <__i2b>
 8008c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c96:	4604      	mov	r4, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 81cf 	beq.w	800903c <_dtoa_r+0xb3c>
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4658      	mov	r0, fp
 8008ca4:	f000 fca4 	bl	80095f0 <__pow5mult>
 8008ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	4604      	mov	r4, r0
 8008cae:	f300 8095 	bgt.w	8008ddc <_dtoa_r+0x8dc>
 8008cb2:	9b02      	ldr	r3, [sp, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f040 8087 	bne.w	8008dc8 <_dtoa_r+0x8c8>
 8008cba:	9b03      	ldr	r3, [sp, #12]
 8008cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f040 8089 	bne.w	8008dd8 <_dtoa_r+0x8d8>
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ccc:	0d1b      	lsrs	r3, r3, #20
 8008cce:	051b      	lsls	r3, r3, #20
 8008cd0:	b12b      	cbz	r3, 8008cde <_dtoa_r+0x7de>
 8008cd2:	9b08      	ldr	r3, [sp, #32]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	9308      	str	r3, [sp, #32]
 8008cd8:	f108 0801 	add.w	r8, r8, #1
 8008cdc:	2301      	movs	r3, #1
 8008cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 81b0 	beq.w	8009048 <_dtoa_r+0xb48>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cee:	6918      	ldr	r0, [r3, #16]
 8008cf0:	f000 fb72 	bl	80093d8 <__hi0bits>
 8008cf4:	f1c0 0020 	rsb	r0, r0, #32
 8008cf8:	9b08      	ldr	r3, [sp, #32]
 8008cfa:	4418      	add	r0, r3
 8008cfc:	f010 001f 	ands.w	r0, r0, #31
 8008d00:	d077      	beq.n	8008df2 <_dtoa_r+0x8f2>
 8008d02:	f1c0 0320 	rsb	r3, r0, #32
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	dd6b      	ble.n	8008de2 <_dtoa_r+0x8e2>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	f1c0 001c 	rsb	r0, r0, #28
 8008d10:	4403      	add	r3, r0
 8008d12:	4480      	add	r8, r0
 8008d14:	4406      	add	r6, r0
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	dd05      	ble.n	8008d2a <_dtoa_r+0x82a>
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4642      	mov	r2, r8
 8008d22:	4658      	mov	r0, fp
 8008d24:	f000 fcbe 	bl	80096a4 <__lshift>
 8008d28:	4681      	mov	r9, r0
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dd05      	ble.n	8008d3c <_dtoa_r+0x83c>
 8008d30:	4621      	mov	r1, r4
 8008d32:	461a      	mov	r2, r3
 8008d34:	4658      	mov	r0, fp
 8008d36:	f000 fcb5 	bl	80096a4 <__lshift>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d059      	beq.n	8008df6 <_dtoa_r+0x8f6>
 8008d42:	4621      	mov	r1, r4
 8008d44:	4648      	mov	r0, r9
 8008d46:	f000 fd19 	bl	800977c <__mcmp>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	da53      	bge.n	8008df6 <_dtoa_r+0x8f6>
 8008d4e:	1e7b      	subs	r3, r7, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	4649      	mov	r1, r9
 8008d54:	2300      	movs	r3, #0
 8008d56:	220a      	movs	r2, #10
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 faf7 	bl	800934c <__multadd>
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d60:	4681      	mov	r9, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 8172 	beq.w	800904c <_dtoa_r+0xb4c>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	4658      	mov	r0, fp
 8008d70:	f000 faec 	bl	800934c <__multadd>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	4605      	mov	r5, r0
 8008d7a:	dc67      	bgt.n	8008e4c <_dtoa_r+0x94c>
 8008d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	dc41      	bgt.n	8008e06 <_dtoa_r+0x906>
 8008d82:	e063      	b.n	8008e4c <_dtoa_r+0x94c>
 8008d84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d8a:	e746      	b.n	8008c1a <_dtoa_r+0x71a>
 8008d8c:	9b07      	ldr	r3, [sp, #28]
 8008d8e:	1e5c      	subs	r4, r3, #1
 8008d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	bfbf      	itttt	lt
 8008d96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d9c:	1ae3      	sublt	r3, r4, r3
 8008d9e:	bfb4      	ite	lt
 8008da0:	18d2      	addlt	r2, r2, r3
 8008da2:	1b1c      	subge	r4, r3, r4
 8008da4:	9b07      	ldr	r3, [sp, #28]
 8008da6:	bfbc      	itt	lt
 8008da8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008daa:	2400      	movlt	r4, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb5      	itete	lt
 8008db0:	eba8 0603 	sublt.w	r6, r8, r3
 8008db4:	9b07      	ldrge	r3, [sp, #28]
 8008db6:	2300      	movlt	r3, #0
 8008db8:	4646      	movge	r6, r8
 8008dba:	e730      	b.n	8008c1e <_dtoa_r+0x71e>
 8008dbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008dc0:	4646      	mov	r6, r8
 8008dc2:	e735      	b.n	8008c30 <_dtoa_r+0x730>
 8008dc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dc6:	e75c      	b.n	8008c82 <_dtoa_r+0x782>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e788      	b.n	8008cde <_dtoa_r+0x7de>
 8008dcc:	3fe00000 	.word	0x3fe00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	40140000 	.word	0x40140000
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	e780      	b.n	8008cde <_dtoa_r+0x7de>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008de0:	e782      	b.n	8008ce8 <_dtoa_r+0x7e8>
 8008de2:	d099      	beq.n	8008d18 <_dtoa_r+0x818>
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	331c      	adds	r3, #28
 8008de8:	441a      	add	r2, r3
 8008dea:	4498      	add	r8, r3
 8008dec:	441e      	add	r6, r3
 8008dee:	9208      	str	r2, [sp, #32]
 8008df0:	e792      	b.n	8008d18 <_dtoa_r+0x818>
 8008df2:	4603      	mov	r3, r0
 8008df4:	e7f6      	b.n	8008de4 <_dtoa_r+0x8e4>
 8008df6:	9b07      	ldr	r3, [sp, #28]
 8008df8:	9704      	str	r7, [sp, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dc20      	bgt.n	8008e40 <_dtoa_r+0x940>
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	dd1e      	ble.n	8008e44 <_dtoa_r+0x944>
 8008e06:	9b00      	ldr	r3, [sp, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f47f aec0 	bne.w	8008b8e <_dtoa_r+0x68e>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	2205      	movs	r2, #5
 8008e12:	4658      	mov	r0, fp
 8008e14:	f000 fa9a 	bl	800934c <__multadd>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	f000 fcad 	bl	800977c <__mcmp>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f77f aeb3 	ble.w	8008b8e <_dtoa_r+0x68e>
 8008e28:	4656      	mov	r6, sl
 8008e2a:	2331      	movs	r3, #49	@ 0x31
 8008e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	3301      	adds	r3, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	e6ae      	b.n	8008b96 <_dtoa_r+0x696>
 8008e38:	9c07      	ldr	r4, [sp, #28]
 8008e3a:	9704      	str	r7, [sp, #16]
 8008e3c:	4625      	mov	r5, r4
 8008e3e:	e7f3      	b.n	8008e28 <_dtoa_r+0x928>
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8104 	beq.w	8009054 <_dtoa_r+0xb54>
 8008e4c:	2e00      	cmp	r6, #0
 8008e4e:	dd05      	ble.n	8008e5c <_dtoa_r+0x95c>
 8008e50:	4629      	mov	r1, r5
 8008e52:	4632      	mov	r2, r6
 8008e54:	4658      	mov	r0, fp
 8008e56:	f000 fc25 	bl	80096a4 <__lshift>
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d05a      	beq.n	8008f18 <_dtoa_r+0xa18>
 8008e62:	6869      	ldr	r1, [r5, #4]
 8008e64:	4658      	mov	r0, fp
 8008e66:	f000 fa0f 	bl	8009288 <_Balloc>
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	b928      	cbnz	r0, 8008e7a <_dtoa_r+0x97a>
 8008e6e:	4b84      	ldr	r3, [pc, #528]	@ (8009080 <_dtoa_r+0xb80>)
 8008e70:	4602      	mov	r2, r0
 8008e72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e76:	f7ff bb5a 	b.w	800852e <_dtoa_r+0x2e>
 8008e7a:	692a      	ldr	r2, [r5, #16]
 8008e7c:	3202      	adds	r2, #2
 8008e7e:	0092      	lsls	r2, r2, #2
 8008e80:	f105 010c 	add.w	r1, r5, #12
 8008e84:	300c      	adds	r0, #12
 8008e86:	f7ff faa4 	bl	80083d2 <memcpy>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f000 fc08 	bl	80096a4 <__lshift>
 8008e94:	f10a 0301 	add.w	r3, sl, #1
 8008e98:	9307      	str	r3, [sp, #28]
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	4453      	add	r3, sl
 8008e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ea0:	9b02      	ldr	r3, [sp, #8]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	462f      	mov	r7, r5
 8008ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eaa:	4605      	mov	r5, r0
 8008eac:	9b07      	ldr	r3, [sp, #28]
 8008eae:	4621      	mov	r1, r4
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	4648      	mov	r0, r9
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	f7ff fa9a 	bl	80083ee <quorem>
 8008eba:	4639      	mov	r1, r7
 8008ebc:	9002      	str	r0, [sp, #8]
 8008ebe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ec2:	4648      	mov	r0, r9
 8008ec4:	f000 fc5a 	bl	800977c <__mcmp>
 8008ec8:	462a      	mov	r2, r5
 8008eca:	9008      	str	r0, [sp, #32]
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4658      	mov	r0, fp
 8008ed0:	f000 fc70 	bl	80097b4 <__mdiff>
 8008ed4:	68c2      	ldr	r2, [r0, #12]
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	bb02      	cbnz	r2, 8008f1c <_dtoa_r+0xa1c>
 8008eda:	4601      	mov	r1, r0
 8008edc:	4648      	mov	r0, r9
 8008ede:	f000 fc4d 	bl	800977c <__mcmp>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4658      	mov	r0, fp
 8008ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eea:	f000 fa0d 	bl	8009308 <_Bfree>
 8008eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ef2:	9e07      	ldr	r6, [sp, #28]
 8008ef4:	ea43 0102 	orr.w	r1, r3, r2
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efa:	4319      	orrs	r1, r3
 8008efc:	d110      	bne.n	8008f20 <_dtoa_r+0xa20>
 8008efe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f02:	d029      	beq.n	8008f58 <_dtoa_r+0xa58>
 8008f04:	9b08      	ldr	r3, [sp, #32]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd02      	ble.n	8008f10 <_dtoa_r+0xa10>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f10:	9b00      	ldr	r3, [sp, #0]
 8008f12:	f883 8000 	strb.w	r8, [r3]
 8008f16:	e63f      	b.n	8008b98 <_dtoa_r+0x698>
 8008f18:	4628      	mov	r0, r5
 8008f1a:	e7bb      	b.n	8008e94 <_dtoa_r+0x994>
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	e7e1      	b.n	8008ee4 <_dtoa_r+0x9e4>
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db04      	blt.n	8008f30 <_dtoa_r+0xa30>
 8008f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	d120      	bne.n	8008f72 <_dtoa_r+0xa72>
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	dded      	ble.n	8008f10 <_dtoa_r+0xa10>
 8008f34:	4649      	mov	r1, r9
 8008f36:	2201      	movs	r2, #1
 8008f38:	4658      	mov	r0, fp
 8008f3a:	f000 fbb3 	bl	80096a4 <__lshift>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4681      	mov	r9, r0
 8008f42:	f000 fc1b 	bl	800977c <__mcmp>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	dc03      	bgt.n	8008f52 <_dtoa_r+0xa52>
 8008f4a:	d1e1      	bne.n	8008f10 <_dtoa_r+0xa10>
 8008f4c:	f018 0f01 	tst.w	r8, #1
 8008f50:	d0de      	beq.n	8008f10 <_dtoa_r+0xa10>
 8008f52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f56:	d1d8      	bne.n	8008f0a <_dtoa_r+0xa0a>
 8008f58:	9a00      	ldr	r2, [sp, #0]
 8008f5a:	2339      	movs	r3, #57	@ 0x39
 8008f5c:	7013      	strb	r3, [r2, #0]
 8008f5e:	4633      	mov	r3, r6
 8008f60:	461e      	mov	r6, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f68:	2a39      	cmp	r2, #57	@ 0x39
 8008f6a:	d052      	beq.n	8009012 <_dtoa_r+0xb12>
 8008f6c:	3201      	adds	r2, #1
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	e612      	b.n	8008b98 <_dtoa_r+0x698>
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	dd07      	ble.n	8008f86 <_dtoa_r+0xa86>
 8008f76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f7a:	d0ed      	beq.n	8008f58 <_dtoa_r+0xa58>
 8008f7c:	9a00      	ldr	r2, [sp, #0]
 8008f7e:	f108 0301 	add.w	r3, r8, #1
 8008f82:	7013      	strb	r3, [r2, #0]
 8008f84:	e608      	b.n	8008b98 <_dtoa_r+0x698>
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	9a07      	ldr	r2, [sp, #28]
 8008f8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d028      	beq.n	8008fe6 <_dtoa_r+0xae6>
 8008f94:	4649      	mov	r1, r9
 8008f96:	2300      	movs	r3, #0
 8008f98:	220a      	movs	r2, #10
 8008f9a:	4658      	mov	r0, fp
 8008f9c:	f000 f9d6 	bl	800934c <__multadd>
 8008fa0:	42af      	cmp	r7, r5
 8008fa2:	4681      	mov	r9, r0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	f04f 020a 	mov.w	r2, #10
 8008fac:	4639      	mov	r1, r7
 8008fae:	4658      	mov	r0, fp
 8008fb0:	d107      	bne.n	8008fc2 <_dtoa_r+0xac2>
 8008fb2:	f000 f9cb 	bl	800934c <__multadd>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	4605      	mov	r5, r0
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	e774      	b.n	8008eac <_dtoa_r+0x9ac>
 8008fc2:	f000 f9c3 	bl	800934c <__multadd>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4607      	mov	r7, r0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 f9bc 	bl	800934c <__multadd>
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	e7f0      	b.n	8008fba <_dtoa_r+0xaba>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfcc      	ite	gt
 8008fde:	461e      	movgt	r6, r3
 8008fe0:	2601      	movle	r6, #1
 8008fe2:	4456      	add	r6, sl
 8008fe4:	2700      	movs	r7, #0
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	2201      	movs	r2, #1
 8008fea:	4658      	mov	r0, fp
 8008fec:	f000 fb5a 	bl	80096a4 <__lshift>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4681      	mov	r9, r0
 8008ff4:	f000 fbc2 	bl	800977c <__mcmp>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dcb0      	bgt.n	8008f5e <_dtoa_r+0xa5e>
 8008ffc:	d102      	bne.n	8009004 <_dtoa_r+0xb04>
 8008ffe:	f018 0f01 	tst.w	r8, #1
 8009002:	d1ac      	bne.n	8008f5e <_dtoa_r+0xa5e>
 8009004:	4633      	mov	r3, r6
 8009006:	461e      	mov	r6, r3
 8009008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800900c:	2a30      	cmp	r2, #48	@ 0x30
 800900e:	d0fa      	beq.n	8009006 <_dtoa_r+0xb06>
 8009010:	e5c2      	b.n	8008b98 <_dtoa_r+0x698>
 8009012:	459a      	cmp	sl, r3
 8009014:	d1a4      	bne.n	8008f60 <_dtoa_r+0xa60>
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	3301      	adds	r3, #1
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	2331      	movs	r3, #49	@ 0x31
 800901e:	f88a 3000 	strb.w	r3, [sl]
 8009022:	e5b9      	b.n	8008b98 <_dtoa_r+0x698>
 8009024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009026:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009084 <_dtoa_r+0xb84>
 800902a:	b11b      	cbz	r3, 8009034 <_dtoa_r+0xb34>
 800902c:	f10a 0308 	add.w	r3, sl, #8
 8009030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4650      	mov	r0, sl
 8009036:	b019      	add	sp, #100	@ 0x64
 8009038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903e:	2b01      	cmp	r3, #1
 8009040:	f77f ae37 	ble.w	8008cb2 <_dtoa_r+0x7b2>
 8009044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009046:	930a      	str	r3, [sp, #40]	@ 0x28
 8009048:	2001      	movs	r0, #1
 800904a:	e655      	b.n	8008cf8 <_dtoa_r+0x7f8>
 800904c:	9b00      	ldr	r3, [sp, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f77f aed6 	ble.w	8008e00 <_dtoa_r+0x900>
 8009054:	4656      	mov	r6, sl
 8009056:	4621      	mov	r1, r4
 8009058:	4648      	mov	r0, r9
 800905a:	f7ff f9c8 	bl	80083ee <quorem>
 800905e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009062:	f806 8b01 	strb.w	r8, [r6], #1
 8009066:	9b00      	ldr	r3, [sp, #0]
 8009068:	eba6 020a 	sub.w	r2, r6, sl
 800906c:	4293      	cmp	r3, r2
 800906e:	ddb3      	ble.n	8008fd8 <_dtoa_r+0xad8>
 8009070:	4649      	mov	r1, r9
 8009072:	2300      	movs	r3, #0
 8009074:	220a      	movs	r2, #10
 8009076:	4658      	mov	r0, fp
 8009078:	f000 f968 	bl	800934c <__multadd>
 800907c:	4681      	mov	r9, r0
 800907e:	e7ea      	b.n	8009056 <_dtoa_r+0xb56>
 8009080:	0800b7c4 	.word	0x0800b7c4
 8009084:	0800b748 	.word	0x0800b748

08009088 <_free_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4605      	mov	r5, r0
 800908c:	2900      	cmp	r1, #0
 800908e:	d041      	beq.n	8009114 <_free_r+0x8c>
 8009090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009094:	1f0c      	subs	r4, r1, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfb8      	it	lt
 800909a:	18e4      	addlt	r4, r4, r3
 800909c:	f000 f8e8 	bl	8009270 <__malloc_lock>
 80090a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009118 <_free_r+0x90>)
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	b933      	cbnz	r3, 80090b4 <_free_r+0x2c>
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	6014      	str	r4, [r2, #0]
 80090aa:	4628      	mov	r0, r5
 80090ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b0:	f000 b8e4 	b.w	800927c <__malloc_unlock>
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d908      	bls.n	80090ca <_free_r+0x42>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	1821      	adds	r1, r4, r0
 80090bc:	428b      	cmp	r3, r1
 80090be:	bf01      	itttt	eq
 80090c0:	6819      	ldreq	r1, [r3, #0]
 80090c2:	685b      	ldreq	r3, [r3, #4]
 80090c4:	1809      	addeq	r1, r1, r0
 80090c6:	6021      	streq	r1, [r4, #0]
 80090c8:	e7ed      	b.n	80090a6 <_free_r+0x1e>
 80090ca:	461a      	mov	r2, r3
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	b10b      	cbz	r3, 80090d4 <_free_r+0x4c>
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d9fa      	bls.n	80090ca <_free_r+0x42>
 80090d4:	6811      	ldr	r1, [r2, #0]
 80090d6:	1850      	adds	r0, r2, r1
 80090d8:	42a0      	cmp	r0, r4
 80090da:	d10b      	bne.n	80090f4 <_free_r+0x6c>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	4401      	add	r1, r0
 80090e0:	1850      	adds	r0, r2, r1
 80090e2:	4283      	cmp	r3, r0
 80090e4:	6011      	str	r1, [r2, #0]
 80090e6:	d1e0      	bne.n	80090aa <_free_r+0x22>
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	6053      	str	r3, [r2, #4]
 80090ee:	4408      	add	r0, r1
 80090f0:	6010      	str	r0, [r2, #0]
 80090f2:	e7da      	b.n	80090aa <_free_r+0x22>
 80090f4:	d902      	bls.n	80090fc <_free_r+0x74>
 80090f6:	230c      	movs	r3, #12
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	e7d6      	b.n	80090aa <_free_r+0x22>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	1821      	adds	r1, r4, r0
 8009100:	428b      	cmp	r3, r1
 8009102:	bf04      	itt	eq
 8009104:	6819      	ldreq	r1, [r3, #0]
 8009106:	685b      	ldreq	r3, [r3, #4]
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	bf04      	itt	eq
 800910c:	1809      	addeq	r1, r1, r0
 800910e:	6021      	streq	r1, [r4, #0]
 8009110:	6054      	str	r4, [r2, #4]
 8009112:	e7ca      	b.n	80090aa <_free_r+0x22>
 8009114:	bd38      	pop	{r3, r4, r5, pc}
 8009116:	bf00      	nop
 8009118:	200009c4 	.word	0x200009c4

0800911c <malloc>:
 800911c:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <malloc+0xc>)
 800911e:	4601      	mov	r1, r0
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	f000 b825 	b.w	8009170 <_malloc_r>
 8009126:	bf00      	nop
 8009128:	20000018 	.word	0x20000018

0800912c <sbrk_aligned>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	4e0f      	ldr	r6, [pc, #60]	@ (800916c <sbrk_aligned+0x40>)
 8009130:	460c      	mov	r4, r1
 8009132:	6831      	ldr	r1, [r6, #0]
 8009134:	4605      	mov	r5, r0
 8009136:	b911      	cbnz	r1, 800913e <sbrk_aligned+0x12>
 8009138:	f001 f81c 	bl	800a174 <_sbrk_r>
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f001 f817 	bl	800a174 <_sbrk_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d103      	bne.n	8009152 <sbrk_aligned+0x26>
 800914a:	f04f 34ff 	mov.w	r4, #4294967295
 800914e:	4620      	mov	r0, r4
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	1cc4      	adds	r4, r0, #3
 8009154:	f024 0403 	bic.w	r4, r4, #3
 8009158:	42a0      	cmp	r0, r4
 800915a:	d0f8      	beq.n	800914e <sbrk_aligned+0x22>
 800915c:	1a21      	subs	r1, r4, r0
 800915e:	4628      	mov	r0, r5
 8009160:	f001 f808 	bl	800a174 <_sbrk_r>
 8009164:	3001      	adds	r0, #1
 8009166:	d1f2      	bne.n	800914e <sbrk_aligned+0x22>
 8009168:	e7ef      	b.n	800914a <sbrk_aligned+0x1e>
 800916a:	bf00      	nop
 800916c:	200009c0 	.word	0x200009c0

08009170 <_malloc_r>:
 8009170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009174:	1ccd      	adds	r5, r1, #3
 8009176:	f025 0503 	bic.w	r5, r5, #3
 800917a:	3508      	adds	r5, #8
 800917c:	2d0c      	cmp	r5, #12
 800917e:	bf38      	it	cc
 8009180:	250c      	movcc	r5, #12
 8009182:	2d00      	cmp	r5, #0
 8009184:	4606      	mov	r6, r0
 8009186:	db01      	blt.n	800918c <_malloc_r+0x1c>
 8009188:	42a9      	cmp	r1, r5
 800918a:	d904      	bls.n	8009196 <_malloc_r+0x26>
 800918c:	230c      	movs	r3, #12
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	2000      	movs	r0, #0
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800926c <_malloc_r+0xfc>
 800919a:	f000 f869 	bl	8009270 <__malloc_lock>
 800919e:	f8d8 3000 	ldr.w	r3, [r8]
 80091a2:	461c      	mov	r4, r3
 80091a4:	bb44      	cbnz	r4, 80091f8 <_malloc_r+0x88>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff ffbf 	bl	800912c <sbrk_aligned>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	4604      	mov	r4, r0
 80091b2:	d158      	bne.n	8009266 <_malloc_r+0xf6>
 80091b4:	f8d8 4000 	ldr.w	r4, [r8]
 80091b8:	4627      	mov	r7, r4
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	d143      	bne.n	8009246 <_malloc_r+0xd6>
 80091be:	2c00      	cmp	r4, #0
 80091c0:	d04b      	beq.n	800925a <_malloc_r+0xea>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	4639      	mov	r1, r7
 80091c6:	4630      	mov	r0, r6
 80091c8:	eb04 0903 	add.w	r9, r4, r3
 80091cc:	f000 ffd2 	bl	800a174 <_sbrk_r>
 80091d0:	4581      	cmp	r9, r0
 80091d2:	d142      	bne.n	800925a <_malloc_r+0xea>
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	1a6d      	subs	r5, r5, r1
 80091d8:	4629      	mov	r1, r5
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ffa6 	bl	800912c <sbrk_aligned>
 80091e0:	3001      	adds	r0, #1
 80091e2:	d03a      	beq.n	800925a <_malloc_r+0xea>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	442b      	add	r3, r5
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	f8d8 3000 	ldr.w	r3, [r8]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	bb62      	cbnz	r2, 800924c <_malloc_r+0xdc>
 80091f2:	f8c8 7000 	str.w	r7, [r8]
 80091f6:	e00f      	b.n	8009218 <_malloc_r+0xa8>
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	1b52      	subs	r2, r2, r5
 80091fc:	d420      	bmi.n	8009240 <_malloc_r+0xd0>
 80091fe:	2a0b      	cmp	r2, #11
 8009200:	d917      	bls.n	8009232 <_malloc_r+0xc2>
 8009202:	1961      	adds	r1, r4, r5
 8009204:	42a3      	cmp	r3, r4
 8009206:	6025      	str	r5, [r4, #0]
 8009208:	bf18      	it	ne
 800920a:	6059      	strne	r1, [r3, #4]
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	bf08      	it	eq
 8009210:	f8c8 1000 	streq.w	r1, [r8]
 8009214:	5162      	str	r2, [r4, r5]
 8009216:	604b      	str	r3, [r1, #4]
 8009218:	4630      	mov	r0, r6
 800921a:	f000 f82f 	bl	800927c <__malloc_unlock>
 800921e:	f104 000b 	add.w	r0, r4, #11
 8009222:	1d23      	adds	r3, r4, #4
 8009224:	f020 0007 	bic.w	r0, r0, #7
 8009228:	1ac2      	subs	r2, r0, r3
 800922a:	bf1c      	itt	ne
 800922c:	1a1b      	subne	r3, r3, r0
 800922e:	50a3      	strne	r3, [r4, r2]
 8009230:	e7af      	b.n	8009192 <_malloc_r+0x22>
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	42a3      	cmp	r3, r4
 8009236:	bf0c      	ite	eq
 8009238:	f8c8 2000 	streq.w	r2, [r8]
 800923c:	605a      	strne	r2, [r3, #4]
 800923e:	e7eb      	b.n	8009218 <_malloc_r+0xa8>
 8009240:	4623      	mov	r3, r4
 8009242:	6864      	ldr	r4, [r4, #4]
 8009244:	e7ae      	b.n	80091a4 <_malloc_r+0x34>
 8009246:	463c      	mov	r4, r7
 8009248:	687f      	ldr	r7, [r7, #4]
 800924a:	e7b6      	b.n	80091ba <_malloc_r+0x4a>
 800924c:	461a      	mov	r2, r3
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	42a3      	cmp	r3, r4
 8009252:	d1fb      	bne.n	800924c <_malloc_r+0xdc>
 8009254:	2300      	movs	r3, #0
 8009256:	6053      	str	r3, [r2, #4]
 8009258:	e7de      	b.n	8009218 <_malloc_r+0xa8>
 800925a:	230c      	movs	r3, #12
 800925c:	6033      	str	r3, [r6, #0]
 800925e:	4630      	mov	r0, r6
 8009260:	f000 f80c 	bl	800927c <__malloc_unlock>
 8009264:	e794      	b.n	8009190 <_malloc_r+0x20>
 8009266:	6005      	str	r5, [r0, #0]
 8009268:	e7d6      	b.n	8009218 <_malloc_r+0xa8>
 800926a:	bf00      	nop
 800926c:	200009c4 	.word	0x200009c4

08009270 <__malloc_lock>:
 8009270:	4801      	ldr	r0, [pc, #4]	@ (8009278 <__malloc_lock+0x8>)
 8009272:	f7ff b8ac 	b.w	80083ce <__retarget_lock_acquire_recursive>
 8009276:	bf00      	nop
 8009278:	200009bc 	.word	0x200009bc

0800927c <__malloc_unlock>:
 800927c:	4801      	ldr	r0, [pc, #4]	@ (8009284 <__malloc_unlock+0x8>)
 800927e:	f7ff b8a7 	b.w	80083d0 <__retarget_lock_release_recursive>
 8009282:	bf00      	nop
 8009284:	200009bc 	.word	0x200009bc

08009288 <_Balloc>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	69c6      	ldr	r6, [r0, #28]
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	b976      	cbnz	r6, 80092b0 <_Balloc+0x28>
 8009292:	2010      	movs	r0, #16
 8009294:	f7ff ff42 	bl	800911c <malloc>
 8009298:	4602      	mov	r2, r0
 800929a:	61e0      	str	r0, [r4, #28]
 800929c:	b920      	cbnz	r0, 80092a8 <_Balloc+0x20>
 800929e:	4b18      	ldr	r3, [pc, #96]	@ (8009300 <_Balloc+0x78>)
 80092a0:	4818      	ldr	r0, [pc, #96]	@ (8009304 <_Balloc+0x7c>)
 80092a2:	216b      	movs	r1, #107	@ 0x6b
 80092a4:	f000 ff76 	bl	800a194 <__assert_func>
 80092a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092ac:	6006      	str	r6, [r0, #0]
 80092ae:	60c6      	str	r6, [r0, #12]
 80092b0:	69e6      	ldr	r6, [r4, #28]
 80092b2:	68f3      	ldr	r3, [r6, #12]
 80092b4:	b183      	cbz	r3, 80092d8 <_Balloc+0x50>
 80092b6:	69e3      	ldr	r3, [r4, #28]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092be:	b9b8      	cbnz	r0, 80092f0 <_Balloc+0x68>
 80092c0:	2101      	movs	r1, #1
 80092c2:	fa01 f605 	lsl.w	r6, r1, r5
 80092c6:	1d72      	adds	r2, r6, #5
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 ff80 	bl	800a1d0 <_calloc_r>
 80092d0:	b160      	cbz	r0, 80092ec <_Balloc+0x64>
 80092d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092d6:	e00e      	b.n	80092f6 <_Balloc+0x6e>
 80092d8:	2221      	movs	r2, #33	@ 0x21
 80092da:	2104      	movs	r1, #4
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 ff77 	bl	800a1d0 <_calloc_r>
 80092e2:	69e3      	ldr	r3, [r4, #28]
 80092e4:	60f0      	str	r0, [r6, #12]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e4      	bne.n	80092b6 <_Balloc+0x2e>
 80092ec:	2000      	movs	r0, #0
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	6802      	ldr	r2, [r0, #0]
 80092f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092f6:	2300      	movs	r3, #0
 80092f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092fc:	e7f7      	b.n	80092ee <_Balloc+0x66>
 80092fe:	bf00      	nop
 8009300:	0800b755 	.word	0x0800b755
 8009304:	0800b7d5 	.word	0x0800b7d5

08009308 <_Bfree>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	69c6      	ldr	r6, [r0, #28]
 800930c:	4605      	mov	r5, r0
 800930e:	460c      	mov	r4, r1
 8009310:	b976      	cbnz	r6, 8009330 <_Bfree+0x28>
 8009312:	2010      	movs	r0, #16
 8009314:	f7ff ff02 	bl	800911c <malloc>
 8009318:	4602      	mov	r2, r0
 800931a:	61e8      	str	r0, [r5, #28]
 800931c:	b920      	cbnz	r0, 8009328 <_Bfree+0x20>
 800931e:	4b09      	ldr	r3, [pc, #36]	@ (8009344 <_Bfree+0x3c>)
 8009320:	4809      	ldr	r0, [pc, #36]	@ (8009348 <_Bfree+0x40>)
 8009322:	218f      	movs	r1, #143	@ 0x8f
 8009324:	f000 ff36 	bl	800a194 <__assert_func>
 8009328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800932c:	6006      	str	r6, [r0, #0]
 800932e:	60c6      	str	r6, [r0, #12]
 8009330:	b13c      	cbz	r4, 8009342 <_Bfree+0x3a>
 8009332:	69eb      	ldr	r3, [r5, #28]
 8009334:	6862      	ldr	r2, [r4, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800933c:	6021      	str	r1, [r4, #0]
 800933e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	0800b755 	.word	0x0800b755
 8009348:	0800b7d5 	.word	0x0800b7d5

0800934c <__multadd>:
 800934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009350:	690d      	ldr	r5, [r1, #16]
 8009352:	4607      	mov	r7, r0
 8009354:	460c      	mov	r4, r1
 8009356:	461e      	mov	r6, r3
 8009358:	f101 0c14 	add.w	ip, r1, #20
 800935c:	2000      	movs	r0, #0
 800935e:	f8dc 3000 	ldr.w	r3, [ip]
 8009362:	b299      	uxth	r1, r3
 8009364:	fb02 6101 	mla	r1, r2, r1, r6
 8009368:	0c1e      	lsrs	r6, r3, #16
 800936a:	0c0b      	lsrs	r3, r1, #16
 800936c:	fb02 3306 	mla	r3, r2, r6, r3
 8009370:	b289      	uxth	r1, r1
 8009372:	3001      	adds	r0, #1
 8009374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009378:	4285      	cmp	r5, r0
 800937a:	f84c 1b04 	str.w	r1, [ip], #4
 800937e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009382:	dcec      	bgt.n	800935e <__multadd+0x12>
 8009384:	b30e      	cbz	r6, 80093ca <__multadd+0x7e>
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	42ab      	cmp	r3, r5
 800938a:	dc19      	bgt.n	80093c0 <__multadd+0x74>
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	4638      	mov	r0, r7
 8009390:	3101      	adds	r1, #1
 8009392:	f7ff ff79 	bl	8009288 <_Balloc>
 8009396:	4680      	mov	r8, r0
 8009398:	b928      	cbnz	r0, 80093a6 <__multadd+0x5a>
 800939a:	4602      	mov	r2, r0
 800939c:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <__multadd+0x84>)
 800939e:	480d      	ldr	r0, [pc, #52]	@ (80093d4 <__multadd+0x88>)
 80093a0:	21ba      	movs	r1, #186	@ 0xba
 80093a2:	f000 fef7 	bl	800a194 <__assert_func>
 80093a6:	6922      	ldr	r2, [r4, #16]
 80093a8:	3202      	adds	r2, #2
 80093aa:	f104 010c 	add.w	r1, r4, #12
 80093ae:	0092      	lsls	r2, r2, #2
 80093b0:	300c      	adds	r0, #12
 80093b2:	f7ff f80e 	bl	80083d2 <memcpy>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff ffa5 	bl	8009308 <_Bfree>
 80093be:	4644      	mov	r4, r8
 80093c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c4:	3501      	adds	r5, #1
 80093c6:	615e      	str	r6, [r3, #20]
 80093c8:	6125      	str	r5, [r4, #16]
 80093ca:	4620      	mov	r0, r4
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d0:	0800b7c4 	.word	0x0800b7c4
 80093d4:	0800b7d5 	.word	0x0800b7d5

080093d8 <__hi0bits>:
 80093d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093dc:	4603      	mov	r3, r0
 80093de:	bf36      	itet	cc
 80093e0:	0403      	lslcc	r3, r0, #16
 80093e2:	2000      	movcs	r0, #0
 80093e4:	2010      	movcc	r0, #16
 80093e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ea:	bf3c      	itt	cc
 80093ec:	021b      	lslcc	r3, r3, #8
 80093ee:	3008      	addcc	r0, #8
 80093f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f4:	bf3c      	itt	cc
 80093f6:	011b      	lslcc	r3, r3, #4
 80093f8:	3004      	addcc	r0, #4
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fe:	bf3c      	itt	cc
 8009400:	009b      	lslcc	r3, r3, #2
 8009402:	3002      	addcc	r0, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	db05      	blt.n	8009414 <__hi0bits+0x3c>
 8009408:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800940c:	f100 0001 	add.w	r0, r0, #1
 8009410:	bf08      	it	eq
 8009412:	2020      	moveq	r0, #32
 8009414:	4770      	bx	lr

08009416 <__lo0bits>:
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	4602      	mov	r2, r0
 800941a:	f013 0007 	ands.w	r0, r3, #7
 800941e:	d00b      	beq.n	8009438 <__lo0bits+0x22>
 8009420:	07d9      	lsls	r1, r3, #31
 8009422:	d421      	bmi.n	8009468 <__lo0bits+0x52>
 8009424:	0798      	lsls	r0, r3, #30
 8009426:	bf49      	itett	mi
 8009428:	085b      	lsrmi	r3, r3, #1
 800942a:	089b      	lsrpl	r3, r3, #2
 800942c:	2001      	movmi	r0, #1
 800942e:	6013      	strmi	r3, [r2, #0]
 8009430:	bf5c      	itt	pl
 8009432:	6013      	strpl	r3, [r2, #0]
 8009434:	2002      	movpl	r0, #2
 8009436:	4770      	bx	lr
 8009438:	b299      	uxth	r1, r3
 800943a:	b909      	cbnz	r1, 8009440 <__lo0bits+0x2a>
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	2010      	movs	r0, #16
 8009440:	b2d9      	uxtb	r1, r3
 8009442:	b909      	cbnz	r1, 8009448 <__lo0bits+0x32>
 8009444:	3008      	adds	r0, #8
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	0719      	lsls	r1, r3, #28
 800944a:	bf04      	itt	eq
 800944c:	091b      	lsreq	r3, r3, #4
 800944e:	3004      	addeq	r0, #4
 8009450:	0799      	lsls	r1, r3, #30
 8009452:	bf04      	itt	eq
 8009454:	089b      	lsreq	r3, r3, #2
 8009456:	3002      	addeq	r0, #2
 8009458:	07d9      	lsls	r1, r3, #31
 800945a:	d403      	bmi.n	8009464 <__lo0bits+0x4e>
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	f100 0001 	add.w	r0, r0, #1
 8009462:	d003      	beq.n	800946c <__lo0bits+0x56>
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	4770      	bx	lr
 8009468:	2000      	movs	r0, #0
 800946a:	4770      	bx	lr
 800946c:	2020      	movs	r0, #32
 800946e:	4770      	bx	lr

08009470 <__i2b>:
 8009470:	b510      	push	{r4, lr}
 8009472:	460c      	mov	r4, r1
 8009474:	2101      	movs	r1, #1
 8009476:	f7ff ff07 	bl	8009288 <_Balloc>
 800947a:	4602      	mov	r2, r0
 800947c:	b928      	cbnz	r0, 800948a <__i2b+0x1a>
 800947e:	4b05      	ldr	r3, [pc, #20]	@ (8009494 <__i2b+0x24>)
 8009480:	4805      	ldr	r0, [pc, #20]	@ (8009498 <__i2b+0x28>)
 8009482:	f240 1145 	movw	r1, #325	@ 0x145
 8009486:	f000 fe85 	bl	800a194 <__assert_func>
 800948a:	2301      	movs	r3, #1
 800948c:	6144      	str	r4, [r0, #20]
 800948e:	6103      	str	r3, [r0, #16]
 8009490:	bd10      	pop	{r4, pc}
 8009492:	bf00      	nop
 8009494:	0800b7c4 	.word	0x0800b7c4
 8009498:	0800b7d5 	.word	0x0800b7d5

0800949c <__multiply>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	4614      	mov	r4, r2
 80094a2:	690a      	ldr	r2, [r1, #16]
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	bfa8      	it	ge
 80094aa:	4623      	movge	r3, r4
 80094ac:	460f      	mov	r7, r1
 80094ae:	bfa4      	itt	ge
 80094b0:	460c      	movge	r4, r1
 80094b2:	461f      	movge	r7, r3
 80094b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	6861      	ldr	r1, [r4, #4]
 80094c0:	eb0a 0609 	add.w	r6, sl, r9
 80094c4:	42b3      	cmp	r3, r6
 80094c6:	b085      	sub	sp, #20
 80094c8:	bfb8      	it	lt
 80094ca:	3101      	addlt	r1, #1
 80094cc:	f7ff fedc 	bl	8009288 <_Balloc>
 80094d0:	b930      	cbnz	r0, 80094e0 <__multiply+0x44>
 80094d2:	4602      	mov	r2, r0
 80094d4:	4b44      	ldr	r3, [pc, #272]	@ (80095e8 <__multiply+0x14c>)
 80094d6:	4845      	ldr	r0, [pc, #276]	@ (80095ec <__multiply+0x150>)
 80094d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094dc:	f000 fe5a 	bl	800a194 <__assert_func>
 80094e0:	f100 0514 	add.w	r5, r0, #20
 80094e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094e8:	462b      	mov	r3, r5
 80094ea:	2200      	movs	r2, #0
 80094ec:	4543      	cmp	r3, r8
 80094ee:	d321      	bcc.n	8009534 <__multiply+0x98>
 80094f0:	f107 0114 	add.w	r1, r7, #20
 80094f4:	f104 0214 	add.w	r2, r4, #20
 80094f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009500:	9302      	str	r3, [sp, #8]
 8009502:	1b13      	subs	r3, r2, r4
 8009504:	3b15      	subs	r3, #21
 8009506:	f023 0303 	bic.w	r3, r3, #3
 800950a:	3304      	adds	r3, #4
 800950c:	f104 0715 	add.w	r7, r4, #21
 8009510:	42ba      	cmp	r2, r7
 8009512:	bf38      	it	cc
 8009514:	2304      	movcc	r3, #4
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	9b02      	ldr	r3, [sp, #8]
 800951a:	9103      	str	r1, [sp, #12]
 800951c:	428b      	cmp	r3, r1
 800951e:	d80c      	bhi.n	800953a <__multiply+0x9e>
 8009520:	2e00      	cmp	r6, #0
 8009522:	dd03      	ble.n	800952c <__multiply+0x90>
 8009524:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05b      	beq.n	80095e4 <__multiply+0x148>
 800952c:	6106      	str	r6, [r0, #16]
 800952e:	b005      	add	sp, #20
 8009530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009534:	f843 2b04 	str.w	r2, [r3], #4
 8009538:	e7d8      	b.n	80094ec <__multiply+0x50>
 800953a:	f8b1 a000 	ldrh.w	sl, [r1]
 800953e:	f1ba 0f00 	cmp.w	sl, #0
 8009542:	d024      	beq.n	800958e <__multiply+0xf2>
 8009544:	f104 0e14 	add.w	lr, r4, #20
 8009548:	46a9      	mov	r9, r5
 800954a:	f04f 0c00 	mov.w	ip, #0
 800954e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009552:	f8d9 3000 	ldr.w	r3, [r9]
 8009556:	fa1f fb87 	uxth.w	fp, r7
 800955a:	b29b      	uxth	r3, r3
 800955c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009560:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009564:	f8d9 7000 	ldr.w	r7, [r9]
 8009568:	4463      	add	r3, ip
 800956a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800956e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009572:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800957c:	4572      	cmp	r2, lr
 800957e:	f849 3b04 	str.w	r3, [r9], #4
 8009582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009586:	d8e2      	bhi.n	800954e <__multiply+0xb2>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	f845 c003 	str.w	ip, [r5, r3]
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009594:	3104      	adds	r1, #4
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	d021      	beq.n	80095e0 <__multiply+0x144>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	f104 0c14 	add.w	ip, r4, #20
 80095a2:	46ae      	mov	lr, r5
 80095a4:	f04f 0a00 	mov.w	sl, #0
 80095a8:	f8bc b000 	ldrh.w	fp, [ip]
 80095ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095b0:	fb09 770b 	mla	r7, r9, fp, r7
 80095b4:	4457      	add	r7, sl
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095bc:	f84e 3b04 	str.w	r3, [lr], #4
 80095c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095c8:	f8be 3000 	ldrh.w	r3, [lr]
 80095cc:	fb09 330a 	mla	r3, r9, sl, r3
 80095d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80095d4:	4562      	cmp	r2, ip
 80095d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095da:	d8e5      	bhi.n	80095a8 <__multiply+0x10c>
 80095dc:	9f01      	ldr	r7, [sp, #4]
 80095de:	51eb      	str	r3, [r5, r7]
 80095e0:	3504      	adds	r5, #4
 80095e2:	e799      	b.n	8009518 <__multiply+0x7c>
 80095e4:	3e01      	subs	r6, #1
 80095e6:	e79b      	b.n	8009520 <__multiply+0x84>
 80095e8:	0800b7c4 	.word	0x0800b7c4
 80095ec:	0800b7d5 	.word	0x0800b7d5

080095f0 <__pow5mult>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4615      	mov	r5, r2
 80095f6:	f012 0203 	ands.w	r2, r2, #3
 80095fa:	4607      	mov	r7, r0
 80095fc:	460e      	mov	r6, r1
 80095fe:	d007      	beq.n	8009610 <__pow5mult+0x20>
 8009600:	4c25      	ldr	r4, [pc, #148]	@ (8009698 <__pow5mult+0xa8>)
 8009602:	3a01      	subs	r2, #1
 8009604:	2300      	movs	r3, #0
 8009606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800960a:	f7ff fe9f 	bl	800934c <__multadd>
 800960e:	4606      	mov	r6, r0
 8009610:	10ad      	asrs	r5, r5, #2
 8009612:	d03d      	beq.n	8009690 <__pow5mult+0xa0>
 8009614:	69fc      	ldr	r4, [r7, #28]
 8009616:	b97c      	cbnz	r4, 8009638 <__pow5mult+0x48>
 8009618:	2010      	movs	r0, #16
 800961a:	f7ff fd7f 	bl	800911c <malloc>
 800961e:	4602      	mov	r2, r0
 8009620:	61f8      	str	r0, [r7, #28]
 8009622:	b928      	cbnz	r0, 8009630 <__pow5mult+0x40>
 8009624:	4b1d      	ldr	r3, [pc, #116]	@ (800969c <__pow5mult+0xac>)
 8009626:	481e      	ldr	r0, [pc, #120]	@ (80096a0 <__pow5mult+0xb0>)
 8009628:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800962c:	f000 fdb2 	bl	800a194 <__assert_func>
 8009630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009634:	6004      	str	r4, [r0, #0]
 8009636:	60c4      	str	r4, [r0, #12]
 8009638:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800963c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009640:	b94c      	cbnz	r4, 8009656 <__pow5mult+0x66>
 8009642:	f240 2171 	movw	r1, #625	@ 0x271
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff ff12 	bl	8009470 <__i2b>
 800964c:	2300      	movs	r3, #0
 800964e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009652:	4604      	mov	r4, r0
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	f04f 0900 	mov.w	r9, #0
 800965a:	07eb      	lsls	r3, r5, #31
 800965c:	d50a      	bpl.n	8009674 <__pow5mult+0x84>
 800965e:	4631      	mov	r1, r6
 8009660:	4622      	mov	r2, r4
 8009662:	4638      	mov	r0, r7
 8009664:	f7ff ff1a 	bl	800949c <__multiply>
 8009668:	4631      	mov	r1, r6
 800966a:	4680      	mov	r8, r0
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff fe4b 	bl	8009308 <_Bfree>
 8009672:	4646      	mov	r6, r8
 8009674:	106d      	asrs	r5, r5, #1
 8009676:	d00b      	beq.n	8009690 <__pow5mult+0xa0>
 8009678:	6820      	ldr	r0, [r4, #0]
 800967a:	b938      	cbnz	r0, 800968c <__pow5mult+0x9c>
 800967c:	4622      	mov	r2, r4
 800967e:	4621      	mov	r1, r4
 8009680:	4638      	mov	r0, r7
 8009682:	f7ff ff0b 	bl	800949c <__multiply>
 8009686:	6020      	str	r0, [r4, #0]
 8009688:	f8c0 9000 	str.w	r9, [r0]
 800968c:	4604      	mov	r4, r0
 800968e:	e7e4      	b.n	800965a <__pow5mult+0x6a>
 8009690:	4630      	mov	r0, r6
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009696:	bf00      	nop
 8009698:	0800b830 	.word	0x0800b830
 800969c:	0800b755 	.word	0x0800b755
 80096a0:	0800b7d5 	.word	0x0800b7d5

080096a4 <__lshift>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	6849      	ldr	r1, [r1, #4]
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	4607      	mov	r7, r0
 80096b6:	4691      	mov	r9, r2
 80096b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096bc:	f108 0601 	add.w	r6, r8, #1
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	db0b      	blt.n	80096dc <__lshift+0x38>
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff fddf 	bl	8009288 <_Balloc>
 80096ca:	4605      	mov	r5, r0
 80096cc:	b948      	cbnz	r0, 80096e2 <__lshift+0x3e>
 80096ce:	4602      	mov	r2, r0
 80096d0:	4b28      	ldr	r3, [pc, #160]	@ (8009774 <__lshift+0xd0>)
 80096d2:	4829      	ldr	r0, [pc, #164]	@ (8009778 <__lshift+0xd4>)
 80096d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096d8:	f000 fd5c 	bl	800a194 <__assert_func>
 80096dc:	3101      	adds	r1, #1
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	e7ee      	b.n	80096c0 <__lshift+0x1c>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f100 0114 	add.w	r1, r0, #20
 80096e8:	f100 0210 	add.w	r2, r0, #16
 80096ec:	4618      	mov	r0, r3
 80096ee:	4553      	cmp	r3, sl
 80096f0:	db33      	blt.n	800975a <__lshift+0xb6>
 80096f2:	6920      	ldr	r0, [r4, #16]
 80096f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096f8:	f104 0314 	add.w	r3, r4, #20
 80096fc:	f019 091f 	ands.w	r9, r9, #31
 8009700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009708:	d02b      	beq.n	8009762 <__lshift+0xbe>
 800970a:	f1c9 0e20 	rsb	lr, r9, #32
 800970e:	468a      	mov	sl, r1
 8009710:	2200      	movs	r2, #0
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	fa00 f009 	lsl.w	r0, r0, r9
 8009718:	4310      	orrs	r0, r2
 800971a:	f84a 0b04 	str.w	r0, [sl], #4
 800971e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009722:	459c      	cmp	ip, r3
 8009724:	fa22 f20e 	lsr.w	r2, r2, lr
 8009728:	d8f3      	bhi.n	8009712 <__lshift+0x6e>
 800972a:	ebac 0304 	sub.w	r3, ip, r4
 800972e:	3b15      	subs	r3, #21
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	3304      	adds	r3, #4
 8009736:	f104 0015 	add.w	r0, r4, #21
 800973a:	4584      	cmp	ip, r0
 800973c:	bf38      	it	cc
 800973e:	2304      	movcc	r3, #4
 8009740:	50ca      	str	r2, [r1, r3]
 8009742:	b10a      	cbz	r2, 8009748 <__lshift+0xa4>
 8009744:	f108 0602 	add.w	r6, r8, #2
 8009748:	3e01      	subs	r6, #1
 800974a:	4638      	mov	r0, r7
 800974c:	612e      	str	r6, [r5, #16]
 800974e:	4621      	mov	r1, r4
 8009750:	f7ff fdda 	bl	8009308 <_Bfree>
 8009754:	4628      	mov	r0, r5
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	f842 0f04 	str.w	r0, [r2, #4]!
 800975e:	3301      	adds	r3, #1
 8009760:	e7c5      	b.n	80096ee <__lshift+0x4a>
 8009762:	3904      	subs	r1, #4
 8009764:	f853 2b04 	ldr.w	r2, [r3], #4
 8009768:	f841 2f04 	str.w	r2, [r1, #4]!
 800976c:	459c      	cmp	ip, r3
 800976e:	d8f9      	bhi.n	8009764 <__lshift+0xc0>
 8009770:	e7ea      	b.n	8009748 <__lshift+0xa4>
 8009772:	bf00      	nop
 8009774:	0800b7c4 	.word	0x0800b7c4
 8009778:	0800b7d5 	.word	0x0800b7d5

0800977c <__mcmp>:
 800977c:	690a      	ldr	r2, [r1, #16]
 800977e:	4603      	mov	r3, r0
 8009780:	6900      	ldr	r0, [r0, #16]
 8009782:	1a80      	subs	r0, r0, r2
 8009784:	b530      	push	{r4, r5, lr}
 8009786:	d10e      	bne.n	80097a6 <__mcmp+0x2a>
 8009788:	3314      	adds	r3, #20
 800978a:	3114      	adds	r1, #20
 800978c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800979c:	4295      	cmp	r5, r2
 800979e:	d003      	beq.n	80097a8 <__mcmp+0x2c>
 80097a0:	d205      	bcs.n	80097ae <__mcmp+0x32>
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	bd30      	pop	{r4, r5, pc}
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d3f3      	bcc.n	8009794 <__mcmp+0x18>
 80097ac:	e7fb      	b.n	80097a6 <__mcmp+0x2a>
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7f9      	b.n	80097a6 <__mcmp+0x2a>
	...

080097b4 <__mdiff>:
 80097b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	4689      	mov	r9, r1
 80097ba:	4606      	mov	r6, r0
 80097bc:	4611      	mov	r1, r2
 80097be:	4648      	mov	r0, r9
 80097c0:	4614      	mov	r4, r2
 80097c2:	f7ff ffdb 	bl	800977c <__mcmp>
 80097c6:	1e05      	subs	r5, r0, #0
 80097c8:	d112      	bne.n	80097f0 <__mdiff+0x3c>
 80097ca:	4629      	mov	r1, r5
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7ff fd5b 	bl	8009288 <_Balloc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <__mdiff+0x2e>
 80097d6:	4b3f      	ldr	r3, [pc, #252]	@ (80098d4 <__mdiff+0x120>)
 80097d8:	f240 2137 	movw	r1, #567	@ 0x237
 80097dc:	483e      	ldr	r0, [pc, #248]	@ (80098d8 <__mdiff+0x124>)
 80097de:	f000 fcd9 	bl	800a194 <__assert_func>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097e8:	4610      	mov	r0, r2
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	bfbc      	itt	lt
 80097f2:	464b      	movlt	r3, r9
 80097f4:	46a1      	movlt	r9, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097fc:	bfba      	itte	lt
 80097fe:	461c      	movlt	r4, r3
 8009800:	2501      	movlt	r5, #1
 8009802:	2500      	movge	r5, #0
 8009804:	f7ff fd40 	bl	8009288 <_Balloc>
 8009808:	4602      	mov	r2, r0
 800980a:	b918      	cbnz	r0, 8009814 <__mdiff+0x60>
 800980c:	4b31      	ldr	r3, [pc, #196]	@ (80098d4 <__mdiff+0x120>)
 800980e:	f240 2145 	movw	r1, #581	@ 0x245
 8009812:	e7e3      	b.n	80097dc <__mdiff+0x28>
 8009814:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009818:	6926      	ldr	r6, [r4, #16]
 800981a:	60c5      	str	r5, [r0, #12]
 800981c:	f109 0310 	add.w	r3, r9, #16
 8009820:	f109 0514 	add.w	r5, r9, #20
 8009824:	f104 0e14 	add.w	lr, r4, #20
 8009828:	f100 0b14 	add.w	fp, r0, #20
 800982c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009830:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	46d9      	mov	r9, fp
 8009838:	f04f 0c00 	mov.w	ip, #0
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009842:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	fa1f f38a 	uxth.w	r3, sl
 800984c:	4619      	mov	r1, r3
 800984e:	b283      	uxth	r3, r0
 8009850:	1acb      	subs	r3, r1, r3
 8009852:	0c00      	lsrs	r0, r0, #16
 8009854:	4463      	add	r3, ip
 8009856:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800985a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800985e:	b29b      	uxth	r3, r3
 8009860:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009864:	4576      	cmp	r6, lr
 8009866:	f849 3b04 	str.w	r3, [r9], #4
 800986a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800986e:	d8e5      	bhi.n	800983c <__mdiff+0x88>
 8009870:	1b33      	subs	r3, r6, r4
 8009872:	3b15      	subs	r3, #21
 8009874:	f023 0303 	bic.w	r3, r3, #3
 8009878:	3415      	adds	r4, #21
 800987a:	3304      	adds	r3, #4
 800987c:	42a6      	cmp	r6, r4
 800987e:	bf38      	it	cc
 8009880:	2304      	movcc	r3, #4
 8009882:	441d      	add	r5, r3
 8009884:	445b      	add	r3, fp
 8009886:	461e      	mov	r6, r3
 8009888:	462c      	mov	r4, r5
 800988a:	4544      	cmp	r4, r8
 800988c:	d30e      	bcc.n	80098ac <__mdiff+0xf8>
 800988e:	f108 0103 	add.w	r1, r8, #3
 8009892:	1b49      	subs	r1, r1, r5
 8009894:	f021 0103 	bic.w	r1, r1, #3
 8009898:	3d03      	subs	r5, #3
 800989a:	45a8      	cmp	r8, r5
 800989c:	bf38      	it	cc
 800989e:	2100      	movcc	r1, #0
 80098a0:	440b      	add	r3, r1
 80098a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098a6:	b191      	cbz	r1, 80098ce <__mdiff+0x11a>
 80098a8:	6117      	str	r7, [r2, #16]
 80098aa:	e79d      	b.n	80097e8 <__mdiff+0x34>
 80098ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80098b0:	46e6      	mov	lr, ip
 80098b2:	0c08      	lsrs	r0, r1, #16
 80098b4:	fa1c fc81 	uxtah	ip, ip, r1
 80098b8:	4471      	add	r1, lr
 80098ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098be:	b289      	uxth	r1, r1
 80098c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098c4:	f846 1b04 	str.w	r1, [r6], #4
 80098c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098cc:	e7dd      	b.n	800988a <__mdiff+0xd6>
 80098ce:	3f01      	subs	r7, #1
 80098d0:	e7e7      	b.n	80098a2 <__mdiff+0xee>
 80098d2:	bf00      	nop
 80098d4:	0800b7c4 	.word	0x0800b7c4
 80098d8:	0800b7d5 	.word	0x0800b7d5

080098dc <__d2b>:
 80098dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	460f      	mov	r7, r1
 80098e2:	2101      	movs	r1, #1
 80098e4:	ec59 8b10 	vmov	r8, r9, d0
 80098e8:	4616      	mov	r6, r2
 80098ea:	f7ff fccd 	bl	8009288 <_Balloc>
 80098ee:	4604      	mov	r4, r0
 80098f0:	b930      	cbnz	r0, 8009900 <__d2b+0x24>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b23      	ldr	r3, [pc, #140]	@ (8009984 <__d2b+0xa8>)
 80098f6:	4824      	ldr	r0, [pc, #144]	@ (8009988 <__d2b+0xac>)
 80098f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80098fc:	f000 fc4a 	bl	800a194 <__assert_func>
 8009900:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009908:	b10d      	cbz	r5, 800990e <__d2b+0x32>
 800990a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	f1b8 0300 	subs.w	r3, r8, #0
 8009914:	d023      	beq.n	800995e <__d2b+0x82>
 8009916:	4668      	mov	r0, sp
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	f7ff fd7c 	bl	8009416 <__lo0bits>
 800991e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009922:	b1d0      	cbz	r0, 800995a <__d2b+0x7e>
 8009924:	f1c0 0320 	rsb	r3, r0, #32
 8009928:	fa02 f303 	lsl.w	r3, r2, r3
 800992c:	430b      	orrs	r3, r1
 800992e:	40c2      	lsrs	r2, r0
 8009930:	6163      	str	r3, [r4, #20]
 8009932:	9201      	str	r2, [sp, #4]
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	61a3      	str	r3, [r4, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	bf0c      	ite	eq
 800993c:	2201      	moveq	r2, #1
 800993e:	2202      	movne	r2, #2
 8009940:	6122      	str	r2, [r4, #16]
 8009942:	b1a5      	cbz	r5, 800996e <__d2b+0x92>
 8009944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009948:	4405      	add	r5, r0
 800994a:	603d      	str	r5, [r7, #0]
 800994c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009950:	6030      	str	r0, [r6, #0]
 8009952:	4620      	mov	r0, r4
 8009954:	b003      	add	sp, #12
 8009956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800995a:	6161      	str	r1, [r4, #20]
 800995c:	e7ea      	b.n	8009934 <__d2b+0x58>
 800995e:	a801      	add	r0, sp, #4
 8009960:	f7ff fd59 	bl	8009416 <__lo0bits>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	3020      	adds	r0, #32
 800996a:	2201      	movs	r2, #1
 800996c:	e7e8      	b.n	8009940 <__d2b+0x64>
 800996e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009976:	6038      	str	r0, [r7, #0]
 8009978:	6918      	ldr	r0, [r3, #16]
 800997a:	f7ff fd2d 	bl	80093d8 <__hi0bits>
 800997e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009982:	e7e5      	b.n	8009950 <__d2b+0x74>
 8009984:	0800b7c4 	.word	0x0800b7c4
 8009988:	0800b7d5 	.word	0x0800b7d5

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	688e      	ldr	r6, [r1, #8]
 8009992:	461f      	mov	r7, r3
 8009994:	42be      	cmp	r6, r7
 8009996:	680b      	ldr	r3, [r1, #0]
 8009998:	4682      	mov	sl, r0
 800999a:	460c      	mov	r4, r1
 800999c:	4690      	mov	r8, r2
 800999e:	d82d      	bhi.n	80099fc <__ssputs_r+0x70>
 80099a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099a8:	d026      	beq.n	80099f8 <__ssputs_r+0x6c>
 80099aa:	6965      	ldr	r5, [r4, #20]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b2:	eba3 0901 	sub.w	r9, r3, r1
 80099b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ba:	1c7b      	adds	r3, r7, #1
 80099bc:	444b      	add	r3, r9
 80099be:	106d      	asrs	r5, r5, #1
 80099c0:	429d      	cmp	r5, r3
 80099c2:	bf38      	it	cc
 80099c4:	461d      	movcc	r5, r3
 80099c6:	0553      	lsls	r3, r2, #21
 80099c8:	d527      	bpl.n	8009a1a <__ssputs_r+0x8e>
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7ff fbd0 	bl	8009170 <_malloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	b360      	cbz	r0, 8009a2e <__ssputs_r+0xa2>
 80099d4:	6921      	ldr	r1, [r4, #16]
 80099d6:	464a      	mov	r2, r9
 80099d8:	f7fe fcfb 	bl	80083d2 <memcpy>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	6126      	str	r6, [r4, #16]
 80099ea:	6165      	str	r5, [r4, #20]
 80099ec:	444e      	add	r6, r9
 80099ee:	eba5 0509 	sub.w	r5, r5, r9
 80099f2:	6026      	str	r6, [r4, #0]
 80099f4:	60a5      	str	r5, [r4, #8]
 80099f6:	463e      	mov	r6, r7
 80099f8:	42be      	cmp	r6, r7
 80099fa:	d900      	bls.n	80099fe <__ssputs_r+0x72>
 80099fc:	463e      	mov	r6, r7
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	4632      	mov	r2, r6
 8009a02:	4641      	mov	r1, r8
 8009a04:	f000 fb9c 	bl	800a140 <memmove>
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	1b9b      	subs	r3, r3, r6
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	4433      	add	r3, r6
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	2000      	movs	r0, #0
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	f000 fbfe 	bl	800a21c <_realloc_r>
 8009a20:	4606      	mov	r6, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d1e0      	bne.n	80099e8 <__ssputs_r+0x5c>
 8009a26:	6921      	ldr	r1, [r4, #16]
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7ff fb2d 	bl	8009088 <_free_r>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f8ca 3000 	str.w	r3, [sl]
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e7e9      	b.n	8009a16 <__ssputs_r+0x8a>
	...

08009a44 <_svfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	4698      	mov	r8, r3
 8009a4a:	898b      	ldrh	r3, [r1, #12]
 8009a4c:	061b      	lsls	r3, r3, #24
 8009a4e:	b09d      	sub	sp, #116	@ 0x74
 8009a50:	4607      	mov	r7, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	d510      	bpl.n	8009a7a <_svfiprintf_r+0x36>
 8009a58:	690b      	ldr	r3, [r1, #16]
 8009a5a:	b973      	cbnz	r3, 8009a7a <_svfiprintf_r+0x36>
 8009a5c:	2140      	movs	r1, #64	@ 0x40
 8009a5e:	f7ff fb87 	bl	8009170 <_malloc_r>
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	6128      	str	r0, [r5, #16]
 8009a66:	b930      	cbnz	r0, 8009a76 <_svfiprintf_r+0x32>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	@ 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7e:	2320      	movs	r3, #32
 8009a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a88:	2330      	movs	r3, #48	@ 0x30
 8009a8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c28 <_svfiprintf_r+0x1e4>
 8009a8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a92:	f04f 0901 	mov.w	r9, #1
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x60>
 8009aa0:	2a25      	cmp	r2, #37	@ 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x54>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7e>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6b 	bl	800998c <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80a7 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 809f 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad6:	f10a 0a01 	add.w	sl, sl, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	484e      	ldr	r0, [pc, #312]	@ (8009c28 <_svfiprintf_r+0x1e4>)
 8009aee:	f7f6 fb6f 	bl	80001d0 <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xea>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	@ 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xfa>
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	4654      	mov	r4, sl
 8009b16:	2000      	movs	r0, #0
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	@ 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94b      	bls.n	8009bc0 <_svfiprintf_r+0x17c>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x114>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x114>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	fa09 f303 	lsl.w	r3, r9, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	46a2      	mov	sl, r4
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0xa0>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5c:	d10a      	bne.n	8009b74 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b62:	d132      	bne.n	8009bca <_svfiprintf_r+0x186>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d1a      	adds	r2, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9203      	str	r2, [sp, #12]
 8009b6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b70:	3402      	adds	r4, #2
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c38 <_svfiprintf_r+0x1f4>
 8009b78:	7821      	ldrb	r1, [r4, #0]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	f7f6 fb27 	bl	80001d0 <memchr>
 8009b82:	b138      	cbz	r0, 8009b94 <_svfiprintf_r+0x150>
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	eba0 000a 	sub.w	r0, r0, sl
 8009b8a:	2240      	movs	r2, #64	@ 0x40
 8009b8c:	4082      	lsls	r2, r0
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	3401      	adds	r4, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b98:	4824      	ldr	r0, [pc, #144]	@ (8009c2c <_svfiprintf_r+0x1e8>)
 8009b9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	f7f6 fb16 	bl	80001d0 <memchr>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d036      	beq.n	8009c16 <_svfiprintf_r+0x1d2>
 8009ba8:	4b21      	ldr	r3, [pc, #132]	@ (8009c30 <_svfiprintf_r+0x1ec>)
 8009baa:	bb1b      	cbnz	r3, 8009bf4 <_svfiprintf_r+0x1b0>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	3307      	adds	r3, #7
 8009bb0:	f023 0307 	bic.w	r3, r3, #7
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	4433      	add	r3, r6
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	e76a      	b.n	8009a96 <_svfiprintf_r+0x52>
 8009bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7a8      	b.n	8009b1c <_svfiprintf_r+0xd8>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	3401      	adds	r4, #1
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bdc:	3a30      	subs	r2, #48	@ 0x30
 8009bde:	2a09      	cmp	r2, #9
 8009be0:	d903      	bls.n	8009bea <_svfiprintf_r+0x1a6>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c6      	beq.n	8009b74 <_svfiprintf_r+0x130>
 8009be6:	9105      	str	r1, [sp, #20]
 8009be8:	e7c4      	b.n	8009b74 <_svfiprintf_r+0x130>
 8009bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7f0      	b.n	8009bd6 <_svfiprintf_r+0x192>
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009bfc:	a904      	add	r1, sp, #16
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7fd fe44 	bl	800788c <_printf_float>
 8009c04:	1c42      	adds	r2, r0, #1
 8009c06:	4606      	mov	r6, r0
 8009c08:	d1d6      	bne.n	8009bb8 <_svfiprintf_r+0x174>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	f53f af2d 	bmi.w	8009a6c <_svfiprintf_r+0x28>
 8009c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c14:	e72c      	b.n	8009a70 <_svfiprintf_r+0x2c>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7fe f8cb 	bl	8007dbc <_printf_i>
 8009c26:	e7ed      	b.n	8009c04 <_svfiprintf_r+0x1c0>
 8009c28:	0800b930 	.word	0x0800b930
 8009c2c:	0800b93a 	.word	0x0800b93a
 8009c30:	0800788d 	.word	0x0800788d
 8009c34:	0800998d 	.word	0x0800998d
 8009c38:	0800b936 	.word	0x0800b936

08009c3c <__sfputc_r>:
 8009c3c:	6893      	ldr	r3, [r2, #8]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	b410      	push	{r4}
 8009c44:	6093      	str	r3, [r2, #8]
 8009c46:	da08      	bge.n	8009c5a <__sfputc_r+0x1e>
 8009c48:	6994      	ldr	r4, [r2, #24]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	db01      	blt.n	8009c52 <__sfputc_r+0x16>
 8009c4e:	290a      	cmp	r1, #10
 8009c50:	d103      	bne.n	8009c5a <__sfputc_r+0x1e>
 8009c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c56:	f000 b9df 	b.w	800a018 <__swbuf_r>
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	1c58      	adds	r0, r3, #1
 8009c5e:	6010      	str	r0, [r2, #0]
 8009c60:	7019      	strb	r1, [r3, #0]
 8009c62:	4608      	mov	r0, r1
 8009c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <__sfputs_r>:
 8009c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460f      	mov	r7, r1
 8009c70:	4614      	mov	r4, r2
 8009c72:	18d5      	adds	r5, r2, r3
 8009c74:	42ac      	cmp	r4, r5
 8009c76:	d101      	bne.n	8009c7c <__sfputs_r+0x12>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e007      	b.n	8009c8c <__sfputs_r+0x22>
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	463a      	mov	r2, r7
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ffda 	bl	8009c3c <__sfputc_r>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d1f3      	bne.n	8009c74 <__sfputs_r+0xa>
 8009c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c90 <_vfiprintf_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	460d      	mov	r5, r1
 8009c96:	b09d      	sub	sp, #116	@ 0x74
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b118      	cbz	r0, 8009ca8 <_vfiprintf_r+0x18>
 8009ca0:	6a03      	ldr	r3, [r0, #32]
 8009ca2:	b90b      	cbnz	r3, 8009ca8 <_vfiprintf_r+0x18>
 8009ca4:	f7fe fa36 	bl	8008114 <__sinit>
 8009ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009caa:	07d9      	lsls	r1, r3, #31
 8009cac:	d405      	bmi.n	8009cba <_vfiprintf_r+0x2a>
 8009cae:	89ab      	ldrh	r3, [r5, #12]
 8009cb0:	059a      	lsls	r2, r3, #22
 8009cb2:	d402      	bmi.n	8009cba <_vfiprintf_r+0x2a>
 8009cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cb6:	f7fe fb8a 	bl	80083ce <__retarget_lock_acquire_recursive>
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	071b      	lsls	r3, r3, #28
 8009cbe:	d501      	bpl.n	8009cc4 <_vfiprintf_r+0x34>
 8009cc0:	692b      	ldr	r3, [r5, #16]
 8009cc2:	b99b      	cbnz	r3, 8009cec <_vfiprintf_r+0x5c>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f000 f9e4 	bl	800a094 <__swsetup_r>
 8009ccc:	b170      	cbz	r0, 8009cec <_vfiprintf_r+0x5c>
 8009cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd0:	07dc      	lsls	r4, r3, #31
 8009cd2:	d504      	bpl.n	8009cde <_vfiprintf_r+0x4e>
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b01d      	add	sp, #116	@ 0x74
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	0598      	lsls	r0, r3, #22
 8009ce2:	d4f7      	bmi.n	8009cd4 <_vfiprintf_r+0x44>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce6:	f7fe fb73 	bl	80083d0 <__retarget_lock_release_recursive>
 8009cea:	e7f3      	b.n	8009cd4 <_vfiprintf_r+0x44>
 8009cec:	2300      	movs	r3, #0
 8009cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cfa:	2330      	movs	r3, #48	@ 0x30
 8009cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009eac <_vfiprintf_r+0x21c>
 8009d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d04:	f04f 0901 	mov.w	r9, #1
 8009d08:	4623      	mov	r3, r4
 8009d0a:	469a      	mov	sl, r3
 8009d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d10:	b10a      	cbz	r2, 8009d16 <_vfiprintf_r+0x86>
 8009d12:	2a25      	cmp	r2, #37	@ 0x25
 8009d14:	d1f9      	bne.n	8009d0a <_vfiprintf_r+0x7a>
 8009d16:	ebba 0b04 	subs.w	fp, sl, r4
 8009d1a:	d00b      	beq.n	8009d34 <_vfiprintf_r+0xa4>
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ffa1 	bl	8009c6a <__sfputs_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f000 80a7 	beq.w	8009e7c <_vfiprintf_r+0x1ec>
 8009d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d30:	445a      	add	r2, fp
 8009d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d34:	f89a 3000 	ldrb.w	r3, [sl]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 809f 	beq.w	8009e7c <_vfiprintf_r+0x1ec>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
 8009d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d48:	f10a 0a01 	add.w	sl, sl, #1
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	9307      	str	r3, [sp, #28]
 8009d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d56:	4654      	mov	r4, sl
 8009d58:	2205      	movs	r2, #5
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	4853      	ldr	r0, [pc, #332]	@ (8009eac <_vfiprintf_r+0x21c>)
 8009d60:	f7f6 fa36 	bl	80001d0 <memchr>
 8009d64:	9a04      	ldr	r2, [sp, #16]
 8009d66:	b9d8      	cbnz	r0, 8009da0 <_vfiprintf_r+0x110>
 8009d68:	06d1      	lsls	r1, r2, #27
 8009d6a:	bf44      	itt	mi
 8009d6c:	2320      	movmi	r3, #32
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d72:	0713      	lsls	r3, r2, #28
 8009d74:	bf44      	itt	mi
 8009d76:	232b      	movmi	r3, #43	@ 0x2b
 8009d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d82:	d015      	beq.n	8009db0 <_vfiprintf_r+0x120>
 8009d84:	9a07      	ldr	r2, [sp, #28]
 8009d86:	4654      	mov	r4, sl
 8009d88:	2000      	movs	r0, #0
 8009d8a:	f04f 0c0a 	mov.w	ip, #10
 8009d8e:	4621      	mov	r1, r4
 8009d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d94:	3b30      	subs	r3, #48	@ 0x30
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	d94b      	bls.n	8009e32 <_vfiprintf_r+0x1a2>
 8009d9a:	b1b0      	cbz	r0, 8009dca <_vfiprintf_r+0x13a>
 8009d9c:	9207      	str	r2, [sp, #28]
 8009d9e:	e014      	b.n	8009dca <_vfiprintf_r+0x13a>
 8009da0:	eba0 0308 	sub.w	r3, r0, r8
 8009da4:	fa09 f303 	lsl.w	r3, r9, r3
 8009da8:	4313      	orrs	r3, r2
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	46a2      	mov	sl, r4
 8009dae:	e7d2      	b.n	8009d56 <_vfiprintf_r+0xc6>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	1d19      	adds	r1, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfbb      	ittet	lt
 8009dbc:	425b      	neglt	r3, r3
 8009dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8009dc2:	9307      	strge	r3, [sp, #28]
 8009dc4:	9307      	strlt	r3, [sp, #28]
 8009dc6:	bfb8      	it	lt
 8009dc8:	9204      	strlt	r2, [sp, #16]
 8009dca:	7823      	ldrb	r3, [r4, #0]
 8009dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dce:	d10a      	bne.n	8009de6 <_vfiprintf_r+0x156>
 8009dd0:	7863      	ldrb	r3, [r4, #1]
 8009dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd4:	d132      	bne.n	8009e3c <_vfiprintf_r+0x1ac>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	1d1a      	adds	r2, r3, #4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	9203      	str	r2, [sp, #12]
 8009dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009de2:	3402      	adds	r4, #2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ebc <_vfiprintf_r+0x22c>
 8009dea:	7821      	ldrb	r1, [r4, #0]
 8009dec:	2203      	movs	r2, #3
 8009dee:	4650      	mov	r0, sl
 8009df0:	f7f6 f9ee 	bl	80001d0 <memchr>
 8009df4:	b138      	cbz	r0, 8009e06 <_vfiprintf_r+0x176>
 8009df6:	9b04      	ldr	r3, [sp, #16]
 8009df8:	eba0 000a 	sub.w	r0, r0, sl
 8009dfc:	2240      	movs	r2, #64	@ 0x40
 8009dfe:	4082      	lsls	r2, r0
 8009e00:	4313      	orrs	r3, r2
 8009e02:	3401      	adds	r4, #1
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0a:	4829      	ldr	r0, [pc, #164]	@ (8009eb0 <_vfiprintf_r+0x220>)
 8009e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e10:	2206      	movs	r2, #6
 8009e12:	f7f6 f9dd 	bl	80001d0 <memchr>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d03f      	beq.n	8009e9a <_vfiprintf_r+0x20a>
 8009e1a:	4b26      	ldr	r3, [pc, #152]	@ (8009eb4 <_vfiprintf_r+0x224>)
 8009e1c:	bb1b      	cbnz	r3, 8009e66 <_vfiprintf_r+0x1d6>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	3308      	adds	r3, #8
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2c:	443b      	add	r3, r7
 8009e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e30:	e76a      	b.n	8009d08 <_vfiprintf_r+0x78>
 8009e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e36:	460c      	mov	r4, r1
 8009e38:	2001      	movs	r0, #1
 8009e3a:	e7a8      	b.n	8009d8e <_vfiprintf_r+0xfe>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	3401      	adds	r4, #1
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	4619      	mov	r1, r3
 8009e44:	f04f 0c0a 	mov.w	ip, #10
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4e:	3a30      	subs	r2, #48	@ 0x30
 8009e50:	2a09      	cmp	r2, #9
 8009e52:	d903      	bls.n	8009e5c <_vfiprintf_r+0x1cc>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0c6      	beq.n	8009de6 <_vfiprintf_r+0x156>
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	e7c4      	b.n	8009de6 <_vfiprintf_r+0x156>
 8009e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e60:	4604      	mov	r4, r0
 8009e62:	2301      	movs	r3, #1
 8009e64:	e7f0      	b.n	8009e48 <_vfiprintf_r+0x1b8>
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	4b12      	ldr	r3, [pc, #72]	@ (8009eb8 <_vfiprintf_r+0x228>)
 8009e6e:	a904      	add	r1, sp, #16
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7fd fd0b 	bl	800788c <_printf_float>
 8009e76:	4607      	mov	r7, r0
 8009e78:	1c78      	adds	r0, r7, #1
 8009e7a:	d1d6      	bne.n	8009e2a <_vfiprintf_r+0x19a>
 8009e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e7e:	07d9      	lsls	r1, r3, #31
 8009e80:	d405      	bmi.n	8009e8e <_vfiprintf_r+0x1fe>
 8009e82:	89ab      	ldrh	r3, [r5, #12]
 8009e84:	059a      	lsls	r2, r3, #22
 8009e86:	d402      	bmi.n	8009e8e <_vfiprintf_r+0x1fe>
 8009e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e8a:	f7fe faa1 	bl	80083d0 <__retarget_lock_release_recursive>
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	065b      	lsls	r3, r3, #25
 8009e92:	f53f af1f 	bmi.w	8009cd4 <_vfiprintf_r+0x44>
 8009e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e98:	e71e      	b.n	8009cd8 <_vfiprintf_r+0x48>
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	4b05      	ldr	r3, [pc, #20]	@ (8009eb8 <_vfiprintf_r+0x228>)
 8009ea2:	a904      	add	r1, sp, #16
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7fd ff89 	bl	8007dbc <_printf_i>
 8009eaa:	e7e4      	b.n	8009e76 <_vfiprintf_r+0x1e6>
 8009eac:	0800b930 	.word	0x0800b930
 8009eb0:	0800b93a 	.word	0x0800b93a
 8009eb4:	0800788d 	.word	0x0800788d
 8009eb8:	08009c6b 	.word	0x08009c6b
 8009ebc:	0800b936 	.word	0x0800b936

08009ec0 <__sflush_r>:
 8009ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	0716      	lsls	r6, r2, #28
 8009eca:	4605      	mov	r5, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	d454      	bmi.n	8009f7a <__sflush_r+0xba>
 8009ed0:	684b      	ldr	r3, [r1, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dc02      	bgt.n	8009edc <__sflush_r+0x1c>
 8009ed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dd48      	ble.n	8009f6e <__sflush_r+0xae>
 8009edc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	d045      	beq.n	8009f6e <__sflush_r+0xae>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ee8:	682f      	ldr	r7, [r5, #0]
 8009eea:	6a21      	ldr	r1, [r4, #32]
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	d030      	beq.n	8009f52 <__sflush_r+0x92>
 8009ef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	0759      	lsls	r1, r3, #29
 8009ef6:	d505      	bpl.n	8009f04 <__sflush_r+0x44>
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009efe:	b10b      	cbz	r3, 8009f04 <__sflush_r+0x44>
 8009f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f02:	1ad2      	subs	r2, r2, r3
 8009f04:	2300      	movs	r3, #0
 8009f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f08:	6a21      	ldr	r1, [r4, #32]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b0      	blx	r6
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	d106      	bne.n	8009f22 <__sflush_r+0x62>
 8009f14:	6829      	ldr	r1, [r5, #0]
 8009f16:	291d      	cmp	r1, #29
 8009f18:	d82b      	bhi.n	8009f72 <__sflush_r+0xb2>
 8009f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009fc4 <__sflush_r+0x104>)
 8009f1c:	410a      	asrs	r2, r1
 8009f1e:	07d6      	lsls	r6, r2, #31
 8009f20:	d427      	bmi.n	8009f72 <__sflush_r+0xb2>
 8009f22:	2200      	movs	r2, #0
 8009f24:	6062      	str	r2, [r4, #4]
 8009f26:	04d9      	lsls	r1, r3, #19
 8009f28:	6922      	ldr	r2, [r4, #16]
 8009f2a:	6022      	str	r2, [r4, #0]
 8009f2c:	d504      	bpl.n	8009f38 <__sflush_r+0x78>
 8009f2e:	1c42      	adds	r2, r0, #1
 8009f30:	d101      	bne.n	8009f36 <__sflush_r+0x76>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	b903      	cbnz	r3, 8009f38 <__sflush_r+0x78>
 8009f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f3a:	602f      	str	r7, [r5, #0]
 8009f3c:	b1b9      	cbz	r1, 8009f6e <__sflush_r+0xae>
 8009f3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f42:	4299      	cmp	r1, r3
 8009f44:	d002      	beq.n	8009f4c <__sflush_r+0x8c>
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7ff f89e 	bl	8009088 <_free_r>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f50:	e00d      	b.n	8009f6e <__sflush_r+0xae>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b0      	blx	r6
 8009f58:	4602      	mov	r2, r0
 8009f5a:	1c50      	adds	r0, r2, #1
 8009f5c:	d1c9      	bne.n	8009ef2 <__sflush_r+0x32>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0c6      	beq.n	8009ef2 <__sflush_r+0x32>
 8009f64:	2b1d      	cmp	r3, #29
 8009f66:	d001      	beq.n	8009f6c <__sflush_r+0xac>
 8009f68:	2b16      	cmp	r3, #22
 8009f6a:	d11e      	bne.n	8009faa <__sflush_r+0xea>
 8009f6c:	602f      	str	r7, [r5, #0]
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e022      	b.n	8009fb8 <__sflush_r+0xf8>
 8009f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f76:	b21b      	sxth	r3, r3
 8009f78:	e01b      	b.n	8009fb2 <__sflush_r+0xf2>
 8009f7a:	690f      	ldr	r7, [r1, #16]
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	d0f6      	beq.n	8009f6e <__sflush_r+0xae>
 8009f80:	0793      	lsls	r3, r2, #30
 8009f82:	680e      	ldr	r6, [r1, #0]
 8009f84:	bf08      	it	eq
 8009f86:	694b      	ldreq	r3, [r1, #20]
 8009f88:	600f      	str	r7, [r1, #0]
 8009f8a:	bf18      	it	ne
 8009f8c:	2300      	movne	r3, #0
 8009f8e:	eba6 0807 	sub.w	r8, r6, r7
 8009f92:	608b      	str	r3, [r1, #8]
 8009f94:	f1b8 0f00 	cmp.w	r8, #0
 8009f98:	dde9      	ble.n	8009f6e <__sflush_r+0xae>
 8009f9a:	6a21      	ldr	r1, [r4, #32]
 8009f9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f9e:	4643      	mov	r3, r8
 8009fa0:	463a      	mov	r2, r7
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b0      	blx	r6
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	dc08      	bgt.n	8009fbc <__sflush_r+0xfc>
 8009faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	4407      	add	r7, r0
 8009fbe:	eba8 0800 	sub.w	r8, r8, r0
 8009fc2:	e7e7      	b.n	8009f94 <__sflush_r+0xd4>
 8009fc4:	dfbffffe 	.word	0xdfbffffe

08009fc8 <_fflush_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	690b      	ldr	r3, [r1, #16]
 8009fcc:	4605      	mov	r5, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	b913      	cbnz	r3, 8009fd8 <_fflush_r+0x10>
 8009fd2:	2500      	movs	r5, #0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	b118      	cbz	r0, 8009fe2 <_fflush_r+0x1a>
 8009fda:	6a03      	ldr	r3, [r0, #32]
 8009fdc:	b90b      	cbnz	r3, 8009fe2 <_fflush_r+0x1a>
 8009fde:	f7fe f899 	bl	8008114 <__sinit>
 8009fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f3      	beq.n	8009fd2 <_fflush_r+0xa>
 8009fea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fec:	07d0      	lsls	r0, r2, #31
 8009fee:	d404      	bmi.n	8009ffa <_fflush_r+0x32>
 8009ff0:	0599      	lsls	r1, r3, #22
 8009ff2:	d402      	bmi.n	8009ffa <_fflush_r+0x32>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ff6:	f7fe f9ea 	bl	80083ce <__retarget_lock_acquire_recursive>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	f7ff ff5f 	bl	8009ec0 <__sflush_r>
 800a002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a004:	07da      	lsls	r2, r3, #31
 800a006:	4605      	mov	r5, r0
 800a008:	d4e4      	bmi.n	8009fd4 <_fflush_r+0xc>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	059b      	lsls	r3, r3, #22
 800a00e:	d4e1      	bmi.n	8009fd4 <_fflush_r+0xc>
 800a010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a012:	f7fe f9dd 	bl	80083d0 <__retarget_lock_release_recursive>
 800a016:	e7dd      	b.n	8009fd4 <_fflush_r+0xc>

0800a018 <__swbuf_r>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	460e      	mov	r6, r1
 800a01c:	4614      	mov	r4, r2
 800a01e:	4605      	mov	r5, r0
 800a020:	b118      	cbz	r0, 800a02a <__swbuf_r+0x12>
 800a022:	6a03      	ldr	r3, [r0, #32]
 800a024:	b90b      	cbnz	r3, 800a02a <__swbuf_r+0x12>
 800a026:	f7fe f875 	bl	8008114 <__sinit>
 800a02a:	69a3      	ldr	r3, [r4, #24]
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	071a      	lsls	r2, r3, #28
 800a032:	d501      	bpl.n	800a038 <__swbuf_r+0x20>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	b943      	cbnz	r3, 800a04a <__swbuf_r+0x32>
 800a038:	4621      	mov	r1, r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f82a 	bl	800a094 <__swsetup_r>
 800a040:	b118      	cbz	r0, 800a04a <__swbuf_r+0x32>
 800a042:	f04f 37ff 	mov.w	r7, #4294967295
 800a046:	4638      	mov	r0, r7
 800a048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	6922      	ldr	r2, [r4, #16]
 800a04e:	1a98      	subs	r0, r3, r2
 800a050:	6963      	ldr	r3, [r4, #20]
 800a052:	b2f6      	uxtb	r6, r6
 800a054:	4283      	cmp	r3, r0
 800a056:	4637      	mov	r7, r6
 800a058:	dc05      	bgt.n	800a066 <__swbuf_r+0x4e>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7ff ffb3 	bl	8009fc8 <_fflush_r>
 800a062:	2800      	cmp	r0, #0
 800a064:	d1ed      	bne.n	800a042 <__swbuf_r+0x2a>
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	3b01      	subs	r3, #1
 800a06a:	60a3      	str	r3, [r4, #8]
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	6022      	str	r2, [r4, #0]
 800a072:	701e      	strb	r6, [r3, #0]
 800a074:	6962      	ldr	r2, [r4, #20]
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	429a      	cmp	r2, r3
 800a07a:	d004      	beq.n	800a086 <__swbuf_r+0x6e>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	07db      	lsls	r3, r3, #31
 800a080:	d5e1      	bpl.n	800a046 <__swbuf_r+0x2e>
 800a082:	2e0a      	cmp	r6, #10
 800a084:	d1df      	bne.n	800a046 <__swbuf_r+0x2e>
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	f7ff ff9d 	bl	8009fc8 <_fflush_r>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0d9      	beq.n	800a046 <__swbuf_r+0x2e>
 800a092:	e7d6      	b.n	800a042 <__swbuf_r+0x2a>

0800a094 <__swsetup_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4b29      	ldr	r3, [pc, #164]	@ (800a13c <__swsetup_r+0xa8>)
 800a098:	4605      	mov	r5, r0
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	460c      	mov	r4, r1
 800a09e:	b118      	cbz	r0, 800a0a8 <__swsetup_r+0x14>
 800a0a0:	6a03      	ldr	r3, [r0, #32]
 800a0a2:	b90b      	cbnz	r3, 800a0a8 <__swsetup_r+0x14>
 800a0a4:	f7fe f836 	bl	8008114 <__sinit>
 800a0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ac:	0719      	lsls	r1, r3, #28
 800a0ae:	d422      	bmi.n	800a0f6 <__swsetup_r+0x62>
 800a0b0:	06da      	lsls	r2, r3, #27
 800a0b2:	d407      	bmi.n	800a0c4 <__swsetup_r+0x30>
 800a0b4:	2209      	movs	r2, #9
 800a0b6:	602a      	str	r2, [r5, #0]
 800a0b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c2:	e033      	b.n	800a12c <__swsetup_r+0x98>
 800a0c4:	0758      	lsls	r0, r3, #29
 800a0c6:	d512      	bpl.n	800a0ee <__swsetup_r+0x5a>
 800a0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ca:	b141      	cbz	r1, 800a0de <__swsetup_r+0x4a>
 800a0cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d002      	beq.n	800a0da <__swsetup_r+0x46>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f7fe ffd7 	bl	8009088 <_free_r>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6063      	str	r3, [r4, #4]
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f043 0308 	orr.w	r3, r3, #8
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	b94b      	cbnz	r3, 800a10e <__swsetup_r+0x7a>
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a104:	d003      	beq.n	800a10e <__swsetup_r+0x7a>
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 f8fb 	bl	800a304 <__smakebuf_r>
 800a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a112:	f013 0201 	ands.w	r2, r3, #1
 800a116:	d00a      	beq.n	800a12e <__swsetup_r+0x9a>
 800a118:	2200      	movs	r2, #0
 800a11a:	60a2      	str	r2, [r4, #8]
 800a11c:	6962      	ldr	r2, [r4, #20]
 800a11e:	4252      	negs	r2, r2
 800a120:	61a2      	str	r2, [r4, #24]
 800a122:	6922      	ldr	r2, [r4, #16]
 800a124:	b942      	cbnz	r2, 800a138 <__swsetup_r+0xa4>
 800a126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a12a:	d1c5      	bne.n	800a0b8 <__swsetup_r+0x24>
 800a12c:	bd38      	pop	{r3, r4, r5, pc}
 800a12e:	0799      	lsls	r1, r3, #30
 800a130:	bf58      	it	pl
 800a132:	6962      	ldrpl	r2, [r4, #20]
 800a134:	60a2      	str	r2, [r4, #8]
 800a136:	e7f4      	b.n	800a122 <__swsetup_r+0x8e>
 800a138:	2000      	movs	r0, #0
 800a13a:	e7f7      	b.n	800a12c <__swsetup_r+0x98>
 800a13c:	20000018 	.word	0x20000018

0800a140 <memmove>:
 800a140:	4288      	cmp	r0, r1
 800a142:	b510      	push	{r4, lr}
 800a144:	eb01 0402 	add.w	r4, r1, r2
 800a148:	d902      	bls.n	800a150 <memmove+0x10>
 800a14a:	4284      	cmp	r4, r0
 800a14c:	4623      	mov	r3, r4
 800a14e:	d807      	bhi.n	800a160 <memmove+0x20>
 800a150:	1e43      	subs	r3, r0, #1
 800a152:	42a1      	cmp	r1, r4
 800a154:	d008      	beq.n	800a168 <memmove+0x28>
 800a156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a15a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a15e:	e7f8      	b.n	800a152 <memmove+0x12>
 800a160:	4402      	add	r2, r0
 800a162:	4601      	mov	r1, r0
 800a164:	428a      	cmp	r2, r1
 800a166:	d100      	bne.n	800a16a <memmove+0x2a>
 800a168:	bd10      	pop	{r4, pc}
 800a16a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a16e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a172:	e7f7      	b.n	800a164 <memmove+0x24>

0800a174 <_sbrk_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d06      	ldr	r5, [pc, #24]	@ (800a190 <_sbrk_r+0x1c>)
 800a178:	2300      	movs	r3, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	602b      	str	r3, [r5, #0]
 800a180:	f7f8 fb22 	bl	80027c8 <_sbrk>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_sbrk_r+0x1a>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_sbrk_r+0x1a>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	200009b8 	.word	0x200009b8

0800a194 <__assert_func>:
 800a194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a196:	4614      	mov	r4, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <__assert_func+0x2c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4605      	mov	r5, r0
 800a1a0:	68d8      	ldr	r0, [r3, #12]
 800a1a2:	b954      	cbnz	r4, 800a1ba <__assert_func+0x26>
 800a1a4:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <__assert_func+0x30>)
 800a1a6:	461c      	mov	r4, r3
 800a1a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1ac:	9100      	str	r1, [sp, #0]
 800a1ae:	462b      	mov	r3, r5
 800a1b0:	4905      	ldr	r1, [pc, #20]	@ (800a1c8 <__assert_func+0x34>)
 800a1b2:	f000 f86f 	bl	800a294 <fiprintf>
 800a1b6:	f000 f903 	bl	800a3c0 <abort>
 800a1ba:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <__assert_func+0x38>)
 800a1bc:	e7f4      	b.n	800a1a8 <__assert_func+0x14>
 800a1be:	bf00      	nop
 800a1c0:	20000018 	.word	0x20000018
 800a1c4:	0800b986 	.word	0x0800b986
 800a1c8:	0800b958 	.word	0x0800b958
 800a1cc:	0800b94b 	.word	0x0800b94b

0800a1d0 <_calloc_r>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	fba1 5402 	umull	r5, r4, r1, r2
 800a1d6:	b93c      	cbnz	r4, 800a1e8 <_calloc_r+0x18>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7fe ffc9 	bl	8009170 <_malloc_r>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b928      	cbnz	r0, 800a1ee <_calloc_r+0x1e>
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	220c      	movs	r2, #12
 800a1ea:	6002      	str	r2, [r0, #0]
 800a1ec:	e7f9      	b.n	800a1e2 <_calloc_r+0x12>
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f7fe f86e 	bl	80082d2 <memset>
 800a1f6:	e7f5      	b.n	800a1e4 <_calloc_r+0x14>

0800a1f8 <__ascii_mbtowc>:
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	b901      	cbnz	r1, 800a1fe <__ascii_mbtowc+0x6>
 800a1fc:	a901      	add	r1, sp, #4
 800a1fe:	b142      	cbz	r2, 800a212 <__ascii_mbtowc+0x1a>
 800a200:	b14b      	cbz	r3, 800a216 <__ascii_mbtowc+0x1e>
 800a202:	7813      	ldrb	r3, [r2, #0]
 800a204:	600b      	str	r3, [r1, #0]
 800a206:	7812      	ldrb	r2, [r2, #0]
 800a208:	1e10      	subs	r0, r2, #0
 800a20a:	bf18      	it	ne
 800a20c:	2001      	movne	r0, #1
 800a20e:	b002      	add	sp, #8
 800a210:	4770      	bx	lr
 800a212:	4610      	mov	r0, r2
 800a214:	e7fb      	b.n	800a20e <__ascii_mbtowc+0x16>
 800a216:	f06f 0001 	mvn.w	r0, #1
 800a21a:	e7f8      	b.n	800a20e <__ascii_mbtowc+0x16>

0800a21c <_realloc_r>:
 800a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a220:	4680      	mov	r8, r0
 800a222:	4615      	mov	r5, r2
 800a224:	460c      	mov	r4, r1
 800a226:	b921      	cbnz	r1, 800a232 <_realloc_r+0x16>
 800a228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	4611      	mov	r1, r2
 800a22e:	f7fe bf9f 	b.w	8009170 <_malloc_r>
 800a232:	b92a      	cbnz	r2, 800a240 <_realloc_r+0x24>
 800a234:	f7fe ff28 	bl	8009088 <_free_r>
 800a238:	2400      	movs	r4, #0
 800a23a:	4620      	mov	r0, r4
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a240:	f000 f8c5 	bl	800a3ce <_malloc_usable_size_r>
 800a244:	4285      	cmp	r5, r0
 800a246:	4606      	mov	r6, r0
 800a248:	d802      	bhi.n	800a250 <_realloc_r+0x34>
 800a24a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a24e:	d8f4      	bhi.n	800a23a <_realloc_r+0x1e>
 800a250:	4629      	mov	r1, r5
 800a252:	4640      	mov	r0, r8
 800a254:	f7fe ff8c 	bl	8009170 <_malloc_r>
 800a258:	4607      	mov	r7, r0
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d0ec      	beq.n	800a238 <_realloc_r+0x1c>
 800a25e:	42b5      	cmp	r5, r6
 800a260:	462a      	mov	r2, r5
 800a262:	4621      	mov	r1, r4
 800a264:	bf28      	it	cs
 800a266:	4632      	movcs	r2, r6
 800a268:	f7fe f8b3 	bl	80083d2 <memcpy>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4640      	mov	r0, r8
 800a270:	f7fe ff0a 	bl	8009088 <_free_r>
 800a274:	463c      	mov	r4, r7
 800a276:	e7e0      	b.n	800a23a <_realloc_r+0x1e>

0800a278 <__ascii_wctomb>:
 800a278:	4603      	mov	r3, r0
 800a27a:	4608      	mov	r0, r1
 800a27c:	b141      	cbz	r1, 800a290 <__ascii_wctomb+0x18>
 800a27e:	2aff      	cmp	r2, #255	@ 0xff
 800a280:	d904      	bls.n	800a28c <__ascii_wctomb+0x14>
 800a282:	228a      	movs	r2, #138	@ 0x8a
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	4770      	bx	lr
 800a28c:	700a      	strb	r2, [r1, #0]
 800a28e:	2001      	movs	r0, #1
 800a290:	4770      	bx	lr
	...

0800a294 <fiprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b503      	push	{r0, r1, lr}
 800a298:	4601      	mov	r1, r0
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	4805      	ldr	r0, [pc, #20]	@ (800a2b4 <fiprintf+0x20>)
 800a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	f7ff fcf3 	bl	8009c90 <_vfiprintf_r>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b0:	b003      	add	sp, #12
 800a2b2:	4770      	bx	lr
 800a2b4:	20000018 	.word	0x20000018

0800a2b8 <__swhatbuf_r>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	b096      	sub	sp, #88	@ 0x58
 800a2c4:	4615      	mov	r5, r2
 800a2c6:	461e      	mov	r6, r3
 800a2c8:	da0d      	bge.n	800a2e6 <__swhatbuf_r+0x2e>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2d0:	f04f 0100 	mov.w	r1, #0
 800a2d4:	bf14      	ite	ne
 800a2d6:	2340      	movne	r3, #64	@ 0x40
 800a2d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2dc:	2000      	movs	r0, #0
 800a2de:	6031      	str	r1, [r6, #0]
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	b016      	add	sp, #88	@ 0x58
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	466a      	mov	r2, sp
 800a2e8:	f000 f848 	bl	800a37c <_fstat_r>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	dbec      	blt.n	800a2ca <__swhatbuf_r+0x12>
 800a2f0:	9901      	ldr	r1, [sp, #4]
 800a2f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2fa:	4259      	negs	r1, r3
 800a2fc:	4159      	adcs	r1, r3
 800a2fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a302:	e7eb      	b.n	800a2dc <__swhatbuf_r+0x24>

0800a304 <__smakebuf_r>:
 800a304:	898b      	ldrh	r3, [r1, #12]
 800a306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a308:	079d      	lsls	r5, r3, #30
 800a30a:	4606      	mov	r6, r0
 800a30c:	460c      	mov	r4, r1
 800a30e:	d507      	bpl.n	800a320 <__smakebuf_r+0x1c>
 800a310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	6123      	str	r3, [r4, #16]
 800a318:	2301      	movs	r3, #1
 800a31a:	6163      	str	r3, [r4, #20]
 800a31c:	b003      	add	sp, #12
 800a31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a320:	ab01      	add	r3, sp, #4
 800a322:	466a      	mov	r2, sp
 800a324:	f7ff ffc8 	bl	800a2b8 <__swhatbuf_r>
 800a328:	9f00      	ldr	r7, [sp, #0]
 800a32a:	4605      	mov	r5, r0
 800a32c:	4639      	mov	r1, r7
 800a32e:	4630      	mov	r0, r6
 800a330:	f7fe ff1e 	bl	8009170 <_malloc_r>
 800a334:	b948      	cbnz	r0, 800a34a <__smakebuf_r+0x46>
 800a336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33a:	059a      	lsls	r2, r3, #22
 800a33c:	d4ee      	bmi.n	800a31c <__smakebuf_r+0x18>
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	f043 0302 	orr.w	r3, r3, #2
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	e7e2      	b.n	800a310 <__smakebuf_r+0xc>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	6020      	str	r0, [r4, #0]
 800a34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a35a:	b15b      	cbz	r3, 800a374 <__smakebuf_r+0x70>
 800a35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f81d 	bl	800a3a0 <_isatty_r>
 800a366:	b128      	cbz	r0, 800a374 <__smakebuf_r+0x70>
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	f023 0303 	bic.w	r3, r3, #3
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	431d      	orrs	r5, r3
 800a378:	81a5      	strh	r5, [r4, #12]
 800a37a:	e7cf      	b.n	800a31c <__smakebuf_r+0x18>

0800a37c <_fstat_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d07      	ldr	r5, [pc, #28]	@ (800a39c <_fstat_r+0x20>)
 800a380:	2300      	movs	r3, #0
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	4611      	mov	r1, r2
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	f7f8 f9e8 	bl	800275e <_fstat>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d102      	bne.n	800a398 <_fstat_r+0x1c>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b103      	cbz	r3, 800a398 <_fstat_r+0x1c>
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	200009b8 	.word	0x200009b8

0800a3a0 <_isatty_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d06      	ldr	r5, [pc, #24]	@ (800a3bc <_isatty_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7f8 f9e7 	bl	800277e <_isatty>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_isatty_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_isatty_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	200009b8 	.word	0x200009b8

0800a3c0 <abort>:
 800a3c0:	b508      	push	{r3, lr}
 800a3c2:	2006      	movs	r0, #6
 800a3c4:	f000 f834 	bl	800a430 <raise>
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7f8 f978 	bl	80026be <_exit>

0800a3ce <_malloc_usable_size_r>:
 800a3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d2:	1f18      	subs	r0, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfbc      	itt	lt
 800a3d8:	580b      	ldrlt	r3, [r1, r0]
 800a3da:	18c0      	addlt	r0, r0, r3
 800a3dc:	4770      	bx	lr

0800a3de <_raise_r>:
 800a3de:	291f      	cmp	r1, #31
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	d904      	bls.n	800a3f2 <_raise_r+0x14>
 800a3e8:	2316      	movs	r3, #22
 800a3ea:	6003      	str	r3, [r0, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	bd38      	pop	{r3, r4, r5, pc}
 800a3f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3f4:	b112      	cbz	r2, 800a3fc <_raise_r+0x1e>
 800a3f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3fa:	b94b      	cbnz	r3, 800a410 <_raise_r+0x32>
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f831 	bl	800a464 <_getpid_r>
 800a402:	4622      	mov	r2, r4
 800a404:	4601      	mov	r1, r0
 800a406:	4628      	mov	r0, r5
 800a408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a40c:	f000 b818 	b.w	800a440 <_kill_r>
 800a410:	2b01      	cmp	r3, #1
 800a412:	d00a      	beq.n	800a42a <_raise_r+0x4c>
 800a414:	1c59      	adds	r1, r3, #1
 800a416:	d103      	bne.n	800a420 <_raise_r+0x42>
 800a418:	2316      	movs	r3, #22
 800a41a:	6003      	str	r3, [r0, #0]
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7e7      	b.n	800a3f0 <_raise_r+0x12>
 800a420:	2100      	movs	r1, #0
 800a422:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a426:	4620      	mov	r0, r4
 800a428:	4798      	blx	r3
 800a42a:	2000      	movs	r0, #0
 800a42c:	e7e0      	b.n	800a3f0 <_raise_r+0x12>
	...

0800a430 <raise>:
 800a430:	4b02      	ldr	r3, [pc, #8]	@ (800a43c <raise+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7ff bfd2 	b.w	800a3de <_raise_r>
 800a43a:	bf00      	nop
 800a43c:	20000018 	.word	0x20000018

0800a440 <_kill_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	@ (800a460 <_kill_r+0x20>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	f7f8 f926 	bl	800269e <_kill>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d102      	bne.n	800a45c <_kill_r+0x1c>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	b103      	cbz	r3, 800a45c <_kill_r+0x1c>
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	bd38      	pop	{r3, r4, r5, pc}
 800a45e:	bf00      	nop
 800a460:	200009b8 	.word	0x200009b8

0800a464 <_getpid_r>:
 800a464:	f7f8 b913 	b.w	800268e <_getpid>

0800a468 <log>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	ed2d 8b02 	vpush	{d8}
 800a46e:	ec55 4b10 	vmov	r4, r5, d0
 800a472:	f000 f841 	bl	800a4f8 <__ieee754_log>
 800a476:	4622      	mov	r2, r4
 800a478:	462b      	mov	r3, r5
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	eeb0 8a40 	vmov.f32	s16, s0
 800a482:	eef0 8a60 	vmov.f32	s17, s1
 800a486:	f7f6 fb51 	bl	8000b2c <__aeabi_dcmpun>
 800a48a:	b998      	cbnz	r0, 800a4b4 <log+0x4c>
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f6 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 800a498:	b960      	cbnz	r0, 800a4b4 <log+0x4c>
 800a49a:	2200      	movs	r2, #0
 800a49c:	2300      	movs	r3, #0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f6 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a6:	b160      	cbz	r0, 800a4c2 <log+0x5a>
 800a4a8:	f7fd ff66 	bl	8008378 <__errno>
 800a4ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a4d8 <log+0x70>
 800a4b0:	2322      	movs	r3, #34	@ 0x22
 800a4b2:	6003      	str	r3, [r0, #0]
 800a4b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a4b8:	eef0 0a68 	vmov.f32	s1, s17
 800a4bc:	ecbd 8b02 	vpop	{d8}
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	f7fd ff59 	bl	8008378 <__errno>
 800a4c6:	ecbd 8b02 	vpop	{d8}
 800a4ca:	2321      	movs	r3, #33	@ 0x21
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	4803      	ldr	r0, [pc, #12]	@ (800a4e0 <log+0x78>)
 800a4d4:	f000 b808 	b.w	800a4e8 <nan>
 800a4d8:	00000000 	.word	0x00000000
 800a4dc:	fff00000 	.word	0xfff00000
 800a4e0:	0800b986 	.word	0x0800b986
 800a4e4:	00000000 	.word	0x00000000

0800a4e8 <nan>:
 800a4e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a4f0 <nan+0x8>
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	7ff80000 	.word	0x7ff80000

0800a4f8 <__ieee754_log>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	ec51 0b10 	vmov	r0, r1, d0
 800a500:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a504:	b087      	sub	sp, #28
 800a506:	460d      	mov	r5, r1
 800a508:	da26      	bge.n	800a558 <__ieee754_log+0x60>
 800a50a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a50e:	4303      	orrs	r3, r0
 800a510:	4602      	mov	r2, r0
 800a512:	d10a      	bne.n	800a52a <__ieee754_log+0x32>
 800a514:	49ce      	ldr	r1, [pc, #824]	@ (800a850 <__ieee754_log+0x358>)
 800a516:	2200      	movs	r2, #0
 800a518:	2300      	movs	r3, #0
 800a51a:	2000      	movs	r0, #0
 800a51c:	f7f6 f996 	bl	800084c <__aeabi_ddiv>
 800a520:	ec41 0b10 	vmov	d0, r0, r1
 800a524:	b007      	add	sp, #28
 800a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52a:	2900      	cmp	r1, #0
 800a52c:	da05      	bge.n	800a53a <__ieee754_log+0x42>
 800a52e:	460b      	mov	r3, r1
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	2200      	movs	r2, #0
 800a536:	2300      	movs	r3, #0
 800a538:	e7f0      	b.n	800a51c <__ieee754_log+0x24>
 800a53a:	4bc6      	ldr	r3, [pc, #792]	@ (800a854 <__ieee754_log+0x35c>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	f7f6 f85b 	bl	80005f8 <__aeabi_dmul>
 800a542:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a546:	460d      	mov	r5, r1
 800a548:	4ac3      	ldr	r2, [pc, #780]	@ (800a858 <__ieee754_log+0x360>)
 800a54a:	4295      	cmp	r5, r2
 800a54c:	dd06      	ble.n	800a55c <__ieee754_log+0x64>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	f7f5 fe9b 	bl	800028c <__adddf3>
 800a556:	e7e3      	b.n	800a520 <__ieee754_log+0x28>
 800a558:	2300      	movs	r3, #0
 800a55a:	e7f5      	b.n	800a548 <__ieee754_log+0x50>
 800a55c:	152c      	asrs	r4, r5, #20
 800a55e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a562:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a566:	441c      	add	r4, r3
 800a568:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a56c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a574:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a578:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a57c:	ea42 0105 	orr.w	r1, r2, r5
 800a580:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a584:	2200      	movs	r2, #0
 800a586:	4bb5      	ldr	r3, [pc, #724]	@ (800a85c <__ieee754_log+0x364>)
 800a588:	f7f5 fe7e 	bl	8000288 <__aeabi_dsub>
 800a58c:	1cab      	adds	r3, r5, #2
 800a58e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a592:	2b02      	cmp	r3, #2
 800a594:	4682      	mov	sl, r0
 800a596:	468b      	mov	fp, r1
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	dc53      	bgt.n	800a646 <__ieee754_log+0x14e>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f7f6 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5a4:	b1d0      	cbz	r0, 800a5dc <__ieee754_log+0xe4>
 800a5a6:	2c00      	cmp	r4, #0
 800a5a8:	f000 8120 	beq.w	800a7ec <__ieee754_log+0x2f4>
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7f5 ffb9 	bl	8000524 <__aeabi_i2d>
 800a5b2:	a391      	add	r3, pc, #580	@ (adr r3, 800a7f8 <__ieee754_log+0x300>)
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	f7f6 f81c 	bl	80005f8 <__aeabi_dmul>
 800a5c0:	a38f      	add	r3, pc, #572	@ (adr r3, 800a800 <__ieee754_log+0x308>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 f813 	bl	80005f8 <__aeabi_dmul>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	e7ba      	b.n	800a552 <__ieee754_log+0x5a>
 800a5dc:	a38a      	add	r3, pc, #552	@ (adr r3, 800a808 <__ieee754_log+0x310>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	f7f6 f807 	bl	80005f8 <__aeabi_dmul>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	499b      	ldr	r1, [pc, #620]	@ (800a860 <__ieee754_log+0x368>)
 800a5f2:	f7f5 fe49 	bl	8000288 <__aeabi_dsub>
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	460f      	mov	r7, r1
 800a5fc:	465b      	mov	r3, fp
 800a5fe:	4650      	mov	r0, sl
 800a600:	4659      	mov	r1, fp
 800a602:	f7f5 fff9 	bl	80005f8 <__aeabi_dmul>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4630      	mov	r0, r6
 800a60c:	4639      	mov	r1, r7
 800a60e:	f7f5 fff3 	bl	80005f8 <__aeabi_dmul>
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	b914      	cbnz	r4, 800a61e <__ieee754_log+0x126>
 800a618:	4632      	mov	r2, r6
 800a61a:	463b      	mov	r3, r7
 800a61c:	e0a0      	b.n	800a760 <__ieee754_log+0x268>
 800a61e:	4620      	mov	r0, r4
 800a620:	f7f5 ff80 	bl	8000524 <__aeabi_i2d>
 800a624:	a374      	add	r3, pc, #464	@ (adr r3, 800a7f8 <__ieee754_log+0x300>)
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	4680      	mov	r8, r0
 800a62c:	4689      	mov	r9, r1
 800a62e:	f7f5 ffe3 	bl	80005f8 <__aeabi_dmul>
 800a632:	a373      	add	r3, pc, #460	@ (adr r3, 800a800 <__ieee754_log+0x308>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	4604      	mov	r4, r0
 800a63a:	460d      	mov	r5, r1
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	f7f5 ffda 	bl	80005f8 <__aeabi_dmul>
 800a644:	e0a5      	b.n	800a792 <__ieee754_log+0x29a>
 800a646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a64a:	f7f5 fe1f 	bl	800028c <__adddf3>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4650      	mov	r0, sl
 800a654:	4659      	mov	r1, fp
 800a656:	f7f6 f8f9 	bl	800084c <__aeabi_ddiv>
 800a65a:	e9cd 0100 	strd	r0, r1, [sp]
 800a65e:	4620      	mov	r0, r4
 800a660:	f7f5 ff60 	bl	8000524 <__aeabi_i2d>
 800a664:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a66c:	4610      	mov	r0, r2
 800a66e:	4619      	mov	r1, r3
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	a363      	add	r3, pc, #396	@ (adr r3, 800a810 <__ieee754_log+0x318>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	4680      	mov	r8, r0
 800a688:	4689      	mov	r9, r1
 800a68a:	f7f5 ffb5 	bl	80005f8 <__aeabi_dmul>
 800a68e:	a362      	add	r3, pc, #392	@ (adr r3, 800a818 <__ieee754_log+0x320>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fdfa 	bl	800028c <__adddf3>
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	a35f      	add	r3, pc, #380	@ (adr r3, 800a820 <__ieee754_log+0x328>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fdf1 	bl	800028c <__adddf3>
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	f7f5 ffa3 	bl	80005f8 <__aeabi_dmul>
 800a6b2:	a35d      	add	r3, pc, #372	@ (adr r3, 800a828 <__ieee754_log+0x330>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fde8 	bl	800028c <__adddf3>
 800a6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	a35a      	add	r3, pc, #360	@ (adr r3, 800a830 <__ieee754_log+0x338>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	a358      	add	r3, pc, #352	@ (adr r3, 800a838 <__ieee754_log+0x340>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	f7f5 fdd6 	bl	800028c <__adddf3>
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	f7f5 ff88 	bl	80005f8 <__aeabi_dmul>
 800a6e8:	a355      	add	r3, pc, #340	@ (adr r3, 800a840 <__ieee754_log+0x348>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 fdcd 	bl	800028c <__adddf3>
 800a6f2:	4642      	mov	r2, r8
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	f7f5 ff7f 	bl	80005f8 <__aeabi_dmul>
 800a6fa:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a70a:	f7f5 fdbf 	bl	800028c <__adddf3>
 800a70e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a712:	3551      	adds	r5, #81	@ 0x51
 800a714:	4335      	orrs	r5, r6
 800a716:	2d00      	cmp	r5, #0
 800a718:	4680      	mov	r8, r0
 800a71a:	4689      	mov	r9, r1
 800a71c:	dd48      	ble.n	800a7b0 <__ieee754_log+0x2b8>
 800a71e:	4b50      	ldr	r3, [pc, #320]	@ (800a860 <__ieee754_log+0x368>)
 800a720:	2200      	movs	r2, #0
 800a722:	4650      	mov	r0, sl
 800a724:	4659      	mov	r1, fp
 800a726:	f7f5 ff67 	bl	80005f8 <__aeabi_dmul>
 800a72a:	4652      	mov	r2, sl
 800a72c:	465b      	mov	r3, fp
 800a72e:	f7f5 ff63 	bl	80005f8 <__aeabi_dmul>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fda5 	bl	800028c <__adddf3>
 800a742:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a746:	f7f5 ff57 	bl	80005f8 <__aeabi_dmul>
 800a74a:	4680      	mov	r8, r0
 800a74c:	4689      	mov	r9, r1
 800a74e:	b964      	cbnz	r4, 800a76a <__ieee754_log+0x272>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f5 fd96 	bl	8000288 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4650      	mov	r0, sl
 800a762:	4659      	mov	r1, fp
 800a764:	f7f5 fd90 	bl	8000288 <__aeabi_dsub>
 800a768:	e6da      	b.n	800a520 <__ieee754_log+0x28>
 800a76a:	a323      	add	r3, pc, #140	@ (adr r3, 800a7f8 <__ieee754_log+0x300>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a774:	f7f5 ff40 	bl	80005f8 <__aeabi_dmul>
 800a778:	a321      	add	r3, pc, #132	@ (adr r3, 800a800 <__ieee754_log+0x308>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	4604      	mov	r4, r0
 800a780:	460d      	mov	r5, r1
 800a782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a786:	f7f5 ff37 	bl	80005f8 <__aeabi_dmul>
 800a78a:	4642      	mov	r2, r8
 800a78c:	464b      	mov	r3, r9
 800a78e:	f7f5 fd7d 	bl	800028c <__adddf3>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f5 fd75 	bl	8000288 <__aeabi_dsub>
 800a79e:	4652      	mov	r2, sl
 800a7a0:	465b      	mov	r3, fp
 800a7a2:	f7f5 fd71 	bl	8000288 <__aeabi_dsub>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	e7d9      	b.n	800a764 <__ieee754_log+0x26c>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	4659      	mov	r1, fp
 800a7b8:	f7f5 fd66 	bl	8000288 <__aeabi_dsub>
 800a7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	f43f af25 	beq.w	800a618 <__ieee754_log+0x120>
 800a7ce:	a30a      	add	r3, pc, #40	@ (adr r3, 800a7f8 <__ieee754_log+0x300>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	a308      	add	r3, pc, #32	@ (adr r3, 800a800 <__ieee754_log+0x308>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ea:	e729      	b.n	800a640 <__ieee754_log+0x148>
 800a7ec:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a848 <__ieee754_log+0x350>
 800a7f0:	e698      	b.n	800a524 <__ieee754_log+0x2c>
 800a7f2:	bf00      	nop
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	fee00000 	.word	0xfee00000
 800a7fc:	3fe62e42 	.word	0x3fe62e42
 800a800:	35793c76 	.word	0x35793c76
 800a804:	3dea39ef 	.word	0x3dea39ef
 800a808:	55555555 	.word	0x55555555
 800a80c:	3fd55555 	.word	0x3fd55555
 800a810:	df3e5244 	.word	0xdf3e5244
 800a814:	3fc2f112 	.word	0x3fc2f112
 800a818:	96cb03de 	.word	0x96cb03de
 800a81c:	3fc74664 	.word	0x3fc74664
 800a820:	94229359 	.word	0x94229359
 800a824:	3fd24924 	.word	0x3fd24924
 800a828:	55555593 	.word	0x55555593
 800a82c:	3fe55555 	.word	0x3fe55555
 800a830:	d078c69f 	.word	0xd078c69f
 800a834:	3fc39a09 	.word	0x3fc39a09
 800a838:	1d8e78af 	.word	0x1d8e78af
 800a83c:	3fcc71c5 	.word	0x3fcc71c5
 800a840:	9997fa04 	.word	0x9997fa04
 800a844:	3fd99999 	.word	0x3fd99999
	...
 800a850:	c3500000 	.word	0xc3500000
 800a854:	43500000 	.word	0x43500000
 800a858:	7fefffff 	.word	0x7fefffff
 800a85c:	3ff00000 	.word	0x3ff00000
 800a860:	3fe00000 	.word	0x3fe00000

0800a864 <_init>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	bf00      	nop
 800a868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86a:	bc08      	pop	{r3}
 800a86c:	469e      	mov	lr, r3
 800a86e:	4770      	bx	lr

0800a870 <_fini>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	bf00      	nop
 800a874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a876:	bc08      	pop	{r3}
 800a878:	469e      	mov	lr, r3
 800a87a:	4770      	bx	lr
