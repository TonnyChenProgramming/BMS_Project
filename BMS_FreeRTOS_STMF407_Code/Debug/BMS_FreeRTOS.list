
BMS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d044  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e0  0800d1d8  0800d1d8  0000e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5b8  0800e5b8  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5b8  0800e5b8  0000f5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5c0  0800e5c0  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5c0  0800e5c0  0000f5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e5c4  0800e5c4  0000f5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e5c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101d8  2**0
                  CONTENTS
 10 .bss          00004a88  200001d8  200001d8  000101d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c60  20004c60  000101d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfe4  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000471f  00000000  00000000  0002e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  00032910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001408  00000000  00000000  000342d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002785f  00000000  00000000  000356e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022cb8  00000000  00000000  0005cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e73b0  00000000  00000000  0007fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00166fa7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dd8  00000000  00000000  00166fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0016edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1bc 	.word	0x0800d1bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d1bc 	.word	0x0800d1bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMS_Init>:
#include "bms_data.h"
#include "constants.h"
#include <string.h>
BMS_Data_t BMS_Data;  // <<<< GLOBAL DEFINITION

void BMS_Init(void) {
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    memset(&BMS_Data, 0, sizeof(BMS_Data));
 8000f3c:	2240      	movs	r2, #64	@ 0x40
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f42:	f009 fe1a 	bl	800ab7a <memset>

    strcpy(BMS_Data.batteryName, BATTERY_NAME);
 8000f46:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <BMS_Init+0x70>)
 8000f4a:	4614      	mov	r4, r2
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	c403      	stmia	r4!, {r0, r1}
 8000f58:	8022      	strh	r2, [r4, #0]
    BMS_Data.nominalVoltage_mV = NOMINAL_VOLTAGE_MV;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f5c:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000f60:	835a      	strh	r2, [r3, #26]
    BMS_Data.nominalCapacity_mAh = BATTERY_CAPACITY_MAH;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f64:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000f68:	839a      	strh	r2, [r3, #28]
    BMS_Data.maxChargeCurrent_mA = MAXIMUM_CHARGE_CURRENT_MA;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f6c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000f70:	83da      	strh	r2, [r3, #30]
    BMS_Data.maxBatteryVoltage_mV = MAXIMUM_VOLTAGE_MV;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f74:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000f78:	841a      	strh	r2, [r3, #32]
    BMS_Data.minBatteryVoltage_mV = MINIMUM_VOLTAGE_MV;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f7c:	f640 22be 	movw	r2, #2750	@ 0xabe
 8000f80:	845a      	strh	r2, [r3, #34]	@ 0x22
    BMS_Data.temperatureLowerBound_C = CHARGING_TEMPERATURE_MINIMUM_C;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    BMS_Data.temperatureUpperBound_C = CHARGING_TEMPERATURE_MAXIMUM_C;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f8c:	222d      	movs	r2, #45	@ 0x2d
 8000f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    BMS_Data.stateOfHealth_percent = 95; // assume the battery with a SOH of 95% as default
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f94:	225f      	movs	r2, #95	@ 0x5f
 8000f96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    BMS_Data.totalChargingTime_seconds = 0;
 8000f9a:	4b02      	ldr	r3, [pc, #8]	@ (8000fa4 <BMS_Init+0x6c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	871a      	strh	r2, [r3, #56]	@ 0x38

}
 8000fa0:	bf00      	nop
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa4:	200001f4 	.word	0x200001f4
 8000fa8:	0800d1d8 	.word	0x0800d1d8

08000fac <buzzer_init>:
#include "buzzer.h"

void buzzer_init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <buzzer_init+0x60>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	4a10      	ldr	r2, [pc, #64]	@ (800100c <buzzer_init+0x60>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <buzzer_init+0x60>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe2:	480b      	ldr	r0, [pc, #44]	@ (8001010 <buzzer_init+0x64>)
 8000fe4:	f004 fa56 	bl	8005494 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fec:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <buzzer_init+0x64>)
 8001000:	f003 ff98 	bl	8004f34 <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800

08001014 <batteryStatusToString>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "stdio.h"
#include "main.h"

char* batteryStatusToString(BatteryStatus status) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    switch (status) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d00a      	beq.n	800103a <batteryStatusToString+0x26>
 8001024:	2b02      	cmp	r3, #2
 8001026:	dc0a      	bgt.n	800103e <batteryStatusToString+0x2a>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <batteryStatusToString+0x1e>
 800102c:	2b01      	cmp	r3, #1
 800102e:	d002      	beq.n	8001036 <batteryStatusToString+0x22>
 8001030:	e005      	b.n	800103e <batteryStatusToString+0x2a>
        case IDLE: return "Idle";
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <batteryStatusToString+0x38>)
 8001034:	e004      	b.n	8001040 <batteryStatusToString+0x2c>
        case CHARGING: return "Charging";
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <batteryStatusToString+0x3c>)
 8001038:	e002      	b.n	8001040 <batteryStatusToString+0x2c>
        case FULL: return "Full";
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <batteryStatusToString+0x40>)
 800103c:	e000      	b.n	8001040 <batteryStatusToString+0x2c>
        default: return "Unknown";
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <batteryStatusToString+0x44>)
    }
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	0800d1f4 	.word	0x0800d1f4
 8001050:	0800d1fc 	.word	0x0800d1fc
 8001054:	0800d208 	.word	0x0800d208
 8001058:	0800d210 	.word	0x0800d210

0800105c <oled_init>:


// OLED Initialization Function
void oled_init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001060:	f000 f912 	bl	8001288 <ssd1306_Init>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <oled_display>:

// OLED Data Display Function
void oled_display(float voltage,float current, int soc, float power, float temperature,
		int soh, BatteryStatus batteryStatus, int hours, int minutes)
 {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b092      	sub	sp, #72	@ 0x48
 800106c:	af02      	add	r7, sp, #8
 800106e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001072:	edc7 0a06 	vstr	s1, [r7, #24]
 8001076:	6178      	str	r0, [r7, #20]
 8001078:	ed87 1a04 	vstr	s2, [r7, #16]
 800107c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	71fb      	strb	r3, [r7, #7]
    char buffer[30];
    ssd1306_Fill(Black);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f967 	bl	800135c <ssd1306_Fill>
    // **Voltage and Temperature Line**
    //ssd1306_SetCursor(2, 2);
    //sprintf(buffer, "                 "); // Clear previous text
    //ssd1306_WriteString(buffer, Font_6x8, Black);
    if ((power<0.5 && batteryStatus==CHARGING) ||temperature == 0 )
 800108e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001092:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d502      	bpl.n	80010a6 <oled_display+0x3e>
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d006      	beq.n	80010b4 <oled_display+0x4c>
 80010a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d10d      	bne.n	80010d0 <oled_display+0x68>
    {
    	ssd1306_SetCursor(2, 32);
 80010b4:	2120      	movs	r1, #32
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 fa9a 	bl	80015f0 <ssd1306_SetCursor>
    	ssd1306_WriteString("Initializing", Font_7x10, White);
 80010bc:	4b4c      	ldr	r3, [pc, #304]	@ (80011f0 <oled_display+0x188>)
 80010be:	2201      	movs	r2, #1
 80010c0:	9200      	str	r2, [sp, #0]
 80010c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c4:	484b      	ldr	r0, [pc, #300]	@ (80011f4 <oled_display+0x18c>)
 80010c6:	f000 fa6d 	bl	80015a4 <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 80010ca:	f000 f95f 	bl	800138c <ssd1306_UpdateScreen>
 80010ce:	e08c      	b.n	80011ea <oled_display+0x182>
    	return;

    }
    ssd1306_SetCursor(2, 2);
 80010d0:	2102      	movs	r1, #2
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 fa8c 	bl	80015f0 <ssd1306_SetCursor>
    sprintf(buffer, "V: %.2fV  T: %.1fC", voltage/1000, temperature); // show voltage in V
 80010d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010dc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80011f8 <oled_display+0x190>
 80010e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010e4:	ee16 0a90 	vmov	r0, s13
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f107 0020 	add.w	r0, r7, #32
 80010fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001102:	4622      	mov	r2, r4
 8001104:	462b      	mov	r3, r5
 8001106:	493d      	ldr	r1, [pc, #244]	@ (80011fc <oled_display+0x194>)
 8001108:	f009 fcd4 	bl	800aab4 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800110c:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <oled_display+0x198>)
 800110e:	f107 0020 	add.w	r0, r7, #32
 8001112:	2201      	movs	r2, #1
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	f000 fa44 	bl	80015a4 <ssd1306_WriteString>
    // **Current and Power Line**
    //ssd1306_SetCursor(2, 12);
    //sprintf(buffer, "                 ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 12);
 800111c:	210c      	movs	r1, #12
 800111e:	2002      	movs	r0, #2
 8001120:	f000 fa66 	bl	80015f0 <ssd1306_SetCursor>
    sprintf(buffer, "I: %.2fA P: %.2fW", current/1000, power); // Show current in A
 8001124:	edd7 7a06 	vldr	s15, [r7, #24]
 8001128:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80011f8 <oled_display+0x190>
 800112c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001130:	ee16 0a90 	vmov	r0, s13
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	6938      	ldr	r0, [r7, #16]
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f107 0020 	add.w	r0, r7, #32
 800114a:	e9cd 2300 	strd	r2, r3, [sp]
 800114e:	4622      	mov	r2, r4
 8001150:	462b      	mov	r3, r5
 8001152:	492c      	ldr	r1, [pc, #176]	@ (8001204 <oled_display+0x19c>)
 8001154:	f009 fcae 	bl	800aab4 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001158:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <oled_display+0x198>)
 800115a:	f107 0020 	add.w	r0, r7, #32
 800115e:	2201      	movs	r2, #1
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	f000 fa1e 	bl	80015a4 <ssd1306_WriteString>
    // **SOC and SOH Line**
    //ssd1306_SetCursor(2, 22);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 22);
 8001168:	2116      	movs	r1, #22
 800116a:	2002      	movs	r0, #2
 800116c:	f000 fa40 	bl	80015f0 <ssd1306_SetCursor>
    snprintf(buffer, sizeof(buffer), "SOC: %d%%  SOH: %d%%", soc, soh);
 8001170:	f107 0020 	add.w	r0, r7, #32
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4a23      	ldr	r2, [pc, #140]	@ (8001208 <oled_display+0x1a0>)
 800117c:	211e      	movs	r1, #30
 800117e:	f009 fc65 	bl	800aa4c <sniprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <oled_display+0x198>)
 8001184:	f107 0020 	add.w	r0, r7, #32
 8001188:	2201      	movs	r2, #1
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118e:	f000 fa09 	bl	80015a4 <ssd1306_WriteString>
    // **Charging/Discharging Status**
    //ssd1306_SetCursor(2, 32);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 32);
 8001192:	2120      	movs	r1, #32
 8001194:	2002      	movs	r0, #2
 8001196:	f000 fa2b 	bl	80015f0 <ssd1306_SetCursor>
    sprintf(buffer, "Status: %s", batteryStatusToString(batteryStatus));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff39 	bl	8001014 <batteryStatusToString>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4918      	ldr	r1, [pc, #96]	@ (800120c <oled_display+0x1a4>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f009 fc82 	bl	800aab4 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <oled_display+0x198>)
 80011b2:	f107 0020 	add.w	r0, r7, #32
 80011b6:	2201      	movs	r2, #1
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011bc:	f000 f9f2 	bl	80015a4 <ssd1306_WriteString>
    // **Time Remaining**
    //ssd1306_SetCursor(2, 42);
    //sprintf(buffer, "                ");
    //ssd1306_WriteString(buffer, Font_6x8, Black);

    ssd1306_SetCursor(2, 42);
 80011c0:	212a      	movs	r1, #42	@ 0x2a
 80011c2:	2002      	movs	r0, #2
 80011c4:	f000 fa14 	bl	80015f0 <ssd1306_SetCursor>
    sprintf(buffer, "Time Left: %dh %dm", hours, minutes);
 80011c8:	f107 0020 	add.w	r0, r7, #32
 80011cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	490f      	ldr	r1, [pc, #60]	@ (8001210 <oled_display+0x1a8>)
 80011d2:	f009 fc6f 	bl	800aab4 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <oled_display+0x198>)
 80011d8:	f107 0020 	add.w	r0, r7, #32
 80011dc:	2201      	movs	r2, #1
 80011de:	9200      	str	r2, [sp, #0]
 80011e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e2:	f000 f9df 	bl	80015a4 <ssd1306_WriteString>

    // **Update OLED screen**
    ssd1306_UpdateScreen();
 80011e6:	f000 f8d1 	bl	800138c <ssd1306_UpdateScreen>
}
 80011ea:	3740      	adds	r7, #64	@ 0x40
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bdb0      	pop	{r4, r5, r7, pc}
 80011f0:	0800e218 	.word	0x0800e218
 80011f4:	0800d218 	.word	0x0800d218
 80011f8:	447a0000 	.word	0x447a0000
 80011fc:	0800d228 	.word	0x0800d228
 8001200:	0800e20c 	.word	0x0800e20c
 8001204:	0800d23c 	.word	0x0800d23c
 8001208:	0800d250 	.word	0x0800d250
 800120c:	0800d268 	.word	0x0800d268
 8001210:	0800d274 	.word	0x0800d274

08001214 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2200      	movs	r2, #0
 8001240:	2178      	movs	r1, #120	@ 0x78
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <ssd1306_WriteCommand+0x2c>)
 8001244:	f004 fa84 	bl	8005750 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200009cc 	.word	0x200009cc

08001254 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	f04f 32ff 	mov.w	r2, #4294967295
 8001266:	9202      	str	r2, [sp, #8]
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	2240      	movs	r2, #64	@ 0x40
 8001272:	2178      	movs	r1, #120	@ 0x78
 8001274:	4803      	ldr	r0, [pc, #12]	@ (8001284 <ssd1306_WriteData+0x30>)
 8001276:	f004 fa6b 	bl	8005750 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200009cc 	.word	0x200009cc

08001288 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800128c:	f7ff ffc2 	bl	8001214 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8001290:	2064      	movs	r0, #100	@ 0x64
 8001292:	f002 fa81 	bl	8003798 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f9d6 	bl	8001648 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800129c:	2020      	movs	r0, #32
 800129e:	f7ff ffc1 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ffbe 	bl	8001224 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012a8:	20b0      	movs	r0, #176	@ 0xb0
 80012aa:	f7ff ffbb 	bl	8001224 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012ae:	20c8      	movs	r0, #200	@ 0xc8
 80012b0:	f7ff ffb8 	bl	8001224 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ffb5 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80012ba:	2010      	movs	r0, #16
 80012bc:	f7ff ffb2 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012c0:	2040      	movs	r0, #64	@ 0x40
 80012c2:	f7ff ffaf 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 80012c6:	20ff      	movs	r0, #255	@ 0xff
 80012c8:	f000 f9aa 	bl	8001620 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012cc:	20a1      	movs	r0, #161	@ 0xa1
 80012ce:	f7ff ffa9 	bl	8001224 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 80012d2:	20a6      	movs	r0, #166	@ 0xa6
 80012d4:	f7ff ffa6 	bl	8001224 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012d8:	20a8      	movs	r0, #168	@ 0xa8
 80012da:	f7ff ffa3 	bl	8001224 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80012de:	203f      	movs	r0, #63	@ 0x3f
 80012e0:	f7ff ffa0 	bl	8001224 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012e4:	20a4      	movs	r0, #164	@ 0xa4
 80012e6:	f7ff ff9d 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012ea:	20d3      	movs	r0, #211	@ 0xd3
 80012ec:	f7ff ff9a 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff97 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012f6:	20d5      	movs	r0, #213	@ 0xd5
 80012f8:	f7ff ff94 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012fc:	20f0      	movs	r0, #240	@ 0xf0
 80012fe:	f7ff ff91 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001302:	20d9      	movs	r0, #217	@ 0xd9
 8001304:	f7ff ff8e 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001308:	2022      	movs	r0, #34	@ 0x22
 800130a:	f7ff ff8b 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800130e:	20da      	movs	r0, #218	@ 0xda
 8001310:	f7ff ff88 	bl	8001224 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 8001314:	2012      	movs	r0, #18
 8001316:	f7ff ff85 	bl	8001224 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 800131a:	20db      	movs	r0, #219	@ 0xdb
 800131c:	f7ff ff82 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001320:	2020      	movs	r0, #32
 8001322:	f7ff ff7f 	bl	8001224 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001326:	208d      	movs	r0, #141	@ 0x8d
 8001328:	f7ff ff7c 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800132c:	2014      	movs	r0, #20
 800132e:	f7ff ff79 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001332:	2001      	movs	r0, #1
 8001334:	f000 f988 	bl	8001648 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 8001338:	2000      	movs	r0, #0
 800133a:	f000 f80f 	bl	800135c <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800133e:	f000 f825 	bl	800138c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <ssd1306_Init+0xd0>)
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <ssd1306_Init+0xd0>)
 800134a:	2200      	movs	r2, #0
 800134c:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 800134e:	4b02      	ldr	r3, [pc, #8]	@ (8001358 <ssd1306_Init+0xd0>)
 8001350:	2201      	movs	r2, #1
 8001352:	711a      	strb	r2, [r3, #4]
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000634 	.word	0x20000634

0800135c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <ssd1306_Fill+0x14>
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <ssd1306_Fill+0x16>
 8001370:	23ff      	movs	r3, #255	@ 0xff
 8001372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001376:	4619      	mov	r1, r3
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <ssd1306_Fill+0x2c>)
 800137a:	f009 fbfe 	bl	800ab7a <memset>
			sizeof(SSD1306_Buffer));
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000234 	.word	0x20000234

0800138c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e016      	b.n	80013c6 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	3b50      	subs	r3, #80	@ 0x50
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff40 	bl	8001224 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff3d 	bl	8001224 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013aa:	2010      	movs	r0, #16
 80013ac:	f7ff ff3a 	bl	8001224 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	01db      	lsls	r3, r3, #7
 80013b4:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <ssd1306_UpdateScreen+0x4c>)
 80013b6:	4413      	add	r3, r2
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff4a 	bl	8001254 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3301      	adds	r3, #1
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	d9e5      	bls.n	8001398 <ssd1306_UpdateScreen+0xc>
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000234 	.word	0x20000234

080013dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	460b      	mov	r3, r1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db3d      	blt.n	8001472 <ssd1306_DrawPixel+0x96>
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fa:	d83a      	bhi.n	8001472 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d11a      	bne.n	8001438 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	4603      	mov	r3, r0
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	4413      	add	r3, r2
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <ssd1306_DrawPixel+0xa4>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	b25a      	sxtb	r2, r3
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b259      	sxtb	r1, r3
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	4603      	mov	r3, r0
 800142c:	01db      	lsls	r3, r3, #7
 800142e:	4413      	add	r3, r2
 8001430:	b2c9      	uxtb	r1, r1
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <ssd1306_DrawPixel+0xa4>)
 8001434:	54d1      	strb	r1, [r2, r3]
 8001436:	e01d      	b.n	8001474 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	b2d8      	uxtb	r0, r3
 8001440:	4603      	mov	r3, r0
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	4413      	add	r3, r2
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <ssd1306_DrawPixel+0xa4>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	b25a      	sxtb	r2, r3
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	b25b      	sxtb	r3, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4013      	ands	r3, r2
 8001460:	b259      	sxtb	r1, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	4603      	mov	r3, r0
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	4413      	add	r3, r2
 800146a:	b2c9      	uxtb	r1, r1
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <ssd1306_DrawPixel+0xa4>)
 800146e:	54d1      	strb	r1, [r2, r3]
 8001470:	e000      	b.n	8001474 <ssd1306_DrawPixel+0x98>
		return;
 8001472:	bf00      	nop
	}
}
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000234 	.word	0x20000234

08001484 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4638      	mov	r0, r7
 800148e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001492:	4623      	mov	r3, r4
 8001494:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b1f      	cmp	r3, #31
 800149a:	d902      	bls.n	80014a2 <ssd1306_WriteChar+0x1e>
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b7e      	cmp	r3, #126	@ 0x7e
 80014a0:	d901      	bls.n	80014a6 <ssd1306_WriteChar+0x22>
		return 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e077      	b.n	8001596 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	783b      	ldrb	r3, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	2b80      	cmp	r3, #128	@ 0x80
 80014b2:	dc06      	bgt.n	80014c2 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 80014b4:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 80014b6:	885b      	ldrh	r3, [r3, #2]
 80014b8:	461a      	mov	r2, r3
 80014ba:	787b      	ldrb	r3, [r7, #1]
 80014bc:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014be:	2b40      	cmp	r3, #64	@ 0x40
 80014c0:	dd01      	ble.n	80014c6 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e067      	b.n	8001596 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e04e      	b.n	800156a <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	7879      	ldrb	r1, [r7, #1]
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	e036      	b.n	800155a <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 800150c:	885b      	ldrh	r3, [r3, #2]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff ff5d 	bl	80013dc <ssd1306_DrawPixel>
 8001522:	e017      	b.n	8001554 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b2d8      	uxtb	r0, r3
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	f7ff ff44 	bl	80013dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	3301      	adds	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4293      	cmp	r3, r2
 8001562:	d3c3      	bcc.n	80014ec <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	787b      	ldrb	r3, [r7, #1]
 800156c:	461a      	mov	r2, r3
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	4293      	cmp	r3, r2
 8001572:	d3ab      	bcc.n	80014cc <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	2a00      	cmp	r2, #0
 800157c:	d005      	beq.n	800158a <ssd1306_WriteChar+0x106>
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	3a20      	subs	r2, #32
 8001584:	440a      	add	r2, r1
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	e000      	b.n	800158c <ssd1306_WriteChar+0x108>
 800158a:	783a      	ldrb	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <ssd1306_WriteChar+0x11c>)
 8001592:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000634 	.word	0x20000634

080015a4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	4638      	mov	r0, r7
 80015ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 80015b2:	e013      	b.n	80015dc <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	7818      	ldrb	r0, [r3, #0]
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	463b      	mov	r3, r7
 80015be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c0:	f7ff ff60 	bl	8001484 <ssd1306_WriteChar>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d002      	beq.n	80015d6 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	e008      	b.n	80015e8 <ssd1306_WriteString+0x44>
		}
		str++;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e7      	bne.n	80015b4 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	781b      	ldrb	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <ssd1306_SetCursor+0x2c>)
 8001606:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <ssd1306_SetCursor+0x2c>)
 800160e:	805a      	strh	r2, [r3, #2]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	20000634 	.word	0x20000634

08001620 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 800162a:	2381      	movs	r3, #129	@ 0x81
 800162c:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdf7 	bl	8001224 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fdf3 	bl	8001224 <ssd1306_WriteCommand>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8001658:	23af      	movs	r3, #175	@ 0xaf
 800165a:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <ssd1306_SetDisplayOn+0x38>)
 800165e:	2201      	movs	r2, #1
 8001660:	715a      	strb	r2, [r3, #5]
 8001662:	e004      	b.n	800166e <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8001664:	23ae      	movs	r3, #174	@ 0xae
 8001666:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <ssd1306_SetDisplayOn+0x38>)
 800166a:	2200      	movs	r2, #0
 800166c:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fdd7 	bl	8001224 <ssd1306_WriteCommand>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000634 	.word	0x20000634

08001684 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a07      	ldr	r2, [pc, #28]	@ (80016b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <vApplicationGetIdleTaskMemory+0x30>)
 800169a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000063c 	.word	0x2000063c
 80016b4:	200006dc 	.word	0x200006dc

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b0aa      	sub	sp, #168	@ 0xa8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f002 f829 	bl	8003714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f8a9 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fa8b 	bl	8001be0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fa69 	bl	8001ba0 <MX_DMA_Init>
  MX_I2C1_Init();
 80016ce:	f000 f9c1 	bl	8001a54 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016d2:	f000 f90b 	bl	80018ec <MX_ADC1_Init>
  MX_ADC2_Init();
 80016d6:	f000 f973 	bl	80019c0 <MX_ADC2_Init>
  MX_TIM2_Init();
 80016da:	f000 f9e9 	bl	8001ab0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80016de:	f000 fa35 	bl	8001b4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize OLED and Buzzer*/
  oled_init();
 80016e2:	f7ff fcbb 	bl	800105c <oled_init>
  buzzer_init();
 80016e6:	f7ff fc61 	bl	8000fac <buzzer_init>
  BMS_Init();
 80016ea:	f7ff fc25 	bl	8000f38 <BMS_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  xDisplayMutex = xSemaphoreCreateMutex();
 80016ee:	2001      	movs	r0, #1
 80016f0:	f006 fb58 	bl	8007da4 <xQueueCreateMutex>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <main+0x12c>)
 80016f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DisplayTask */
  osThreadDef(DisplayTask, StartDisplayTask, osPriorityBelowNormal, 0, 256);
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <main+0x130>)
 80016fc:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001700:	461d      	mov	r5, r3
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800170a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 800170e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f006 f952 	bl	80079be <osThreadCreate>
 800171a:	4603      	mov	r3, r0
 800171c:	4a33      	ldr	r2, [pc, #204]	@ (80017ec <main+0x134>)
 800171e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BuzzerTask */
  osThreadDef(BuzzerTask, StartBuzzerTask, osPriorityRealtime, 0, 128);
 8001720:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <main+0x138>)
 8001722:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001726:	461d      	mov	r5, r3
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BuzzerTaskHandle = osThreadCreate(osThread(BuzzerTask), NULL);
 8001734:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f006 f93f 	bl	80079be <osThreadCreate>
 8001740:	4603      	mov	r3, r0
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <main+0x13c>)
 8001744:	6013      	str	r3, [r2, #0]

  /* definition and creation of BMSsamplingtask */
  osThreadDef(BMSsamplingtask, StartBMSsamplingtask, osPriorityNormal, 0, 128);
 8001746:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <main+0x140>)
 8001748:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800174c:	461d      	mov	r5, r3
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BMSsamplingtaskHandle = osThreadCreate(osThread(BMSsamplingtask), NULL);
 800175a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f006 f92c 	bl	80079be <osThreadCreate>
 8001766:	4603      	mov	r3, r0
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <main+0x144>)
 800176a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ProcessTask */
  osThreadDef(ProcessTask, StartProcessTask, osPriorityNormal, 0, 128);
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <main+0x148>)
 800176e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessTaskHandle = osThreadCreate(osThread(ProcessTask), NULL);
 8001780:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f006 f919 	bl	80079be <osThreadCreate>
 800178c:	4603      	mov	r3, r0
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <main+0x14c>)
 8001790:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendToWiFiTask */
  osThreadDef(SendToWiFiTask, StartSendToWiFitask, osPriorityBelowNormal, 0, 128);
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <main+0x150>)
 8001794:	f107 041c 	add.w	r4, r7, #28
 8001798:	461d      	mov	r5, r3
 800179a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendToWiFiTaskHandle = osThreadCreate(osThread(SendToWiFiTask), NULL);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 f906 	bl	80079be <osThreadCreate>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a15      	ldr	r2, [pc, #84]	@ (800180c <main+0x154>)
 80017b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ChargingTimeTas */
  osThreadDef(ChargingTimeTas, StartChargingTimeTask, osPriorityNormal, 0, 128);
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <main+0x158>)
 80017ba:	463c      	mov	r4, r7
 80017bc:	461d      	mov	r5, r3
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChargingTimeTasHandle = osThreadCreate(osThread(ChargingTimeTas), NULL);
 80017ca:	463b      	mov	r3, r7
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f006 f8f5 	bl	80079be <osThreadCreate>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <main+0x15c>)
 80017d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017da:	f006 f8e9 	bl	80079b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017de:	bf00      	nop
 80017e0:	e7fd      	b.n	80017de <main+0x126>
 80017e2:	bf00      	nop
 80017e4:	20000af4 	.word	0x20000af4
 80017e8:	0800d294 	.word	0x0800d294
 80017ec:	20000ab0 	.word	0x20000ab0
 80017f0:	0800d2bc 	.word	0x0800d2bc
 80017f4:	20000ab4 	.word	0x20000ab4
 80017f8:	0800d2e8 	.word	0x0800d2e8
 80017fc:	20000ab8 	.word	0x20000ab8
 8001800:	0800d310 	.word	0x0800d310
 8001804:	20000abc 	.word	0x20000abc
 8001808:	0800d33c 	.word	0x0800d33c
 800180c:	20000ac0 	.word	0x20000ac0
 8001810:	0800d368 	.word	0x0800d368
 8001814:	20000ac4 	.word	0x20000ac4

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	@ 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2230      	movs	r2, #48	@ 0x30
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f009 f9a7 	bl	800ab7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <SystemClock_Config+0xcc>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <SystemClock_Config+0xcc>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	@ 0x40
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <SystemClock_Config+0xcc>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <SystemClock_Config+0xd0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <SystemClock_Config+0xd0>)
 8001862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <SystemClock_Config+0xd0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001878:	2301      	movs	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187c:	2310      	movs	r3, #16
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001888:	2308      	movs	r3, #8
 800188a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800188c:	23a8      	movs	r3, #168	@ 0xa8
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001890:	2302      	movs	r3, #2
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001894:	2307      	movs	r3, #7
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fac1 	bl	8005e24 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a8:	f000 fca6 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2105      	movs	r1, #5
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fd22 	bl	8006314 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018d6:	f000 fc8f 	bl	80021f8 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	@ 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800190c:	4a2b      	ldr	r2, [pc, #172]	@ (80019bc <MX_ADC1_Init+0xd0>)
 800190e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001912:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001916:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001926:	2200      	movs	r2, #0
 8001928:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001938:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800193c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800194a:	2201      	movs	r2, #1
 800194c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 800195e:	f001 ff3f 	bl	80037e0 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001968:	f000 fc46 	bl	80021f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800196c:	2306      	movs	r3, #6
 800196e:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001974:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 8001982:	f002 fd71 	bl	8004468 <HAL_ADCEx_MultiModeConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800198c:	f000 fc34 	bl	80021f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001990:	2301      	movs	r3, #1
 8001992:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001998:	2303      	movs	r3, #3
 800199a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_ADC1_Init+0xcc>)
 80019a2:	f002 fac1 	bl	8003f28 <HAL_ADC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80019ac:	f000 fc24 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200008dc 	.word	0x200008dc
 80019bc:	40012000 	.word	0x40012000

080019c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <MX_ADC2_Init+0x90>)
 80019d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 8001a16:	f001 fee3 	bl	80037e0 <HAL_ADC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001a20:	f000 fbea 	bl	80021f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a24:	2302      	movs	r3, #2
 8001a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_ADC2_Init+0x8c>)
 8001a36:	f002 fa77 	bl	8003f28 <HAL_ADC_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001a40:	f000 fbda 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000924 	.word	0x20000924
 8001a50:	40012100 	.word	0x40012100

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f003 fd19 	bl	80054c8 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 fbac 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200009cc 	.word	0x200009cc
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001ad6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001ae4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001af8:	f004 fe5e 	bl	80067b8 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b02:	f000 fb79 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001b14:	f005 f868 	bl	8006be8 <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f000 fb6b 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b22:	2320      	movs	r3, #32
 8001b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <MX_TIM2_Init+0x98>)
 8001b30:	f005 fa8a 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f000 fb5d 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000a20 	.word	0x20000a20

08001b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <MX_USART3_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_USART3_UART_Init+0x4c>)
 8001b84:	f005 faf0 	bl	8007168 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f000 fb33 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000a68 	.word	0x20000a68
 8001b9c:	40004800 	.word	0x40004800

08001ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MX_DMA_Init+0x3c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <MX_DMA_Init+0x3c>)
 8001bb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MX_DMA_Init+0x3c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	2038      	movs	r0, #56	@ 0x38
 8001bc8:	f002 fd4c 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bcc:	2038      	movs	r0, #56	@ 0x38
 8001bce:	f002 fd65 	bl	800469c <HAL_NVIC_EnableIRQ>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a81      	ldr	r2, [pc, #516]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b7f      	ldr	r3, [pc, #508]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b74      	ldr	r3, [pc, #464]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a73      	ldr	r2, [pc, #460]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b71      	ldr	r3, [pc, #452]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a6c      	ldr	r2, [pc, #432]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a65      	ldr	r2, [pc, #404]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <MX_GPIO_Init+0x224>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2101      	movs	r1, #1
 8001c86:	4860      	ldr	r0, [pc, #384]	@ (8001e08 <MX_GPIO_Init+0x228>)
 8001c88:	f003 fc04 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001c92:	485e      	ldr	r0, [pc, #376]	@ (8001e0c <MX_GPIO_Init+0x22c>)
 8001c94:	f003 fbfe 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4856      	ldr	r0, [pc, #344]	@ (8001e08 <MX_GPIO_Init+0x228>)
 8001cb0:	f003 f940 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4850      	ldr	r0, [pc, #320]	@ (8001e08 <MX_GPIO_Init+0x228>)
 8001cc8:	f003 f934 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4848      	ldr	r0, [pc, #288]	@ (8001e08 <MX_GPIO_Init+0x228>)
 8001ce8:	f003 f924 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cec:	2301      	movs	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cf0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4843      	ldr	r0, [pc, #268]	@ (8001e10 <MX_GPIO_Init+0x230>)
 8001d02:	f003 f917 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d06:	2310      	movs	r3, #16
 8001d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d16:	2306      	movs	r3, #6
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	483b      	ldr	r0, [pc, #236]	@ (8001e10 <MX_GPIO_Init+0x230>)
 8001d22:	f003 f907 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d26:	23e0      	movs	r3, #224	@ 0xe0
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d36:	2305      	movs	r3, #5
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4833      	ldr	r0, [pc, #204]	@ (8001e10 <MX_GPIO_Init+0x230>)
 8001d42:	f003 f8f7 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d46:	2304      	movs	r3, #4
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	482e      	ldr	r0, [pc, #184]	@ (8001e14 <MX_GPIO_Init+0x234>)
 8001d5a:	f003 f8eb 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d70:	2305      	movs	r3, #5
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	@ (8001e14 <MX_GPIO_Init+0x234>)
 8001d7c:	f003 f8da 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PD13 LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin;
 8001d80:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	481c      	ldr	r0, [pc, #112]	@ (8001e0c <MX_GPIO_Init+0x22c>)
 8001d9a:	f003 f8cb 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4817      	ldr	r0, [pc, #92]	@ (8001e10 <MX_GPIO_Init+0x230>)
 8001db4:	f003 f8be 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001db8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dca:	230a      	movs	r3, #10
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480e      	ldr	r0, [pc, #56]	@ (8001e10 <MX_GPIO_Init+0x230>)
 8001dd6:	f003 f8ad 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SD_Pin;
 8001dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dec:	2306      	movs	r3, #6
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <MX_GPIO_Init+0x228>)
 8001df8:	f003 f89c 	bl	8004f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	@ 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400

08001e18 <StartDisplayTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Display_Data_t local_display_data;
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <StartDisplayTask+0x78>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f006 f8d5 	bl	8007fd8 <xQueueSemaphoreTake>
	local_display_data = display_data;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <StartDisplayTask+0x7c>)
 8001e30:	f107 040c 	add.w	r4, r7, #12
 8001e34:	461d      	mov	r5, r3
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	6023      	str	r3, [r4, #0]
	xSemaphoreGive(xDisplayMutex);
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <StartDisplayTask+0x78>)
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f005 ffc2 	bl	8007dd4 <xQueueGenericSend>

	oled_display(local_display_data.voltage, local_display_data.current, local_display_data.soc,
 8001e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e5e:	ed97 6a07 	vldr	s12, [r7, #28]
 8001e62:	6a39      	ldr	r1, [r7, #32]
 8001e64:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e68:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4623      	mov	r3, r4
 8001e70:	eef0 1a46 	vmov.f32	s3, s12
 8001e74:	eeb0 1a66 	vmov.f32	s2, s13
 8001e78:	eef0 0a47 	vmov.f32	s1, s14
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	f7ff f8f2 	bl	8001068 <oled_display>
			local_display_data.power, local_display_data.temperature, local_display_data.soh,
			local_display_data.batteryStatus, local_display_data.hours, local_display_data.minutes);
    osDelay(100);
 8001e84:	2064      	movs	r0, #100	@ 0x64
 8001e86:	f005 fde6 	bl	8007a56 <osDelay>
	xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8001e8a:	bf00      	nop
 8001e8c:	e7c8      	b.n	8001e20 <StartDisplayTask+0x8>
 8001e8e:	bf00      	nop
 8001e90:	20000af4 	.word	0x20000af4
 8001e94:	20000ad0 	.word	0x20000ad0

08001e98 <StartBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void const * argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f007 fa6f 	bl	8009388 <ulTaskNotifyTake>
		buzzer_on();
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eb0:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <StartBuzzerTask+0x40>)
 8001eb2:	f003 faef 	bl	8005494 <HAL_GPIO_WritePin>
		osDelay(1000);
 8001eb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eba:	f005 fdcc 	bl	8007a56 <osDelay>
		buzzer_off();
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec4:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <StartBuzzerTask+0x40>)
 8001ec6:	f003 fae5 	bl	8005494 <HAL_GPIO_WritePin>
		osDelay(1000);
 8001eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ece:	f005 fdc2 	bl	8007a56 <osDelay>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ed2:	bf00      	nop
 8001ed4:	e7e4      	b.n	8001ea0 <StartBuzzerTask+0x8>
 8001ed6:	bf00      	nop
 8001ed8:	40020800 	.word	0x40020800

08001edc <StartBMSsamplingtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBMSsamplingtask */
void StartBMSsamplingtask(void const * argument)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMSsamplingtask */
  /* Infinite loop */
  for(;;)
  {
	switch(currentState)
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <StartBMSsamplingtask+0xd4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d053      	beq.n	8001f94 <StartBMSsamplingtask+0xb8>
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	dc54      	bgt.n	8001f9a <StartBMSsamplingtask+0xbe>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <StartBMSsamplingtask+0x1e>
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d02f      	beq.n	8001f58 <StartBMSsamplingtask+0x7c>
 8001ef8:	e04f      	b.n	8001f9a <StartBMSsamplingtask+0xbe>
	{
    case STATE_SAMPLE_VI:
    	reconfigure_to_dual_mode();
 8001efa:	f001 f985 	bl	8003208 <reconfigure_to_dual_mode>
        // Wait for DMA to finish (task notify triggered in ISR)
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001efe:	f04f 31ff 	mov.w	r1, #4294967295
 8001f02:	2001      	movs	r0, #1
 8001f04:	f007 fa40 	bl	8009388 <ulTaskNotifyTake>
        process_voltage_and_current_data();
 8001f08:	f001 fb76 	bl	80035f8 <process_voltage_and_current_data>

        xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <StartBMSsamplingtask+0xd8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 f85f 	bl	8007fd8 <xQueueSemaphoreTake>
        display_data.voltage = voltage;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <StartBMSsamplingtask+0xdc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <StartBMSsamplingtask+0xe0>)
 8001f20:	6013      	str	r3, [r2, #0]
        display_data.current = current;
 8001f22:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <StartBMSsamplingtask+0xe4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a25      	ldr	r2, [pc, #148]	@ (8001fbc <StartBMSsamplingtask+0xe0>)
 8001f28:	6053      	str	r3, [r2, #4]
        xSemaphoreGive(xDisplayMutex);
 8001f2a:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <StartBMSsamplingtask+0xd8>)
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	f005 ff4e 	bl	8007dd4 <xQueueGenericSend>
        fsm_counter++;
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <StartBMSsamplingtask+0xe8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <StartBMSsamplingtask+0xe8>)
 8001f40:	6013      	str	r3, [r2, #0]
        if (fsm_counter >= 100)  // every 10 sec (if delay is 100ms)
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <StartBMSsamplingtask+0xe8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b63      	cmp	r3, #99	@ 0x63
 8001f48:	d926      	bls.n	8001f98 <StartBMSsamplingtask+0xbc>
        {
            currentState = STATE_SAMPLE_TEMP;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <StartBMSsamplingtask+0xd4>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
            fsm_counter = 0;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <StartBMSsamplingtask+0xe8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
        }
        break;
 8001f56:	e01f      	b.n	8001f98 <StartBMSsamplingtask+0xbc>

    case STATE_SAMPLE_TEMP:
        reconfigure_to_temperature_channel();
 8001f58:	f001 f972 	bl	8003240 <reconfigure_to_temperature_channel>
        read_temperature();
 8001f5c:	f001 f9dc 	bl	8003318 <read_temperature>
        display_data.temperature = temperature;
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <StartBMSsamplingtask+0xec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <StartBMSsamplingtask+0xe0>)
 8001f66:	6113      	str	r3, [r2, #16]
        currentState = STATE_SAMPLE_VI;  // Go back to VI sampling
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <StartBMSsamplingtask+0xd4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
        xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <StartBMSsamplingtask+0xd8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f04f 31ff 	mov.w	r1, #4294967295
 8001f76:	4618      	mov	r0, r3
 8001f78:	f006 f82e 	bl	8007fd8 <xQueueSemaphoreTake>
        display_data.temperature = temperature;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <StartBMSsamplingtask+0xec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0e      	ldr	r2, [pc, #56]	@ (8001fbc <StartBMSsamplingtask+0xe0>)
 8001f82:	6113      	str	r3, [r2, #16]
        xSemaphoreGive(xDisplayMutex);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <StartBMSsamplingtask+0xd8>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f005 ff21 	bl	8007dd4 <xQueueGenericSend>
        break;
 8001f92:	e002      	b.n	8001f9a <StartBMSsamplingtask+0xbe>

    case STATE_ERROR:
        // Optional error state handling
        break;
 8001f94:	bf00      	nop
 8001f96:	e000      	b.n	8001f9a <StartBMSsamplingtask+0xbe>
        break;
 8001f98:	bf00      	nop
	}
	xTaskNotifyGive(ProcessTaskHandle); // process data everytime we finish sampling
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <StartBMSsamplingtask+0xf0>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f007 fa3c 	bl	8009420 <xTaskGenericNotify>
    osDelay(100);
 8001fa8:	2064      	movs	r0, #100	@ 0x64
 8001faa:	f005 fd54 	bl	8007a56 <osDelay>
	switch(currentState)
 8001fae:	e799      	b.n	8001ee4 <StartBMSsamplingtask+0x8>
 8001fb0:	20000ac8 	.word	0x20000ac8
 8001fb4:	20000af4 	.word	0x20000af4
 8001fb8:	20000db0 	.word	0x20000db0
 8001fbc:	20000ad0 	.word	0x20000ad0
 8001fc0:	20000db4 	.word	0x20000db4
 8001fc4:	20000acc 	.word	0x20000acc
 8001fc8:	20000db8 	.word	0x20000db8
 8001fcc:	20000abc 	.word	0x20000abc

08001fd0 <StartProcessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessTask */
void StartProcessTask(void const * argument)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessTask */
  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, 200);
 8001fd8:	21c8      	movs	r1, #200	@ 0xc8
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f007 f9d4 	bl	8009388 <ulTaskNotifyTake>
	processing();
 8001fe0:	f000 fc9a 	bl	8002918 <processing>
    xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <StartProcessTask+0x88>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fff3 	bl	8007fd8 <xQueueSemaphoreTake>
    display_data.soc = BMS_Data.stateOfCharge_percent;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <StartProcessTask+0x8c>)
 8001ff4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <StartProcessTask+0x90>)
 8001ffc:	609a      	str	r2, [r3, #8]
    display_data.power = process_data.power;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <StartProcessTask+0x94>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <StartProcessTask+0x90>)
 8002004:	60d3      	str	r3, [r2, #12]
    display_data.soh = BMS_Data.stateOfHealth_percent;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <StartProcessTask+0x8c>)
 8002008:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800200c:	461a      	mov	r2, r3
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <StartProcessTask+0x90>)
 8002010:	615a      	str	r2, [r3, #20]
    display_data.batteryStatus = process_data.batteryStatus;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <StartProcessTask+0x94>)
 8002014:	791a      	ldrb	r2, [r3, #4]
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <StartProcessTask+0x90>)
 8002018:	761a      	strb	r2, [r3, #24]
    display_data.hours = process_data.hours;
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <StartProcessTask+0x94>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <StartProcessTask+0x90>)
 8002020:	61d3      	str	r3, [r2, #28]
    display_data.minutes = process_data.minutes;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <StartProcessTask+0x94>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <StartProcessTask+0x90>)
 8002028:	6213      	str	r3, [r2, #32]
    xSemaphoreGive(xDisplayMutex);
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <StartProcessTask+0x88>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	f005 fece 	bl	8007dd4 <xQueueGenericSend>

    if(BMS_Data.fault_flag)
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <StartProcessTask+0x8c>)
 800203a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <StartProcessTask+0x80>
    {
    	//anything unexpected happens, ring the buzzer
    	xTaskNotifyGive(BuzzerTaskHandle);
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <StartProcessTask+0x98>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	2202      	movs	r2, #2
 800204a:	2100      	movs	r1, #0
 800204c:	f007 f9e8 	bl	8009420 <xTaskGenericNotify>
    }
    osDelay(100);
 8002050:	2064      	movs	r0, #100	@ 0x64
 8002052:	f005 fd00 	bl	8007a56 <osDelay>
	ulTaskNotifyTake(pdTRUE, 200);
 8002056:	e7bf      	b.n	8001fd8 <StartProcessTask+0x8>
 8002058:	20000af4 	.word	0x20000af4
 800205c:	200001f4 	.word	0x200001f4
 8002060:	20000ad0 	.word	0x20000ad0
 8002064:	20000d44 	.word	0x20000d44
 8002068:	20000ab4 	.word	0x20000ab4

0800206c <StartSendToWiFitask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendToWiFitask */
void StartSendToWiFitask(void const * argument)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b09d      	sub	sp, #116	@ 0x74
 8002070:	af0c      	add	r7, sp, #48	@ 0x30
 8002072:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartSendToWiFitask */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)== GPIO_PIN_RESET){
 8002074:	2102      	movs	r1, #2
 8002076:	483b      	ldr	r0, [pc, #236]	@ (8002164 <StartSendToWiFitask+0xf8>)
 8002078:	f003 f9f4 	bl	8005464 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d16b      	bne.n	800215a <StartSendToWiFitask+0xee>

		Display_Data_t local_upload_data;
		xSemaphoreTake(xDisplayMutex,portMAX_DELAY);
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <StartSendToWiFitask+0xfc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f04f 31ff 	mov.w	r1, #4294967295
 800208a:	4618      	mov	r0, r3
 800208c:	f005 ffa4 	bl	8007fd8 <xQueueSemaphoreTake>
		local_upload_data = display_data;
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <StartSendToWiFitask+0x100>)
 8002092:	f107 041c 	add.w	r4, r7, #28
 8002096:	461d      	mov	r5, r3
 8002098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	6023      	str	r3, [r4, #0]
		xSemaphoreGive(xDisplayMutex);
 80020a4:	4b30      	ldr	r3, [pc, #192]	@ (8002168 <StartSendToWiFitask+0xfc>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	f005 fe91 	bl	8007dd4 <xQueueGenericSend>

		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ffac 	bl	8001014 <batteryStatusToString>
 80020bc:	4604      	mov	r4, r0
		    "\"faultFlag\":%s,"
		    "\"chargeUpFlag\":%s"
		    "}\n",
		    BMS_Data.batteryName,
			batteryStatusToString(local_upload_data.batteryStatus),
		    BMS_Data.stateOfCharge_percent,
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020c4:	461d      	mov	r5, r3
		    BMS_Data.stateOfHealth_percent,
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020cc:	461e      	mov	r6, r3
		    BMS_Data.averageVoltage_mV,
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020d2:	613b      	str	r3, [r7, #16]
		    BMS_Data.averageCurrent_mA,
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020d8:	60fb      	str	r3, [r7, #12]
		    BMS_Data.averageTemperature_C,
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020dc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020e0:	60bb      	str	r3, [r7, #8]
		    BMS_Data.totalChargeCycles,
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020e4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020e8:	607b      	str	r3, [r7, #4]
		    BMS_Data.totalChargingTime_seconds,
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020ec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
			local_upload_data.hours,
			local_upload_data.minutes,
		    BMS_Data.fault_flag ? "true" : "false",
 80020f4:	491e      	ldr	r1, [pc, #120]	@ (8002170 <StartSendToWiFitask+0x104>)
 80020f6:	f891 103b 	ldrb.w	r1, [r1, #59]	@ 0x3b
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 80020fa:	2900      	cmp	r1, #0
 80020fc:	d001      	beq.n	8002102 <StartSendToWiFitask+0x96>
 80020fe:	491d      	ldr	r1, [pc, #116]	@ (8002174 <StartSendToWiFitask+0x108>)
 8002100:	e000      	b.n	8002104 <StartSendToWiFitask+0x98>
 8002102:	491d      	ldr	r1, [pc, #116]	@ (8002178 <StartSendToWiFitask+0x10c>)
		    BMS_Data.charge_up_flag ? "true" : "false"
 8002104:	481a      	ldr	r0, [pc, #104]	@ (8002170 <StartSendToWiFitask+0x104>)
 8002106:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
		snprintf(jsonBuffer, sizeof(jsonBuffer),
 800210a:	2800      	cmp	r0, #0
 800210c:	d001      	beq.n	8002112 <StartSendToWiFitask+0xa6>
 800210e:	4819      	ldr	r0, [pc, #100]	@ (8002174 <StartSendToWiFitask+0x108>)
 8002110:	e000      	b.n	8002114 <StartSendToWiFitask+0xa8>
 8002112:	4819      	ldr	r0, [pc, #100]	@ (8002178 <StartSendToWiFitask+0x10c>)
 8002114:	900b      	str	r0, [sp, #44]	@ 0x2c
 8002116:	910a      	str	r1, [sp, #40]	@ 0x28
 8002118:	9209      	str	r2, [sp, #36]	@ 0x24
 800211a:	9308      	str	r3, [sp, #32]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	9307      	str	r3, [sp, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	9306      	str	r3, [sp, #24]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	9305      	str	r3, [sp, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	9304      	str	r3, [sp, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	9303      	str	r3, [sp, #12]
 8002130:	9602      	str	r6, [sp, #8]
 8002132:	9501      	str	r5, [sp, #4]
 8002134:	9400      	str	r4, [sp, #0]
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <StartSendToWiFitask+0x104>)
 8002138:	4a10      	ldr	r2, [pc, #64]	@ (800217c <StartSendToWiFitask+0x110>)
 800213a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800213e:	4810      	ldr	r0, [pc, #64]	@ (8002180 <StartSendToWiFitask+0x114>)
 8002140:	f008 fc84 	bl	800aa4c <sniprintf>
		);


	    HAL_UART_Transmit(&huart3, (uint8_t*)jsonBuffer, strlen(jsonBuffer), HAL_MAX_DELAY);
 8002144:	480e      	ldr	r0, [pc, #56]	@ (8002180 <StartSendToWiFitask+0x114>)
 8002146:	f7fe f893 	bl	8000270 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	490b      	ldr	r1, [pc, #44]	@ (8002180 <StartSendToWiFitask+0x114>)
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <StartSendToWiFitask+0x118>)
 8002156:	f005 f857 	bl	8007208 <HAL_UART_Transmit>

	}
			osDelay(1000);
 800215a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800215e:	f005 fc7a 	bl	8007a56 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)== GPIO_PIN_RESET){
 8002162:	e787      	b.n	8002074 <StartSendToWiFitask+0x8>
 8002164:	40020800 	.word	0x40020800
 8002168:	20000af4 	.word	0x20000af4
 800216c:	20000ad0 	.word	0x20000ad0
 8002170:	200001f4 	.word	0x200001f4
 8002174:	0800d384 	.word	0x0800d384
 8002178:	0800d38c 	.word	0x0800d38c
 800217c:	0800d394 	.word	0x0800d394
 8002180:	20000af8 	.word	0x20000af8
 8002184:	20000a68 	.word	0x20000a68

08002188 <StartChargingTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChargingTimeTask */
void StartChargingTimeTask(void const * argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChargingTimeTask */
  /* Infinite loop */
  for(;;)
  {
	if(process_data.batteryStatus == CHARGING  &&  current > 50){
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <StartChargingTimeTask+0x3c>)
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10f      	bne.n	80021b8 <StartChargingTimeTask+0x30>
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <StartChargingTimeTask+0x40>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80021cc <StartChargingTimeTask+0x44>
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd05      	ble.n	80021b8 <StartChargingTimeTask+0x30>
		BMS_Data.totalChargingTime_seconds +=1;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <StartChargingTimeTask+0x48>)
 80021ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80021b0:	3301      	adds	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <StartChargingTimeTask+0x48>)
 80021b6:	871a      	strh	r2, [r3, #56]	@ 0x38
	}
    osDelay(1000);
 80021b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021bc:	f005 fc4b 	bl	8007a56 <osDelay>
	if(process_data.batteryStatus == CHARGING  &&  current > 50){
 80021c0:	e7e6      	b.n	8002190 <StartChargingTimeTask+0x8>
 80021c2:	bf00      	nop
 80021c4:	20000d44 	.word	0x20000d44
 80021c8:	20000db4 	.word	0x20000db4
 80021cc:	42480000 	.word	0x42480000
 80021d0:	200001f4 	.word	0x200001f4

080021d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021e6:	f001 fab7 	bl	8003758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40001000 	.word	0x40001000

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <Error_Handler+0x8>

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_MspInit+0x54>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_MspInit+0x54>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <HAL_MspInit+0x54>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_MspInit+0x54>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_MspInit+0x54>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_MspInit+0x54>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	210f      	movs	r1, #15
 8002246:	f06f 0001 	mvn.w	r0, #1
 800224a:	f002 fa0b 	bl	8004664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	@ 0x30
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a46      	ldr	r2, [pc, #280]	@ (8002394 <HAL_ADC_MspInit+0x138>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d158      	bne.n	8002330 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	4a44      	ldr	r2, [pc, #272]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6453      	str	r3, [r2, #68]	@ 0x44
 800228e:	4b42      	ldr	r3, [pc, #264]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80022b6:	230a      	movs	r3, #10
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4834      	ldr	r0, [pc, #208]	@ (800239c <HAL_ADC_MspInit+0x140>)
 80022ca:	f002 fe33 	bl	8004f34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022ce:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022d0:	4a34      	ldr	r2, [pc, #208]	@ (80023a4 <HAL_ADC_MspInit+0x148>)
 80022d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022d4:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022da:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e6:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 80022f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 8002300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002304:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230c:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002312:	4823      	ldr	r0, [pc, #140]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 8002314:	f002 f9d0 	bl	80046b8 <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800231e:	f7ff ff6b 	bl	80021f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 8002326:	639a      	str	r2, [r3, #56]	@ 0x38
 8002328:	4a1d      	ldr	r2, [pc, #116]	@ (80023a0 <HAL_ADC_MspInit+0x144>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800232e:	e02c      	b.n	800238a <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_ADC_MspInit+0x14c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d127      	bne.n	800238a <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a0e      	ldr	r2, [pc, #56]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_ADC_MspInit+0x13c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002372:	2304      	movs	r3, #4
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002376:	2303      	movs	r3, #3
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	@ (800239c <HAL_ADC_MspInit+0x140>)
 8002386:	f002 fdd5 	bl	8004f34 <HAL_GPIO_Init>
}
 800238a:	bf00      	nop
 800238c:	3730      	adds	r7, #48	@ 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40012000 	.word	0x40012000
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000
 80023a0:	2000096c 	.word	0x2000096c
 80023a4:	40026410 	.word	0x40026410
 80023a8:	40012100 	.word	0x40012100

080023ac <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_ADC_MspDeInit+0x58>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10f      	bne.n	80023de <HAL_ADC_MspDeInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80023be:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <HAL_ADC_MspDeInit+0x5c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <HAL_ADC_MspDeInit+0x5c>)
 80023c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_3);
 80023ca:	210a      	movs	r1, #10
 80023cc:	480f      	ldr	r0, [pc, #60]	@ (800240c <HAL_ADC_MspDeInit+0x60>)
 80023ce:	f002 ff4d 	bl	800526c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fa1c 	bl	8004814 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 80023dc:	e00e      	b.n	80023fc <HAL_ADC_MspDeInit+0x50>
  else if(hadc->Instance==ADC2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <HAL_ADC_MspDeInit+0x64>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d109      	bne.n	80023fc <HAL_ADC_MspDeInit+0x50>
    __HAL_RCC_ADC2_CLK_DISABLE();
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <HAL_ADC_MspDeInit+0x5c>)
 80023ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ec:	4a06      	ldr	r2, [pc, #24]	@ (8002408 <HAL_ADC_MspDeInit+0x5c>)
 80023ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023f2:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80023f4:	2104      	movs	r1, #4
 80023f6:	4805      	ldr	r0, [pc, #20]	@ (800240c <HAL_ADC_MspDeInit+0x60>)
 80023f8:	f002 ff38 	bl	800526c <HAL_GPIO_DeInit>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40012000 	.word	0x40012000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000
 8002410:	40012100 	.word	0x40012100

08002414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	@ 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <HAL_I2C_MspInit+0x84>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12c      	bne.n	8002490 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_I2C_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a17      	ldr	r2, [pc, #92]	@ (800249c <HAL_I2C_MspInit+0x88>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b15      	ldr	r3, [pc, #84]	@ (800249c <HAL_I2C_MspInit+0x88>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002452:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002458:	2312      	movs	r3, #18
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002464:	2304      	movs	r3, #4
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <HAL_I2C_MspInit+0x8c>)
 8002470:	f002 fd60 	bl	8004f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_I2C_MspInit+0x88>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_I2C_MspInit+0x88>)
 800247e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002482:	6413      	str	r3, [r2, #64]	@ 0x40
 8002484:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_I2C_MspInit+0x88>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002490:	bf00      	nop
 8002492:	3728      	adds	r7, #40	@ 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40005400 	.word	0x40005400
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020400 	.word	0x40020400

080024a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b4:	d10d      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_TIM_Base_MspInit+0x3c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <HAL_TIM_Base_MspInit+0x3c>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_TIM_Base_MspInit+0x3c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a29      	ldr	r2, [pc, #164]	@ (80025a8 <HAL_UART_MspInit+0xc4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d14b      	bne.n	800259e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a27      	ldr	r2, [pc, #156]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a20      	ldr	r2, [pc, #128]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a19      	ldr	r2, [pc, #100]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_UART_MspInit+0xc8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800255a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800255e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800256c:	2307      	movs	r3, #7
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	480e      	ldr	r0, [pc, #56]	@ (80025b0 <HAL_UART_MspInit+0xcc>)
 8002578:	f002 fcdc 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800257c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800258e:	2307      	movs	r3, #7
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4806      	ldr	r0, [pc, #24]	@ (80025b4 <HAL_UART_MspInit+0xd0>)
 800259a:	f002 fccb 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40004800 	.word	0x40004800
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020c00 	.word	0x40020c00

080025b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08e      	sub	sp, #56	@ 0x38
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_InitTick+0xe4>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	4a32      	ldr	r2, [pc, #200]	@ (800269c <HAL_InitTick+0xe4>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d8:	4b30      	ldr	r3, [pc, #192]	@ (800269c <HAL_InitTick+0xe4>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025e4:	f107 0210 	add.w	r2, r7, #16
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f8b0 	bl	8006754 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025fe:	f004 f881 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8002602:	6378      	str	r0, [r7, #52]	@ 0x34
 8002604:	e004      	b.n	8002610 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002606:	f004 f87d 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 800260a:	4603      	mov	r3, r0
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002612:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <HAL_InitTick+0xe8>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9b      	lsrs	r3, r3, #18
 800261a:	3b01      	subs	r3, #1
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800261e:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <HAL_InitTick+0xec>)
 8002620:	4a21      	ldr	r2, [pc, #132]	@ (80026a8 <HAL_InitTick+0xf0>)
 8002622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002624:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <HAL_InitTick+0xec>)
 8002626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800262a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800262c:	4a1d      	ldr	r2, [pc, #116]	@ (80026a4 <HAL_InitTick+0xec>)
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002632:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <HAL_InitTick+0xec>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_InitTick+0xec>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_InitTick+0xec>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002644:	4817      	ldr	r0, [pc, #92]	@ (80026a4 <HAL_InitTick+0xec>)
 8002646:	f004 f8b7 	bl	80067b8 <HAL_TIM_Base_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11b      	bne.n	8002690 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002658:	4812      	ldr	r0, [pc, #72]	@ (80026a4 <HAL_InitTick+0xec>)
 800265a:	f004 f965 	bl	8006928 <HAL_TIM_Base_Start_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002664:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002668:	2b00      	cmp	r3, #0
 800266a:	d111      	bne.n	8002690 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800266c:	2036      	movs	r0, #54	@ 0x36
 800266e:	f002 f815 	bl	800469c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d808      	bhi.n	800268a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	2036      	movs	r0, #54	@ 0x36
 800267e:	f001 fff1 	bl	8004664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <HAL_InitTick+0xf4>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e002      	b.n	8002690 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002690:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002694:	4618      	mov	r0, r3
 8002696:	3738      	adds	r7, #56	@ 0x38
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	431bde83 	.word	0x431bde83
 80026a4:	20000cf8 	.word	0x20000cf8
 80026a8:	40001000 	.word	0x40001000
 80026ac:	20000004 	.word	0x20000004

080026b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <NMI_Handler+0x4>

080026b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <MemManage_Handler+0x4>

080026c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM6_DAC_IRQHandler+0x10>)
 80026ee:	f004 f98b 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000cf8 	.word	0x20000cf8

080026fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <DMA2_Stream0_IRQHandler+0x10>)
 8002702:	f002 f9ad 	bl	8004a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000096c 	.word	0x2000096c

08002710 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)  // Ensure callback is triggered by ADC1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x44>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d114      	bne.n	800274c <HAL_ADC_ConvCpltCallback+0x3c>
    {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR(BMSsamplingtaskHandle, &xHigherPriorityTaskWoken);
 8002726:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_ADC_ConvCpltCallback+0x48>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f107 020c 	add.w	r2, r7, #12
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f006 ff37 	bl	80095a4 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_ADC_ConvCpltCallback+0x3c>
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_ADC_ConvCpltCallback+0x4c>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
    }
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012000 	.word	0x40012000
 8002758:	20000ab8 	.word	0x20000ab8
 800275c:	e000ed04 	.word	0xe000ed04

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_kill>:

int _kill(int pid, int sig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800277a:	f008 faa7 	bl	800accc <__errno>
 800277e:	4603      	mov	r3, r0
 8002780:	2216      	movs	r2, #22
 8002782:	601a      	str	r2, [r3, #0]
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_exit>:

void _exit (int status)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe7 	bl	8002770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <_exit+0x12>

080027a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e00a      	b.n	80027ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027b8:	f3af 8000 	nop.w
 80027bc:	4601      	mov	r1, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	60ba      	str	r2, [r7, #8]
 80027c4:	b2ca      	uxtb	r2, r1
 80027c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3301      	adds	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dbf0      	blt.n	80027b8 <_read+0x12>
  }

  return len;
 80027d6:	687b      	ldr	r3, [r7, #4]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e009      	b.n	8002806 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	60ba      	str	r2, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	dbf1      	blt.n	80027f2 <_write+0x12>
  }
  return len;
 800280e:	687b      	ldr	r3, [r7, #4]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_close>:

int _close(int file)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002840:	605a      	str	r2, [r3, #4]
  return 0;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_isatty>:

int _isatty(int file)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002858:	2301      	movs	r3, #1
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f008 fa0c 	bl	800accc <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	@ (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20020000 	.word	0x20020000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	20000d40 	.word	0x20000d40
 80028e8:	20004c60 	.word	0x20004c60

080028ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <SystemInit+0x28>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <SystemInit+0x28>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = 0x08000000;  // ✅ Always set VTOR to Flash
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <SystemInit+0x28>)
 8002902:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002906:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <processing>:
void processing(void);


//soh wrong triggered. soc miscalcualted after the voltage spike.current is 0 A?
void processing(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	determine_status();
 800291c:	f000 f89e 	bl	8002a5c <determine_status>
	// oled requires voltage, current, soc, power, temperature, soh, status, hours, minutes
	if ((process_data.batteryStatus == IDLE || process_data.batteryStatus == FULL)&& process_data.power < 0.5)
 8002920:	4b46      	ldr	r3, [pc, #280]	@ (8002a3c <processing+0x124>)
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <processing+0x18>
 8002928:	4b44      	ldr	r3, [pc, #272]	@ (8002a3c <processing+0x124>)
 800292a:	791b      	ldrb	r3, [r3, #4]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d110      	bne.n	8002952 <processing+0x3a>
 8002930:	4b42      	ldr	r3, [pc, #264]	@ (8002a3c <processing+0x124>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800293a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d506      	bpl.n	8002952 <processing+0x3a>
	{
		BMS_Data.stateOfCharge_percent = calculate_soc();
 8002944:	f000 f91e 	bl	8002b84 <calculate_soc>
 8002948:	4603      	mov	r3, r0
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a40 <processing+0x128>)
 800294e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	if (process_data.batteryStatus == FULL && (!BMS_Data.charge_up_flag))
 8002952:	4b3a      	ldr	r3, [pc, #232]	@ (8002a3c <processing+0x124>)
 8002954:	791b      	ldrb	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d10f      	bne.n	800297a <processing+0x62>
 800295a:	4b39      	ldr	r3, [pc, #228]	@ (8002a40 <processing+0x128>)
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <processing+0x62>
	{
		BMS_Data.charge_up_flag = 1;
 8002964:	4b36      	ldr	r3, [pc, #216]	@ (8002a40 <processing+0x128>)
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		BMS_Data.stateOfHealth_percent = calculate_soh();
 800296c:	f000 f93a 	bl	8002be4 <calculate_soh>
 8002970:	4603      	mov	r3, r0
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <processing+0x128>)
 8002976:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	process_data.power = calculate_power();
 800297a:	f000 f971 	bl	8002c60 <calculate_power>
 800297e:	eef0 7a40 	vmov.f32	s15, s0
 8002982:	4b2e      	ldr	r3, [pc, #184]	@ (8002a3c <processing+0x124>)
 8002984:	edc3 7a00 	vstr	s15, [r3]

	if (process_data.batteryStatus == CHARGING  &&  current > 100 && temperature != 0)
 8002988:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <processing+0x124>)
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d148      	bne.n	8002a22 <processing+0x10a>
 8002990:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <processing+0x12c>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002a48 <processing+0x130>
 800299a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	dd3e      	ble.n	8002a22 <processing+0x10a>
 80029a4:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <processing+0x134>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	d036      	beq.n	8002a22 <processing+0x10a>
	{

		number_of_sample++;
 80029b4:	4b26      	ldr	r3, [pc, #152]	@ (8002a50 <processing+0x138>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a25      	ldr	r2, [pc, #148]	@ (8002a50 <processing+0x138>)
 80029bc:	6013      	str	r3, [r2, #0]
		BMS_Data.averageVoltage_mV = calculate_average_voltage();
 80029be:	f000 fa0f 	bl	8002de0 <calculate_average_voltage>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <processing+0x128>)
 80029c8:	84da      	strh	r2, [r3, #38]	@ 0x26
		BMS_Data.averageCurrent_mA = calculate_average_current();
 80029ca:	f000 fa37 	bl	8002e3c <calculate_average_current>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <processing+0x128>)
 80029d4:	851a      	strh	r2, [r3, #40]	@ 0x28
		BMS_Data.averagePower_mW = calculate_average_power();
 80029d6:	f000 faa7 	bl	8002f28 <calculate_average_power>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <processing+0x128>)
 80029e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
		BMS_Data.averageTemperature_C = calculate_average_temperature();
 80029e2:	f000 fa59 	bl	8002e98 <calculate_average_temperature>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <processing+0x128>)
 80029ec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		calculate_total_energy_charged();
 80029f0:	f000 face 	bl	8002f90 <calculate_total_energy_charged>
		track_maximum_voltage_current_temperature();
 80029f4:	f000 fb30 	bl	8003058 <track_maximum_voltage_current_temperature>
		detect_overvoltage();
 80029f8:	f000 fb86 	bl	8003108 <detect_overvoltage>
		detect_undervoltage();
 80029fc:	f000 fba0 	bl	8003140 <detect_undervoltage>
		detect_overcurrent();
 8002a00:	f000 fbba 	bl	8003178 <detect_overcurrent>
		detect_short_circuit();
 8002a04:	f000 fbd4 	bl	80031b0 <detect_short_circuit>


		if (++tracker >=100)
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <processing+0x13c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <processing+0x13c>)
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <processing+0x13c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b63      	cmp	r3, #99	@ 0x63
 8002a1a:	d902      	bls.n	8002a22 <processing+0x10a>
		{
			tracker = 0;
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <processing+0x13c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
		}
	}

	calculate_remaining_time();
 8002a22:	f000 f93d 	bl	8002ca0 <calculate_remaining_time>
	process_data.hours = time_pack.hours;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <processing+0x140>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <processing+0x124>)
 8002a2c:	6093      	str	r3, [r2, #8]
	process_data.minutes = time_pack.minutes;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <processing+0x140>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a02      	ldr	r2, [pc, #8]	@ (8002a3c <processing+0x124>)
 8002a34:	60d3      	str	r3, [r2, #12]
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000d44 	.word	0x20000d44
 8002a40:	200001f4 	.word	0x200001f4
 8002a44:	20000db4 	.word	0x20000db4
 8002a48:	42c80000 	.word	0x42c80000
 8002a4c:	20000db8 	.word	0x20000db8
 8002a50:	20000d68 	.word	0x20000d68
 8002a54:	20000d70 	.word	0x20000d70
 8002a58:	20000d54 	.word	0x20000d54

08002a5c <determine_status>:

void determine_status(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	// this function is used to determine the status of the battery, either in charging/full/idle
	// if voltage difference is positive, then it is charging, otherwise, idel
	if (voltage - previous_voltage >= 75 || current >= 500) // current voltage is 0.01V greater than the last voltage
 8002a60:	4b3f      	ldr	r3, [pc, #252]	@ (8002b60 <determine_status+0x104>)
 8002a62:	ed93 7a00 	vldr	s14, [r3]
 8002a66:	4b3f      	ldr	r3, [pc, #252]	@ (8002b64 <determine_status+0x108>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002b68 <determine_status+0x10c>
 8002a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	da09      	bge.n	8002a92 <determine_status+0x36>
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <determine_status+0x110>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002b70 <determine_status+0x114>
 8002a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	db07      	blt.n	8002aa2 <determine_status+0x46>
	{
		process_data.batteryStatus = CHARGING;
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <determine_status+0x118>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	711a      	strb	r2, [r3, #4]
		same_voltage_counter = 0;
 8002a98:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <determine_status+0x11c>)
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e031      	b.n	8002b06 <determine_status+0xaa>
	}
	//if no voltage variation, very low power(cause by noise)
	else if (voltage-previous_voltage <50 && previous_voltage - voltage <50 && process_data.power < 0.5)//a noise buffer range
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b60 <determine_status+0x104>)
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <determine_status+0x108>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002b7c <determine_status+0x120>
 8002ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d522      	bpl.n	8002b06 <determine_status+0xaa>
 8002ac0:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <determine_status+0x108>)
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <determine_status+0x104>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b7c <determine_status+0x120>
 8002ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d513      	bpl.n	8002b06 <determine_status+0xaa>
 8002ade:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <determine_status+0x118>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	d509      	bpl.n	8002b06 <determine_status+0xaa>
	{
		same_voltage_counter++;// if it is not continuously increasing, reset to zero
 8002af2:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <determine_status+0x11c>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002afc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <determine_status+0x11c>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_voltage = voltage;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <determine_status+0x104>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <determine_status+0x108>)
 8002b0c:	6013      	str	r3, [r2, #0]

	if (same_voltage_counter >=13) // if the same voltage state last for 10s
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <determine_status+0x11c>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8002b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	db14      	blt.n	8002b4c <determine_status+0xf0>
	{
		if (voltage >=4150)
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <determine_status+0x104>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002b80 <determine_status+0x124>
 8002b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	db03      	blt.n	8002b3e <determine_status+0xe2>
		{
			process_data.batteryStatus = FULL;
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <determine_status+0x118>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	711a      	strb	r2, [r3, #4]
 8002b3c:	e002      	b.n	8002b44 <determine_status+0xe8>
		}
		else
		{
			process_data.batteryStatus = IDLE;
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <determine_status+0x118>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	711a      	strb	r2, [r3, #4]
		}
		same_voltage_counter = 0;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <determine_status+0x11c>)
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
	}
	previous_voltage = voltage;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <determine_status+0x104>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <determine_status+0x108>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000db0 	.word	0x20000db0
 8002b64:	20000d60 	.word	0x20000d60
 8002b68:	42960000 	.word	0x42960000
 8002b6c:	20000db4 	.word	0x20000db4
 8002b70:	43fa0000 	.word	0x43fa0000
 8002b74:	20000d44 	.word	0x20000d44
 8002b78:	20000d64 	.word	0x20000d64
 8002b7c:	42480000 	.word	0x42480000
 8002b80:	4581b000 	.word	0x4581b000

08002b84 <calculate_soc>:
static int calculate_soc(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
    int soc = (voltage - MINIMUM_VOLTAGE_MV) * 100 / (MAXIMUM_VOLTAGE_MV - MINIMUM_VOLTAGE_MV);
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <calculate_soc+0x50>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002bd8 <calculate_soc+0x54>
 8002b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b98:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002bdc <calculate_soc+0x58>
 8002b9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ba0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002be0 <calculate_soc+0x5c>
 8002ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bac:	ee17 3a90 	vmov	r3, s15
 8002bb0:	607b      	str	r3, [r7, #4]
    if (soc < 0) soc = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da01      	bge.n	8002bbc <calculate_soc+0x38>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
    if (soc > 100) soc = 100;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	dd01      	ble.n	8002bc6 <calculate_soc+0x42>
 8002bc2:	2364      	movs	r3, #100	@ 0x64
 8002bc4:	607b      	str	r3, [r7, #4]
    return soc;
 8002bc6:	687b      	ldr	r3, [r7, #4]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20000db0 	.word	0x20000db0
 8002bd8:	452be000 	.word	0x452be000
 8002bdc:	42c80000 	.word	0x42c80000
 8002be0:	44b54000 	.word	0x44b54000

08002be4 <calculate_soh>:
static int calculate_soh(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
    if (current == 0.0f && voltage >= 4000.0f)  // Battery fully charged
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <calculate_soh+0x68>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	d121      	bne.n	8002c3e <calculate_soh+0x5a>
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <calculate_soh+0x6c>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c54 <calculate_soh+0x70>
 8002c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	db17      	blt.n	8002c3e <calculate_soh+0x5a>
    {
        // Example Formula: Compare maximum voltage with nominal voltage
    	uint8_t soh = (voltage / MAXIMUM_VOLTAGE_MV) * 100;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <calculate_soh+0x6c>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002c58 <calculate_soh+0x74>
 8002c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002c5c <calculate_soh+0x78>
 8002c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c28:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c2c:	793b      	ldrb	r3, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]

        // Ensure SOH is within 0-100%
        if (soh > 100) soh = 100;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <calculate_soh+0x56>
 8002c36:	2364      	movs	r3, #100	@ 0x64
 8002c38:	73fb      	strb	r3, [r7, #15]
        if (soh < 0) soh = 0;
        return soh;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	e000      	b.n	8002c40 <calculate_soh+0x5c>
    }
    else
    {
        return 0;  // Not fully charged, can't measure SOH
 8002c3e:	2300      	movs	r3, #0
    }

}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000db4 	.word	0x20000db4
 8002c50:	20000db0 	.word	0x20000db0
 8002c54:	457a0000 	.word	0x457a0000
 8002c58:	45834000 	.word	0x45834000
 8002c5c:	42c80000 	.word	0x42c80000

08002c60 <calculate_power>:

static inline float calculate_power(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
    return voltage/1000 * current/1000; // Convert mV and mA to W
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <calculate_power+0x34>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002c98 <calculate_power+0x38>
 8002c6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <calculate_power+0x3c>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002c98 <calculate_power+0x38>
 8002c80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c84:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c88:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000db0 	.word	0x20000db0
 8002c98:	447a0000 	.word	0x447a0000
 8002c9c:	20000db4 	.word	0x20000db4

08002ca0 <calculate_remaining_time>:
static void calculate_remaining_time(void)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	if (process_data.batteryStatus == CHARGING && process_data.power > 0.5)
 8002ca4:	4b46      	ldr	r3, [pc, #280]	@ (8002dc0 <calculate_remaining_time+0x120>)
 8002ca6:	791b      	ldrb	r3, [r3, #4]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d175      	bne.n	8002d98 <calculate_remaining_time+0xf8>
 8002cac:	4b44      	ldr	r3, [pc, #272]	@ (8002dc0 <calculate_remaining_time+0x120>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	dd6b      	ble.n	8002d98 <calculate_remaining_time+0xf8>
	{
		time_pack.secs = ((1.0-(float)BMS_Data.stateOfCharge_percent/100) *(float)BATTERY_CAPACITY_MWH/1000 * 3600) / process_data.power;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	@ (8002dc4 <calculate_remaining_time+0x124>)
 8002cc2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002dc8 <calculate_remaining_time+0x128>
 8002cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd6:	ee16 0a90 	vmov	r0, s13
 8002cda:	f7fd fc35 	bl	8000548 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	4939      	ldr	r1, [pc, #228]	@ (8002dcc <calculate_remaining_time+0x12c>)
 8002ce8:	f7fd face 	bl	8000288 <__aeabi_dsub>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	a32e      	add	r3, pc, #184	@ (adr r3, 8002db0 <calculate_remaining_time+0x110>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fc7d 	bl	80005f8 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <calculate_remaining_time+0x130>)
 8002d0c:	f7fd fd9e 	bl	800084c <__aeabi_ddiv>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	a327      	add	r3, pc, #156	@ (adr r3, 8002db8 <calculate_remaining_time+0x118>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fc6b 	bl	80005f8 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <calculate_remaining_time+0x120>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fd86 	bl	800084c <__aeabi_ddiv>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd ff06 	bl	8000b58 <__aeabi_d2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d50:	6093      	str	r3, [r2, #8]
		time_pack.hours = time_pack.secs / 3600;
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4a20      	ldr	r2, [pc, #128]	@ (8002dd8 <calculate_remaining_time+0x138>)
 8002d58:	fb82 1203 	smull	r1, r2, r2, r3
 8002d5c:	441a      	add	r2, r3
 8002d5e:	12d2      	asrs	r2, r2, #11
 8002d60:	17db      	asrs	r3, r3, #31
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d66:	6013      	str	r3, [r2, #0]
		time_pack.minutes = time_pack.secs % 3600 / 60;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <calculate_remaining_time+0x138>)
 8002d6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002d72:	4413      	add	r3, r2
 8002d74:	12d9      	asrs	r1, r3, #11
 8002d76:	17d3      	asrs	r3, r2, #31
 8002d78:	1acb      	subs	r3, r1, r3
 8002d7a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <calculate_remaining_time+0x13c>)
 8002d86:	fb82 1203 	smull	r1, r2, r2, r3
 8002d8a:	441a      	add	r2, r3
 8002d8c:	1152      	asrs	r2, r2, #5
 8002d8e:	17db      	asrs	r3, r3, #31
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d94:	6053      	str	r3, [r2, #4]
 8002d96:	e006      	b.n	8002da6 <calculate_remaining_time+0x106>
	}
	else
	{
		time_pack.hours = 0;
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
		time_pack.minutes = 0;
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <calculate_remaining_time+0x134>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
	}

}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	bdb0      	pop	{r4, r5, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	f3af 8000 	nop.w
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40b89c00 	.word	0x40b89c00
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	40ac2000 	.word	0x40ac2000
 8002dc0:	20000d44 	.word	0x20000d44
 8002dc4:	200001f4 	.word	0x200001f4
 8002dc8:	42c80000 	.word	0x42c80000
 8002dcc:	3ff00000 	.word	0x3ff00000
 8002dd0:	408f4000 	.word	0x408f4000
 8002dd4:	20000d54 	.word	0x20000d54
 8002dd8:	91a2b3c5 	.word	0x91a2b3c5
 8002ddc:	88888889 	.word	0x88888889

08002de0 <calculate_average_voltage>:
static inline uint16_t calculate_average_voltage(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
	return BMS_Data.averageVoltage_mV + (voltage - BMS_Data.averageVoltage_mV) / number_of_sample;
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <calculate_average_voltage+0x50>)
 8002de6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <calculate_average_voltage+0x54>)
 8002df2:	edd3 6a00 	vldr	s13, [r3]
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <calculate_average_voltage+0x50>)
 8002df8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e02:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <calculate_average_voltage+0x58>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e12:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1e:	ee17 3a90 	vmov	r3, s15
 8002e22:	b29b      	uxth	r3, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200001f4 	.word	0x200001f4
 8002e34:	20000db0 	.word	0x20000db0
 8002e38:	20000d68 	.word	0x20000d68

08002e3c <calculate_average_current>:

static inline uint16_t calculate_average_current(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	return BMS_Data.averageCurrent_mA + (current - BMS_Data.averageCurrent_mA) / number_of_sample;
 8002e40:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <calculate_average_current+0x50>)
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4c:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <calculate_average_current+0x54>)
 8002e4e:	edd3 6a00 	vldr	s13, [r3]
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <calculate_average_current+0x50>)
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002e62:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <calculate_average_current+0x58>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7a:	ee17 3a90 	vmov	r3, s15
 8002e7e:	b29b      	uxth	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	200001f4 	.word	0x200001f4
 8002e90:	20000db4 	.word	0x20000db4
 8002e94:	20000d68 	.word	0x20000d68

08002e98 <calculate_average_temperature>:

static uint8_t calculate_average_temperature(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
	if (temperature > 5)
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <calculate_average_temperature+0x80>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	dd25      	ble.n	8002efe <calculate_average_temperature+0x66>
	{
		new_temperature = BMS_Data.averageTemperature_C + (temperature - BMS_Data.averageTemperature_C) / number_of_sample;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <calculate_average_temperature+0x84>)
 8002eb4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <calculate_average_temperature+0x80>)
 8002ec2:	edd3 6a00 	vldr	s13, [r3]
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <calculate_average_temperature+0x84>)
 8002ec8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <calculate_average_temperature+0x88>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ee4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ef4:	793b      	ldrb	r3, [r7, #4]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <calculate_average_temperature+0x8c>)
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e004      	b.n	8002f08 <calculate_average_temperature+0x70>
	}
	else
	{
		new_temperature = BMS_Data.averageTemperature_C;
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <calculate_average_temperature+0x84>)
 8002f00:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <calculate_average_temperature+0x8c>)
 8002f06:	701a      	strb	r2, [r3, #0]
	}
	return new_temperature;
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <calculate_average_temperature+0x8c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]

}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000db8 	.word	0x20000db8
 8002f1c:	200001f4 	.word	0x200001f4
 8002f20:	20000d68 	.word	0x20000d68
 8002f24:	20000d71 	.word	0x20000d71

08002f28 <calculate_average_power>:

static inline uint16_t calculate_average_power(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	ed2d 8b02 	vpush	{d8}
 8002f2e:	af00      	add	r7, sp, #0
	return BMS_Data.averagePower_mW + (calculate_power() * 1000 - BMS_Data.averagePower_mW) / number_of_sample;
 8002f30:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <calculate_average_power+0x5c>)
 8002f32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002f3c:	f7ff fe90 	bl	8002c60 <calculate_power>
 8002f40:	eef0 7a40 	vmov.f32	s15, s0
 8002f44:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002f88 <calculate_average_power+0x60>
 8002f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <calculate_average_power+0x5c>)
 8002f4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <calculate_average_power+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	b29b      	uxth	r3, r3
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	ecbd 8b02 	vpop	{d8}
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200001f4 	.word	0x200001f4
 8002f88:	447a0000 	.word	0x447a0000
 8002f8c:	20000d68 	.word	0x20000d68

08002f90 <calculate_total_energy_charged>:


static void calculate_total_energy_charged(void)
{
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    energyAccumulator += process_data.power * TIME_INTERVAL_S * 1000.0f / 3600.0f;
 8002f94:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <calculate_total_energy_charged+0xb8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <calculate_total_energy_charged+0xbc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd face 	bl	8000548 <__aeabi_f2d>
 8002fac:	a322      	add	r3, pc, #136	@ (adr r3, 8003038 <calculate_total_energy_charged+0xa8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fb21 	bl	80005f8 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <calculate_total_energy_charged+0xc0>)
 8002fc4:	f7fd fb18 	bl	80005f8 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	a31b      	add	r3, pc, #108	@ (adr r3, 8003040 <calculate_total_energy_charged+0xb0>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f7fd fc39 	bl	800084c <__aeabi_ddiv>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd f953 	bl	800028c <__adddf3>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7fd fddb 	bl	8000ba8 <__aeabi_d2f>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <calculate_total_energy_charged+0xb8>)
 8002ff6:	6013      	str	r3, [r2, #0]
    while (energyAccumulator >= 1.0f) {
 8002ff8:	e00f      	b.n	800301a <calculate_total_energy_charged+0x8a>
        BMS_Data.totalEnergyCharged_mWh++;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <calculate_total_energy_charged+0xc4>)
 8002ffc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002ffe:	3301      	adds	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <calculate_total_energy_charged+0xc4>)
 8003004:	861a      	strh	r2, [r3, #48]	@ 0x30
        energyAccumulator -= 1.0f; // Remove the integer part
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <calculate_total_energy_charged+0xb8>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <calculate_total_energy_charged+0xb8>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
    while (energyAccumulator >= 1.0f) {
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <calculate_total_energy_charged+0xb8>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	dae5      	bge.n	8002ffa <calculate_total_energy_charged+0x6a>
    }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	bdb0      	pop	{r4, r5, r7, pc}
 8003034:	f3af 8000 	nop.w
 8003038:	9999999a 	.word	0x9999999a
 800303c:	3fe99999 	.word	0x3fe99999
 8003040:	00000000 	.word	0x00000000
 8003044:	40ac2000 	.word	0x40ac2000
 8003048:	20000d6c 	.word	0x20000d6c
 800304c:	20000d44 	.word	0x20000d44
 8003050:	408f4000 	.word	0x408f4000
 8003054:	200001f4 	.word	0x200001f4

08003058 <track_maximum_voltage_current_temperature>:
static void track_maximum_voltage_current_temperature(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	if (voltage>BMS_Data.maxVoltage_mV)
 800305c:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 800305e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <track_maximum_voltage_current_temperature+0xa4>)
 800306a:	edd3 7a00 	vldr	s15, [r3]
 800306e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003076:	d509      	bpl.n	800308c <track_maximum_voltage_current_temperature+0x34>
	{
		BMS_Data.maxVoltage_mV = voltage;
 8003078:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <track_maximum_voltage_current_temperature+0xa4>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003082:	ee17 3a90 	vmov	r3, s15
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 800308a:	865a      	strh	r2, [r3, #50]	@ 0x32
	}
	if (current>BMS_Data.maxCurrent_mA)
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 800308e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003098:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <track_maximum_voltage_current_temperature+0xa8>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	d509      	bpl.n	80030bc <track_maximum_voltage_current_temperature+0x64>
	{
		BMS_Data.maxCurrent_mA = current;
 80030a8:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <track_maximum_voltage_current_temperature+0xa8>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b2:	ee17 3a90 	vmov	r3, s15
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 80030ba:	869a      	strh	r2, [r3, #52]	@ 0x34
	}
	if (temperature>BMS_Data.maxTemperature_C)
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 80030be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <track_maximum_voltage_current_temperature+0xac>)
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	d400      	bmi.n	80030da <track_maximum_voltage_current_temperature+0x82>
	{
		BMS_Data.maxTemperature_C = temperature;
	}
}
 80030d8:	e009      	b.n	80030ee <track_maximum_voltage_current_temperature+0x96>
		BMS_Data.maxTemperature_C = temperature;
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <track_maximum_voltage_current_temperature+0xac>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <track_maximum_voltage_current_temperature+0xa0>)
 80030ec:	86da      	strh	r2, [r3, #54]	@ 0x36
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	200001f4 	.word	0x200001f4
 80030fc:	20000db0 	.word	0x20000db0
 8003100:	20000db4 	.word	0x20000db4
 8003104:	20000db8 	.word	0x20000db8

08003108 <detect_overvoltage>:
	//read the total charged cycles
	//increment the charged cycles and update the eeprom
	return;
}
void detect_overvoltage(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	if (voltage > MAXIMUM_VOLTAGE_MV)
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <detect_overvoltage+0x2c>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003138 <detect_overvoltage+0x30>
 8003116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dc00      	bgt.n	8003122 <detect_overvoltage+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 8003120:	e003      	b.n	800312a <detect_overvoltage+0x22>
		BMS_Data.fault_flag = 1;
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <detect_overvoltage+0x34>)
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	20000db0 	.word	0x20000db0
 8003138:	45834000 	.word	0x45834000
 800313c:	200001f4 	.word	0x200001f4

08003140 <detect_undervoltage>:
void detect_undervoltage(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	if (voltage < MINIMUM_VOLTAGE_MV)
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <detect_undervoltage+0x2c>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003170 <detect_undervoltage+0x30>
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d400      	bmi.n	800315a <detect_undervoltage+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 8003158:	e003      	b.n	8003162 <detect_undervoltage+0x22>
		BMS_Data.fault_flag = 1;
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <detect_undervoltage+0x34>)
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20000db0 	.word	0x20000db0
 8003170:	452be000 	.word	0x452be000
 8003174:	200001f4 	.word	0x200001f4

08003178 <detect_overcurrent>:
void detect_overcurrent(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	if (current>MAXIMUM_CHARGE_CURRENT_MA)
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <detect_overcurrent+0x2c>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80031a8 <detect_overcurrent+0x30>
 8003186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dc00      	bgt.n	8003192 <detect_overcurrent+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 8003190:	e003      	b.n	800319a <detect_overcurrent+0x22>
		BMS_Data.fault_flag = 1;
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <detect_overcurrent+0x34>)
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000db4 	.word	0x20000db4
 80031a8:	44e10000 	.word	0x44e10000
 80031ac:	200001f4 	.word	0x200001f4

080031b0 <detect_short_circuit>:
void detect_short_circuit(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD_MV && current>SHORT_CIRCUIT_CURRENT_THRESHOLD_MA)
 80031b4:	4b0f      	ldr	r3, [pc, #60]	@ (80031f4 <detect_short_circuit+0x44>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80031f8 <detect_short_circuit+0x48>
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d400      	bmi.n	80031ca <detect_short_circuit+0x1a>
	{
		BMS_Data.fault_flag = 1;
	}
}
 80031c8:	e00e      	b.n	80031e8 <detect_short_circuit+0x38>
	if (voltage < SHORT_CIRCUIT_VOLTAGE_THRESHOLD_MV && current>SHORT_CIRCUIT_CURRENT_THRESHOLD_MA)
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <detect_short_circuit+0x4c>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003200 <detect_short_circuit+0x50>
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	dc00      	bgt.n	80031e0 <detect_short_circuit+0x30>
}
 80031de:	e003      	b.n	80031e8 <detect_short_circuit+0x38>
		BMS_Data.fault_flag = 1;
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <detect_short_circuit+0x54>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000db0 	.word	0x20000db0
 80031f8:	453b8000 	.word	0x453b8000
 80031fc:	20000db4 	.word	0x20000db4
 8003200:	459c4000 	.word	0x459c4000
 8003204:	200001f4 	.word	0x200001f4

08003208 <reconfigure_to_dual_mode>:
static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw);
static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw);
void process_voltage_and_current_data(void);

void reconfigure_to_dual_mode(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 800320c:	4808      	ldr	r0, [pc, #32]	@ (8003230 <reconfigure_to_dual_mode+0x28>)
 800320e:	f000 fb2a 	bl	8003866 <HAL_ADC_DeInit>
	MX_ADC1_Init();
 8003212:	f7fe fb6b 	bl	80018ec <MX_ADC1_Init>
    //restart dual mode
	HAL_TIM_Base_Start(&htim2);
 8003216:	4807      	ldr	r0, [pc, #28]	@ (8003234 <reconfigure_to_dual_mode+0x2c>)
 8003218:	f003 fb1e 	bl	8006858 <HAL_TIM_Base_Start>
    HAL_ADC_Start(&hadc2);
 800321c:	4806      	ldr	r0, [pc, #24]	@ (8003238 <reconfigure_to_dual_mode+0x30>)
 800321e:	f000 fb55 	bl	80038cc <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1, dma_adc_buffer, 8);
 8003222:	2208      	movs	r2, #8
 8003224:	4905      	ldr	r1, [pc, #20]	@ (800323c <reconfigure_to_dual_mode+0x34>)
 8003226:	4802      	ldr	r0, [pc, #8]	@ (8003230 <reconfigure_to_dual_mode+0x28>)
 8003228:	f000 fce0 	bl	8003bec <HAL_ADC_Start_DMA>
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200008dc 	.word	0x200008dc
 8003234:	20000a20 	.word	0x20000a20
 8003238:	20000924 	.word	0x20000924
 800323c:	20000d74 	.word	0x20000d74

08003240 <reconfigure_to_temperature_channel>:


void reconfigure_to_temperature_channel(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
	// stop dual mode
	HAL_ADC_Stop_DMA(&hadc1);
 8003246:	4830      	ldr	r0, [pc, #192]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003248:	f000 fdf2 	bl	8003e30 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop(&hadc2);
 800324c:	482f      	ldr	r0, [pc, #188]	@ (800330c <reconfigure_to_temperature_channel+0xcc>)
 800324e:	f000 fc0f 	bl	8003a70 <HAL_ADC_Stop>

	//switch ADC1 to independent mode

	HAL_ADC_DeInit(&hadc1);  // Fully reset ADC1
 8003252:	482d      	ldr	r0, [pc, #180]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003254:	f000 fb07 	bl	8003866 <HAL_ADC_DeInit>

	hadc1.Instance = ADC1;
 8003258:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 800325a:	4a2d      	ldr	r2, [pc, #180]	@ (8003310 <reconfigure_to_temperature_channel+0xd0>)
 800325c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003260:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003264:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003266:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800326c:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003274:	2200      	movs	r2, #0
 8003276:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003280:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003282:	4a24      	ldr	r2, [pc, #144]	@ (8003314 <reconfigure_to_temperature_channel+0xd4>)
 8003284:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003288:	2200      	movs	r2, #0
 800328a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800328c:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003292:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 8003294:	2201      	movs	r2, #1
 8003296:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

    HAL_ADC_Init(&hadc1);
 80032a6:	4818      	ldr	r0, [pc, #96]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 80032a8:	f000 fa9a 	bl	80037e0 <HAL_ADC_Init>

    ADC_MultiModeTypeDef multimode = {0};
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	4811      	ldr	r0, [pc, #68]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 80032c4:	f001 f8d0 	bl	8004468 <HAL_ADCEx_MultiModeConfigChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <reconfigure_to_temperature_channel+0x92>
    {
        Error_Handler();
 80032ce:	f7fe ff93 	bl	80021f8 <Error_Handler>
    }

    // Switch ADC1 to PA3 (Temperature)
    ADC_ChannelConfTypeDef sConfig1 = {0}; // Use a local struct
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
    sConfig1.Channel = ADC_CHANNEL_3;
 80032de:	2303      	movs	r3, #3
 80032e0:	607b      	str	r3, [r7, #4]
    sConfig1.Rank = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
    sConfig1.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80032e6:	2303      	movs	r3, #3
 80032e8:	60fb      	str	r3, [r7, #12]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig1) != HAL_OK)
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	@ (8003308 <reconfigure_to_temperature_channel+0xc8>)
 80032f0:	f000 fe1a 	bl	8003f28 <HAL_ADC_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <reconfigure_to_temperature_channel+0xbe>
    {
      Error_Handler();
 80032fa:	f7fe ff7d 	bl	80021f8 <Error_Handler>
    }

}
 80032fe:	bf00      	nop
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200008dc 	.word	0x200008dc
 800330c:	20000924 	.word	0x20000924
 8003310:	40012000 	.word	0x40012000
 8003314:	0f000001 	.word	0x0f000001

08003318 <read_temperature>:


void read_temperature(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
   adc_temperature_raw = 0;  // Reset previous readings
 800331c:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <read_temperature+0x44>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

   // Start ADC Conversion
   // ✅ Start ADC Conversion (Software Trigger)
   HAL_ADC_Start(&hadc1);
 8003322:	480f      	ldr	r0, [pc, #60]	@ (8003360 <read_temperature+0x48>)
 8003324:	f000 fad2 	bl	80038cc <HAL_ADC_Start>

   // Wait for ADC conversion to complete
   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	480c      	ldr	r0, [pc, #48]	@ (8003360 <read_temperature+0x48>)
 800332e:	f000 fbd2 	bl	8003ad6 <HAL_ADC_PollForConversion>

   // Read ADC value
   adc_temperature_raw = HAL_ADC_GetValue(&hadc1);
 8003332:	480b      	ldr	r0, [pc, #44]	@ (8003360 <read_temperature+0x48>)
 8003334:	f000 fdd6 	bl	8003ee4 <HAL_ADC_GetValue>
 8003338:	4603      	mov	r3, r0
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <read_temperature+0x44>)
 800333c:	6013      	str	r3, [r2, #0]

   // Stop ADC after reading
   HAL_ADC_Stop(&hadc1);
 800333e:	4808      	ldr	r0, [pc, #32]	@ (8003360 <read_temperature+0x48>)
 8003340:	f000 fb96 	bl	8003a70 <HAL_ADC_Stop>

   //get the temperature value
   temperature = convert_adc_raw_temperature(adc_temperature_raw);
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <read_temperature+0x44>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f8b5 	bl	80034b8 <convert_adc_raw_temperature>
 800334e:	eef0 7a40 	vmov.f32	s15, s0
 8003352:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <read_temperature+0x4c>)
 8003354:	edc3 7a00 	vstr	s15, [r3]
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000dac 	.word	0x20000dac
 8003360:	200008dc 	.word	0x200008dc
 8003364:	20000db8 	.word	0x20000db8

08003368 <convert_adc_raw_voltage_in_mV>:
static inline float convert_adc_raw_voltage_in_mV(uint32_t adc_voltage_raw) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    return (((float)adc_voltage_raw * VREF_ACTUAL1) / 4095.0 * 1.5 * 1000);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	ee17 0a90 	vmov	r0, s15
 800337e:	f7fd f8e3 	bl	8000548 <__aeabi_f2d>
 8003382:	a319      	add	r3, pc, #100	@ (adr r3, 80033e8 <convert_adc_raw_voltage_in_mV+0x80>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd f936 	bl	80005f8 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	a316      	add	r3, pc, #88	@ (adr r3, 80033f0 <convert_adc_raw_voltage_in_mV+0x88>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fd fa57 	bl	800084c <__aeabi_ddiv>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <convert_adc_raw_voltage_in_mV+0x78>)
 80033ac:	f7fd f924 	bl	80005f8 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <convert_adc_raw_voltage_in_mV+0x7c>)
 80033be:	f7fd f91b 	bl	80005f8 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7fd fbed 	bl	8000ba8 <__aeabi_d2f>
 80033ce:	4603      	mov	r3, r0
 80033d0:	ee07 3a90 	vmov	s15, r3
}
 80033d4:	eeb0 0a67 	vmov.f32	s0, s15
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	3ff80000 	.word	0x3ff80000
 80033e4:	408f4000 	.word	0x408f4000
 80033e8:	b851eb85 	.word	0xb851eb85
 80033ec:	4007851e 	.word	0x4007851e
 80033f0:	00000000 	.word	0x00000000
 80033f4:	40affe00 	.word	0x40affe00

080033f8 <convert_adc_raw_current_in_mA>:


static inline float convert_adc_raw_current_in_mA(uint32_t adc_current_raw) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    float Vout = ((float)adc_current_raw * VREF_ACTUAL1) / 4095.0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ee17 0a90 	vmov	r0, s15
 800340e:	f7fd f89b 	bl	8000548 <__aeabi_f2d>
 8003412:	a320      	add	r3, pc, #128	@ (adr r3, 8003494 <convert_adc_raw_current_in_mA+0x9c>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd f8ee 	bl	80005f8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	a31d      	add	r3, pc, #116	@ (adr r3, 800349c <convert_adc_raw_current_in_mA+0xa4>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f7fd fa0f 	bl	800084c <__aeabi_ddiv>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f7fd fbb7 	bl	8000ba8 <__aeabi_d2f>
 800343a:	4603      	mov	r3, r0
 800343c:	60fb      	str	r3, [r7, #12]
    return (Vout - ZERO_CURRENT_OFFSET) / SENSITIVITY * 1000;  // ✅ Only returns the result, no side effects
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7fd f882 	bl	8000548 <__aeabi_f2d>
 8003444:	a317      	add	r3, pc, #92	@ (adr r3, 80034a4 <convert_adc_raw_current_in_mA+0xac>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fc ff1d 	bl	8000288 <__aeabi_dsub>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	a315      	add	r3, pc, #84	@ (adr r3, 80034ac <convert_adc_raw_current_in_mA+0xb4>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f7fd f9f6 	bl	800084c <__aeabi_ddiv>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <convert_adc_raw_current_in_mA+0x98>)
 800346e:	f7fd f8c3 	bl	80005f8 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fb95 	bl	8000ba8 <__aeabi_d2f>
 800347e:	4603      	mov	r3, r0
 8003480:	ee07 3a90 	vmov	s15, r3
}
 8003484:	eeb0 0a67 	vmov.f32	s0, s15
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	408f4000 	.word	0x408f4000
 8003494:	b851eb85 	.word	0xb851eb85
 8003498:	4007851e 	.word	0x4007851e
 800349c:	00000000 	.word	0x00000000
 80034a0:	40affe00 	.word	0x40affe00
 80034a4:	c28f5c29 	.word	0xc28f5c29
 80034a8:	400428f5 	.word	0x400428f5
 80034ac:	2de00d1b 	.word	0x2de00d1b
 80034b0:	3fc8a090 	.word	0x3fc8a090
 80034b4:	00000000 	.word	0x00000000

080034b8 <convert_adc_raw_temperature>:

static inline float convert_adc_raw_temperature(uint32_t adc_temperature_raw) {
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    float Vntc = ((float)adc_temperature_raw * VREF_ACTUAL1) / 4095.0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	ee17 0a90 	vmov	r0, s15
 80034ce:	f7fd f83b 	bl	8000548 <__aeabi_f2d>
 80034d2:	a33d      	add	r3, pc, #244	@ (adr r3, 80035c8 <convert_adc_raw_temperature+0x110>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f88e 	bl	80005f8 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	a342      	add	r3, pc, #264	@ (adr r3, 80035f0 <convert_adc_raw_temperature+0x138>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f9af 	bl	800084c <__aeabi_ddiv>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	f7fd fb57 	bl	8000ba8 <__aeabi_d2f>
 80034fa:	4603      	mov	r3, r0
 80034fc:	60fb      	str	r3, [r7, #12]
    float Rntc = (Vntc * UPPER_RESISTANCE) / (VREF_ACTUAL1 - Vntc);
 80034fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003502:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80035e8 <convert_adc_raw_temperature+0x130>
 8003506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350a:	ee17 0a90 	vmov	r0, s15
 800350e:	f7fd f81b 	bl	8000548 <__aeabi_f2d>
 8003512:	4604      	mov	r4, r0
 8003514:	460d      	mov	r5, r1
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7fd f816 	bl	8000548 <__aeabi_f2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	a129      	add	r1, pc, #164	@ (adr r1, 80035c8 <convert_adc_raw_temperature+0x110>)
 8003522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003526:	f7fc feaf 	bl	8000288 <__aeabi_dsub>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	f7fd f98b 	bl	800084c <__aeabi_ddiv>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f7fd fb33 	bl	8000ba8 <__aeabi_d2f>
 8003542:	4603      	mov	r3, r0
 8003544:	60bb      	str	r3, [r7, #8]

    return (1.0f / ((log(Rntc / UPPER_RESISTANCE) / BETA_NTC) + (1.0f / ROOM_TEMPERATURE))) - 273.15f;
 8003546:	edd7 7a02 	vldr	s15, [r7, #8]
 800354a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80035e8 <convert_adc_raw_temperature+0x130>
 800354e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003552:	ee16 0a90 	vmov	r0, s13
 8003556:	f7fc fff7 	bl	8000548 <__aeabi_f2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	ec43 2b10 	vmov	d0, r2, r3
 8003562:	f009 fc2d 	bl	800cdc0 <log>
 8003566:	ec51 0b10 	vmov	r0, r1, d0
 800356a:	a319      	add	r3, pc, #100	@ (adr r3, 80035d0 <convert_adc_raw_temperature+0x118>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f96c 	bl	800084c <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	a316      	add	r3, pc, #88	@ (adr r3, 80035d8 <convert_adc_raw_temperature+0x120>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fc fe83 	bl	800028c <__adddf3>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	4917      	ldr	r1, [pc, #92]	@ (80035ec <convert_adc_raw_temperature+0x134>)
 8003590:	f7fd f95c 	bl	800084c <__aeabi_ddiv>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	a310      	add	r3, pc, #64	@ (adr r3, 80035e0 <convert_adc_raw_temperature+0x128>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc fe71 	bl	8000288 <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fafb 	bl	8000ba8 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	ee07 3a90 	vmov	s15, r3
}
 80035b8:	eeb0 0a67 	vmov.f32	s0, s15
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	f3af 8000 	nop.w
 80035c8:	b851eb85 	.word	0xb851eb85
 80035cc:	4007851e 	.word	0x4007851e
 80035d0:	00000000 	.word	0x00000000
 80035d4:	40b00400 	.word	0x40b00400
 80035d8:	dcb5db83 	.word	0xdcb5db83
 80035dc:	3f6b79e1 	.word	0x3f6b79e1
 80035e0:	60000000 	.word	0x60000000
 80035e4:	40711266 	.word	0x40711266
 80035e8:	461c4000 	.word	0x461c4000
 80035ec:	3ff00000 	.word	0x3ff00000
 80035f0:	00000000 	.word	0x00000000
 80035f4:	40affe00 	.word	0x40affe00

080035f8 <process_voltage_and_current_data>:

void process_voltage_and_current_data(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
	adc_voltage_raw_sum = 0;
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <process_voltage_and_current_data+0xac>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
	adc_current_raw_sum = 0;
 8003604:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <process_voltage_and_current_data+0xb0>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
	//collect voltage and current raw data, add them to sum for averaging

	for (int counter = 0;counter<8;counter++)
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	e016      	b.n	800363e <process_voltage_and_current_data+0x46>
	{
		adc_voltage_raw_sum += (dma_adc_buffer[counter] & 0xFFFF);
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <process_voltage_and_current_data+0xb4>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	b29a      	uxth	r2, r3
 800361a:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <process_voltage_and_current_data+0xac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4413      	add	r3, r2
 8003620:	4a20      	ldr	r2, [pc, #128]	@ (80036a4 <process_voltage_and_current_data+0xac>)
 8003622:	6013      	str	r3, [r2, #0]
		adc_current_raw_sum += (dma_adc_buffer[counter] >> 16);
 8003624:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <process_voltage_and_current_data+0xb4>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	0c1a      	lsrs	r2, r3, #16
 800362e:	4b1e      	ldr	r3, [pc, #120]	@ (80036a8 <process_voltage_and_current_data+0xb0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4413      	add	r3, r2
 8003634:	4a1c      	ldr	r2, [pc, #112]	@ (80036a8 <process_voltage_and_current_data+0xb0>)
 8003636:	6013      	str	r3, [r2, #0]
	for (int counter = 0;counter<8;counter++)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3301      	adds	r3, #1
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b07      	cmp	r3, #7
 8003642:	dde5      	ble.n	8003610 <process_voltage_and_current_data+0x18>
	}

	adc_voltage_raw = adc_voltage_raw_sum / 8;
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <process_voltage_and_current_data+0xac>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	4a19      	ldr	r2, [pc, #100]	@ (80036b0 <process_voltage_and_current_data+0xb8>)
 800364c:	6013      	str	r3, [r2, #0]
	adc_current_raw = adc_current_raw_sum / 8;
 800364e:	4b16      	ldr	r3, [pc, #88]	@ (80036a8 <process_voltage_and_current_data+0xb0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	4a17      	ldr	r2, [pc, #92]	@ (80036b4 <process_voltage_and_current_data+0xbc>)
 8003656:	6013      	str	r3, [r2, #0]
	voltage = convert_adc_raw_voltage_in_mV(adc_voltage_raw);
 8003658:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <process_voltage_and_current_data+0xb8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fe83 	bl	8003368 <convert_adc_raw_voltage_in_mV>
 8003662:	eef0 7a40 	vmov.f32	s15, s0
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <process_voltage_and_current_data+0xc0>)
 8003668:	edc3 7a00 	vstr	s15, [r3]
	current = convert_adc_raw_current_in_mA(adc_current_raw);
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <process_voltage_and_current_data+0xbc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fec1 	bl	80033f8 <convert_adc_raw_current_in_mA>
 8003676:	eef0 7a40 	vmov.f32	s15, s0
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <process_voltage_and_current_data+0xc4>)
 800367c:	edc3 7a00 	vstr	s15, [r3]
	// the current should never less than zero, if it does, just set it to 0
	if (current <0)
 8003680:	4b0e      	ldr	r3, [pc, #56]	@ (80036bc <process_voltage_and_current_data+0xc4>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	d400      	bmi.n	8003692 <process_voltage_and_current_data+0x9a>
	{
		current = 0.0;
	}

}
 8003690:	e003      	b.n	800369a <process_voltage_and_current_data+0xa2>
		current = 0.0;
 8003692:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <process_voltage_and_current_data+0xc4>)
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000d9c 	.word	0x20000d9c
 80036a8:	20000da0 	.word	0x20000da0
 80036ac:	20000d74 	.word	0x20000d74
 80036b0:	20000da4 	.word	0x20000da4
 80036b4:	20000da8 	.word	0x20000da8
 80036b8:	20000db0 	.word	0x20000db0
 80036bc:	20000db4 	.word	0x20000db4

080036c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036c4:	f7ff f912 	bl	80028ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c8:	480c      	ldr	r0, [pc, #48]	@ (80036fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ca:	490d      	ldr	r1, [pc, #52]	@ (8003700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d0:	e002      	b.n	80036d8 <LoopCopyDataInit>

080036d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d6:	3304      	adds	r3, #4

080036d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036dc:	d3f9      	bcc.n	80036d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036de:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036e0:	4c0a      	ldr	r4, [pc, #40]	@ (800370c <LoopFillZerobss+0x22>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e4:	e001      	b.n	80036ea <LoopFillZerobss>

080036e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e8:	3204      	adds	r2, #4

080036ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ec:	d3fb      	bcc.n	80036e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ee:	f007 faf3 	bl	800acd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f2:	f7fd ffe1 	bl	80016b8 <main>
  bx  lr    
 80036f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003700:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003704:	0800e5c8 	.word	0x0800e5c8
  ldr r2, =_sbss
 8003708:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800370c:	20004c60 	.word	0x20004c60

08003710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003710:	e7fe      	b.n	8003710 <ADC_IRQHandler>
	...

08003714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_Init+0x40>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <HAL_Init+0x40>)
 800371e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <HAL_Init+0x40>)
 800372a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <HAL_Init+0x40>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373c:	2003      	movs	r0, #3
 800373e:	f000 ff86 	bl	800464e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003742:	200f      	movs	r0, #15
 8003744:	f7fe ff38 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003748:	f7fe fd5c 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023c00 	.word	0x40023c00

08003758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_IncTick+0x20>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_IncTick+0x24>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <HAL_IncTick+0x24>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000008 	.word	0x20000008
 800377c:	20000dbc 	.word	0x20000dbc

08003780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_GetTick+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000dbc 	.word	0x20000dbc

08003798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff ffee 	bl	8003780 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d005      	beq.n	80037be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <HAL_Delay+0x44>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037be:	bf00      	nop
 80037c0:	f7ff ffde 	bl	8003780 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d8f7      	bhi.n	80037c0 <HAL_Delay+0x28>
  {
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e033      	b.n	800385e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fd2c 	bl	800225c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003826:	f023 0302 	bic.w	r3, r3, #2
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fc9a 	bl	800416c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40
 800384e:	e001      	b.n	8003854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e022      	b.n	80038c2 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	f043 0202 	orr.w	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d108      	bne.n	80038b8 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fd80 	bl	80023ac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_Start+0x1a>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0b2      	b.n	8003a4c <HAL_ADC_Start+0x180>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d018      	beq.n	800392e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800390c:	4b52      	ldr	r3, [pc, #328]	@ (8003a58 <HAL_ADC_Start+0x18c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a52      	ldr	r2, [pc, #328]	@ (8003a5c <HAL_ADC_Start+0x190>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0c9a      	lsrs	r2, r3, #18
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003920:	e002      	b.n	8003928 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f9      	bne.n	8003922 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d17a      	bne.n	8003a32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003966:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397a:	d106      	bne.n	800398a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	f023 0206 	bic.w	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
 8003988:	e002      	b.n	8003990 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003998:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <HAL_ADC_Start+0x194>)
 800399a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80039a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d12a      	bne.n	8003a08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a64 <HAL_ADC_Start+0x198>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d015      	beq.n	80039e8 <HAL_ADC_Start+0x11c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	@ (8003a68 <HAL_ADC_Start+0x19c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d105      	bne.n	80039d2 <HAL_ADC_Start+0x106>
 80039c6:	4b26      	ldr	r3, [pc, #152]	@ (8003a60 <HAL_ADC_Start+0x194>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a25      	ldr	r2, [pc, #148]	@ (8003a6c <HAL_ADC_Start+0x1a0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d136      	bne.n	8003a4a <HAL_ADC_Start+0x17e>
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_ADC_Start+0x194>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d130      	bne.n	8003a4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d129      	bne.n	8003a4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	e020      	b.n	8003a4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <HAL_ADC_Start+0x198>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d11b      	bne.n	8003a4a <HAL_ADC_Start+0x17e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d114      	bne.n	8003a4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	e00b      	b.n	8003a4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	431bde83 	.word	0x431bde83
 8003a60:	40012300 	.word	0x40012300
 8003a64:	40012000 	.word	0x40012000
 8003a68:	40012100 	.word	0x40012100
 8003a6c:	40012200 	.word	0x40012200

08003a70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_Stop+0x16>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e021      	b.n	8003aca <HAL_ADC_Stop+0x5a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af2:	d113      	bne.n	8003b1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e063      	b.n	8003be4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1c:	f7ff fe30 	bl	8003780 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b22:	e021      	b.n	8003b68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d01d      	beq.n	8003b68 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_ADC_PollForConversion+0x6c>
 8003b32:	f7ff fe25 	bl	8003780 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d212      	bcs.n	8003b68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d00b      	beq.n	8003b68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e03d      	b.n	8003be4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d1d6      	bne.n	8003b24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0212 	mvn.w	r2, #18
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d123      	bne.n	8003be2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11f      	bne.n	8003be2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d111      	bne.n	8003be2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_Start_DMA+0x22>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0f7      	b.n	8003dfe <HAL_ADC_Start_DMA+0x212>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d018      	beq.n	8003c56 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c34:	4b74      	ldr	r3, [pc, #464]	@ (8003e08 <HAL_ADC_Start_DMA+0x21c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a74      	ldr	r2, [pc, #464]	@ (8003e0c <HAL_ADC_Start_DMA+0x220>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0c9a      	lsrs	r2, r3, #18
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c48:	e002      	b.n	8003c50 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f9      	bne.n	8003c4a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c64:	d107      	bne.n	8003c76 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c74:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 80af 	bne.w	8003de4 <HAL_ADC_Start_DMA+0x1f8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc4:	d106      	bne.n	8003cd4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f023 0206 	bic.w	r2, r3, #6
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cd2:	e002      	b.n	8003cda <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_ADC_Start_DMA+0x224>)
 8003ce4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_ADC_Start_DMA+0x228>)
 8003cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	4a49      	ldr	r2, [pc, #292]	@ (8003e18 <HAL_ADC_Start_DMA+0x22c>)
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	4a48      	ldr	r2, [pc, #288]	@ (8003e1c <HAL_ADC_Start_DMA+0x230>)
 8003cfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d16:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d26:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    // modification to adjust CDR
        // 🚨 Fix for Dual ADC Mode 🚨
        if (READ_BIT(ADC->CCR, ADC_CCR_MULTI) != 0) {
 8003d28:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_ADC_Start_DMA+0x224>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_ADC_Start_DMA+0x158>
            // If ADC is in Dual Mode, use the Common Data Register
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4938      	ldr	r1, [pc, #224]	@ (8003e20 <HAL_ADC_Start_DMA+0x234>)
 8003d3e:	f000 fdc7 	bl	80048d0 <HAL_DMA_Start_IT>
 8003d42:	e009      	b.n	8003d58 <HAL_ADC_Start_DMA+0x16c>
        } else {
            // Otherwise, use the default single ADC DR
            HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	334c      	adds	r3, #76	@ 0x4c
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f000 fdbc 	bl	80048d0 <HAL_DMA_Start_IT>
        }
    //tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d12a      	bne.n	8003dba <HAL_ADC_Start_DMA+0x1ce>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	@ (8003e24 <HAL_ADC_Start_DMA+0x238>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d015      	beq.n	8003d9a <HAL_ADC_Start_DMA+0x1ae>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <HAL_ADC_Start_DMA+0x23c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d105      	bne.n	8003d84 <HAL_ADC_Start_DMA+0x198>
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_ADC_Start_DMA+0x224>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_ADC_Start_DMA+0x1ae>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a28      	ldr	r2, [pc, #160]	@ (8003e2c <HAL_ADC_Start_DMA+0x240>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d136      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x210>
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_ADC_Start_DMA+0x224>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d130      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x210>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d129      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x210>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	e020      	b.n	8003dfc <HAL_ADC_Start_DMA+0x210>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_ADC_Start_DMA+0x238>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d11b      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x210>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x210>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	e00b      	b.n	8003dfc <HAL_ADC_Start_DMA+0x210>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	431bde83 	.word	0x431bde83
 8003e10:	40012300 	.word	0x40012300
 8003e14:	08004365 	.word	0x08004365
 8003e18:	0800441f 	.word	0x0800441f
 8003e1c:	0800443b 	.word	0x0800443b
 8003e20:	40012308 	.word	0x40012308
 8003e24:	40012000 	.word	0x40012000
 8003e28:	40012100 	.word	0x40012100
 8003e2c:	40012200 	.word	0x40012200

08003e30 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_Stop_DMA+0x1a>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e048      	b.n	8003edc <HAL_ADC_Stop_DMA+0xac>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d130      	bne.n	8003ed2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e7e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d10f      	bne.n	8003eae <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fd74 	bl	8004980 <HAL_DMA_Abort>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003ebc:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x1c>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e105      	b.n	8004150 <HAL_ADC_ConfigChannel+0x228>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d925      	bls.n	8003fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	3b1e      	subs	r3, #30
 8003f6a:	2207      	movs	r2, #7
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43da      	mvns	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	400a      	ands	r2, r1
 8003f78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68d9      	ldr	r1, [r3, #12]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4403      	add	r3, r0
 8003f92:	3b1e      	subs	r3, #30
 8003f94:	409a      	lsls	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	e022      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6919      	ldr	r1, [r3, #16]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6919      	ldr	r1, [r3, #16]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4403      	add	r3, r0
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d824      	bhi.n	8004038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3b05      	subs	r3, #5
 8004000:	221f      	movs	r2, #31
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	400a      	ands	r2, r1
 800400e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	4618      	mov	r0, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	3b05      	subs	r3, #5
 800402a:	fa00 f203 	lsl.w	r2, r0, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	635a      	str	r2, [r3, #52]	@ 0x34
 8004036:	e04c      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d824      	bhi.n	800408a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	3b23      	subs	r3, #35	@ 0x23
 8004052:	221f      	movs	r2, #31
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43da      	mvns	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	400a      	ands	r2, r1
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	4618      	mov	r0, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	3b23      	subs	r3, #35	@ 0x23
 800407c:	fa00 f203 	lsl.w	r2, r0, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
 8004088:	e023      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	3b41      	subs	r3, #65	@ 0x41
 800409c:	221f      	movs	r2, #31
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43da      	mvns	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	400a      	ands	r2, r1
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	3b41      	subs	r3, #65	@ 0x41
 80040c6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_ADC_ConfigChannel+0x234>)
 80040d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a21      	ldr	r2, [pc, #132]	@ (8004160 <HAL_ADC_ConfigChannel+0x238>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d109      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x1cc>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b12      	cmp	r3, #18
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	@ (8004160 <HAL_ADC_ConfigChannel+0x238>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d123      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x21e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d003      	beq.n	800410e <HAL_ADC_ConfigChannel+0x1e6>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b11      	cmp	r3, #17
 800410c:	d11b      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b10      	cmp	r3, #16
 8004120:	d111      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <HAL_ADC_ConfigChannel+0x23c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a10      	ldr	r2, [pc, #64]	@ (8004168 <HAL_ADC_ConfigChannel+0x240>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	0c9a      	lsrs	r2, r3, #18
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004138:	e002      	b.n	8004140 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3b01      	subs	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f9      	bne.n	800413a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40012300 	.word	0x40012300
 8004160:	40012000 	.word	0x40012000
 8004164:	20000000 	.word	0x20000000
 8004168:	431bde83 	.word	0x431bde83

0800416c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004174:	4b79      	ldr	r3, [pc, #484]	@ (800435c <ADC_Init+0x1f0>)
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6899      	ldr	r1, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	4a58      	ldr	r2, [pc, #352]	@ (8004360 <ADC_Init+0x1f4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	e00f      	b.n	800426a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004268:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0202 	bic.w	r2, r2, #2
 8004278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7e1b      	ldrb	r3, [r3, #24]
 8004284:	005a      	lsls	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	3b01      	subs	r3, #1
 80042c4:	035a      	lsls	r2, r3, #13
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	e007      	b.n	80042e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	051a      	lsls	r2, r3, #20
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004322:	025a      	lsls	r2, r3, #9
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	029a      	lsls	r2, r3, #10
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40012300 	.word	0x40012300
 8004360:	0f000001 	.word	0x0f000001

08004364 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d13c      	bne.n	80043f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d12b      	bne.n	80043f0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d127      	bne.n	80043f0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d119      	bne.n	80043f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0220 	bic.w	r2, r2, #32
 80043ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7fe f98d 	bl	8002710 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043f6:	e00e      	b.n	8004416 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fd84 	bl	8003f12 <HAL_ADC_ErrorCallback>
}
 800440a:	e004      	b.n	8004416 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fd66 	bl	8003efe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2240      	movs	r2, #64	@ 0x40
 800444c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004452:	f043 0204 	orr.w	r2, r3, #4
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff fd59 	bl	8003f12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e031      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004488:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 021f 	bic.w	r2, r3, #31
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012300 	.word	0x40012300

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	@ (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	@ (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	@ 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff4c 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004676:	f7ff ff61 	bl	800453c <__NVIC_GetPriorityGrouping>
 800467a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	6978      	ldr	r0, [r7, #20]
 8004682:	f7ff ffb1 	bl	80045e8 <NVIC_EncodePriority>
 8004686:	4602      	mov	r2, r0
 8004688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff80 	bl	8004594 <__NVIC_SetPriority>
}
 8004694:	bf00      	nop
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff ff54 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7ff f85c 	bl	8003780 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e099      	b.n	8004808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f4:	e00f      	b.n	8004716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f6:	f7ff f843 	bl	8003780 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b05      	cmp	r3, #5
 8004702:	d908      	bls.n	8004716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2203      	movs	r2, #3
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e078      	b.n	8004808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e8      	bne.n	80046f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4b38      	ldr	r3, [pc, #224]	@ (8004810 <HAL_DMA_Init+0x158>)
 8004730:	4013      	ands	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	2b04      	cmp	r3, #4
 800476e:	d107      	bne.n	8004780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	4313      	orrs	r3, r2
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d117      	bne.n	80047da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fb3d 	bl	8004e3c <DMA_CheckFifoParam>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2240      	movs	r2, #64	@ 0x40
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047d6:	2301      	movs	r3, #1
 80047d8:	e016      	b.n	8004808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 faf4 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 80047e8:	4603      	mov	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	223f      	movs	r2, #63	@ 0x3f
 80047f2:	409a      	lsls	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	f010803f 	.word	0xf010803f

08004814 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e050      	b.n	80048c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d101      	bne.n	8004836 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	e048      	b.n	80048c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2221      	movs	r2, #33	@ 0x21
 8004874:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 faaa 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 800487c:	4603      	mov	r3, r0
 800487e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	223f      	movs	r2, #63	@ 0x3f
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_DMA_Start_IT+0x26>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e040      	b.n	8004978 <HAL_DMA_Start_IT+0xa8>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d12f      	bne.n	800496a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fa28 	bl	8004d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004928:	223f      	movs	r2, #63	@ 0x3f
 800492a:	409a      	lsls	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0216 	orr.w	r2, r2, #22
 800493e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e005      	b.n	8004976 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800498e:	f7fe fef7 	bl	8003780 <HAL_GetTick>
 8004992:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d008      	beq.n	80049b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	@ 0x80
 80049a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e052      	b.n	8004a58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0216 	bic.w	r2, r2, #22
 80049c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_DMA_Abort+0x62>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0208 	bic.w	r2, r2, #8
 80049f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a02:	e013      	b.n	8004a2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a04:	f7fe febc 	bl	8003780 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d90c      	bls.n	8004a2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e015      	b.n	8004a58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e4      	bne.n	8004a04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	223f      	movs	r2, #63	@ 0x3f
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca8 <HAL_DMA_IRQHandler+0x248>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a8e      	ldr	r2, [pc, #568]	@ (8004cac <HAL_DMA_IRQHandler+0x24c>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	2208      	movs	r2, #8
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d012      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aee:	2201      	movs	r2, #1
 8004af0:	409a      	lsls	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b06:	2204      	movs	r2, #4
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	2204      	movs	r2, #4
 8004b26:	409a      	lsls	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	f043 0204 	orr.w	r2, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d043      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d03c      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d024      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
 8004b8e:	e01f      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
 8004ba0:	e016      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0208 	bic.w	r2, r2, #8
 8004bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 808f 	beq.w	8004d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8087 	beq.w	8004d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d136      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0216 	bic.w	r2, r2, #22
 8004c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_DMA_IRQHandler+0x1da>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0208 	bic.w	r2, r2, #8
 8004c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	223f      	movs	r2, #63	@ 0x3f
 8004c50:	409a      	lsls	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d07e      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
        }
        return;
 8004c76:	e079      	b.n	8004d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d031      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e02c      	b.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
 8004ca6:	bf00      	nop
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
 8004cc0:	e01e      	b.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0210 	bic.w	r2, r2, #16
 8004cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d032      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2205      	movs	r2, #5
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d307      	bcc.n	8004d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x2cc>
 8004d46:	e000      	b.n	8004d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
 8004d6a:	e000      	b.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d6c:	bf00      	nop
    }
  }
}
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d108      	bne.n	8004db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004db2:	e007      	b.n	8004dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3b10      	subs	r3, #16
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x64>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d909      	bls.n	8004e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e10:	e007      	b.n	8004e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	aaaaaaab 	.word	0xaaaaaaab
 8004e38:	0800e23c 	.word	0x0800e23c

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11f      	bne.n	8004e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d856      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <DMA_CheckFifoParam+0x28>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e87 	.word	0x08004e87
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004f0b 	.word	0x08004f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d046      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e043      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e8e:	d140      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e03d      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9e:	d121      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d837      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d903      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
    }
  } 
  
  return status; 
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	@ 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e16b      	b.n	8005228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	f040 815a 	bne.w	8005222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d005      	beq.n	8004f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d130      	bne.n	8004fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2203      	movs	r2, #3
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 0201 	and.w	r2, r3, #1
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d017      	beq.n	8005024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d123      	bne.n	8005078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	08da      	lsrs	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3208      	adds	r2, #8
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2203      	movs	r2, #3
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0203 	and.w	r2, r3, #3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80b4 	beq.w	8005222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	4b60      	ldr	r3, [pc, #384]	@ (8005240 <HAL_GPIO_Init+0x30c>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005240 <HAL_GPIO_Init+0x30c>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005240 <HAL_GPIO_Init+0x30c>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d6:	4a5b      	ldr	r2, [pc, #364]	@ (8005244 <HAL_GPIO_Init+0x310>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a52      	ldr	r2, [pc, #328]	@ (8005248 <HAL_GPIO_Init+0x314>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02b      	beq.n	800515a <HAL_GPIO_Init+0x226>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a51      	ldr	r2, [pc, #324]	@ (800524c <HAL_GPIO_Init+0x318>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d025      	beq.n	8005156 <HAL_GPIO_Init+0x222>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a50      	ldr	r2, [pc, #320]	@ (8005250 <HAL_GPIO_Init+0x31c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <HAL_GPIO_Init+0x21e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a4f      	ldr	r2, [pc, #316]	@ (8005254 <HAL_GPIO_Init+0x320>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d019      	beq.n	800514e <HAL_GPIO_Init+0x21a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4e      	ldr	r2, [pc, #312]	@ (8005258 <HAL_GPIO_Init+0x324>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_GPIO_Init+0x216>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4d      	ldr	r2, [pc, #308]	@ (800525c <HAL_GPIO_Init+0x328>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00d      	beq.n	8005146 <HAL_GPIO_Init+0x212>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a4c      	ldr	r2, [pc, #304]	@ (8005260 <HAL_GPIO_Init+0x32c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <HAL_GPIO_Init+0x20e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4b      	ldr	r2, [pc, #300]	@ (8005264 <HAL_GPIO_Init+0x330>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_GPIO_Init+0x20a>
 800513a:	2307      	movs	r3, #7
 800513c:	e00e      	b.n	800515c <HAL_GPIO_Init+0x228>
 800513e:	2308      	movs	r3, #8
 8005140:	e00c      	b.n	800515c <HAL_GPIO_Init+0x228>
 8005142:	2306      	movs	r3, #6
 8005144:	e00a      	b.n	800515c <HAL_GPIO_Init+0x228>
 8005146:	2305      	movs	r3, #5
 8005148:	e008      	b.n	800515c <HAL_GPIO_Init+0x228>
 800514a:	2304      	movs	r3, #4
 800514c:	e006      	b.n	800515c <HAL_GPIO_Init+0x228>
 800514e:	2303      	movs	r3, #3
 8005150:	e004      	b.n	800515c <HAL_GPIO_Init+0x228>
 8005152:	2302      	movs	r3, #2
 8005154:	e002      	b.n	800515c <HAL_GPIO_Init+0x228>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_GPIO_Init+0x228>
 800515a:	2300      	movs	r3, #0
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	f002 0203 	and.w	r2, r2, #3
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	4093      	lsls	r3, r2
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800516c:	4935      	ldr	r1, [pc, #212]	@ (8005244 <HAL_GPIO_Init+0x310>)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	3302      	adds	r3, #2
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800517a:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <HAL_GPIO_Init+0x334>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800519e:	4a32      	ldr	r2, [pc, #200]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051a4:	4b30      	ldr	r3, [pc, #192]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051c8:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ce:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <HAL_GPIO_Init+0x334>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800521c:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <HAL_GPIO_Init+0x334>)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	f67f ae90 	bls.w	8004f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3724      	adds	r7, #36	@ 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	40013800 	.word	0x40013800
 8005248:	40020000 	.word	0x40020000
 800524c:	40020400 	.word	0x40020400
 8005250:	40020800 	.word	0x40020800
 8005254:	40020c00 	.word	0x40020c00
 8005258:	40021000 	.word	0x40021000
 800525c:	40021400 	.word	0x40021400
 8005260:	40021800 	.word	0x40021800
 8005264:	40021c00 	.word	0x40021c00
 8005268:	40013c00 	.word	0x40013c00

0800526c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e0cd      	b.n	8005424 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005288:	2201      	movs	r2, #1
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	f040 80bd 	bne.w	800541e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052a4:	4a65      	ldr	r2, [pc, #404]	@ (800543c <HAL_GPIO_DeInit+0x1d0>)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	3302      	adds	r3, #2
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	220f      	movs	r2, #15
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005440 <HAL_GPIO_DeInit+0x1d4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02b      	beq.n	8005326 <HAL_GPIO_DeInit+0xba>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005444 <HAL_GPIO_DeInit+0x1d8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d025      	beq.n	8005322 <HAL_GPIO_DeInit+0xb6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a5b      	ldr	r2, [pc, #364]	@ (8005448 <HAL_GPIO_DeInit+0x1dc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01f      	beq.n	800531e <HAL_GPIO_DeInit+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a5a      	ldr	r2, [pc, #360]	@ (800544c <HAL_GPIO_DeInit+0x1e0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d019      	beq.n	800531a <HAL_GPIO_DeInit+0xae>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a59      	ldr	r2, [pc, #356]	@ (8005450 <HAL_GPIO_DeInit+0x1e4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_GPIO_DeInit+0xaa>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a58      	ldr	r2, [pc, #352]	@ (8005454 <HAL_GPIO_DeInit+0x1e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00d      	beq.n	8005312 <HAL_GPIO_DeInit+0xa6>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a57      	ldr	r2, [pc, #348]	@ (8005458 <HAL_GPIO_DeInit+0x1ec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_GPIO_DeInit+0xa2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a56      	ldr	r2, [pc, #344]	@ (800545c <HAL_GPIO_DeInit+0x1f0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_GPIO_DeInit+0x9e>
 8005306:	2307      	movs	r3, #7
 8005308:	e00e      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 800530a:	2308      	movs	r3, #8
 800530c:	e00c      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 800530e:	2306      	movs	r3, #6
 8005310:	e00a      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 8005312:	2305      	movs	r3, #5
 8005314:	e008      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 8005316:	2304      	movs	r3, #4
 8005318:	e006      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 800531a:	2303      	movs	r3, #3
 800531c:	e004      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 800531e:	2302      	movs	r3, #2
 8005320:	e002      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_GPIO_DeInit+0xbc>
 8005326:	2300      	movs	r3, #0
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	f002 0203 	and.w	r2, r2, #3
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	4093      	lsls	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	d132      	bne.n	800539e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005338:	4b49      	ldr	r3, [pc, #292]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	43db      	mvns	r3, r3
 8005340:	4947      	ldr	r1, [pc, #284]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 8005342:	4013      	ands	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005346:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	43db      	mvns	r3, r3
 800534e:	4944      	ldr	r1, [pc, #272]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 8005350:	4013      	ands	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005354:	4b42      	ldr	r3, [pc, #264]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43db      	mvns	r3, r3
 800535c:	4940      	ldr	r1, [pc, #256]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 800535e:	4013      	ands	r3, r2
 8005360:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005362:	4b3f      	ldr	r3, [pc, #252]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	43db      	mvns	r3, r3
 800536a:	493d      	ldr	r1, [pc, #244]	@ (8005460 <HAL_GPIO_DeInit+0x1f4>)
 800536c:	4013      	ands	r3, r2
 800536e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	220f      	movs	r2, #15
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005380:	4a2e      	ldr	r2, [pc, #184]	@ (800543c <HAL_GPIO_DeInit+0x1d0>)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	3302      	adds	r3, #2
 8005388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	43da      	mvns	r2, r3
 8005390:	482a      	ldr	r0, [pc, #168]	@ (800543c <HAL_GPIO_DeInit+0x1d0>)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	400a      	ands	r2, r1
 8005398:	3302      	adds	r3, #2
 800539a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2103      	movs	r1, #3
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	08da      	lsrs	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3208      	adds	r2, #8
 80053bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	220f      	movs	r2, #15
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	08d2      	lsrs	r2, r2, #3
 80053d4:	4019      	ands	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2103      	movs	r1, #3
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	401a      	ands	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	2101      	movs	r1, #1
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	401a      	ands	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	2103      	movs	r1, #3
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	401a      	ands	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	3301      	adds	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	f67f af2e 	bls.w	8005288 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40013800 	.word	0x40013800
 8005440:	40020000 	.word	0x40020000
 8005444:	40020400 	.word	0x40020400
 8005448:	40020800 	.word	0x40020800
 800544c:	40020c00 	.word	0x40020c00
 8005450:	40021000 	.word	0x40021000
 8005454:	40021400 	.word	0x40021400
 8005458:	40021800 	.word	0x40021800
 800545c:	40021c00 	.word	0x40021c00
 8005460:	40013c00 	.word	0x40013c00

08005464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e001      	b.n	8005486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
 80054a0:	4613      	mov	r3, r2
 80054a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054a4:	787b      	ldrb	r3, [r7, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054b0:	e003      	b.n	80054ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054b2:	887b      	ldrh	r3, [r7, #2]
 80054b4:	041a      	lsls	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	619a      	str	r2, [r3, #24]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e12b      	b.n	8005732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc ff90 	bl	8002414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	@ 0x24
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800551a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800552a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800552c:	f001 f8ea 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8005530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4a81      	ldr	r2, [pc, #516]	@ (800573c <HAL_I2C_Init+0x274>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d807      	bhi.n	800554c <HAL_I2C_Init+0x84>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a80      	ldr	r2, [pc, #512]	@ (8005740 <HAL_I2C_Init+0x278>)
 8005540:	4293      	cmp	r3, r2
 8005542:	bf94      	ite	ls
 8005544:	2301      	movls	r3, #1
 8005546:	2300      	movhi	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	e006      	b.n	800555a <HAL_I2C_Init+0x92>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a7d      	ldr	r2, [pc, #500]	@ (8005744 <HAL_I2C_Init+0x27c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	bf94      	ite	ls
 8005554:	2301      	movls	r3, #1
 8005556:	2300      	movhi	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0e7      	b.n	8005732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a78      	ldr	r2, [pc, #480]	@ (8005748 <HAL_I2C_Init+0x280>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0c9b      	lsrs	r3, r3, #18
 800556c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a6a      	ldr	r2, [pc, #424]	@ (800573c <HAL_I2C_Init+0x274>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d802      	bhi.n	800559c <HAL_I2C_Init+0xd4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3301      	adds	r3, #1
 800559a:	e009      	b.n	80055b0 <HAL_I2C_Init+0xe8>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	4a69      	ldr	r2, [pc, #420]	@ (800574c <HAL_I2C_Init+0x284>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	3301      	adds	r3, #1
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	495c      	ldr	r1, [pc, #368]	@ (800573c <HAL_I2C_Init+0x274>)
 80055cc:	428b      	cmp	r3, r1
 80055ce:	d819      	bhi.n	8005604 <HAL_I2C_Init+0x13c>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e59      	subs	r1, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	fbb1 f3f3 	udiv	r3, r1, r3
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055e4:	400b      	ands	r3, r1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_I2C_Init+0x138>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e59      	subs	r1, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f8:	3301      	adds	r3, #1
 80055fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fe:	e051      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005600:	2304      	movs	r3, #4
 8005602:	e04f      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d111      	bne.n	8005630 <HAL_I2C_Init+0x168>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e58      	subs	r0, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e012      	b.n	8005656 <HAL_I2C_Init+0x18e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1e58      	subs	r0, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6859      	ldr	r1, [r3, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	0099      	lsls	r1, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Init+0x196>
 800565a:	2301      	movs	r3, #1
 800565c:	e022      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10e      	bne.n	8005684 <HAL_I2C_Init+0x1bc>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1e58      	subs	r0, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	440b      	add	r3, r1
 8005674:	fbb0 f3f3 	udiv	r3, r0, r3
 8005678:	3301      	adds	r3, #1
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005682:	e00f      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	0099      	lsls	r1, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	fbb0 f3f3 	udiv	r3, r0, r3
 800569a:	3301      	adds	r3, #1
 800569c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	6809      	ldr	r1, [r1, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6911      	ldr	r1, [r2, #16]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68d2      	ldr	r2, [r2, #12]
 80056de:	4311      	orrs	r1, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	000186a0 	.word	0x000186a0
 8005740:	001e847f 	.word	0x001e847f
 8005744:	003d08ff 	.word	0x003d08ff
 8005748:	431bde83 	.word	0x431bde83
 800574c:	10624dd3 	.word	0x10624dd3

08005750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800576a:	f7fe f809 	bl	8003780 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b20      	cmp	r3, #32
 800577a:	f040 80d9 	bne.w	8005930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2319      	movs	r3, #25
 8005784:	2201      	movs	r2, #1
 8005786:	496d      	ldr	r1, [pc, #436]	@ (800593c <HAL_I2C_Mem_Write+0x1ec>)
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f971 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
 8005796:	e0cc      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2C_Mem_Write+0x56>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0c5      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d007      	beq.n	80057cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2221      	movs	r2, #33	@ 0x21
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2240      	movs	r2, #64	@ 0x40
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a4d      	ldr	r2, [pc, #308]	@ (8005940 <HAL_I2C_Mem_Write+0x1f0>)
 800580c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580e:	88f8      	ldrh	r0, [r7, #6]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	8979      	ldrh	r1, [r7, #10]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4603      	mov	r3, r0
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f890 	bl	8005944 <I2C_RequestMemoryWrite>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d052      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e081      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fa36 	bl	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	2b04      	cmp	r3, #4
 8005844:	d107      	bne.n	8005856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06b      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d11b      	bne.n	80058d0 <HAL_I2C_Mem_Write+0x180>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1aa      	bne.n	800582e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa29 	bl	8005d34 <I2C_WaitOnBTFFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d107      	bne.n	8005900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e016      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	00100002 	.word	0x00100002
 8005940:	ffff0000 	.word	0xffff0000

08005944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800596c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2200      	movs	r2, #0
 8005976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f878 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005994:	d103      	bne.n	800599e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800599c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e05f      	b.n	8005a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059a2:	897b      	ldrh	r3, [r7, #10]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	492d      	ldr	r1, [pc, #180]	@ (8005a6c <I2C_RequestMemoryWrite+0x128>)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f8d3 	bl	8005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e04c      	b.n	8005a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e0:	6a39      	ldr	r1, [r7, #32]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f95e 	bl	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d107      	bne.n	8005a06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e02b      	b.n	8005a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a10:	893b      	ldrh	r3, [r7, #8]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	611a      	str	r2, [r3, #16]
 8005a1a:	e021      	b.n	8005a60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a1c:	893b      	ldrh	r3, [r7, #8]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f938 	bl	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d107      	bne.n	8005a52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e005      	b.n	8005a62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a56:	893b      	ldrh	r3, [r7, #8]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	00010002 	.word	0x00010002

08005a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a80:	e048      	b.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d044      	beq.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fd fe79 	bl	8003780 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d139      	bne.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10d      	bne.n	8005ac6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	43da      	mvns	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	e00c      	b.n	8005ae0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	43da      	mvns	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d116      	bne.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	f043 0220 	orr.w	r2, r3, #32
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e023      	b.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10d      	bne.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	43da      	mvns	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	e00c      	b.n	8005b54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	43da      	mvns	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4013      	ands	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d093      	beq.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b72:	e071      	b.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b82:	d123      	bne.n	8005bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e067      	b.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d041      	beq.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd4:	f7fd fdd4 	bl	8003780 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d136      	bne.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10c      	bne.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e00b      	b.n	8005c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d016      	beq.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e021      	b.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10c      	bne.n	8005c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	43da      	mvns	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e00b      	b.n	8005c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	43da      	mvns	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f af6d 	bne.w	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb0:	e034      	b.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f886 	bl	8005dc4 <I2C_IsAcknowledgeFailed>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e034      	b.n	8005d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d028      	beq.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fd fd59 	bl	8003780 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d11d      	bne.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cea:	2b80      	cmp	r3, #128	@ 0x80
 8005cec:	d016      	beq.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e007      	b.n	8005d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b80      	cmp	r3, #128	@ 0x80
 8005d28:	d1c3      	bne.n	8005cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d40:	e034      	b.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f83e 	bl	8005dc4 <I2C_IsAcknowledgeFailed>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e034      	b.n	8005dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d028      	beq.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5a:	f7fd fd11 	bl	8003780 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11d      	bne.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d016      	beq.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e007      	b.n	8005dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d1c3      	bne.n	8005d42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dda:	d11b      	bne.n	8005e14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005de4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	f043 0204 	orr.w	r2, r3, #4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e267      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d075      	beq.n	8005f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e42:	4b88      	ldr	r3, [pc, #544]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d00c      	beq.n	8005e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e4e:	4b85      	ldr	r3, [pc, #532]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d112      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b82      	ldr	r3, [pc, #520]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	4b7e      	ldr	r3, [pc, #504]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05b      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d157      	bne.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e242      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_OscConfig+0x74>
 8005e8a:	4b76      	ldr	r3, [pc, #472]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a75      	ldr	r2, [pc, #468]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e01d      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x98>
 8005ea2:	4b70      	ldr	r3, [pc, #448]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b6d      	ldr	r3, [pc, #436]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	4b69      	ldr	r3, [pc, #420]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b66      	ldr	r3, [pc, #408]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a65      	ldr	r2, [pc, #404]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fd fc50 	bl	8003780 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee4:	f7fd fc4c 	bl	8003780 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	@ 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e207      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f04:	f7fd fc3c 	bl	8003780 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fc38 	bl	8003780 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1f3      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1e:	4b51      	ldr	r3, [pc, #324]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d063      	beq.n	8006002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d11c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b44      	ldr	r3, [pc, #272]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5e:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e1c7      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f76:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4937      	ldr	r1, [pc, #220]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8a:	e03a      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d020      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f94:	4b34      	ldr	r3, [pc, #208]	@ (8006068 <HAL_RCC_OscConfig+0x244>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fd fbf1 	bl	8003780 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa2:	f7fd fbed 	bl	8003780 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e1a8      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc0:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4925      	ldr	r1, [pc, #148]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	600b      	str	r3, [r1, #0]
 8005fd4:	e015      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd6:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <HAL_RCC_OscConfig+0x244>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fd fbd0 	bl	8003780 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe4:	f7fd fbcc 	bl	8003780 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e187      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d036      	beq.n	800607c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006016:	4b15      	ldr	r3, [pc, #84]	@ (800606c <HAL_RCC_OscConfig+0x248>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fd fbb0 	bl	8003780 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006024:	f7fd fbac 	bl	8003780 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e167      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006036:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x240>)
 8006038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCC_OscConfig+0x200>
 8006042:	e01b      	b.n	800607c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006044:	4b09      	ldr	r3, [pc, #36]	@ (800606c <HAL_RCC_OscConfig+0x248>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604a:	f7fd fb99 	bl	8003780 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	e00e      	b.n	8006070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006052:	f7fd fb95 	bl	8003780 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d907      	bls.n	8006070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e150      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006064:	40023800 	.word	0x40023800
 8006068:	42470000 	.word	0x42470000
 800606c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b88      	ldr	r3, [pc, #544]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ea      	bne.n	8006052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8097 	beq.w	80061b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4b81      	ldr	r3, [pc, #516]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	4b7d      	ldr	r3, [pc, #500]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b77      	ldr	r3, [pc, #476]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d118      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c6:	4b74      	ldr	r3, [pc, #464]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d2:	f7fd fb55 	bl	8003780 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060da:	f7fd fb51 	bl	8003780 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e10c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <HAL_RCC_OscConfig+0x474>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d106      	bne.n	800610e <HAL_RCC_OscConfig+0x2ea>
 8006100:	4b64      	ldr	r3, [pc, #400]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a63      	ldr	r2, [pc, #396]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
 800610c:	e01c      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d10c      	bne.n	8006130 <HAL_RCC_OscConfig+0x30c>
 8006116:	4b5f      	ldr	r3, [pc, #380]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	4a5e      	ldr	r2, [pc, #376]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	6713      	str	r3, [r2, #112]	@ 0x70
 8006122:	4b5c      	ldr	r3, [pc, #368]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	4a5b      	ldr	r2, [pc, #364]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	@ 0x70
 800612e:	e00b      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 8006130:	4b58      	ldr	r3, [pc, #352]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006134:	4a57      	ldr	r2, [pc, #348]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	@ 0x70
 800613c:	4b55      	ldr	r3, [pc, #340]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006140:	4a54      	ldr	r2, [pc, #336]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0304 	bic.w	r3, r3, #4
 8006146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d015      	beq.n	800617c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fd fb16 	bl	8003780 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	e00a      	b.n	800616e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006158:	f7fd fb12 	bl	8003780 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0cb      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616e:	4b49      	ldr	r3, [pc, #292]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ee      	beq.n	8006158 <HAL_RCC_OscConfig+0x334>
 800617a:	e014      	b.n	80061a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800617c:	f7fd fb00 	bl	8003780 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	e00a      	b.n	800619a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f7fd fafc 	bl	8003780 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e0b5      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800619a:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ee      	bne.n	8006184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d105      	bne.n	80061b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ac:	4b39      	ldr	r3, [pc, #228]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	4a38      	ldr	r2, [pc, #224]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a1 	beq.w	8006304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c2:	4b34      	ldr	r3, [pc, #208]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d05c      	beq.n	8006288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d141      	bne.n	800625a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d6:	4b31      	ldr	r3, [pc, #196]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fd fad0 	bl	8003780 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fd facc 	bl	8003780 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e087      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f6:	4b27      	ldr	r3, [pc, #156]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	491b      	ldr	r1, [pc, #108]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800622c:	4b1b      	ldr	r3, [pc, #108]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fd faa5 	bl	8003780 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623a:	f7fd faa1 	bl	8003780 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e05c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624c:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x416>
 8006258:	e054      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <HAL_RCC_OscConfig+0x478>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd fa8e 	bl	8003780 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fd fa8a 	bl	8003780 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e045      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627a:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <HAL_RCC_OscConfig+0x470>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x444>
 8006286:	e03d      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e038      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_RCC_OscConfig+0x4ec>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d028      	beq.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d121      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d11a      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d8:	4293      	cmp	r3, r2
 80062da:	d111      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	3b01      	subs	r3, #1
 80062ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800

08006314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0cc      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006328:	4b68      	ldr	r3, [pc, #416]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d90c      	bls.n	8006350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b65      	ldr	r3, [pc, #404]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b63      	ldr	r3, [pc, #396]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0b8      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006368:	4b59      	ldr	r3, [pc, #356]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a58      	ldr	r2, [pc, #352]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006380:	4b53      	ldr	r3, [pc, #332]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4a52      	ldr	r2, [pc, #328]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800638a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800638c:	4b50      	ldr	r3, [pc, #320]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	494d      	ldr	r1, [pc, #308]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d044      	beq.n	8006434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	4b47      	ldr	r3, [pc, #284]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d119      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e07f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d107      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d2:	4b3f      	ldr	r3, [pc, #252]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e06f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e2:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e067      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0203 	bic.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4934      	ldr	r1, [pc, #208]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006404:	f7fd f9bc 	bl	8003780 <HAL_GetTick>
 8006408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	e00a      	b.n	8006422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640c:	f7fd f9b8 	bl	8003780 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e04f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006422:	4b2b      	ldr	r3, [pc, #172]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 020c 	and.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	429a      	cmp	r2, r3
 8006432:	d1eb      	bne.n	800640c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006434:	4b25      	ldr	r3, [pc, #148]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d20c      	bcs.n	800645c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b22      	ldr	r3, [pc, #136]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e032      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006468:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4916      	ldr	r1, [pc, #88]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006486:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	490e      	ldr	r1, [pc, #56]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	4313      	orrs	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800649a:	f000 f821 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	490a      	ldr	r1, [pc, #40]	@ (80064d4 <HAL_RCC_ClockConfig+0x1c0>)
 80064ac:	5ccb      	ldrb	r3, [r1, r3]
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	4a09      	ldr	r2, [pc, #36]	@ (80064d8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064b6:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <HAL_RCC_ClockConfig+0x1c8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fc f87c 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40023c00 	.word	0x40023c00
 80064d0:	40023800 	.word	0x40023800
 80064d4:	0800e224 	.word	0x0800e224
 80064d8:	20000000 	.word	0x20000000
 80064dc:	20000004 	.word	0x20000004

080064e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e4:	b094      	sub	sp, #80	@ 0x50
 80064e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f8:	4b79      	ldr	r3, [pc, #484]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d00d      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x40>
 8006504:	2b08      	cmp	r3, #8
 8006506:	f200 80e1 	bhi.w	80066cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x34>
 800650e:	2b04      	cmp	r3, #4
 8006510:	d003      	beq.n	800651a <HAL_RCC_GetSysClockFreq+0x3a>
 8006512:	e0db      	b.n	80066cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006514:	4b73      	ldr	r3, [pc, #460]	@ (80066e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006518:	e0db      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800651a:	4b73      	ldr	r3, [pc, #460]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800651c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800651e:	e0d8      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006520:	4b6f      	ldr	r3, [pc, #444]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006528:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800652a:	4b6d      	ldr	r3, [pc, #436]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d063      	beq.n	80065fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006536:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	2200      	movs	r2, #0
 800653e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006540:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006548:	633b      	str	r3, [r7, #48]	@ 0x30
 800654a:	2300      	movs	r3, #0
 800654c:	637b      	str	r3, [r7, #52]	@ 0x34
 800654e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f04f 0000 	mov.w	r0, #0
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	0159      	lsls	r1, r3, #5
 8006560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006564:	0150      	lsls	r0, r2, #5
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4621      	mov	r1, r4
 800656c:	1a51      	subs	r1, r2, r1
 800656e:	6139      	str	r1, [r7, #16]
 8006570:	4629      	mov	r1, r5
 8006572:	eb63 0301 	sbc.w	r3, r3, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006584:	4659      	mov	r1, fp
 8006586:	018b      	lsls	r3, r1, #6
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800658e:	4651      	mov	r1, sl
 8006590:	018a      	lsls	r2, r1, #6
 8006592:	4651      	mov	r1, sl
 8006594:	ebb2 0801 	subs.w	r8, r2, r1
 8006598:	4659      	mov	r1, fp
 800659a:	eb63 0901 	sbc.w	r9, r3, r1
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065b2:	4690      	mov	r8, r2
 80065b4:	4699      	mov	r9, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	eb18 0303 	adds.w	r3, r8, r3
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	462b      	mov	r3, r5
 80065c0:	eb49 0303 	adc.w	r3, r9, r3
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065d2:	4629      	mov	r1, r5
 80065d4:	024b      	lsls	r3, r1, #9
 80065d6:	4621      	mov	r1, r4
 80065d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065dc:	4621      	mov	r1, r4
 80065de:	024a      	lsls	r2, r1, #9
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e6:	2200      	movs	r2, #0
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065f0:	f7fa fb2a 	bl	8000c48 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4613      	mov	r3, r2
 80065fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065fc:	e058      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fe:	4b38      	ldr	r3, [pc, #224]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	099b      	lsrs	r3, r3, #6
 8006604:	2200      	movs	r2, #0
 8006606:	4618      	mov	r0, r3
 8006608:	4611      	mov	r1, r2
 800660a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	2300      	movs	r3, #0
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
 8006614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	f04f 0000 	mov.w	r0, #0
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	0159      	lsls	r1, r3, #5
 8006626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800662a:	0150      	lsls	r0, r2, #5
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4641      	mov	r1, r8
 8006632:	ebb2 0a01 	subs.w	sl, r2, r1
 8006636:	4649      	mov	r1, r9
 8006638:	eb63 0b01 	sbc.w	fp, r3, r1
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800664c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006650:	ebb2 040a 	subs.w	r4, r2, sl
 8006654:	eb63 050b 	sbc.w	r5, r3, fp
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	00eb      	lsls	r3, r5, #3
 8006662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006666:	00e2      	lsls	r2, r4, #3
 8006668:	4614      	mov	r4, r2
 800666a:	461d      	mov	r5, r3
 800666c:	4643      	mov	r3, r8
 800666e:	18e3      	adds	r3, r4, r3
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	464b      	mov	r3, r9
 8006674:	eb45 0303 	adc.w	r3, r5, r3
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006686:	4629      	mov	r1, r5
 8006688:	028b      	lsls	r3, r1, #10
 800668a:	4621      	mov	r1, r4
 800668c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006690:	4621      	mov	r1, r4
 8006692:	028a      	lsls	r2, r1, #10
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669a:	2200      	movs	r2, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	61fa      	str	r2, [r7, #28]
 80066a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a4:	f7fa fad0 	bl	8000c48 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4613      	mov	r3, r2
 80066ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066b0:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	3301      	adds	r3, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066ca:	e002      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3750      	adds	r7, #80	@ 0x50
 80066d8:	46bd      	mov	sp, r7
 80066da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	007a1200 	.word	0x007a1200

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000000 	.word	0x20000000

08006704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006708:	f7ff fff0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4903      	ldr	r1, [pc, #12]	@ (8006728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800
 8006728:	0800e234 	.word	0x0800e234

0800672c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006730:	f7ff ffdc 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b05      	ldr	r3, [pc, #20]	@ (800674c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	0b5b      	lsrs	r3, r3, #13
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4903      	ldr	r1, [pc, #12]	@ (8006750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40023800 	.word	0x40023800
 8006750:	0800e234 	.word	0x0800e234

08006754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	220f      	movs	r2, #15
 8006762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006764:	4b12      	ldr	r3, [pc, #72]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0203 	and.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006770:	4b0f      	ldr	r3, [pc, #60]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006788:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <HAL_RCC_GetClockConfig+0x60>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0207 	and.w	r2, r3, #7
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e041      	b.n	800684e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fb fe60 	bl	80024a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f000 fae6 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e046      	b.n	80068fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a23      	ldr	r2, [pc, #140]	@ (800690c <HAL_TIM_Base_Start+0xb4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d022      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688a:	d01d      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <HAL_TIM_Base_Start+0xb8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1e      	ldr	r2, [pc, #120]	@ (8006914 <HAL_TIM_Base_Start+0xbc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006918 <HAL_TIM_Base_Start+0xc0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00e      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1b      	ldr	r2, [pc, #108]	@ (800691c <HAL_TIM_Base_Start+0xc4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a19      	ldr	r2, [pc, #100]	@ (8006920 <HAL_TIM_Base_Start+0xc8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_TIM_Base_Start+0x70>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <HAL_TIM_Base_Start+0xcc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d111      	bne.n	80068ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d010      	beq.n	80068fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	e007      	b.n	80068fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40001800 	.word	0x40001800

08006928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d001      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e04e      	b.n	80069de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a23      	ldr	r2, [pc, #140]	@ (80069ec <HAL_TIM_Base_Start_IT+0xc4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d022      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696a:	d01d      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d018      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1e      	ldr	r2, [pc, #120]	@ (80069f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d013      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d009      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a19      	ldr	r2, [pc, #100]	@ (8006a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x80>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a18      	ldr	r2, [pc, #96]	@ (8006a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d111      	bne.n	80069cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d010      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	e007      	b.n	80069dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40010400 	.word	0x40010400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40001800 	.word	0x40001800

08006a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d020      	beq.n	8006a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0202 	mvn.w	r2, #2
 8006a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f999 	bl	8006d8a <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f98b 	bl	8006d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f99c 	bl	8006d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d020      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01b      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0204 	mvn.w	r2, #4
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f973 	bl	8006d8a <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f965 	bl	8006d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f976 	bl	8006d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d020      	beq.n	8006b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01b      	beq.n	8006b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0208 	mvn.w	r2, #8
 8006ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f94d 	bl	8006d8a <HAL_TIM_IC_CaptureCallback>
 8006af0:	e005      	b.n	8006afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f93f 	bl	8006d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f950 	bl	8006d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d020      	beq.n	8006b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01b      	beq.n	8006b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0210 	mvn.w	r2, #16
 8006b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2208      	movs	r2, #8
 8006b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f927 	bl	8006d8a <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f919 	bl	8006d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f92a 	bl	8006d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0201 	mvn.w	r2, #1
 8006b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fb fb30 	bl	80021d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fade 	bl	8007154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00c      	beq.n	8006bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8fb 	bl	8006db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00c      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0220 	mvn.w	r2, #32
 8006bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fab0 	bl	8007140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIM_ConfigClockSource+0x1c>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e0b4      	b.n	8006d6e <HAL_TIM_ConfigClockSource+0x186>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3c:	d03e      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0xd4>
 8006c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c42:	f200 8087 	bhi.w	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4a:	f000 8086 	beq.w	8006d5a <HAL_TIM_ConfigClockSource+0x172>
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c52:	d87f      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c54:	2b70      	cmp	r3, #112	@ 0x70
 8006c56:	d01a      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0xa6>
 8006c58:	2b70      	cmp	r3, #112	@ 0x70
 8006c5a:	d87b      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c5c:	2b60      	cmp	r3, #96	@ 0x60
 8006c5e:	d050      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x11a>
 8006c60:	2b60      	cmp	r3, #96	@ 0x60
 8006c62:	d877      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b50      	cmp	r3, #80	@ 0x50
 8006c66:	d03c      	beq.n	8006ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c68:	2b50      	cmp	r3, #80	@ 0x50
 8006c6a:	d873      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b40      	cmp	r3, #64	@ 0x40
 8006c6e:	d058      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x13a>
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d86f      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b30      	cmp	r3, #48	@ 0x30
 8006c76:	d064      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x15a>
 8006c78:	2b30      	cmp	r3, #48	@ 0x30
 8006c7a:	d86b      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d060      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x15a>
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d867      	bhi.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d05c      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x15a>
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d05a      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x15a>
 8006c8c:	e062      	b.n	8006d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c9e:	f000 f9b3 	bl	8007008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	609a      	str	r2, [r3, #8]
      break;
 8006cba:	e04f      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ccc:	f000 f99c 	bl	8007008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cde:	609a      	str	r2, [r3, #8]
      break;
 8006ce0:	e03c      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f000 f910 	bl	8006f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2150      	movs	r1, #80	@ 0x50
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f969 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d00:	e02c      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f000 f92f 	bl	8006f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2160      	movs	r1, #96	@ 0x60
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f959 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d20:	e01c      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f000 f8f0 	bl	8006f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2140      	movs	r1, #64	@ 0x40
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f949 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d40:	e00c      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f000 f940 	bl	8006fd2 <TIM_ITRx_SetConfig>
      break;
 8006d52:	e003      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      break;
 8006d58:	e000      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a43      	ldr	r2, [pc, #268]	@ (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d013      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	d00f      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a40      	ldr	r2, [pc, #256]	@ (8006eec <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ef0 <TIM_Base_SetConfig+0x128>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d007      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef4 <TIM_Base_SetConfig+0x12c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d108      	bne.n	8006e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a32      	ldr	r2, [pc, #200]	@ (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e28:	d027      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006eec <TIM_Base_SetConfig+0x124>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d023      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef0 <TIM_Base_SetConfig+0x128>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01f      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef4 <TIM_Base_SetConfig+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d017      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006efc <TIM_Base_SetConfig+0x134>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2a      	ldr	r2, [pc, #168]	@ (8006f00 <TIM_Base_SetConfig+0x138>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00f      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a29      	ldr	r2, [pc, #164]	@ (8006f04 <TIM_Base_SetConfig+0x13c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00b      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a28      	ldr	r2, [pc, #160]	@ (8006f08 <TIM_Base_SetConfig+0x140>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a27      	ldr	r2, [pc, #156]	@ (8006f0c <TIM_Base_SetConfig+0x144>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a26      	ldr	r2, [pc, #152]	@ (8006f10 <TIM_Base_SetConfig+0x148>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d108      	bne.n	8006e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee8 <TIM_Base_SetConfig+0x120>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_Base_SetConfig+0xf2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a10      	ldr	r2, [pc, #64]	@ (8006ef8 <TIM_Base_SetConfig+0x130>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d103      	bne.n	8006ec2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f043 0204 	orr.w	r2, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	601a      	str	r2, [r3, #0]
}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40010000 	.word	0x40010000
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	40000800 	.word	0x40000800
 8006ef4:	40000c00 	.word	0x40000c00
 8006ef8:	40010400 	.word	0x40010400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800
 8006f08:	40001800 	.word	0x40001800
 8006f0c:	40001c00 	.word	0x40001c00
 8006f10:	40002000 	.word	0x40002000

08006f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 030a 	bic.w	r3, r3, #10
 8006f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f023 0210 	bic.w	r2, r3, #16
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f043 0307 	orr.w	r3, r3, #7
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	609a      	str	r2, [r3, #8]
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	431a      	orrs	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4313      	orrs	r3, r2
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e05a      	b.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a21      	ldr	r2, [pc, #132]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ac:	d01d      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a18      	ldr	r2, [pc, #96]	@ (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a15      	ldr	r2, [pc, #84]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10c      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e042      	b.n	8007200 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb f9a8 	bl	80024e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	@ 0x24
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f973 	bl	8007498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	@ 0x28
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b20      	cmp	r3, #32
 8007226:	d175      	bne.n	8007314 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_UART_Transmit+0x2c>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e06e      	b.n	8007316 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2221      	movs	r2, #33	@ 0x21
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007246:	f7fc fa9b 	bl	8003780 <HAL_GetTick>
 800724a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	88fa      	ldrh	r2, [r7, #6]
 8007256:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007260:	d108      	bne.n	8007274 <HAL_UART_Transmit+0x6c>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e003      	b.n	800727c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800727c:	e02e      	b.n	80072dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2180      	movs	r1, #128	@ 0x80
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f848 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e03a      	b.n	8007316 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	3302      	adds	r3, #2
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e007      	b.n	80072ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1cb      	bne.n	800727e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2140      	movs	r1, #64	@ 0x40
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f814 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e006      	b.n	8007316 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	e000      	b.n	8007316 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	e03b      	b.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d037      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007338:	f7fc fa22 	bl	8003780 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	6a3a      	ldr	r2, [r7, #32]
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <UART_WaitOnFlagUntilTimeout+0x30>
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e03a      	b.n	80073c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d023      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b80      	cmp	r3, #128	@ 0x80
 8007364:	d020      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d01d      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b08      	cmp	r3, #8
 8007378:	d116      	bne.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f81d 	bl	80073d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2208      	movs	r2, #8
 800739a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e00f      	b.n	80073c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4013      	ands	r3, r2
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bf0c      	ite	eq
 80073b8:	2301      	moveq	r3, #1
 80073ba:	2300      	movne	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d0b4      	beq.n	8007330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b095      	sub	sp, #84	@ 0x54
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3314      	adds	r3, #20
 8007412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	61fb      	str	r3, [r7, #28]
   return(result);
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800742c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800742e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	2b01      	cmp	r3, #1
 8007446:	d119      	bne.n	800747c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60bb      	str	r3, [r7, #8]
   return(result);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	330c      	adds	r3, #12
 8007466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007468:	61ba      	str	r2, [r7, #24]
 800746a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800748a:	bf00      	nop
 800748c:	3754      	adds	r7, #84	@ 0x54
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800749c:	b0c0      	sub	sp, #256	@ 0x100
 800749e:	af00      	add	r7, sp, #0
 80074a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b4:	68d9      	ldr	r1, [r3, #12]
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	ea40 0301 	orr.w	r3, r0, r1
 80074c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074f0:	f021 010c 	bic.w	r1, r1, #12
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074fe:	430b      	orrs	r3, r1
 8007500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007512:	6999      	ldr	r1, [r3, #24]
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	ea40 0301 	orr.w	r3, r0, r1
 800751e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b8f      	ldr	r3, [pc, #572]	@ (8007764 <UART_SetConfig+0x2cc>)
 8007528:	429a      	cmp	r2, r3
 800752a:	d005      	beq.n	8007538 <UART_SetConfig+0xa0>
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b8d      	ldr	r3, [pc, #564]	@ (8007768 <UART_SetConfig+0x2d0>)
 8007534:	429a      	cmp	r2, r3
 8007536:	d104      	bne.n	8007542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7ff f8f8 	bl	800672c <HAL_RCC_GetPCLK2Freq>
 800753c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007540:	e003      	b.n	800754a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007542:	f7ff f8df 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8007546:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007554:	f040 810c 	bne.w	8007770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755c:	2200      	movs	r2, #0
 800755e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007562:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	1891      	adds	r1, r2, r2
 8007570:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007572:	415b      	adcs	r3, r3
 8007574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800757a:	4621      	mov	r1, r4
 800757c:	eb12 0801 	adds.w	r8, r2, r1
 8007580:	4629      	mov	r1, r5
 8007582:	eb43 0901 	adc.w	r9, r3, r1
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800759a:	4690      	mov	r8, r2
 800759c:	4699      	mov	r9, r3
 800759e:	4623      	mov	r3, r4
 80075a0:	eb18 0303 	adds.w	r3, r8, r3
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075a8:	462b      	mov	r3, r5
 80075aa:	eb49 0303 	adc.w	r3, r9, r3
 80075ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075c6:	460b      	mov	r3, r1
 80075c8:	18db      	adds	r3, r3, r3
 80075ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80075cc:	4613      	mov	r3, r2
 80075ce:	eb42 0303 	adc.w	r3, r2, r3
 80075d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075dc:	f7f9 fb34 	bl	8000c48 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b61      	ldr	r3, [pc, #388]	@ (800776c <UART_SetConfig+0x2d4>)
 80075e6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	011c      	lsls	r4, r3, #4
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007608:	415b      	adcs	r3, r3
 800760a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007610:	4641      	mov	r1, r8
 8007612:	eb12 0a01 	adds.w	sl, r2, r1
 8007616:	4649      	mov	r1, r9
 8007618:	eb43 0b01 	adc.w	fp, r3, r1
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800762c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007630:	4692      	mov	sl, r2
 8007632:	469b      	mov	fp, r3
 8007634:	4643      	mov	r3, r8
 8007636:	eb1a 0303 	adds.w	r3, sl, r3
 800763a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800763e:	464b      	mov	r3, r9
 8007640:	eb4b 0303 	adc.w	r3, fp, r3
 8007644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007654:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800765c:	460b      	mov	r3, r1
 800765e:	18db      	adds	r3, r3, r3
 8007660:	643b      	str	r3, [r7, #64]	@ 0x40
 8007662:	4613      	mov	r3, r2
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	647b      	str	r3, [r7, #68]	@ 0x44
 800766a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800766e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007672:	f7f9 fae9 	bl	8000c48 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4611      	mov	r1, r2
 800767c:	4b3b      	ldr	r3, [pc, #236]	@ (800776c <UART_SetConfig+0x2d4>)
 800767e:	fba3 2301 	umull	r2, r3, r3, r1
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	2264      	movs	r2, #100	@ 0x64
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	1acb      	subs	r3, r1, r3
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007692:	4b36      	ldr	r3, [pc, #216]	@ (800776c <UART_SetConfig+0x2d4>)
 8007694:	fba3 2302 	umull	r2, r3, r3, r2
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076a0:	441c      	add	r4, r3
 80076a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	1891      	adds	r1, r2, r2
 80076ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076bc:	415b      	adcs	r3, r3
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076c4:	4641      	mov	r1, r8
 80076c6:	1851      	adds	r1, r2, r1
 80076c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80076ca:	4649      	mov	r1, r9
 80076cc:	414b      	adcs	r3, r1
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076dc:	4659      	mov	r1, fp
 80076de:	00cb      	lsls	r3, r1, #3
 80076e0:	4651      	mov	r1, sl
 80076e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e6:	4651      	mov	r1, sl
 80076e8:	00ca      	lsls	r2, r1, #3
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	4642      	mov	r2, r8
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076f8:	464b      	mov	r3, r9
 80076fa:	460a      	mov	r2, r1
 80076fc:	eb42 0303 	adc.w	r3, r2, r3
 8007700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007710:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007718:	460b      	mov	r3, r1
 800771a:	18db      	adds	r3, r3, r3
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800771e:	4613      	mov	r3, r2
 8007720:	eb42 0303 	adc.w	r3, r2, r3
 8007724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800772a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800772e:	f7f9 fa8b 	bl	8000c48 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <UART_SetConfig+0x2d4>)
 8007738:	fba3 1302 	umull	r1, r3, r3, r2
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	2164      	movs	r1, #100	@ 0x64
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	3332      	adds	r3, #50	@ 0x32
 800774a:	4a08      	ldr	r2, [pc, #32]	@ (800776c <UART_SetConfig+0x2d4>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f003 0207 	and.w	r2, r3, #7
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4422      	add	r2, r4
 800775e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007760:	e106      	b.n	8007970 <UART_SetConfig+0x4d8>
 8007762:	bf00      	nop
 8007764:	40011000 	.word	0x40011000
 8007768:	40011400 	.word	0x40011400
 800776c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007774:	2200      	movs	r2, #0
 8007776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800777a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800777e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007782:	4642      	mov	r2, r8
 8007784:	464b      	mov	r3, r9
 8007786:	1891      	adds	r1, r2, r2
 8007788:	6239      	str	r1, [r7, #32]
 800778a:	415b      	adcs	r3, r3
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
 800778e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007792:	4641      	mov	r1, r8
 8007794:	1854      	adds	r4, r2, r1
 8007796:	4649      	mov	r1, r9
 8007798:	eb43 0501 	adc.w	r5, r3, r1
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	00eb      	lsls	r3, r5, #3
 80077a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077aa:	00e2      	lsls	r2, r4, #3
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	18e3      	adds	r3, r4, r3
 80077b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077b8:	464b      	mov	r3, r9
 80077ba:	eb45 0303 	adc.w	r3, r5, r3
 80077be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077de:	4629      	mov	r1, r5
 80077e0:	008b      	lsls	r3, r1, #2
 80077e2:	4621      	mov	r1, r4
 80077e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e8:	4621      	mov	r1, r4
 80077ea:	008a      	lsls	r2, r1, #2
 80077ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077f0:	f7f9 fa2a 	bl	8000c48 <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4b60      	ldr	r3, [pc, #384]	@ (800797c <UART_SetConfig+0x4e4>)
 80077fa:	fba3 2302 	umull	r2, r3, r3, r2
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	011c      	lsls	r4, r3, #4
 8007802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007806:	2200      	movs	r2, #0
 8007808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800780c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	1891      	adds	r1, r2, r2
 800781a:	61b9      	str	r1, [r7, #24]
 800781c:	415b      	adcs	r3, r3
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007824:	4641      	mov	r1, r8
 8007826:	1851      	adds	r1, r2, r1
 8007828:	6139      	str	r1, [r7, #16]
 800782a:	4649      	mov	r1, r9
 800782c:	414b      	adcs	r3, r1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800783c:	4659      	mov	r1, fp
 800783e:	00cb      	lsls	r3, r1, #3
 8007840:	4651      	mov	r1, sl
 8007842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007846:	4651      	mov	r1, sl
 8007848:	00ca      	lsls	r2, r1, #3
 800784a:	4610      	mov	r0, r2
 800784c:	4619      	mov	r1, r3
 800784e:	4603      	mov	r3, r0
 8007850:	4642      	mov	r2, r8
 8007852:	189b      	adds	r3, r3, r2
 8007854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007858:	464b      	mov	r3, r9
 800785a:	460a      	mov	r2, r1
 800785c:	eb42 0303 	adc.w	r3, r2, r3
 8007860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800786e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800787c:	4649      	mov	r1, r9
 800787e:	008b      	lsls	r3, r1, #2
 8007880:	4641      	mov	r1, r8
 8007882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007886:	4641      	mov	r1, r8
 8007888:	008a      	lsls	r2, r1, #2
 800788a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800788e:	f7f9 f9db 	bl	8000c48 <__aeabi_uldivmod>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4611      	mov	r1, r2
 8007898:	4b38      	ldr	r3, [pc, #224]	@ (800797c <UART_SetConfig+0x4e4>)
 800789a:	fba3 2301 	umull	r2, r3, r3, r1
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	2264      	movs	r2, #100	@ 0x64
 80078a2:	fb02 f303 	mul.w	r3, r2, r3
 80078a6:	1acb      	subs	r3, r1, r3
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	3332      	adds	r3, #50	@ 0x32
 80078ac:	4a33      	ldr	r2, [pc, #204]	@ (800797c <UART_SetConfig+0x4e4>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078b8:	441c      	add	r4, r3
 80078ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078be:	2200      	movs	r2, #0
 80078c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80078c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80078c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	1891      	adds	r1, r2, r2
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	415b      	adcs	r3, r3
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d8:	4641      	mov	r1, r8
 80078da:	1851      	adds	r1, r2, r1
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	4649      	mov	r1, r9
 80078e0:	414b      	adcs	r3, r1
 80078e2:	607b      	str	r3, [r7, #4]
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078f0:	4659      	mov	r1, fp
 80078f2:	00cb      	lsls	r3, r1, #3
 80078f4:	4651      	mov	r1, sl
 80078f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078fa:	4651      	mov	r1, sl
 80078fc:	00ca      	lsls	r2, r1, #3
 80078fe:	4610      	mov	r0, r2
 8007900:	4619      	mov	r1, r3
 8007902:	4603      	mov	r3, r0
 8007904:	4642      	mov	r2, r8
 8007906:	189b      	adds	r3, r3, r2
 8007908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800790a:	464b      	mov	r3, r9
 800790c:	460a      	mov	r2, r1
 800790e:	eb42 0303 	adc.w	r3, r2, r3
 8007912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	663b      	str	r3, [r7, #96]	@ 0x60
 800791e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800792c:	4649      	mov	r1, r9
 800792e:	008b      	lsls	r3, r1, #2
 8007930:	4641      	mov	r1, r8
 8007932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007936:	4641      	mov	r1, r8
 8007938:	008a      	lsls	r2, r1, #2
 800793a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800793e:	f7f9 f983 	bl	8000c48 <__aeabi_uldivmod>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <UART_SetConfig+0x4e4>)
 8007948:	fba3 1302 	umull	r1, r3, r3, r2
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	2164      	movs	r1, #100	@ 0x64
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	3332      	adds	r3, #50	@ 0x32
 800795a:	4a08      	ldr	r2, [pc, #32]	@ (800797c <UART_SetConfig+0x4e4>)
 800795c:	fba2 2303 	umull	r2, r3, r2, r3
 8007960:	095b      	lsrs	r3, r3, #5
 8007962:	f003 020f 	and.w	r2, r3, #15
 8007966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4422      	add	r2, r4
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007976:	46bd      	mov	sp, r7
 8007978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800797c:	51eb851f 	.word	0x51eb851f

08007980 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800798e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007992:	2b84      	cmp	r3, #132	@ 0x84
 8007994:	d005      	beq.n	80079a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	3303      	adds	r3, #3
 80079a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80079b4:	f000 ff08 	bl	80087c8 <vTaskStartScheduler>
  
  return osOK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	bd80      	pop	{r7, pc}

080079be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80079be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c0:	b089      	sub	sp, #36	@ 0x24
 80079c2:	af04      	add	r7, sp, #16
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d020      	beq.n	8007a12 <osThreadCreate+0x54>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01c      	beq.n	8007a12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685c      	ldr	r4, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691e      	ldr	r6, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff ffc8 	bl	8007980 <makeFreeRtosPriority>
 80079f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079fa:	9202      	str	r2, [sp, #8]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	9100      	str	r1, [sp, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	4632      	mov	r2, r6
 8007a04:	4629      	mov	r1, r5
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fcf8 	bl	80083fc <xTaskCreateStatic>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e01c      	b.n	8007a4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685c      	ldr	r4, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff ffaa 	bl	8007980 <makeFreeRtosPriority>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f107 030c 	add.w	r3, r7, #12
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	9200      	str	r2, [sp, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fd3d 	bl	80084bc <xTaskCreate>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d001      	beq.n	8007a4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <osDelay+0x16>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	e000      	b.n	8007a6e <osDelay+0x18>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fe74 	bl	800875c <vTaskDelay>
  
  return osOK;
 8007a74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f103 0208 	add.w	r2, r3, #8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f103 0208 	add.w	r2, r3, #8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f103 0208 	add.w	r2, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d103      	bne.n	8007b40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	e00c      	b.n	8007b5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3308      	adds	r3, #8
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e002      	b.n	8007b4e <vListInsert+0x2e>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d2f6      	bcs.n	8007b48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6892      	ldr	r2, [r2, #8]
 8007ba8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6852      	ldr	r2, [r2, #4]
 8007bb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d103      	bne.n	8007bc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1e5a      	subs	r2, r3, #1
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10b      	bne.n	8007c14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c14:	f001 fef0 	bl	80099f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c44:	3b01      	subs	r3, #1
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c4a:	fb01 f303 	mul.w	r3, r1, r3
 8007c4e:	441a      	add	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	22ff      	movs	r2, #255	@ 0xff
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	22ff      	movs	r2, #255	@ 0xff
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d114      	bne.n	8007c94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01a      	beq.n	8007ca8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3310      	adds	r3, #16
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f800 	bl	8008c7c <xTaskRemoveFromEventList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d012      	beq.n	8007ca8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <xQueueGenericReset+0xd0>)
 8007c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	e009      	b.n	8007ca8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3310      	adds	r3, #16
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fef0 	bl	8007a7e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3324      	adds	r3, #36	@ 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff feeb 	bl	8007a7e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ca8:	f001 fed8 	bl	8009a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cac:	2301      	movs	r3, #1
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	@ 0x28
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	613b      	str	r3, [r7, #16]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
 8007cf0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	3348      	adds	r3, #72	@ 0x48
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 ffa0 	bl	8009c3c <pvPortMalloc>
 8007cfc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d011      	beq.n	8007d28 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	3348      	adds	r3, #72	@ 0x48
 8007d0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d16:	79fa      	ldrb	r2, [r7, #7]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f805 	bl	8007d32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d28:	69bb      	ldr	r3, [r7, #24]
	}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d103      	bne.n	8007d4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	e002      	b.n	8007d54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d60:	2101      	movs	r1, #1
 8007d62:	69b8      	ldr	r0, [r7, #24]
 8007d64:	f7ff ff40 	bl	8007be8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00e      	beq.n	8007d9c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d90:	2300      	movs	r3, #0
 8007d92:	2200      	movs	r2, #0
 8007d94:	2100      	movs	r1, #0
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f81c 	bl	8007dd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6939      	ldr	r1, [r7, #16]
 8007dbc:	6978      	ldr	r0, [r7, #20]
 8007dbe:	f7ff ff7d 	bl	8007cbc <xQueueGenericCreate>
 8007dc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff ffd3 	bl	8007d70 <prvInitialiseMutex>

		return xNewQueue;
 8007dca:	68fb      	ldr	r3, [r7, #12]
	}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08e      	sub	sp, #56	@ 0x38
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007de2:	2300      	movs	r3, #0
 8007de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <xQueueGenericSend+0x34>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <xQueueGenericSend+0x42>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericSend+0x46>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericSend+0x48>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <xQueueGenericSend+0x64>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d103      	bne.n	8007e46 <xQueueGenericSend+0x72>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <xQueueGenericSend+0x76>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <xQueueGenericSend+0x78>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <xQueueGenericSend+0x94>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	623b      	str	r3, [r7, #32]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e68:	f001 f8ce 	bl	8009008 <xTaskGetSchedulerState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <xQueueGenericSend+0xa4>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <xQueueGenericSend+0xa8>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <xQueueGenericSend+0xaa>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <xQueueGenericSend+0xc6>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	61fb      	str	r3, [r7, #28]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e9a:	f001 fdad 	bl	80099f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d302      	bcc.n	8007eb0 <xQueueGenericSend+0xdc>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d129      	bne.n	8007f04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eb6:	f000 f9b7 	bl	8008228 <prvCopyDataToQueue>
 8007eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d010      	beq.n	8007ee6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec6:	3324      	adds	r3, #36	@ 0x24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fed7 	bl	8008c7c <xTaskRemoveFromEventList>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fd4 <xQueueGenericSend+0x200>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	e00a      	b.n	8007efc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eec:	4b39      	ldr	r3, [pc, #228]	@ (8007fd4 <xQueueGenericSend+0x200>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007efc:	f001 fdae 	bl	8009a5c <vPortExitCritical>
				return pdPASS;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e063      	b.n	8007fcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f0a:	f001 fda7 	bl	8009a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e05c      	b.n	8007fcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 ff11 	bl	8008d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f26:	f001 fd99 	bl	8009a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f2a:	f000 fcb7 	bl	800889c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f2e:	f001 fd63 	bl	80099f8 <vPortEnterCritical>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d103      	bne.n	8007f48 <xQueueGenericSend+0x174>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d103      	bne.n	8007f5e <xQueueGenericSend+0x18a>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f5e:	f001 fd7d 	bl	8009a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f62:	1d3a      	adds	r2, r7, #4
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 ff00 	bl	8008d70 <xTaskCheckForTimeOut>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d124      	bne.n	8007fc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f78:	f000 fa28 	bl	80083cc <prvIsQueueFull>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d018      	beq.n	8007fb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	3310      	adds	r3, #16
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fe50 	bl	8008c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f92:	f000 f9b3 	bl	80082fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f96:	f000 fc8f 	bl	80088b8 <xTaskResumeAll>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f af7c 	bne.w	8007e9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <xQueueGenericSend+0x200>)
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	e772      	b.n	8007e9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fb6:	f000 f9a1 	bl	80082fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fba:	f000 fc7d 	bl	80088b8 <xTaskResumeAll>
 8007fbe:	e76c      	b.n	8007e9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc2:	f000 f99b 	bl	80082fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fc6:	f000 fc77 	bl	80088b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3738      	adds	r7, #56	@ 0x38
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	@ 0x38
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	623b      	str	r3, [r7, #32]
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61fb      	str	r3, [r7, #28]
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	e7fd      	b.n	8008028 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800802c:	f000 ffec 	bl	8009008 <xTaskGetSchedulerState>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <xQueueSemaphoreTake+0x64>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <xQueueSemaphoreTake+0x68>
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <xQueueSemaphoreTake+0x6a>
 8008040:	2300      	movs	r3, #0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	61bb      	str	r3, [r7, #24]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800805e:	f001 fccb 	bl	80099f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008066:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d024      	beq.n	80080b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	1e5a      	subs	r2, r3, #1
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800807e:	f001 f96f 	bl	8009360 <pvTaskIncrementMutexHeldCount>
 8008082:	4602      	mov	r2, r0
 8008084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008086:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00f      	beq.n	80080b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	3310      	adds	r3, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fdf1 	bl	8008c7c <xTaskRemoveFromEventList>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080a0:	4b54      	ldr	r3, [pc, #336]	@ (80081f4 <xQueueSemaphoreTake+0x21c>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080b0:	f001 fcd4 	bl	8009a5c <vPortExitCritical>
				return pdPASS;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e098      	b.n	80081ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d112      	bne.n	80080e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	617b      	str	r3, [r7, #20]
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080dc:	f001 fcbe 	bl	8009a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e082      	b.n	80081ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fe28 	bl	8008d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080f8:	f001 fcb0 	bl	8009a5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080fc:	f000 fbce 	bl	800889c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008100:	f001 fc7a 	bl	80099f8 <vPortEnterCritical>
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800810a:	b25b      	sxtb	r3, r3
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d103      	bne.n	800811a <xQueueSemaphoreTake+0x142>
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008120:	b25b      	sxtb	r3, r3
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d103      	bne.n	8008130 <xQueueSemaphoreTake+0x158>
 8008128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008130:	f001 fc94 	bl	8009a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008134:	463a      	mov	r2, r7
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fe17 	bl	8008d70 <xTaskCheckForTimeOut>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d132      	bne.n	80081ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008148:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800814a:	f000 f929 	bl	80083a0 <prvIsQueueEmpty>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d026      	beq.n	80081a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800815c:	f001 fc4c 	bl	80099f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	4618      	mov	r0, r3
 8008166:	f000 ff6d 	bl	8009044 <xTaskPriorityInherit>
 800816a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800816c:	f001 fc76 	bl	8009a5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	3324      	adds	r3, #36	@ 0x24
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fd59 	bl	8008c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800817e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008180:	f000 f8bc 	bl	80082fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008184:	f000 fb98 	bl	80088b8 <xTaskResumeAll>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	f47f af67 	bne.w	800805e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008190:	4b18      	ldr	r3, [pc, #96]	@ (80081f4 <xQueueSemaphoreTake+0x21c>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	e75d      	b.n	800805e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081a4:	f000 f8aa 	bl	80082fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081a8:	f000 fb86 	bl	80088b8 <xTaskResumeAll>
 80081ac:	e757      	b.n	800805e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081b0:	f000 f8a4 	bl	80082fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081b4:	f000 fb80 	bl	80088b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081ba:	f000 f8f1 	bl	80083a0 <prvIsQueueEmpty>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f43f af4c 	beq.w	800805e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00d      	beq.n	80081e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80081cc:	f001 fc14 	bl	80099f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081d2:	f000 f811 	bl	80081f8 <prvGetDisinheritPriorityAfterTimeout>
 80081d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 f82e 	bl	8009240 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081e4:	f001 fc3a 	bl	8009a5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3738      	adds	r7, #56	@ 0x38
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1c3 0307 	rsb	r3, r3, #7
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e001      	b.n	800821a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800821a:	68fb      	ldr	r3, [r7, #12]
	}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10d      	bne.n	8008262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d14d      	bne.n	80082ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 ff6c 	bl	8009130 <xTaskPriorityDisinherit>
 8008258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	e043      	b.n	80082ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d119      	bne.n	800829c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6858      	ldr	r0, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008270:	461a      	mov	r2, r3
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	f002 fd57 	bl	800ad26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	429a      	cmp	r2, r3
 8008290:	d32b      	bcc.n	80082ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	e026      	b.n	80082ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68d8      	ldr	r0, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	461a      	mov	r2, r3
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	f002 fd3d 	bl	800ad26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	425b      	negs	r3, r3
 80082b6:	441a      	add	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d207      	bcs.n	80082d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d0:	425b      	negs	r3, r3
 80082d2:	441a      	add	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d105      	bne.n	80082ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80082f2:	697b      	ldr	r3, [r7, #20]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008304:	f001 fb78 	bl	80099f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800830e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008310:	e011      	b.n	8008336 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d012      	beq.n	8008340 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3324      	adds	r3, #36	@ 0x24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fcac 	bl	8008c7c <xTaskRemoveFromEventList>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800832a:	f000 fd85 	bl	8008e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	3b01      	subs	r3, #1
 8008332:	b2db      	uxtb	r3, r3
 8008334:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dce9      	bgt.n	8008312 <prvUnlockQueue+0x16>
 800833e:	e000      	b.n	8008342 <prvUnlockQueue+0x46>
					break;
 8008340:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	22ff      	movs	r2, #255	@ 0xff
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800834a:	f001 fb87 	bl	8009a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800834e:	f001 fb53 	bl	80099f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008358:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800835a:	e011      	b.n	8008380 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3310      	adds	r3, #16
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fc87 	bl	8008c7c <xTaskRemoveFromEventList>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008374:	f000 fd60 	bl	8008e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	3b01      	subs	r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	dce9      	bgt.n	800835c <prvUnlockQueue+0x60>
 8008388:	e000      	b.n	800838c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800838a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	22ff      	movs	r2, #255	@ 0xff
 8008390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008394:	f001 fb62 	bl	8009a5c <vPortExitCritical>
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a8:	f001 fb26 	bl	80099f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e001      	b.n	80083be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083be:	f001 fb4d 	bl	8009a5c <vPortExitCritical>

	return xReturn;
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d4:	f001 fb10 	bl	80099f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d102      	bne.n	80083ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e001      	b.n	80083ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ee:	f001 fb35 	bl	8009a5c <vPortExitCritical>

	return xReturn;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	@ 0x38
 8008400:	af04      	add	r7, sp, #16
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800840a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	623b      	str	r3, [r7, #32]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10b      	bne.n	8008446 <xTaskCreateStatic+0x4a>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	61fb      	str	r3, [r7, #28]
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	e7fd      	b.n	8008442 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008446:	23a0      	movs	r3, #160	@ 0xa0
 8008448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2ba0      	cmp	r3, #160	@ 0xa0
 800844e:	d00b      	beq.n	8008468 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	61bb      	str	r3, [r7, #24]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800846a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01e      	beq.n	80084ae <xTaskCreateStatic+0xb2>
 8008470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01b      	beq.n	80084ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800847e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	2202      	movs	r2, #2
 8008484:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008488:	2300      	movs	r3, #0
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f851 	bl	8008548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084a8:	f000 f8ee 	bl	8008688 <prvAddNewTaskToReadyList>
 80084ac:	e001      	b.n	80084b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084b2:	697b      	ldr	r3, [r7, #20]
	}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3728      	adds	r7, #40	@ 0x28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08c      	sub	sp, #48	@ 0x30
 80084c0:	af04      	add	r7, sp, #16
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 fbb3 	bl	8009c3c <pvPortMalloc>
 80084d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084de:	20a0      	movs	r0, #160	@ 0xa0
 80084e0:	f001 fbac 	bl	8009c3c <pvPortMalloc>
 80084e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80084f2:	e005      	b.n	8008500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084f4:	6978      	ldr	r0, [r7, #20]
 80084f6:	f001 fc6f 	bl	8009dd8 <vPortFree>
 80084fa:	e001      	b.n	8008500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d017      	beq.n	8008536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800850e:	88fa      	ldrh	r2, [r7, #6]
 8008510:	2300      	movs	r3, #0
 8008512:	9303      	str	r3, [sp, #12]
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	9302      	str	r3, [sp, #8]
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f80f 	bl	8008548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800852a:	69f8      	ldr	r0, [r7, #28]
 800852c:	f000 f8ac 	bl	8008688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008530:	2301      	movs	r3, #1
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e002      	b.n	800853c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008536:	f04f 33ff 	mov.w	r3, #4294967295
 800853a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800853c:	69bb      	ldr	r3, [r7, #24]
	}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008560:	3b01      	subs	r3, #1
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	f023 0307 	bic.w	r3, r3, #7
 800856e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	617b      	str	r3, [r7, #20]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01f      	beq.n	80085d8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]
 800859c:	e012      	b.n	80085c4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	7819      	ldrb	r1, [r3, #0]
 80085a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	3334      	adds	r3, #52	@ 0x34
 80085ae:	460a      	mov	r2, r1
 80085b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	4413      	add	r3, r2
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d006      	beq.n	80085cc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	3301      	adds	r3, #1
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d9e9      	bls.n	800859e <prvInitialiseNewTask+0x56>
 80085ca:	e000      	b.n	80085ce <prvInitialiseNewTask+0x86>
			{
				break;
 80085cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085d6:	e003      	b.n	80085e0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	2b06      	cmp	r3, #6
 80085e4:	d901      	bls.n	80085ea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085e6:	2306      	movs	r3, #6
 80085e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085f4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	2200      	movs	r2, #0
 80085fa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fa5c 	bl	8007abe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	3318      	adds	r3, #24
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff fa57 	bl	8007abe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	f1c3 0207 	rsb	r2, r3, #7
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008630:	2200      	movs	r2, #0
 8008632:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	334c      	adds	r3, #76	@ 0x4c
 800863a:	224c      	movs	r2, #76	@ 0x4c
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f002 fa9b 	bl	800ab7a <memset>
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <prvInitialiseNewTask+0x134>)
 8008648:	651a      	str	r2, [r3, #80]	@ 0x50
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	4a0c      	ldr	r2, [pc, #48]	@ (8008680 <prvInitialiseNewTask+0x138>)
 800864e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	4a0c      	ldr	r2, [pc, #48]	@ (8008684 <prvInitialiseNewTask+0x13c>)
 8008654:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	68f9      	ldr	r1, [r7, #12]
 800865a:	69b8      	ldr	r0, [r7, #24]
 800865c:	f001 f89e 	bl	800979c <pxPortInitialiseStack>
 8008660:	4602      	mov	r2, r0
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008672:	bf00      	nop
 8008674:	3720      	adds	r7, #32
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20004b14 	.word	0x20004b14
 8008680:	20004b7c 	.word	0x20004b7c
 8008684:	20004be4 	.word	0x20004be4

08008688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008690:	f001 f9b2 	bl	80099f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008694:	4b2a      	ldr	r3, [pc, #168]	@ (8008740 <prvAddNewTaskToReadyList+0xb8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	4a29      	ldr	r2, [pc, #164]	@ (8008740 <prvAddNewTaskToReadyList+0xb8>)
 800869c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800869e:	4b29      	ldr	r3, [pc, #164]	@ (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086a6:	4a27      	ldr	r2, [pc, #156]	@ (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086ac:	4b24      	ldr	r3, [pc, #144]	@ (8008740 <prvAddNewTaskToReadyList+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d110      	bne.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086b4:	f000 fbe4 	bl	8008e80 <prvInitialiseTaskLists>
 80086b8:	e00d      	b.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086ba:	4b23      	ldr	r3, [pc, #140]	@ (8008748 <prvAddNewTaskToReadyList+0xc0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086c2:	4b20      	ldr	r3, [pc, #128]	@ (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d802      	bhi.n	80086d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008744 <prvAddNewTaskToReadyList+0xbc>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086d6:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <prvAddNewTaskToReadyList+0xc4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a1b      	ldr	r2, [pc, #108]	@ (800874c <prvAddNewTaskToReadyList+0xc4>)
 80086de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	2201      	movs	r2, #1
 80086e6:	409a      	lsls	r2, r3
 80086e8:	4b19      	ldr	r3, [pc, #100]	@ (8008750 <prvAddNewTaskToReadyList+0xc8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	4a18      	ldr	r2, [pc, #96]	@ (8008750 <prvAddNewTaskToReadyList+0xc8>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <prvAddNewTaskToReadyList+0xcc>)
 8008700:	441a      	add	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f7ff f9e5 	bl	8007ad8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800870e:	f001 f9a5 	bl	8009a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008712:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <prvAddNewTaskToReadyList+0xc0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00e      	beq.n	8008738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800871a:	4b0a      	ldr	r3, [pc, #40]	@ (8008744 <prvAddNewTaskToReadyList+0xbc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008724:	429a      	cmp	r2, r3
 8008726:	d207      	bcs.n	8008738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008728:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <prvAddNewTaskToReadyList+0xd0>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000ec0 	.word	0x20000ec0
 8008744:	20000dc0 	.word	0x20000dc0
 8008748:	20000ecc 	.word	0x20000ecc
 800874c:	20000edc 	.word	0x20000edc
 8008750:	20000ec8 	.word	0x20000ec8
 8008754:	20000dc4 	.word	0x20000dc4
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d018      	beq.n	80087a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800876e:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <vTaskDelay+0x64>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <vTaskDelay+0x32>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	60bb      	str	r3, [r7, #8]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800878e:	f000 f885 	bl	800889c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 ff9b 	bl	80096d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800879a:	f000 f88d 	bl	80088b8 <xTaskResumeAll>
 800879e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d107      	bne.n	80087b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087a6:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <vTaskDelay+0x68>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000ee8 	.word	0x20000ee8
 80087c4:	e000ed04 	.word	0xe000ed04

080087c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087d6:	463a      	mov	r2, r7
 80087d8:	1d39      	adds	r1, r7, #4
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f8 ff50 	bl	8001684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	9202      	str	r2, [sp, #8]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	460a      	mov	r2, r1
 80087f6:	4921      	ldr	r1, [pc, #132]	@ (800887c <vTaskStartScheduler+0xb4>)
 80087f8:	4821      	ldr	r0, [pc, #132]	@ (8008880 <vTaskStartScheduler+0xb8>)
 80087fa:	f7ff fdff 	bl	80083fc <xTaskCreateStatic>
 80087fe:	4603      	mov	r3, r0
 8008800:	4a20      	ldr	r2, [pc, #128]	@ (8008884 <vTaskStartScheduler+0xbc>)
 8008802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008804:	4b1f      	ldr	r3, [pc, #124]	@ (8008884 <vTaskStartScheduler+0xbc>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800880c:	2301      	movs	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e001      	b.n	8008816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11b      	bne.n	8008854 <vTaskStartScheduler+0x8c>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	613b      	str	r3, [r7, #16]
}
 800882e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008830:	4b15      	ldr	r3, [pc, #84]	@ (8008888 <vTaskStartScheduler+0xc0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	334c      	adds	r3, #76	@ 0x4c
 8008836:	4a15      	ldr	r2, [pc, #84]	@ (800888c <vTaskStartScheduler+0xc4>)
 8008838:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800883a:	4b15      	ldr	r3, [pc, #84]	@ (8008890 <vTaskStartScheduler+0xc8>)
 800883c:	f04f 32ff 	mov.w	r2, #4294967295
 8008840:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008842:	4b14      	ldr	r3, [pc, #80]	@ (8008894 <vTaskStartScheduler+0xcc>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008848:	4b13      	ldr	r3, [pc, #76]	@ (8008898 <vTaskStartScheduler+0xd0>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800884e:	f001 f82f 	bl	80098b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008852:	e00f      	b.n	8008874 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d10b      	bne.n	8008874 <vTaskStartScheduler+0xac>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60fb      	str	r3, [r7, #12]
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	e7fd      	b.n	8008870 <vTaskStartScheduler+0xa8>
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	0800d4a8 	.word	0x0800d4a8
 8008880:	08008e51 	.word	0x08008e51
 8008884:	20000ee4 	.word	0x20000ee4
 8008888:	20000dc0 	.word	0x20000dc0
 800888c:	2000001c 	.word	0x2000001c
 8008890:	20000ee0 	.word	0x20000ee0
 8008894:	20000ecc 	.word	0x20000ecc
 8008898:	20000ec4 	.word	0x20000ec4

0800889c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088a0:	4b04      	ldr	r3, [pc, #16]	@ (80088b4 <vTaskSuspendAll+0x18>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a03      	ldr	r2, [pc, #12]	@ (80088b4 <vTaskSuspendAll+0x18>)
 80088a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088aa:	bf00      	nop
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	20000ee8 	.word	0x20000ee8

080088b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088c6:	4b42      	ldr	r3, [pc, #264]	@ (80089d0 <xTaskResumeAll+0x118>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088e6:	f001 f887 	bl	80099f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ea:	4b39      	ldr	r3, [pc, #228]	@ (80089d0 <xTaskResumeAll+0x118>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4a37      	ldr	r2, [pc, #220]	@ (80089d0 <xTaskResumeAll+0x118>)
 80088f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f4:	4b36      	ldr	r3, [pc, #216]	@ (80089d0 <xTaskResumeAll+0x118>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d161      	bne.n	80089c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088fc:	4b35      	ldr	r3, [pc, #212]	@ (80089d4 <xTaskResumeAll+0x11c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05d      	beq.n	80089c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008904:	e02e      	b.n	8008964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008906:	4b34      	ldr	r3, [pc, #208]	@ (80089d8 <xTaskResumeAll+0x120>)
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3318      	adds	r3, #24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f93d 	bl	8007b92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff f938 	bl	8007b92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	2201      	movs	r2, #1
 8008928:	409a      	lsls	r2, r3
 800892a:	4b2c      	ldr	r3, [pc, #176]	@ (80089dc <xTaskResumeAll+0x124>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4313      	orrs	r3, r2
 8008930:	4a2a      	ldr	r2, [pc, #168]	@ (80089dc <xTaskResumeAll+0x124>)
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4a27      	ldr	r2, [pc, #156]	@ (80089e0 <xTaskResumeAll+0x128>)
 8008942:	441a      	add	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3304      	adds	r3, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f7ff f8c4 	bl	8007ad8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008954:	4b23      	ldr	r3, [pc, #140]	@ (80089e4 <xTaskResumeAll+0x12c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	429a      	cmp	r2, r3
 800895c:	d302      	bcc.n	8008964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800895e:	4b22      	ldr	r3, [pc, #136]	@ (80089e8 <xTaskResumeAll+0x130>)
 8008960:	2201      	movs	r2, #1
 8008962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008964:	4b1c      	ldr	r3, [pc, #112]	@ (80089d8 <xTaskResumeAll+0x120>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1cc      	bne.n	8008906 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008972:	f000 fb29 	bl	8008fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008976:	4b1d      	ldr	r3, [pc, #116]	@ (80089ec <xTaskResumeAll+0x134>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d010      	beq.n	80089a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008982:	f000 f837 	bl	80089f4 <xTaskIncrementTick>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800898c:	4b16      	ldr	r3, [pc, #88]	@ (80089e8 <xTaskResumeAll+0x130>)
 800898e:	2201      	movs	r2, #1
 8008990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3b01      	subs	r3, #1
 8008996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f1      	bne.n	8008982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800899e:	4b13      	ldr	r3, [pc, #76]	@ (80089ec <xTaskResumeAll+0x134>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089a4:	4b10      	ldr	r3, [pc, #64]	@ (80089e8 <xTaskResumeAll+0x130>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <xTaskResumeAll+0x138>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c0:	f001 f84c 	bl	8009a5c <vPortExitCritical>

	return xAlreadyYielded;
 80089c4:	68bb      	ldr	r3, [r7, #8]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000ee8 	.word	0x20000ee8
 80089d4:	20000ec0 	.word	0x20000ec0
 80089d8:	20000e80 	.word	0x20000e80
 80089dc:	20000ec8 	.word	0x20000ec8
 80089e0:	20000dc4 	.word	0x20000dc4
 80089e4:	20000dc0 	.word	0x20000dc0
 80089e8:	20000ed4 	.word	0x20000ed4
 80089ec:	20000ed0 	.word	0x20000ed0
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fe:	4b4f      	ldr	r3, [pc, #316]	@ (8008b3c <xTaskIncrementTick+0x148>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 808f 	bne.w	8008b26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a08:	4b4d      	ldr	r3, [pc, #308]	@ (8008b40 <xTaskIncrementTick+0x14c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a10:	4a4b      	ldr	r2, [pc, #300]	@ (8008b40 <xTaskIncrementTick+0x14c>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d121      	bne.n	8008a60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a1c:	4b49      	ldr	r3, [pc, #292]	@ (8008b44 <xTaskIncrementTick+0x150>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	603b      	str	r3, [r7, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <xTaskIncrementTick+0x46>
 8008a3e:	4b41      	ldr	r3, [pc, #260]	@ (8008b44 <xTaskIncrementTick+0x150>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	4b40      	ldr	r3, [pc, #256]	@ (8008b48 <xTaskIncrementTick+0x154>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a3e      	ldr	r2, [pc, #248]	@ (8008b44 <xTaskIncrementTick+0x150>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b48 <xTaskIncrementTick+0x154>)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	4b3e      	ldr	r3, [pc, #248]	@ (8008b4c <xTaskIncrementTick+0x158>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3301      	adds	r3, #1
 8008a58:	4a3c      	ldr	r2, [pc, #240]	@ (8008b4c <xTaskIncrementTick+0x158>)
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	f000 fab4 	bl	8008fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a60:	4b3b      	ldr	r3, [pc, #236]	@ (8008b50 <xTaskIncrementTick+0x15c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d348      	bcc.n	8008afc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6a:	4b36      	ldr	r3, [pc, #216]	@ (8008b44 <xTaskIncrementTick+0x150>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a74:	4b36      	ldr	r3, [pc, #216]	@ (8008b50 <xTaskIncrementTick+0x15c>)
 8008a76:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7a:	601a      	str	r2, [r3, #0]
					break;
 8008a7c:	e03e      	b.n	8008afc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7e:	4b31      	ldr	r3, [pc, #196]	@ (8008b44 <xTaskIncrementTick+0x150>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d203      	bcs.n	8008a9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a96:	4a2e      	ldr	r2, [pc, #184]	@ (8008b50 <xTaskIncrementTick+0x15c>)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a9c:	e02e      	b.n	8008afc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff f875 	bl	8007b92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3318      	adds	r3, #24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff f86c 	bl	8007b92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	2201      	movs	r2, #1
 8008ac0:	409a      	lsls	r2, r3
 8008ac2:	4b24      	ldr	r3, [pc, #144]	@ (8008b54 <xTaskIncrementTick+0x160>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	4a22      	ldr	r2, [pc, #136]	@ (8008b54 <xTaskIncrementTick+0x160>)
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b58 <xTaskIncrementTick+0x164>)
 8008ada:	441a      	add	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f7fe fff8 	bl	8007ad8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aec:	4b1b      	ldr	r3, [pc, #108]	@ (8008b5c <xTaskIncrementTick+0x168>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d3b9      	bcc.n	8008a6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008afa:	e7b6      	b.n	8008a6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008afc:	4b17      	ldr	r3, [pc, #92]	@ (8008b5c <xTaskIncrementTick+0x168>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	4915      	ldr	r1, [pc, #84]	@ (8008b58 <xTaskIncrementTick+0x164>)
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d901      	bls.n	8008b18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b18:	4b11      	ldr	r3, [pc, #68]	@ (8008b60 <xTaskIncrementTick+0x16c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e004      	b.n	8008b30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b26:	4b0f      	ldr	r3, [pc, #60]	@ (8008b64 <xTaskIncrementTick+0x170>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b64 <xTaskIncrementTick+0x170>)
 8008b2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b30:	697b      	ldr	r3, [r7, #20]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000ee8 	.word	0x20000ee8
 8008b40:	20000ec4 	.word	0x20000ec4
 8008b44:	20000e78 	.word	0x20000e78
 8008b48:	20000e7c 	.word	0x20000e7c
 8008b4c:	20000ed8 	.word	0x20000ed8
 8008b50:	20000ee0 	.word	0x20000ee0
 8008b54:	20000ec8 	.word	0x20000ec8
 8008b58:	20000dc4 	.word	0x20000dc4
 8008b5c:	20000dc0 	.word	0x20000dc0
 8008b60:	20000ed4 	.word	0x20000ed4
 8008b64:	20000ed0 	.word	0x20000ed0

08008b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008c18 <vTaskSwitchContext+0xb0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b76:	4b29      	ldr	r3, [pc, #164]	@ (8008c1c <vTaskSwitchContext+0xb4>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b7c:	e045      	b.n	8008c0a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008b7e:	4b27      	ldr	r3, [pc, #156]	@ (8008c1c <vTaskSwitchContext+0xb4>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b84:	4b26      	ldr	r3, [pc, #152]	@ (8008c20 <vTaskSwitchContext+0xb8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	fab3 f383 	clz	r3, r3
 8008b90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	f1c3 031f 	rsb	r3, r3, #31
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	4922      	ldr	r1, [pc, #136]	@ (8008c24 <vTaskSwitchContext+0xbc>)
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <vTaskSwitchContext+0x5a>
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a14      	ldr	r2, [pc, #80]	@ (8008c24 <vTaskSwitchContext+0xbc>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	3308      	adds	r3, #8
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d104      	bne.n	8008bf6 <vTaskSwitchContext+0x8e>
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <vTaskSwitchContext+0xc0>)
 8008bfe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c00:	4b09      	ldr	r3, [pc, #36]	@ (8008c28 <vTaskSwitchContext+0xc0>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	334c      	adds	r3, #76	@ 0x4c
 8008c06:	4a09      	ldr	r2, [pc, #36]	@ (8008c2c <vTaskSwitchContext+0xc4>)
 8008c08:	6013      	str	r3, [r2, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000ee8 	.word	0x20000ee8
 8008c1c:	20000ed4 	.word	0x20000ed4
 8008c20:	20000ec8 	.word	0x20000ec8
 8008c24:	20000dc4 	.word	0x20000dc4
 8008c28:	20000dc0 	.word	0x20000dc0
 8008c2c:	2000001c 	.word	0x2000001c

08008c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <vTaskPlaceOnEventList+0x48>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3318      	adds	r3, #24
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fe ff5d 	bl	8007b20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c66:	2101      	movs	r1, #1
 8008c68:	6838      	ldr	r0, [r7, #0]
 8008c6a:	f000 fd31 	bl	80096d0 <prvAddCurrentTaskToDelayedList>
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000dc0 	.word	0x20000dc0

08008c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10b      	bne.n	8008caa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60fb      	str	r3, [r7, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3318      	adds	r3, #24
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe ff6f 	bl	8007b92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d2c <xTaskRemoveFromEventList+0xb0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d11c      	bne.n	8008cf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ff66 	bl	8007b92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cca:	2201      	movs	r2, #1
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	4b18      	ldr	r3, [pc, #96]	@ (8008d30 <xTaskRemoveFromEventList+0xb4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	4a16      	ldr	r2, [pc, #88]	@ (8008d30 <xTaskRemoveFromEventList+0xb4>)
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4a13      	ldr	r2, [pc, #76]	@ (8008d34 <xTaskRemoveFromEventList+0xb8>)
 8008ce6:	441a      	add	r2, r3
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4619      	mov	r1, r3
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f7fe fef2 	bl	8007ad8 <vListInsertEnd>
 8008cf4:	e005      	b.n	8008d02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3318      	adds	r3, #24
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	480e      	ldr	r0, [pc, #56]	@ (8008d38 <xTaskRemoveFromEventList+0xbc>)
 8008cfe:	f7fe feeb 	bl	8007ad8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <xTaskRemoveFromEventList+0xc0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d905      	bls.n	8008d1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <xTaskRemoveFromEventList+0xc4>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	e001      	b.n	8008d20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d20:	697b      	ldr	r3, [r7, #20]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000ee8 	.word	0x20000ee8
 8008d30:	20000ec8 	.word	0x20000ec8
 8008d34:	20000dc4 	.word	0x20000dc4
 8008d38:	20000e80 	.word	0x20000e80
 8008d3c:	20000dc0 	.word	0x20000dc0
 8008d40:	20000ed4 	.word	0x20000ed4

08008d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <vTaskInternalSetTimeOutState+0x24>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d54:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <vTaskInternalSetTimeOutState+0x28>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	605a      	str	r2, [r3, #4]
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000ed8 	.word	0x20000ed8
 8008d6c:	20000ec4 	.word	0x20000ec4

08008d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	613b      	str	r3, [r7, #16]
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10b      	bne.n	8008db6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	60fb      	str	r3, [r7, #12]
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008db6:	f000 fe1f 	bl	80099f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dba:	4b1d      	ldr	r3, [pc, #116]	@ (8008e30 <xTaskCheckForTimeOut+0xc0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	d102      	bne.n	8008dda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61fb      	str	r3, [r7, #28]
 8008dd8:	e023      	b.n	8008e22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4b15      	ldr	r3, [pc, #84]	@ (8008e34 <xTaskCheckForTimeOut+0xc4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d007      	beq.n	8008df6 <xTaskCheckForTimeOut+0x86>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d302      	bcc.n	8008df6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e015      	b.n	8008e22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d20b      	bcs.n	8008e18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ff99 	bl	8008d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e004      	b.n	8008e22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e22:	f000 fe1b 	bl	8009a5c <vPortExitCritical>

	return xReturn;
 8008e26:	69fb      	ldr	r3, [r7, #28]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3720      	adds	r7, #32
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000ec4 	.word	0x20000ec4
 8008e34:	20000ed8 	.word	0x20000ed8

08008e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e3c:	4b03      	ldr	r3, [pc, #12]	@ (8008e4c <vTaskMissedYield+0x14>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
}
 8008e42:	bf00      	nop
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	20000ed4 	.word	0x20000ed4

08008e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e58:	f000 f852 	bl	8008f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <prvIdleTask+0x28>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d9f9      	bls.n	8008e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e64:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <prvIdleTask+0x2c>)
 8008e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e74:	e7f0      	b.n	8008e58 <prvIdleTask+0x8>
 8008e76:	bf00      	nop
 8008e78:	20000dc4 	.word	0x20000dc4
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e86:	2300      	movs	r3, #0
 8008e88:	607b      	str	r3, [r7, #4]
 8008e8a:	e00c      	b.n	8008ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4a12      	ldr	r2, [pc, #72]	@ (8008ee0 <prvInitialiseTaskLists+0x60>)
 8008e98:	4413      	add	r3, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fdef 	bl	8007a7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b06      	cmp	r3, #6
 8008eaa:	d9ef      	bls.n	8008e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008eac:	480d      	ldr	r0, [pc, #52]	@ (8008ee4 <prvInitialiseTaskLists+0x64>)
 8008eae:	f7fe fde6 	bl	8007a7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eb2:	480d      	ldr	r0, [pc, #52]	@ (8008ee8 <prvInitialiseTaskLists+0x68>)
 8008eb4:	f7fe fde3 	bl	8007a7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008eb8:	480c      	ldr	r0, [pc, #48]	@ (8008eec <prvInitialiseTaskLists+0x6c>)
 8008eba:	f7fe fde0 	bl	8007a7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ebe:	480c      	ldr	r0, [pc, #48]	@ (8008ef0 <prvInitialiseTaskLists+0x70>)
 8008ec0:	f7fe fddd 	bl	8007a7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ec4:	480b      	ldr	r0, [pc, #44]	@ (8008ef4 <prvInitialiseTaskLists+0x74>)
 8008ec6:	f7fe fdda 	bl	8007a7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eca:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef8 <prvInitialiseTaskLists+0x78>)
 8008ecc:	4a05      	ldr	r2, [pc, #20]	@ (8008ee4 <prvInitialiseTaskLists+0x64>)
 8008ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <prvInitialiseTaskLists+0x7c>)
 8008ed2:	4a05      	ldr	r2, [pc, #20]	@ (8008ee8 <prvInitialiseTaskLists+0x68>)
 8008ed4:	601a      	str	r2, [r3, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000dc4 	.word	0x20000dc4
 8008ee4:	20000e50 	.word	0x20000e50
 8008ee8:	20000e64 	.word	0x20000e64
 8008eec:	20000e80 	.word	0x20000e80
 8008ef0:	20000e94 	.word	0x20000e94
 8008ef4:	20000eac 	.word	0x20000eac
 8008ef8:	20000e78 	.word	0x20000e78
 8008efc:	20000e7c 	.word	0x20000e7c

08008f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f06:	e019      	b.n	8008f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f08:	f000 fd76 	bl	80099f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0c:	4b10      	ldr	r3, [pc, #64]	@ (8008f50 <prvCheckTasksWaitingTermination+0x50>)
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fe3a 	bl	8007b92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f54 <prvCheckTasksWaitingTermination+0x54>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	4a0b      	ldr	r2, [pc, #44]	@ (8008f54 <prvCheckTasksWaitingTermination+0x54>)
 8008f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f28:	4b0b      	ldr	r3, [pc, #44]	@ (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f32:	f000 fd93 	bl	8009a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f810 	bl	8008f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f3c:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e1      	bne.n	8008f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000e94 	.word	0x20000e94
 8008f54:	20000ec0 	.word	0x20000ec0
 8008f58:	20000ea8 	.word	0x20000ea8

08008f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	334c      	adds	r3, #76	@ 0x4c
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fe23 	bl	800abb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 ff2b 	bl	8009dd8 <vPortFree>
				vPortFree( pxTCB );
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 ff28 	bl	8009dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f88:	e019      	b.n	8008fbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d103      	bne.n	8008f9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 ff1f 	bl	8009dd8 <vPortFree>
	}
 8008f9a:	e010      	b.n	8008fbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d00b      	beq.n	8008fbe <prvDeleteTCB+0x62>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	60fb      	str	r3, [r7, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <prvDeleteTCB+0x5e>
	}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fce:	4b0c      	ldr	r3, [pc, #48]	@ (8009000 <prvResetNextTaskUnblockTime+0x38>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d104      	bne.n	8008fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009004 <prvResetNextTaskUnblockTime+0x3c>)
 8008fda:	f04f 32ff 	mov.w	r2, #4294967295
 8008fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fe0:	e008      	b.n	8008ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe2:	4b07      	ldr	r3, [pc, #28]	@ (8009000 <prvResetNextTaskUnblockTime+0x38>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4a04      	ldr	r2, [pc, #16]	@ (8009004 <prvResetNextTaskUnblockTime+0x3c>)
 8008ff2:	6013      	str	r3, [r2, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	20000e78 	.word	0x20000e78
 8009004:	20000ee0 	.word	0x20000ee0

08009008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800900e:	4b0b      	ldr	r3, [pc, #44]	@ (800903c <xTaskGetSchedulerState+0x34>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009016:	2301      	movs	r3, #1
 8009018:	607b      	str	r3, [r7, #4]
 800901a:	e008      	b.n	800902e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901c:	4b08      	ldr	r3, [pc, #32]	@ (8009040 <xTaskGetSchedulerState+0x38>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009024:	2302      	movs	r3, #2
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	e001      	b.n	800902e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800902a:	2300      	movs	r3, #0
 800902c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800902e:	687b      	ldr	r3, [r7, #4]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000ecc 	.word	0x20000ecc
 8009040:	20000ee8 	.word	0x20000ee8

08009044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d05e      	beq.n	8009118 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905e:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <xTaskPriorityInherit+0xe0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	429a      	cmp	r2, r3
 8009066:	d24e      	bcs.n	8009106 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	db06      	blt.n	800907e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009070:	4b2c      	ldr	r3, [pc, #176]	@ (8009124 <xTaskPriorityInherit+0xe0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	f1c3 0207 	rsb	r2, r3, #7
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6959      	ldr	r1, [r3, #20]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4a26      	ldr	r2, [pc, #152]	@ (8009128 <xTaskPriorityInherit+0xe4>)
 8009090:	4413      	add	r3, r2
 8009092:	4299      	cmp	r1, r3
 8009094:	d12f      	bne.n	80090f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	3304      	adds	r3, #4
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fd79 	bl	8007b92 <uxListRemove>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	2201      	movs	r2, #1
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	43da      	mvns	r2, r3
 80090b2:	4b1e      	ldr	r3, [pc, #120]	@ (800912c <xTaskPriorityInherit+0xe8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4013      	ands	r3, r2
 80090b8:	4a1c      	ldr	r2, [pc, #112]	@ (800912c <xTaskPriorityInherit+0xe8>)
 80090ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090bc:	4b19      	ldr	r3, [pc, #100]	@ (8009124 <xTaskPriorityInherit+0xe0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	2201      	movs	r2, #1
 80090cc:	409a      	lsls	r2, r3
 80090ce:	4b17      	ldr	r3, [pc, #92]	@ (800912c <xTaskPriorityInherit+0xe8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	4a15      	ldr	r2, [pc, #84]	@ (800912c <xTaskPriorityInherit+0xe8>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a10      	ldr	r2, [pc, #64]	@ (8009128 <xTaskPriorityInherit+0xe4>)
 80090e6:	441a      	add	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe fcf2 	bl	8007ad8 <vListInsertEnd>
 80090f4:	e004      	b.n	8009100 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <xTaskPriorityInherit+0xe0>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009100:	2301      	movs	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e008      	b.n	8009118 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800910a:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <xTaskPriorityInherit+0xe0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	429a      	cmp	r2, r3
 8009112:	d201      	bcs.n	8009118 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009118:	68fb      	ldr	r3, [r7, #12]
	}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000dc0 	.word	0x20000dc0
 8009128:	20000dc4 	.word	0x20000dc4
 800912c:	20000ec8 	.word	0x20000ec8

08009130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d070      	beq.n	8009228 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009146:	4b3b      	ldr	r3, [pc, #236]	@ (8009234 <xTaskPriorityDisinherit+0x104>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	429a      	cmp	r2, r3
 800914e:	d00b      	beq.n	8009168 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60fb      	str	r3, [r7, #12]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60bb      	str	r3, [r7, #8]
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919a:	429a      	cmp	r2, r3
 800919c:	d044      	beq.n	8009228 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d140      	bne.n	8009228 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fcf1 	bl	8007b92 <uxListRemove>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d115      	bne.n	80091e2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	491f      	ldr	r1, [pc, #124]	@ (8009238 <xTaskPriorityDisinherit+0x108>)
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xTaskPriorityDisinherit+0xb2>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	2201      	movs	r2, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43da      	mvns	r2, r3
 80091d8:	4b18      	ldr	r3, [pc, #96]	@ (800923c <xTaskPriorityDisinherit+0x10c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4013      	ands	r3, r2
 80091de:	4a17      	ldr	r2, [pc, #92]	@ (800923c <xTaskPriorityDisinherit+0x10c>)
 80091e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	f1c3 0207 	rsb	r2, r3, #7
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	2201      	movs	r2, #1
 80091fc:	409a      	lsls	r2, r3
 80091fe:	4b0f      	ldr	r3, [pc, #60]	@ (800923c <xTaskPriorityDisinherit+0x10c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4313      	orrs	r3, r2
 8009204:	4a0d      	ldr	r2, [pc, #52]	@ (800923c <xTaskPriorityDisinherit+0x10c>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <xTaskPriorityDisinherit+0x108>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fc5a 	bl	8007ad8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009228:	697b      	ldr	r3, [r7, #20]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000dc0 	.word	0x20000dc0
 8009238:	20000dc4 	.word	0x20000dc4
 800923c:	20000ec8 	.word	0x20000ec8

08009240 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d079      	beq.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d902      	bls.n	8009288 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e002      	b.n	800928e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	429a      	cmp	r2, r3
 8009296:	d059      	beq.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d154      	bne.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009354 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d10b      	bne.n	80092c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	60bb      	str	r3, [r7, #8]
}
 80092be:	bf00      	nop
 80092c0:	bf00      	nop
 80092c2:	e7fd      	b.n	80092c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	db04      	blt.n	80092e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f1c3 0207 	rsb	r2, r3, #7
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	6959      	ldr	r1, [r3, #20]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4a19      	ldr	r2, [pc, #100]	@ (8009358 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80092f2:	4413      	add	r3, r2
 80092f4:	4299      	cmp	r1, r3
 80092f6:	d129      	bne.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fc48 	bl	8007b92 <uxListRemove>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930c:	2201      	movs	r2, #1
 800930e:	fa02 f303 	lsl.w	r3, r2, r3
 8009312:	43da      	mvns	r2, r3
 8009314:	4b11      	ldr	r3, [pc, #68]	@ (800935c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4013      	ands	r3, r2
 800931a:	4a10      	ldr	r2, [pc, #64]	@ (800935c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800931c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	2201      	movs	r2, #1
 8009324:	409a      	lsls	r2, r3
 8009326:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4313      	orrs	r3, r2
 800932c:	4a0b      	ldr	r2, [pc, #44]	@ (800935c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4a06      	ldr	r2, [pc, #24]	@ (8009358 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800933e:	441a      	add	r2, r3
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	3304      	adds	r3, #4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fe fbc6 	bl	8007ad8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800934c:	bf00      	nop
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000dc0 	.word	0x20000dc0
 8009358:	20000dc4 	.word	0x20000dc4
 800935c:	20000ec8 	.word	0x20000ec8

08009360 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009364:	4b07      	ldr	r3, [pc, #28]	@ (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800936c:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009372:	3201      	adds	r2, #1
 8009374:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009376:	4b03      	ldr	r3, [pc, #12]	@ (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 8009378:	681b      	ldr	r3, [r3, #0]
	}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20000dc0 	.word	0x20000dc0

08009388 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009392:	f000 fb31 	bl	80099f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009396:	4b20      	ldr	r3, [pc, #128]	@ (8009418 <ulTaskNotifyTake+0x90>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d113      	bne.n	80093ca <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80093a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009418 <ulTaskNotifyTake+0x90>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00b      	beq.n	80093ca <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093b2:	2101      	movs	r1, #1
 80093b4:	6838      	ldr	r0, [r7, #0]
 80093b6:	f000 f98b 	bl	80096d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80093ba:	4b18      	ldr	r3, [pc, #96]	@ (800941c <ulTaskNotifyTake+0x94>)
 80093bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80093ca:	f000 fb47 	bl	8009a5c <vPortExitCritical>

		taskENTER_CRITICAL();
 80093ce:	f000 fb13 	bl	80099f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80093d2:	4b11      	ldr	r3, [pc, #68]	@ (8009418 <ulTaskNotifyTake+0x90>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093da:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00e      	beq.n	8009400 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80093e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <ulTaskNotifyTake+0x90>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80093f2:	e005      	b.n	8009400 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80093f4:	4b08      	ldr	r3, [pc, #32]	@ (8009418 <ulTaskNotifyTake+0x90>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	3a01      	subs	r2, #1
 80093fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <ulTaskNotifyTake+0x90>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800940a:	f000 fb27 	bl	8009a5c <vPortExitCritical>

		return ulReturn;
 800940e:	68fb      	ldr	r3, [r7, #12]
	}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20000dc0 	.word	0x20000dc0
 800941c:	e000ed04 	.word	0xe000ed04

08009420 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	@ 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009430:	2301      	movs	r3, #1
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <xTaskGenericNotify+0x32>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	61bb      	str	r3, [r7, #24]
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	e7fd      	b.n	800944e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009456:	f000 facf 	bl	80099f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009470:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	2202      	movs	r2, #2
 8009476:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b04      	cmp	r3, #4
 800947e:	d82e      	bhi.n	80094de <xTaskGenericNotify+0xbe>
 8009480:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <xTaskGenericNotify+0x68>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	08009503 	.word	0x08009503
 800948c:	0800949d 	.word	0x0800949d
 8009490:	080094af 	.word	0x080094af
 8009494:	080094bf 	.word	0x080094bf
 8009498:	080094c9 	.word	0x080094c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80094ac:	e02c      	b.n	8009508 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80094bc:	e024      	b.n	8009508 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80094c6:	e01f      	b.n	8009508 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094c8:	7ffb      	ldrb	r3, [r7, #31]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d004      	beq.n	80094d8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80094d6:	e017      	b.n	8009508 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80094d8:	2300      	movs	r3, #0
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80094dc:	e014      	b.n	8009508 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d00d      	beq.n	8009506 <xTaskGenericNotify+0xe6>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	617b      	str	r3, [r7, #20]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <xTaskGenericNotify+0xde>
					break;
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <xTaskGenericNotify+0xe8>

					break;
 8009506:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009508:	7ffb      	ldrb	r3, [r7, #31]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d13a      	bne.n	8009584 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fb3d 	bl	8007b92 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951c:	2201      	movs	r2, #1
 800951e:	409a      	lsls	r2, r3
 8009520:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <xTaskGenericNotify+0x174>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4313      	orrs	r3, r2
 8009526:	4a1b      	ldr	r2, [pc, #108]	@ (8009594 <xTaskGenericNotify+0x174>)
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a18      	ldr	r2, [pc, #96]	@ (8009598 <xTaskGenericNotify+0x178>)
 8009538:	441a      	add	r2, r3
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fe fac9 	bl	8007ad8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <xTaskGenericNotify+0x146>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	613b      	str	r3, [r7, #16]
}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	e7fd      	b.n	8009562 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <xTaskGenericNotify+0x17c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	429a      	cmp	r2, r3
 8009572:	d907      	bls.n	8009584 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009574:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <xTaskGenericNotify+0x180>)
 8009576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009584:	f000 fa6a 	bl	8009a5c <vPortExitCritical>

		return xReturn;
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800958a:	4618      	mov	r0, r3
 800958c:	3728      	adds	r7, #40	@ 0x28
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	20000ec8 	.word	0x20000ec8
 8009598:	20000dc4 	.word	0x20000dc4
 800959c:	20000dc0 	.word	0x20000dc0
 80095a0:	e000ed04 	.word	0xe000ed04

080095a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08a      	sub	sp, #40	@ 0x28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095cc:	f000 faf4 	bl	8009bb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095d4:	f3ef 8211 	mrs	r2, BASEPRI
 80095d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	617a      	str	r2, [r7, #20]
 80095ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095ec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095ee:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80095f6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800960e:	7ffb      	ldrb	r3, [r7, #31]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d146      	bne.n	80096a2 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60fb      	str	r3, [r7, #12]
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009634:	4b20      	ldr	r3, [pc, #128]	@ (80096b8 <vTaskNotifyGiveFromISR+0x114>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11c      	bne.n	8009676 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963e:	3304      	adds	r3, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe faa6 	bl	8007b92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	2201      	movs	r2, #1
 800964c:	409a      	lsls	r2, r3
 800964e:	4b1b      	ldr	r3, [pc, #108]	@ (80096bc <vTaskNotifyGiveFromISR+0x118>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4313      	orrs	r3, r2
 8009654:	4a19      	ldr	r2, [pc, #100]	@ (80096bc <vTaskNotifyGiveFromISR+0x118>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4a16      	ldr	r2, [pc, #88]	@ (80096c0 <vTaskNotifyGiveFromISR+0x11c>)
 8009666:	441a      	add	r2, r3
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fa32 	bl	8007ad8 <vListInsertEnd>
 8009674:	e005      	b.n	8009682 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	3318      	adds	r3, #24
 800967a:	4619      	mov	r1, r3
 800967c:	4811      	ldr	r0, [pc, #68]	@ (80096c4 <vTaskNotifyGiveFromISR+0x120>)
 800967e:	f7fe fa2b 	bl	8007ad8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009686:	4b10      	ldr	r3, [pc, #64]	@ (80096c8 <vTaskNotifyGiveFromISR+0x124>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	429a      	cmp	r2, r3
 800968e:	d908      	bls.n	80096a2 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2201      	movs	r2, #1
 800969a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800969c:	4b0b      	ldr	r3, [pc, #44]	@ (80096cc <vTaskNotifyGiveFromISR+0x128>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096ac:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80096ae:	bf00      	nop
 80096b0:	3728      	adds	r7, #40	@ 0x28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000ee8 	.word	0x20000ee8
 80096bc:	20000ec8 	.word	0x20000ec8
 80096c0:	20000dc4 	.word	0x20000dc4
 80096c4:	20000e80 	.word	0x20000e80
 80096c8:	20000dc0 	.word	0x20000dc0
 80096cc:	20000ed4 	.word	0x20000ed4

080096d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096da:	4b29      	ldr	r3, [pc, #164]	@ (8009780 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e0:	4b28      	ldr	r3, [pc, #160]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fa53 	bl	8007b92 <uxListRemove>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80096f2:	4b24      	ldr	r3, [pc, #144]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	2201      	movs	r2, #1
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43da      	mvns	r2, r3
 8009700:	4b21      	ldr	r3, [pc, #132]	@ (8009788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4013      	ands	r3, r2
 8009706:	4a20      	ldr	r2, [pc, #128]	@ (8009788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009708:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d10a      	bne.n	8009728 <prvAddCurrentTaskToDelayedList+0x58>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009718:	4b1a      	ldr	r3, [pc, #104]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	481a      	ldr	r0, [pc, #104]	@ (800978c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009722:	f7fe f9d9 	bl	8007ad8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009726:	e026      	b.n	8009776 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009730:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	429a      	cmp	r2, r3
 800973e:	d209      	bcs.n	8009754 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009740:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	4b0f      	ldr	r3, [pc, #60]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fe f9e7 	bl	8007b20 <vListInsert>
}
 8009752:	e010      	b.n	8009776 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4b0a      	ldr	r3, [pc, #40]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xb4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7fe f9dd 	bl	8007b20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009766:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	429a      	cmp	r2, r3
 800976e:	d202      	bcs.n	8009776 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009770:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6013      	str	r3, [r2, #0]
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000ec4 	.word	0x20000ec4
 8009784:	20000dc0 	.word	0x20000dc0
 8009788:	20000ec8 	.word	0x20000ec8
 800978c:	20000eac 	.word	0x20000eac
 8009790:	20000e7c 	.word	0x20000e7c
 8009794:	20000e78 	.word	0x20000e78
 8009798:	20000ee0 	.word	0x20000ee0

0800979c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3b04      	subs	r3, #4
 80097ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0201 	bic.w	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b04      	subs	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <pxPortInitialiseStack+0x64>)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b14      	subs	r3, #20
 80097d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f06f 0202 	mvn.w	r2, #2
 80097ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3b20      	subs	r3, #32
 80097f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097f2:	68fb      	ldr	r3, [r7, #12]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	08009805 	.word	0x08009805

08009804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <prvTaskExitError+0x58>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009816:	d00b      	beq.n	8009830 <prvTaskExitError+0x2c>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <prvTaskExitError+0x28>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	60bb      	str	r3, [r7, #8]
}
 8009842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009844:	bf00      	nop
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0fc      	beq.n	8009846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	2000000c 	.word	0x2000000c

08009860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009860:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <pxCurrentTCBConst2>)
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	f380 8809 	msr	PSP, r0
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8811 	msr	BASEPRI, r0
 800987a:	4770      	bx	lr
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst2>:
 8009880:	20000dc0 	.word	0x20000dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009888:	4808      	ldr	r0, [pc, #32]	@ (80098ac <prvPortStartFirstTask+0x24>)
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	6800      	ldr	r0, [r0, #0]
 800988e:	f380 8808 	msr	MSP, r0
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8814 	msr	CONTROL, r0
 800989a:	b662      	cpsie	i
 800989c:	b661      	cpsie	f
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	df00      	svc	0
 80098a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098aa:	bf00      	nop
 80098ac:	e000ed08 	.word	0xe000ed08

080098b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098b6:	4b47      	ldr	r3, [pc, #284]	@ (80099d4 <xPortStartScheduler+0x124>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a47      	ldr	r2, [pc, #284]	@ (80099d8 <xPortStartScheduler+0x128>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10b      	bne.n	80098d8 <xPortStartScheduler+0x28>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	613b      	str	r3, [r7, #16]
}
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
 80098d6:	e7fd      	b.n	80098d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098d8:	4b3e      	ldr	r3, [pc, #248]	@ (80099d4 <xPortStartScheduler+0x124>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a3f      	ldr	r2, [pc, #252]	@ (80099dc <xPortStartScheduler+0x12c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d10b      	bne.n	80098fa <xPortStartScheduler+0x4a>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60fb      	str	r3, [r7, #12]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098fa:	4b39      	ldr	r3, [pc, #228]	@ (80099e0 <xPortStartScheduler+0x130>)
 80098fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	22ff      	movs	r2, #255	@ 0xff
 800990a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800991c:	b2da      	uxtb	r2, r3
 800991e:	4b31      	ldr	r3, [pc, #196]	@ (80099e4 <xPortStartScheduler+0x134>)
 8009920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009922:	4b31      	ldr	r3, [pc, #196]	@ (80099e8 <xPortStartScheduler+0x138>)
 8009924:	2207      	movs	r2, #7
 8009926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009928:	e009      	b.n	800993e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800992a:	4b2f      	ldr	r3, [pc, #188]	@ (80099e8 <xPortStartScheduler+0x138>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3b01      	subs	r3, #1
 8009930:	4a2d      	ldr	r2, [pc, #180]	@ (80099e8 <xPortStartScheduler+0x138>)
 8009932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	b2db      	uxtb	r3, r3
 800993c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009946:	2b80      	cmp	r3, #128	@ 0x80
 8009948:	d0ef      	beq.n	800992a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800994a:	4b27      	ldr	r3, [pc, #156]	@ (80099e8 <xPortStartScheduler+0x138>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f1c3 0307 	rsb	r3, r3, #7
 8009952:	2b04      	cmp	r3, #4
 8009954:	d00b      	beq.n	800996e <xPortStartScheduler+0xbe>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	60bb      	str	r3, [r7, #8]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800996e:	4b1e      	ldr	r3, [pc, #120]	@ (80099e8 <xPortStartScheduler+0x138>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	021b      	lsls	r3, r3, #8
 8009974:	4a1c      	ldr	r2, [pc, #112]	@ (80099e8 <xPortStartScheduler+0x138>)
 8009976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009978:	4b1b      	ldr	r3, [pc, #108]	@ (80099e8 <xPortStartScheduler+0x138>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009980:	4a19      	ldr	r2, [pc, #100]	@ (80099e8 <xPortStartScheduler+0x138>)
 8009982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800998c:	4b17      	ldr	r3, [pc, #92]	@ (80099ec <xPortStartScheduler+0x13c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <xPortStartScheduler+0x13c>)
 8009992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009998:	4b14      	ldr	r3, [pc, #80]	@ (80099ec <xPortStartScheduler+0x13c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a13      	ldr	r2, [pc, #76]	@ (80099ec <xPortStartScheduler+0x13c>)
 800999e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80099a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099a4:	f000 f8da 	bl	8009b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099a8:	4b11      	ldr	r3, [pc, #68]	@ (80099f0 <xPortStartScheduler+0x140>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099ae:	f000 f8f9 	bl	8009ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099b2:	4b10      	ldr	r3, [pc, #64]	@ (80099f4 <xPortStartScheduler+0x144>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a0f      	ldr	r2, [pc, #60]	@ (80099f4 <xPortStartScheduler+0x144>)
 80099b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099be:	f7ff ff63 	bl	8009888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099c2:	f7ff f8d1 	bl	8008b68 <vTaskSwitchContext>
	prvTaskExitError();
 80099c6:	f7ff ff1d 	bl	8009804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	e000ed00 	.word	0xe000ed00
 80099d8:	410fc271 	.word	0x410fc271
 80099dc:	410fc270 	.word	0x410fc270
 80099e0:	e000e400 	.word	0xe000e400
 80099e4:	20000eec 	.word	0x20000eec
 80099e8:	20000ef0 	.word	0x20000ef0
 80099ec:	e000ed20 	.word	0xe000ed20
 80099f0:	2000000c 	.word	0x2000000c
 80099f4:	e000ef34 	.word	0xe000ef34

080099f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a12:	4b10      	ldr	r3, [pc, #64]	@ (8009a54 <vPortEnterCritical+0x5c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	4a0e      	ldr	r2, [pc, #56]	@ (8009a54 <vPortEnterCritical+0x5c>)
 8009a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <vPortEnterCritical+0x5c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d110      	bne.n	8009a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a24:	4b0c      	ldr	r3, [pc, #48]	@ (8009a58 <vPortEnterCritical+0x60>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	603b      	str	r3, [r7, #0]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <vPortEnterCritical+0x4a>
	}
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	2000000c 	.word	0x2000000c
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a62:	4b12      	ldr	r3, [pc, #72]	@ (8009aac <vPortExitCritical+0x50>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10b      	bne.n	8009a82 <vPortExitCritical+0x26>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	607b      	str	r3, [r7, #4]
}
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	e7fd      	b.n	8009a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a82:	4b0a      	ldr	r3, [pc, #40]	@ (8009aac <vPortExitCritical+0x50>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	4a08      	ldr	r2, [pc, #32]	@ (8009aac <vPortExitCritical+0x50>)
 8009a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a8c:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <vPortExitCritical+0x50>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <vPortExitCritical+0x44>
 8009a94:	2300      	movs	r3, #0
 8009a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f383 8811 	msr	BASEPRI, r3
}
 8009a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	2000000c 	.word	0x2000000c

08009ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ab0:	f3ef 8009 	mrs	r0, PSP
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4b15      	ldr	r3, [pc, #84]	@ (8009b10 <pxCurrentTCBConst>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	f01e 0f10 	tst.w	lr, #16
 8009ac0:	bf08      	it	eq
 8009ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aca:	6010      	str	r0, [r2, #0]
 8009acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ad4:	f380 8811 	msr	BASEPRI, r0
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f7ff f842 	bl	8008b68 <vTaskSwitchContext>
 8009ae4:	f04f 0000 	mov.w	r0, #0
 8009ae8:	f380 8811 	msr	BASEPRI, r0
 8009aec:	bc09      	pop	{r0, r3}
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	6808      	ldr	r0, [r1, #0]
 8009af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af6:	f01e 0f10 	tst.w	lr, #16
 8009afa:	bf08      	it	eq
 8009afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b00:	f380 8809 	msr	PSP, r0
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst>:
 8009b10:	20000dc0 	.word	0x20000dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b32:	f7fe ff5f 	bl	80089f4 <xTaskIncrementTick>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <SysTick_Handler+0x40>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	2300      	movs	r3, #0
 8009b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f383 8811 	msr	BASEPRI, r3
}
 8009b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b60:	4b0b      	ldr	r3, [pc, #44]	@ (8009b90 <vPortSetupTimerInterrupt+0x34>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b66:	4b0b      	ldr	r3, [pc, #44]	@ (8009b94 <vPortSetupTimerInterrupt+0x38>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <vPortSetupTimerInterrupt+0x3c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0a      	ldr	r2, [pc, #40]	@ (8009b9c <vPortSetupTimerInterrupt+0x40>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	099b      	lsrs	r3, r3, #6
 8009b78:	4a09      	ldr	r2, [pc, #36]	@ (8009ba0 <vPortSetupTimerInterrupt+0x44>)
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b7e:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <vPortSetupTimerInterrupt+0x34>)
 8009b80:	2207      	movs	r2, #7
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	e000e010 	.word	0xe000e010
 8009b94:	e000e018 	.word	0xe000e018
 8009b98:	20000000 	.word	0x20000000
 8009b9c:	10624dd3 	.word	0x10624dd3
 8009ba0:	e000e014 	.word	0xe000e014

08009ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009bb4 <vPortEnableVFP+0x10>
 8009ba8:	6801      	ldr	r1, [r0, #0]
 8009baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009bae:	6001      	str	r1, [r0, #0]
 8009bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bb2:	bf00      	nop
 8009bb4:	e000ed88 	.word	0xe000ed88

08009bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bbe:	f3ef 8305 	mrs	r3, IPSR
 8009bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d915      	bls.n	8009bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bca:	4a18      	ldr	r2, [pc, #96]	@ (8009c2c <vPortValidateInterruptPriority+0x74>)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bd4:	4b16      	ldr	r3, [pc, #88]	@ (8009c30 <vPortValidateInterruptPriority+0x78>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	7afa      	ldrb	r2, [r7, #11]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d20b      	bcs.n	8009bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	607b      	str	r3, [r7, #4]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c34 <vPortValidateInterruptPriority+0x7c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <vPortValidateInterruptPriority+0x80>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d90b      	bls.n	8009c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	603b      	str	r3, [r7, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <vPortValidateInterruptPriority+0x62>
	}
 8009c1e:	bf00      	nop
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	e000e3f0 	.word	0xe000e3f0
 8009c30:	20000eec 	.word	0x20000eec
 8009c34:	e000ed0c 	.word	0xe000ed0c
 8009c38:	20000ef0 	.word	0x20000ef0

08009c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	@ 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c48:	f7fe fe28 	bl	800889c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009dc0 <pvPortMalloc+0x184>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c54:	f000 f924 	bl	8009ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c58:	4b5a      	ldr	r3, [pc, #360]	@ (8009dc4 <pvPortMalloc+0x188>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f040 8095 	bne.w	8009d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01e      	beq.n	8009caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c6c:	2208      	movs	r2, #8
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d015      	beq.n	8009caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f023 0307 	bic.w	r3, r3, #7
 8009c84:	3308      	adds	r3, #8
 8009c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <pvPortMalloc+0x6e>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	617b      	str	r3, [r7, #20]
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	e7fd      	b.n	8009ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d06f      	beq.n	8009d90 <pvPortMalloc+0x154>
 8009cb0:	4b45      	ldr	r3, [pc, #276]	@ (8009dc8 <pvPortMalloc+0x18c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d86a      	bhi.n	8009d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cba:	4b44      	ldr	r3, [pc, #272]	@ (8009dcc <pvPortMalloc+0x190>)
 8009cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cbe:	4b43      	ldr	r3, [pc, #268]	@ (8009dcc <pvPortMalloc+0x190>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc4:	e004      	b.n	8009cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d903      	bls.n	8009ce2 <pvPortMalloc+0xa6>
 8009cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f1      	bne.n	8009cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ce2:	4b37      	ldr	r3, [pc, #220]	@ (8009dc0 <pvPortMalloc+0x184>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d051      	beq.n	8009d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	4413      	add	r3, r2
 8009cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	1ad2      	subs	r2, r2, r3
 8009d06:	2308      	movs	r3, #8
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d920      	bls.n	8009d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4413      	add	r3, r2
 8009d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00b      	beq.n	8009d38 <pvPortMalloc+0xfc>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	613b      	str	r3, [r7, #16]
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d4a:	69b8      	ldr	r0, [r7, #24]
 8009d4c:	f000 f90a 	bl	8009f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d50:	4b1d      	ldr	r3, [pc, #116]	@ (8009dc8 <pvPortMalloc+0x18c>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc8 <pvPortMalloc+0x18c>)
 8009d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc8 <pvPortMalloc+0x18c>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd0 <pvPortMalloc+0x194>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d203      	bcs.n	8009d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d6a:	4b17      	ldr	r3, [pc, #92]	@ (8009dc8 <pvPortMalloc+0x18c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a18      	ldr	r2, [pc, #96]	@ (8009dd0 <pvPortMalloc+0x194>)
 8009d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b13      	ldr	r3, [pc, #76]	@ (8009dc4 <pvPortMalloc+0x188>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d86:	4b13      	ldr	r3, [pc, #76]	@ (8009dd4 <pvPortMalloc+0x198>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	4a11      	ldr	r2, [pc, #68]	@ (8009dd4 <pvPortMalloc+0x198>)
 8009d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d90:	f7fe fd92 	bl	80088b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <pvPortMalloc+0x17a>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60fb      	str	r3, [r7, #12]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <pvPortMalloc+0x176>
	return pvReturn;
 8009db6:	69fb      	ldr	r3, [r7, #28]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3728      	adds	r7, #40	@ 0x28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20004afc 	.word	0x20004afc
 8009dc4:	20004b10 	.word	0x20004b10
 8009dc8:	20004b00 	.word	0x20004b00
 8009dcc:	20004af4 	.word	0x20004af4
 8009dd0:	20004b04 	.word	0x20004b04
 8009dd4:	20004b08 	.word	0x20004b08

08009dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d04f      	beq.n	8009e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dea:	2308      	movs	r3, #8
 8009dec:	425b      	negs	r3, r3
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4413      	add	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	4b25      	ldr	r3, [pc, #148]	@ (8009e94 <vPortFree+0xbc>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10b      	bne.n	8009e1e <vPortFree+0x46>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60fb      	str	r3, [r7, #12]
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	e7fd      	b.n	8009e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00b      	beq.n	8009e3e <vPortFree+0x66>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	60bb      	str	r3, [r7, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	e7fd      	b.n	8009e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	4b14      	ldr	r3, [pc, #80]	@ (8009e94 <vPortFree+0xbc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4013      	ands	r3, r2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01e      	beq.n	8009e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d11a      	bne.n	8009e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <vPortFree+0xbc>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	43db      	mvns	r3, r3
 8009e5e:	401a      	ands	r2, r3
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e64:	f7fe fd1a 	bl	800889c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <vPortFree+0xc0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4413      	add	r3, r2
 8009e72:	4a09      	ldr	r2, [pc, #36]	@ (8009e98 <vPortFree+0xc0>)
 8009e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e76:	6938      	ldr	r0, [r7, #16]
 8009e78:	f000 f874 	bl	8009f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <vPortFree+0xc4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	4a06      	ldr	r2, [pc, #24]	@ (8009e9c <vPortFree+0xc4>)
 8009e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e86:	f7fe fd17 	bl	80088b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e8a:	bf00      	nop
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20004b10 	.word	0x20004b10
 8009e98:	20004b00 	.word	0x20004b00
 8009e9c:	20004b0c 	.word	0x20004b0c

08009ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eac:	4b27      	ldr	r3, [pc, #156]	@ (8009f4c <prvHeapInit+0xac>)
 8009eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00c      	beq.n	8009ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3307      	adds	r3, #7
 8009ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0307 	bic.w	r3, r3, #7
 8009ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	4a1f      	ldr	r2, [pc, #124]	@ (8009f4c <prvHeapInit+0xac>)
 8009ed0:	4413      	add	r3, r2
 8009ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f50 <prvHeapInit+0xb0>)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ede:	4b1c      	ldr	r3, [pc, #112]	@ (8009f50 <prvHeapInit+0xb0>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	4413      	add	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009eec:	2208      	movs	r2, #8
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0307 	bic.w	r3, r3, #7
 8009efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4a15      	ldr	r2, [pc, #84]	@ (8009f54 <prvHeapInit+0xb4>)
 8009f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f02:	4b14      	ldr	r3, [pc, #80]	@ (8009f54 <prvHeapInit+0xb4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2200      	movs	r2, #0
 8009f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f0a:	4b12      	ldr	r3, [pc, #72]	@ (8009f54 <prvHeapInit+0xb4>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	1ad2      	subs	r2, r2, r3
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f20:	4b0c      	ldr	r3, [pc, #48]	@ (8009f54 <prvHeapInit+0xb4>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f58 <prvHeapInit+0xb8>)
 8009f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	4a09      	ldr	r2, [pc, #36]	@ (8009f5c <prvHeapInit+0xbc>)
 8009f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f38:	4b09      	ldr	r3, [pc, #36]	@ (8009f60 <prvHeapInit+0xc0>)
 8009f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f3e:	601a      	str	r2, [r3, #0]
}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000ef4 	.word	0x20000ef4
 8009f50:	20004af4 	.word	0x20004af4
 8009f54:	20004afc 	.word	0x20004afc
 8009f58:	20004b04 	.word	0x20004b04
 8009f5c:	20004b00 	.word	0x20004b00
 8009f60:	20004b10 	.word	0x20004b10

08009f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f6c:	4b28      	ldr	r3, [pc, #160]	@ (800a010 <prvInsertBlockIntoFreeList+0xac>)
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	e002      	b.n	8009f78 <prvInsertBlockIntoFreeList+0x14>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d8f7      	bhi.n	8009f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d108      	bne.n	8009fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	441a      	add	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d118      	bne.n	8009fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b15      	ldr	r3, [pc, #84]	@ (800a014 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d00d      	beq.n	8009fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	441a      	add	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	e008      	b.n	8009ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	@ (800a014 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e003      	b.n	8009ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d002      	beq.n	800a002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	20004af4 	.word	0x20004af4
 800a014:	20004afc 	.word	0x20004afc

0800a018 <__cvt>:
 800a018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	ec57 6b10 	vmov	r6, r7, d0
 800a020:	2f00      	cmp	r7, #0
 800a022:	460c      	mov	r4, r1
 800a024:	4619      	mov	r1, r3
 800a026:	463b      	mov	r3, r7
 800a028:	bfbb      	ittet	lt
 800a02a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a02e:	461f      	movlt	r7, r3
 800a030:	2300      	movge	r3, #0
 800a032:	232d      	movlt	r3, #45	@ 0x2d
 800a034:	700b      	strb	r3, [r1, #0]
 800a036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a038:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a03c:	4691      	mov	r9, r2
 800a03e:	f023 0820 	bic.w	r8, r3, #32
 800a042:	bfbc      	itt	lt
 800a044:	4632      	movlt	r2, r6
 800a046:	4616      	movlt	r6, r2
 800a048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a04c:	d005      	beq.n	800a05a <__cvt+0x42>
 800a04e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a052:	d100      	bne.n	800a056 <__cvt+0x3e>
 800a054:	3401      	adds	r4, #1
 800a056:	2102      	movs	r1, #2
 800a058:	e000      	b.n	800a05c <__cvt+0x44>
 800a05a:	2103      	movs	r1, #3
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	ab02      	add	r3, sp, #8
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	ec47 6b10 	vmov	d0, r6, r7
 800a068:	4653      	mov	r3, sl
 800a06a:	4622      	mov	r2, r4
 800a06c:	f000 fef4 	bl	800ae58 <_dtoa_r>
 800a070:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a074:	4605      	mov	r5, r0
 800a076:	d119      	bne.n	800a0ac <__cvt+0x94>
 800a078:	f019 0f01 	tst.w	r9, #1
 800a07c:	d00e      	beq.n	800a09c <__cvt+0x84>
 800a07e:	eb00 0904 	add.w	r9, r0, r4
 800a082:	2200      	movs	r2, #0
 800a084:	2300      	movs	r3, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a08e:	b108      	cbz	r0, 800a094 <__cvt+0x7c>
 800a090:	f8cd 900c 	str.w	r9, [sp, #12]
 800a094:	2230      	movs	r2, #48	@ 0x30
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	454b      	cmp	r3, r9
 800a09a:	d31e      	bcc.n	800a0da <__cvt+0xc2>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a0:	1b5b      	subs	r3, r3, r5
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	b004      	add	sp, #16
 800a0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0b0:	eb00 0904 	add.w	r9, r0, r4
 800a0b4:	d1e5      	bne.n	800a082 <__cvt+0x6a>
 800a0b6:	7803      	ldrb	r3, [r0, #0]
 800a0b8:	2b30      	cmp	r3, #48	@ 0x30
 800a0ba:	d10a      	bne.n	800a0d2 <__cvt+0xba>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f7f6 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c8:	b918      	cbnz	r0, 800a0d2 <__cvt+0xba>
 800a0ca:	f1c4 0401 	rsb	r4, r4, #1
 800a0ce:	f8ca 4000 	str.w	r4, [sl]
 800a0d2:	f8da 3000 	ldr.w	r3, [sl]
 800a0d6:	4499      	add	r9, r3
 800a0d8:	e7d3      	b.n	800a082 <__cvt+0x6a>
 800a0da:	1c59      	adds	r1, r3, #1
 800a0dc:	9103      	str	r1, [sp, #12]
 800a0de:	701a      	strb	r2, [r3, #0]
 800a0e0:	e7d9      	b.n	800a096 <__cvt+0x7e>

0800a0e2 <__exponent>:
 800a0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	bfba      	itte	lt
 800a0e8:	4249      	neglt	r1, r1
 800a0ea:	232d      	movlt	r3, #45	@ 0x2d
 800a0ec:	232b      	movge	r3, #43	@ 0x2b
 800a0ee:	2909      	cmp	r1, #9
 800a0f0:	7002      	strb	r2, [r0, #0]
 800a0f2:	7043      	strb	r3, [r0, #1]
 800a0f4:	dd29      	ble.n	800a14a <__exponent+0x68>
 800a0f6:	f10d 0307 	add.w	r3, sp, #7
 800a0fa:	461d      	mov	r5, r3
 800a0fc:	270a      	movs	r7, #10
 800a0fe:	461a      	mov	r2, r3
 800a100:	fbb1 f6f7 	udiv	r6, r1, r7
 800a104:	fb07 1416 	mls	r4, r7, r6, r1
 800a108:	3430      	adds	r4, #48	@ 0x30
 800a10a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a10e:	460c      	mov	r4, r1
 800a110:	2c63      	cmp	r4, #99	@ 0x63
 800a112:	f103 33ff 	add.w	r3, r3, #4294967295
 800a116:	4631      	mov	r1, r6
 800a118:	dcf1      	bgt.n	800a0fe <__exponent+0x1c>
 800a11a:	3130      	adds	r1, #48	@ 0x30
 800a11c:	1e94      	subs	r4, r2, #2
 800a11e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a122:	1c41      	adds	r1, r0, #1
 800a124:	4623      	mov	r3, r4
 800a126:	42ab      	cmp	r3, r5
 800a128:	d30a      	bcc.n	800a140 <__exponent+0x5e>
 800a12a:	f10d 0309 	add.w	r3, sp, #9
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ac      	cmp	r4, r5
 800a132:	bf88      	it	hi
 800a134:	2300      	movhi	r3, #0
 800a136:	3302      	adds	r3, #2
 800a138:	4403      	add	r3, r0
 800a13a:	1a18      	subs	r0, r3, r0
 800a13c:	b003      	add	sp, #12
 800a13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a140:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a144:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a148:	e7ed      	b.n	800a126 <__exponent+0x44>
 800a14a:	2330      	movs	r3, #48	@ 0x30
 800a14c:	3130      	adds	r1, #48	@ 0x30
 800a14e:	7083      	strb	r3, [r0, #2]
 800a150:	70c1      	strb	r1, [r0, #3]
 800a152:	1d03      	adds	r3, r0, #4
 800a154:	e7f1      	b.n	800a13a <__exponent+0x58>
	...

0800a158 <_printf_float>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	b08d      	sub	sp, #52	@ 0x34
 800a15e:	460c      	mov	r4, r1
 800a160:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a164:	4616      	mov	r6, r2
 800a166:	461f      	mov	r7, r3
 800a168:	4605      	mov	r5, r0
 800a16a:	f000 fd0f 	bl	800ab8c <_localeconv_r>
 800a16e:	6803      	ldr	r3, [r0, #0]
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	4618      	mov	r0, r3
 800a174:	f7f6 f87c 	bl	8000270 <strlen>
 800a178:	2300      	movs	r3, #0
 800a17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a17c:	f8d8 3000 	ldr.w	r3, [r8]
 800a180:	9005      	str	r0, [sp, #20]
 800a182:	3307      	adds	r3, #7
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	f103 0208 	add.w	r2, r3, #8
 800a18c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a190:	f8d4 b000 	ldr.w	fp, [r4]
 800a194:	f8c8 2000 	str.w	r2, [r8]
 800a198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a19c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a1aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a420 <_printf_float+0x2c8>)
 800a1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b4:	f7f6 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800a1b8:	bb70      	cbnz	r0, 800a218 <_printf_float+0xc0>
 800a1ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1be:	4b98      	ldr	r3, [pc, #608]	@ (800a420 <_printf_float+0x2c8>)
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	f7f6 fc94 	bl	8000af0 <__aeabi_dcmple>
 800a1c8:	bb30      	cbnz	r0, 800a218 <_printf_float+0xc0>
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	f7f6 fc83 	bl	8000adc <__aeabi_dcmplt>
 800a1d6:	b110      	cbz	r0, 800a1de <_printf_float+0x86>
 800a1d8:	232d      	movs	r3, #45	@ 0x2d
 800a1da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1de:	4a91      	ldr	r2, [pc, #580]	@ (800a424 <_printf_float+0x2cc>)
 800a1e0:	4b91      	ldr	r3, [pc, #580]	@ (800a428 <_printf_float+0x2d0>)
 800a1e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a1e6:	bf94      	ite	ls
 800a1e8:	4690      	movls	r8, r2
 800a1ea:	4698      	movhi	r8, r3
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	f02b 0304 	bic.w	r3, fp, #4
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	f04f 0900 	mov.w	r9, #0
 800a1fa:	9700      	str	r7, [sp, #0]
 800a1fc:	4633      	mov	r3, r6
 800a1fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f9d2 	bl	800a5ac <_printf_common>
 800a208:	3001      	adds	r0, #1
 800a20a:	f040 808d 	bne.w	800a328 <_printf_float+0x1d0>
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295
 800a212:	b00d      	add	sp, #52	@ 0x34
 800a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	4642      	mov	r2, r8
 800a21a:	464b      	mov	r3, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 fc84 	bl	8000b2c <__aeabi_dcmpun>
 800a224:	b140      	cbz	r0, 800a238 <_printf_float+0xe0>
 800a226:	464b      	mov	r3, r9
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfbc      	itt	lt
 800a22c:	232d      	movlt	r3, #45	@ 0x2d
 800a22e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a232:	4a7e      	ldr	r2, [pc, #504]	@ (800a42c <_printf_float+0x2d4>)
 800a234:	4b7e      	ldr	r3, [pc, #504]	@ (800a430 <_printf_float+0x2d8>)
 800a236:	e7d4      	b.n	800a1e2 <_printf_float+0x8a>
 800a238:	6863      	ldr	r3, [r4, #4]
 800a23a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a23e:	9206      	str	r2, [sp, #24]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	d13b      	bne.n	800a2bc <_printf_float+0x164>
 800a244:	2306      	movs	r3, #6
 800a246:	6063      	str	r3, [r4, #4]
 800a248:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a24c:	2300      	movs	r3, #0
 800a24e:	6022      	str	r2, [r4, #0]
 800a250:	9303      	str	r3, [sp, #12]
 800a252:	ab0a      	add	r3, sp, #40	@ 0x28
 800a254:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a258:	ab09      	add	r3, sp, #36	@ 0x24
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	6861      	ldr	r1, [r4, #4]
 800a25e:	ec49 8b10 	vmov	d0, r8, r9
 800a262:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a266:	4628      	mov	r0, r5
 800a268:	f7ff fed6 	bl	800a018 <__cvt>
 800a26c:	9b06      	ldr	r3, [sp, #24]
 800a26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a270:	2b47      	cmp	r3, #71	@ 0x47
 800a272:	4680      	mov	r8, r0
 800a274:	d129      	bne.n	800a2ca <_printf_float+0x172>
 800a276:	1cc8      	adds	r0, r1, #3
 800a278:	db02      	blt.n	800a280 <_printf_float+0x128>
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	4299      	cmp	r1, r3
 800a27e:	dd41      	ble.n	800a304 <_printf_float+0x1ac>
 800a280:	f1aa 0a02 	sub.w	sl, sl, #2
 800a284:	fa5f fa8a 	uxtb.w	sl, sl
 800a288:	3901      	subs	r1, #1
 800a28a:	4652      	mov	r2, sl
 800a28c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a290:	9109      	str	r1, [sp, #36]	@ 0x24
 800a292:	f7ff ff26 	bl	800a0e2 <__exponent>
 800a296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a298:	1813      	adds	r3, r2, r0
 800a29a:	2a01      	cmp	r2, #1
 800a29c:	4681      	mov	r9, r0
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	dc02      	bgt.n	800a2a8 <_printf_float+0x150>
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	07d2      	lsls	r2, r2, #31
 800a2a6:	d501      	bpl.n	800a2ac <_printf_float+0x154>
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	6123      	str	r3, [r4, #16]
 800a2ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0a2      	beq.n	800a1fa <_printf_float+0xa2>
 800a2b4:	232d      	movs	r3, #45	@ 0x2d
 800a2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ba:	e79e      	b.n	800a1fa <_printf_float+0xa2>
 800a2bc:	9a06      	ldr	r2, [sp, #24]
 800a2be:	2a47      	cmp	r2, #71	@ 0x47
 800a2c0:	d1c2      	bne.n	800a248 <_printf_float+0xf0>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1c0      	bne.n	800a248 <_printf_float+0xf0>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7bd      	b.n	800a246 <_printf_float+0xee>
 800a2ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2ce:	d9db      	bls.n	800a288 <_printf_float+0x130>
 800a2d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a2d4:	d118      	bne.n	800a308 <_printf_float+0x1b0>
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	6863      	ldr	r3, [r4, #4]
 800a2da:	dd0b      	ble.n	800a2f4 <_printf_float+0x19c>
 800a2dc:	6121      	str	r1, [r4, #16]
 800a2de:	b913      	cbnz	r3, 800a2e6 <_printf_float+0x18e>
 800a2e0:	6822      	ldr	r2, [r4, #0]
 800a2e2:	07d0      	lsls	r0, r2, #31
 800a2e4:	d502      	bpl.n	800a2ec <_printf_float+0x194>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	440b      	add	r3, r1
 800a2ea:	6123      	str	r3, [r4, #16]
 800a2ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a2ee:	f04f 0900 	mov.w	r9, #0
 800a2f2:	e7db      	b.n	800a2ac <_printf_float+0x154>
 800a2f4:	b913      	cbnz	r3, 800a2fc <_printf_float+0x1a4>
 800a2f6:	6822      	ldr	r2, [r4, #0]
 800a2f8:	07d2      	lsls	r2, r2, #31
 800a2fa:	d501      	bpl.n	800a300 <_printf_float+0x1a8>
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	e7f4      	b.n	800a2ea <_printf_float+0x192>
 800a300:	2301      	movs	r3, #1
 800a302:	e7f2      	b.n	800a2ea <_printf_float+0x192>
 800a304:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30a:	4299      	cmp	r1, r3
 800a30c:	db05      	blt.n	800a31a <_printf_float+0x1c2>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	6121      	str	r1, [r4, #16]
 800a312:	07d8      	lsls	r0, r3, #31
 800a314:	d5ea      	bpl.n	800a2ec <_printf_float+0x194>
 800a316:	1c4b      	adds	r3, r1, #1
 800a318:	e7e7      	b.n	800a2ea <_printf_float+0x192>
 800a31a:	2900      	cmp	r1, #0
 800a31c:	bfd4      	ite	le
 800a31e:	f1c1 0202 	rsble	r2, r1, #2
 800a322:	2201      	movgt	r2, #1
 800a324:	4413      	add	r3, r2
 800a326:	e7e0      	b.n	800a2ea <_printf_float+0x192>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	055a      	lsls	r2, r3, #21
 800a32c:	d407      	bmi.n	800a33e <_printf_float+0x1e6>
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	4642      	mov	r2, r8
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	d12b      	bne.n	800a394 <_printf_float+0x23c>
 800a33c:	e767      	b.n	800a20e <_printf_float+0xb6>
 800a33e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a342:	f240 80dd 	bls.w	800a500 <_printf_float+0x3a8>
 800a346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a34a:	2200      	movs	r2, #0
 800a34c:	2300      	movs	r3, #0
 800a34e:	f7f6 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a352:	2800      	cmp	r0, #0
 800a354:	d033      	beq.n	800a3be <_printf_float+0x266>
 800a356:	4a37      	ldr	r2, [pc, #220]	@ (800a434 <_printf_float+0x2dc>)
 800a358:	2301      	movs	r3, #1
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	f43f af54 	beq.w	800a20e <_printf_float+0xb6>
 800a366:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a36a:	4543      	cmp	r3, r8
 800a36c:	db02      	blt.n	800a374 <_printf_float+0x21c>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	07d8      	lsls	r0, r3, #31
 800a372:	d50f      	bpl.n	800a394 <_printf_float+0x23c>
 800a374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a378:	4631      	mov	r1, r6
 800a37a:	4628      	mov	r0, r5
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	f43f af45 	beq.w	800a20e <_printf_float+0xb6>
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	f108 38ff 	add.w	r8, r8, #4294967295
 800a38c:	f104 0a1a 	add.w	sl, r4, #26
 800a390:	45c8      	cmp	r8, r9
 800a392:	dc09      	bgt.n	800a3a8 <_printf_float+0x250>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	079b      	lsls	r3, r3, #30
 800a398:	f100 8103 	bmi.w	800a5a2 <_printf_float+0x44a>
 800a39c:	68e0      	ldr	r0, [r4, #12]
 800a39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a0:	4298      	cmp	r0, r3
 800a3a2:	bfb8      	it	lt
 800a3a4:	4618      	movlt	r0, r3
 800a3a6:	e734      	b.n	800a212 <_printf_float+0xba>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f af2b 	beq.w	800a20e <_printf_float+0xb6>
 800a3b8:	f109 0901 	add.w	r9, r9, #1
 800a3bc:	e7e8      	b.n	800a390 <_printf_float+0x238>
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc39      	bgt.n	800a438 <_printf_float+0x2e0>
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a434 <_printf_float+0x2dc>)
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	f43f af1d 	beq.w	800a20e <_printf_float+0xb6>
 800a3d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a3d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a3dc:	d102      	bne.n	800a3e4 <_printf_float+0x28c>
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	07d9      	lsls	r1, r3, #31
 800a3e2:	d5d7      	bpl.n	800a394 <_printf_float+0x23c>
 800a3e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f af0d 	beq.w	800a20e <_printf_float+0xb6>
 800a3f4:	f04f 0a00 	mov.w	sl, #0
 800a3f8:	f104 0b1a 	add.w	fp, r4, #26
 800a3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fe:	425b      	negs	r3, r3
 800a400:	4553      	cmp	r3, sl
 800a402:	dc01      	bgt.n	800a408 <_printf_float+0x2b0>
 800a404:	464b      	mov	r3, r9
 800a406:	e793      	b.n	800a330 <_printf_float+0x1d8>
 800a408:	2301      	movs	r3, #1
 800a40a:	465a      	mov	r2, fp
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f aefb 	beq.w	800a20e <_printf_float+0xb6>
 800a418:	f10a 0a01 	add.w	sl, sl, #1
 800a41c:	e7ee      	b.n	800a3fc <_printf_float+0x2a4>
 800a41e:	bf00      	nop
 800a420:	7fefffff 	.word	0x7fefffff
 800a424:	0800e244 	.word	0x0800e244
 800a428:	0800e248 	.word	0x0800e248
 800a42c:	0800e24c 	.word	0x0800e24c
 800a430:	0800e250 	.word	0x0800e250
 800a434:	0800e254 	.word	0x0800e254
 800a438:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a43a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a43e:	4553      	cmp	r3, sl
 800a440:	bfa8      	it	ge
 800a442:	4653      	movge	r3, sl
 800a444:	2b00      	cmp	r3, #0
 800a446:	4699      	mov	r9, r3
 800a448:	dc36      	bgt.n	800a4b8 <_printf_float+0x360>
 800a44a:	f04f 0b00 	mov.w	fp, #0
 800a44e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a452:	f104 021a 	add.w	r2, r4, #26
 800a456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a458:	9306      	str	r3, [sp, #24]
 800a45a:	eba3 0309 	sub.w	r3, r3, r9
 800a45e:	455b      	cmp	r3, fp
 800a460:	dc31      	bgt.n	800a4c6 <_printf_float+0x36e>
 800a462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a464:	459a      	cmp	sl, r3
 800a466:	dc3a      	bgt.n	800a4de <_printf_float+0x386>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	07da      	lsls	r2, r3, #31
 800a46c:	d437      	bmi.n	800a4de <_printf_float+0x386>
 800a46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a470:	ebaa 0903 	sub.w	r9, sl, r3
 800a474:	9b06      	ldr	r3, [sp, #24]
 800a476:	ebaa 0303 	sub.w	r3, sl, r3
 800a47a:	4599      	cmp	r9, r3
 800a47c:	bfa8      	it	ge
 800a47e:	4699      	movge	r9, r3
 800a480:	f1b9 0f00 	cmp.w	r9, #0
 800a484:	dc33      	bgt.n	800a4ee <_printf_float+0x396>
 800a486:	f04f 0800 	mov.w	r8, #0
 800a48a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a48e:	f104 0b1a 	add.w	fp, r4, #26
 800a492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a494:	ebaa 0303 	sub.w	r3, sl, r3
 800a498:	eba3 0309 	sub.w	r3, r3, r9
 800a49c:	4543      	cmp	r3, r8
 800a49e:	f77f af79 	ble.w	800a394 <_printf_float+0x23c>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	465a      	mov	r2, fp
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b8      	blx	r7
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	f43f aeae 	beq.w	800a20e <_printf_float+0xb6>
 800a4b2:	f108 0801 	add.w	r8, r8, #1
 800a4b6:	e7ec      	b.n	800a492 <_printf_float+0x33a>
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d1c2      	bne.n	800a44a <_printf_float+0x2f2>
 800a4c4:	e6a3      	b.n	800a20e <_printf_float+0xb6>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	9206      	str	r2, [sp, #24]
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f43f ae9c 	beq.w	800a20e <_printf_float+0xb6>
 800a4d6:	9a06      	ldr	r2, [sp, #24]
 800a4d8:	f10b 0b01 	add.w	fp, fp, #1
 800a4dc:	e7bb      	b.n	800a456 <_printf_float+0x2fe>
 800a4de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d1c0      	bne.n	800a46e <_printf_float+0x316>
 800a4ec:	e68f      	b.n	800a20e <_printf_float+0xb6>
 800a4ee:	9a06      	ldr	r2, [sp, #24]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	4442      	add	r2, r8
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d1c3      	bne.n	800a486 <_printf_float+0x32e>
 800a4fe:	e686      	b.n	800a20e <_printf_float+0xb6>
 800a500:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a504:	f1ba 0f01 	cmp.w	sl, #1
 800a508:	dc01      	bgt.n	800a50e <_printf_float+0x3b6>
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d536      	bpl.n	800a57c <_printf_float+0x424>
 800a50e:	2301      	movs	r3, #1
 800a510:	4642      	mov	r2, r8
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	47b8      	blx	r7
 800a518:	3001      	adds	r0, #1
 800a51a:	f43f ae78 	beq.w	800a20e <_printf_float+0xb6>
 800a51e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a522:	4631      	mov	r1, r6
 800a524:	4628      	mov	r0, r5
 800a526:	47b8      	blx	r7
 800a528:	3001      	adds	r0, #1
 800a52a:	f43f ae70 	beq.w	800a20e <_printf_float+0xb6>
 800a52e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a53a:	f7f6 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a53e:	b9c0      	cbnz	r0, 800a572 <_printf_float+0x41a>
 800a540:	4653      	mov	r3, sl
 800a542:	f108 0201 	add.w	r2, r8, #1
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	47b8      	blx	r7
 800a54c:	3001      	adds	r0, #1
 800a54e:	d10c      	bne.n	800a56a <_printf_float+0x412>
 800a550:	e65d      	b.n	800a20e <_printf_float+0xb6>
 800a552:	2301      	movs	r3, #1
 800a554:	465a      	mov	r2, fp
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	f43f ae56 	beq.w	800a20e <_printf_float+0xb6>
 800a562:	f108 0801 	add.w	r8, r8, #1
 800a566:	45d0      	cmp	r8, sl
 800a568:	dbf3      	blt.n	800a552 <_printf_float+0x3fa>
 800a56a:	464b      	mov	r3, r9
 800a56c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a570:	e6df      	b.n	800a332 <_printf_float+0x1da>
 800a572:	f04f 0800 	mov.w	r8, #0
 800a576:	f104 0b1a 	add.w	fp, r4, #26
 800a57a:	e7f4      	b.n	800a566 <_printf_float+0x40e>
 800a57c:	2301      	movs	r3, #1
 800a57e:	4642      	mov	r2, r8
 800a580:	e7e1      	b.n	800a546 <_printf_float+0x3ee>
 800a582:	2301      	movs	r3, #1
 800a584:	464a      	mov	r2, r9
 800a586:	4631      	mov	r1, r6
 800a588:	4628      	mov	r0, r5
 800a58a:	47b8      	blx	r7
 800a58c:	3001      	adds	r0, #1
 800a58e:	f43f ae3e 	beq.w	800a20e <_printf_float+0xb6>
 800a592:	f108 0801 	add.w	r8, r8, #1
 800a596:	68e3      	ldr	r3, [r4, #12]
 800a598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a59a:	1a5b      	subs	r3, r3, r1
 800a59c:	4543      	cmp	r3, r8
 800a59e:	dcf0      	bgt.n	800a582 <_printf_float+0x42a>
 800a5a0:	e6fc      	b.n	800a39c <_printf_float+0x244>
 800a5a2:	f04f 0800 	mov.w	r8, #0
 800a5a6:	f104 0919 	add.w	r9, r4, #25
 800a5aa:	e7f4      	b.n	800a596 <_printf_float+0x43e>

0800a5ac <_printf_common>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	688a      	ldr	r2, [r1, #8]
 800a5b6:	690b      	ldr	r3, [r1, #16]
 800a5b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	bfb8      	it	lt
 800a5c0:	4613      	movlt	r3, r2
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_printf_common+0x26>
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	0699      	lsls	r1, r3, #26
 800a5d6:	bf42      	ittt	mi
 800a5d8:	6833      	ldrmi	r3, [r6, #0]
 800a5da:	3302      	addmi	r3, #2
 800a5dc:	6033      	strmi	r3, [r6, #0]
 800a5de:	6825      	ldr	r5, [r4, #0]
 800a5e0:	f015 0506 	ands.w	r5, r5, #6
 800a5e4:	d106      	bne.n	800a5f4 <_printf_common+0x48>
 800a5e6:	f104 0a19 	add.w	sl, r4, #25
 800a5ea:	68e3      	ldr	r3, [r4, #12]
 800a5ec:	6832      	ldr	r2, [r6, #0]
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	dc26      	bgt.n	800a642 <_printf_common+0x96>
 800a5f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	3b00      	subs	r3, #0
 800a5fc:	bf18      	it	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	0692      	lsls	r2, r2, #26
 800a602:	d42b      	bmi.n	800a65c <_printf_common+0xb0>
 800a604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a608:	4641      	mov	r1, r8
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c8      	blx	r9
 800a60e:	3001      	adds	r0, #1
 800a610:	d01e      	beq.n	800a650 <_printf_common+0xa4>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6922      	ldr	r2, [r4, #16]
 800a616:	f003 0306 	and.w	r3, r3, #6
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	bf02      	ittt	eq
 800a61e:	68e5      	ldreq	r5, [r4, #12]
 800a620:	6833      	ldreq	r3, [r6, #0]
 800a622:	1aed      	subeq	r5, r5, r3
 800a624:	68a3      	ldr	r3, [r4, #8]
 800a626:	bf0c      	ite	eq
 800a628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a62c:	2500      	movne	r5, #0
 800a62e:	4293      	cmp	r3, r2
 800a630:	bfc4      	itt	gt
 800a632:	1a9b      	subgt	r3, r3, r2
 800a634:	18ed      	addgt	r5, r5, r3
 800a636:	2600      	movs	r6, #0
 800a638:	341a      	adds	r4, #26
 800a63a:	42b5      	cmp	r5, r6
 800a63c:	d11a      	bne.n	800a674 <_printf_common+0xc8>
 800a63e:	2000      	movs	r0, #0
 800a640:	e008      	b.n	800a654 <_printf_common+0xa8>
 800a642:	2301      	movs	r3, #1
 800a644:	4652      	mov	r2, sl
 800a646:	4641      	mov	r1, r8
 800a648:	4638      	mov	r0, r7
 800a64a:	47c8      	blx	r9
 800a64c:	3001      	adds	r0, #1
 800a64e:	d103      	bne.n	800a658 <_printf_common+0xac>
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	3501      	adds	r5, #1
 800a65a:	e7c6      	b.n	800a5ea <_printf_common+0x3e>
 800a65c:	18e1      	adds	r1, r4, r3
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	2030      	movs	r0, #48	@ 0x30
 800a662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a666:	4422      	add	r2, r4
 800a668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a66c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a670:	3302      	adds	r3, #2
 800a672:	e7c7      	b.n	800a604 <_printf_common+0x58>
 800a674:	2301      	movs	r3, #1
 800a676:	4622      	mov	r2, r4
 800a678:	4641      	mov	r1, r8
 800a67a:	4638      	mov	r0, r7
 800a67c:	47c8      	blx	r9
 800a67e:	3001      	adds	r0, #1
 800a680:	d0e6      	beq.n	800a650 <_printf_common+0xa4>
 800a682:	3601      	adds	r6, #1
 800a684:	e7d9      	b.n	800a63a <_printf_common+0x8e>
	...

0800a688 <_printf_i>:
 800a688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	7e0f      	ldrb	r7, [r1, #24]
 800a68e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a690:	2f78      	cmp	r7, #120	@ 0x78
 800a692:	4691      	mov	r9, r2
 800a694:	4680      	mov	r8, r0
 800a696:	460c      	mov	r4, r1
 800a698:	469a      	mov	sl, r3
 800a69a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a69e:	d807      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6a0:	2f62      	cmp	r7, #98	@ 0x62
 800a6a2:	d80a      	bhi.n	800a6ba <_printf_i+0x32>
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	f000 80d2 	beq.w	800a84e <_printf_i+0x1c6>
 800a6aa:	2f58      	cmp	r7, #88	@ 0x58
 800a6ac:	f000 80b9 	beq.w	800a822 <_printf_i+0x19a>
 800a6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6b8:	e03a      	b.n	800a730 <_printf_i+0xa8>
 800a6ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6be:	2b15      	cmp	r3, #21
 800a6c0:	d8f6      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6c2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6c8 <_printf_i+0x40>)
 800a6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a735 	.word	0x0800a735
 800a6d0:	0800a6b1 	.word	0x0800a6b1
 800a6d4:	0800a6b1 	.word	0x0800a6b1
 800a6d8:	0800a6b1 	.word	0x0800a6b1
 800a6dc:	0800a6b1 	.word	0x0800a6b1
 800a6e0:	0800a735 	.word	0x0800a735
 800a6e4:	0800a6b1 	.word	0x0800a6b1
 800a6e8:	0800a6b1 	.word	0x0800a6b1
 800a6ec:	0800a6b1 	.word	0x0800a6b1
 800a6f0:	0800a6b1 	.word	0x0800a6b1
 800a6f4:	0800a835 	.word	0x0800a835
 800a6f8:	0800a75f 	.word	0x0800a75f
 800a6fc:	0800a7ef 	.word	0x0800a7ef
 800a700:	0800a6b1 	.word	0x0800a6b1
 800a704:	0800a6b1 	.word	0x0800a6b1
 800a708:	0800a857 	.word	0x0800a857
 800a70c:	0800a6b1 	.word	0x0800a6b1
 800a710:	0800a75f 	.word	0x0800a75f
 800a714:	0800a6b1 	.word	0x0800a6b1
 800a718:	0800a6b1 	.word	0x0800a6b1
 800a71c:	0800a7f7 	.word	0x0800a7f7
 800a720:	6833      	ldr	r3, [r6, #0]
 800a722:	1d1a      	adds	r2, r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6032      	str	r2, [r6, #0]
 800a728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a72c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a730:	2301      	movs	r3, #1
 800a732:	e09d      	b.n	800a870 <_printf_i+0x1e8>
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	1d19      	adds	r1, r3, #4
 800a73a:	6031      	str	r1, [r6, #0]
 800a73c:	0606      	lsls	r6, r0, #24
 800a73e:	d501      	bpl.n	800a744 <_printf_i+0xbc>
 800a740:	681d      	ldr	r5, [r3, #0]
 800a742:	e003      	b.n	800a74c <_printf_i+0xc4>
 800a744:	0645      	lsls	r5, r0, #25
 800a746:	d5fb      	bpl.n	800a740 <_printf_i+0xb8>
 800a748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	da03      	bge.n	800a758 <_printf_i+0xd0>
 800a750:	232d      	movs	r3, #45	@ 0x2d
 800a752:	426d      	negs	r5, r5
 800a754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a758:	4859      	ldr	r0, [pc, #356]	@ (800a8c0 <_printf_i+0x238>)
 800a75a:	230a      	movs	r3, #10
 800a75c:	e011      	b.n	800a782 <_printf_i+0xfa>
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	6833      	ldr	r3, [r6, #0]
 800a762:	0608      	lsls	r0, r1, #24
 800a764:	f853 5b04 	ldr.w	r5, [r3], #4
 800a768:	d402      	bmi.n	800a770 <_printf_i+0xe8>
 800a76a:	0649      	lsls	r1, r1, #25
 800a76c:	bf48      	it	mi
 800a76e:	b2ad      	uxthmi	r5, r5
 800a770:	2f6f      	cmp	r7, #111	@ 0x6f
 800a772:	4853      	ldr	r0, [pc, #332]	@ (800a8c0 <_printf_i+0x238>)
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	bf14      	ite	ne
 800a778:	230a      	movne	r3, #10
 800a77a:	2308      	moveq	r3, #8
 800a77c:	2100      	movs	r1, #0
 800a77e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a782:	6866      	ldr	r6, [r4, #4]
 800a784:	60a6      	str	r6, [r4, #8]
 800a786:	2e00      	cmp	r6, #0
 800a788:	bfa2      	ittt	ge
 800a78a:	6821      	ldrge	r1, [r4, #0]
 800a78c:	f021 0104 	bicge.w	r1, r1, #4
 800a790:	6021      	strge	r1, [r4, #0]
 800a792:	b90d      	cbnz	r5, 800a798 <_printf_i+0x110>
 800a794:	2e00      	cmp	r6, #0
 800a796:	d04b      	beq.n	800a830 <_printf_i+0x1a8>
 800a798:	4616      	mov	r6, r2
 800a79a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a79e:	fb03 5711 	mls	r7, r3, r1, r5
 800a7a2:	5dc7      	ldrb	r7, [r0, r7]
 800a7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7a8:	462f      	mov	r7, r5
 800a7aa:	42bb      	cmp	r3, r7
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	d9f4      	bls.n	800a79a <_printf_i+0x112>
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10b      	bne.n	800a7cc <_printf_i+0x144>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07df      	lsls	r7, r3, #31
 800a7b8:	d508      	bpl.n	800a7cc <_printf_i+0x144>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	bfde      	ittt	le
 800a7c2:	2330      	movle	r3, #48	@ 0x30
 800a7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7cc:	1b92      	subs	r2, r2, r6
 800a7ce:	6122      	str	r2, [r4, #16]
 800a7d0:	f8cd a000 	str.w	sl, [sp]
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fee6 	bl	800a5ac <_printf_common>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d14a      	bne.n	800a87a <_printf_i+0x1f2>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	4833      	ldr	r0, [pc, #204]	@ (800a8c4 <_printf_i+0x23c>)
 800a7f8:	2778      	movs	r7, #120	@ 0x78
 800a7fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6831      	ldr	r1, [r6, #0]
 800a802:	061f      	lsls	r7, r3, #24
 800a804:	f851 5b04 	ldr.w	r5, [r1], #4
 800a808:	d402      	bmi.n	800a810 <_printf_i+0x188>
 800a80a:	065f      	lsls	r7, r3, #25
 800a80c:	bf48      	it	mi
 800a80e:	b2ad      	uxthmi	r5, r5
 800a810:	6031      	str	r1, [r6, #0]
 800a812:	07d9      	lsls	r1, r3, #31
 800a814:	bf44      	itt	mi
 800a816:	f043 0320 	orrmi.w	r3, r3, #32
 800a81a:	6023      	strmi	r3, [r4, #0]
 800a81c:	b11d      	cbz	r5, 800a826 <_printf_i+0x19e>
 800a81e:	2310      	movs	r3, #16
 800a820:	e7ac      	b.n	800a77c <_printf_i+0xf4>
 800a822:	4827      	ldr	r0, [pc, #156]	@ (800a8c0 <_printf_i+0x238>)
 800a824:	e7e9      	b.n	800a7fa <_printf_i+0x172>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f023 0320 	bic.w	r3, r3, #32
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	e7f6      	b.n	800a81e <_printf_i+0x196>
 800a830:	4616      	mov	r6, r2
 800a832:	e7bd      	b.n	800a7b0 <_printf_i+0x128>
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6961      	ldr	r1, [r4, #20]
 800a83a:	1d18      	adds	r0, r3, #4
 800a83c:	6030      	str	r0, [r6, #0]
 800a83e:	062e      	lsls	r6, r5, #24
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	d501      	bpl.n	800a848 <_printf_i+0x1c0>
 800a844:	6019      	str	r1, [r3, #0]
 800a846:	e002      	b.n	800a84e <_printf_i+0x1c6>
 800a848:	0668      	lsls	r0, r5, #25
 800a84a:	d5fb      	bpl.n	800a844 <_printf_i+0x1bc>
 800a84c:	8019      	strh	r1, [r3, #0]
 800a84e:	2300      	movs	r3, #0
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	4616      	mov	r6, r2
 800a854:	e7bc      	b.n	800a7d0 <_printf_i+0x148>
 800a856:	6833      	ldr	r3, [r6, #0]
 800a858:	1d1a      	adds	r2, r3, #4
 800a85a:	6032      	str	r2, [r6, #0]
 800a85c:	681e      	ldr	r6, [r3, #0]
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	2100      	movs	r1, #0
 800a862:	4630      	mov	r0, r6
 800a864:	f7f5 fcb4 	bl	80001d0 <memchr>
 800a868:	b108      	cbz	r0, 800a86e <_printf_i+0x1e6>
 800a86a:	1b80      	subs	r0, r0, r6
 800a86c:	6060      	str	r0, [r4, #4]
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	2300      	movs	r3, #0
 800a874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a878:	e7aa      	b.n	800a7d0 <_printf_i+0x148>
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	4632      	mov	r2, r6
 800a87e:	4649      	mov	r1, r9
 800a880:	4640      	mov	r0, r8
 800a882:	47d0      	blx	sl
 800a884:	3001      	adds	r0, #1
 800a886:	d0ad      	beq.n	800a7e4 <_printf_i+0x15c>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	079b      	lsls	r3, r3, #30
 800a88c:	d413      	bmi.n	800a8b6 <_printf_i+0x22e>
 800a88e:	68e0      	ldr	r0, [r4, #12]
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	4298      	cmp	r0, r3
 800a894:	bfb8      	it	lt
 800a896:	4618      	movlt	r0, r3
 800a898:	e7a6      	b.n	800a7e8 <_printf_i+0x160>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4632      	mov	r2, r6
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d09d      	beq.n	800a7e4 <_printf_i+0x15c>
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	9903      	ldr	r1, [sp, #12]
 800a8ae:	1a5b      	subs	r3, r3, r1
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dcf2      	bgt.n	800a89a <_printf_i+0x212>
 800a8b4:	e7eb      	b.n	800a88e <_printf_i+0x206>
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	f104 0619 	add.w	r6, r4, #25
 800a8bc:	e7f5      	b.n	800a8aa <_printf_i+0x222>
 800a8be:	bf00      	nop
 800a8c0:	0800e256 	.word	0x0800e256
 800a8c4:	0800e267 	.word	0x0800e267

0800a8c8 <std>:
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d6:	6083      	str	r3, [r0, #8]
 800a8d8:	8181      	strh	r1, [r0, #12]
 800a8da:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8dc:	81c2      	strh	r2, [r0, #14]
 800a8de:	6183      	str	r3, [r0, #24]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	2208      	movs	r2, #8
 800a8e4:	305c      	adds	r0, #92	@ 0x5c
 800a8e6:	f000 f948 	bl	800ab7a <memset>
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a920 <std+0x58>)
 800a8ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a924 <std+0x5c>)
 800a8f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <std+0x60>)
 800a8f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <std+0x64>)
 800a8f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a930 <std+0x68>)
 800a8fc:	6224      	str	r4, [r4, #32]
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d006      	beq.n	800a910 <std+0x48>
 800a902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a906:	4294      	cmp	r4, r2
 800a908:	d002      	beq.n	800a910 <std+0x48>
 800a90a:	33d0      	adds	r3, #208	@ 0xd0
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d105      	bne.n	800a91c <std+0x54>
 800a910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a918:	f000 ba02 	b.w	800ad20 <__retarget_lock_init_recursive>
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	bf00      	nop
 800a920:	0800aaf5 	.word	0x0800aaf5
 800a924:	0800ab17 	.word	0x0800ab17
 800a928:	0800ab4f 	.word	0x0800ab4f
 800a92c:	0800ab73 	.word	0x0800ab73
 800a930:	20004b14 	.word	0x20004b14

0800a934 <stdio_exit_handler>:
 800a934:	4a02      	ldr	r2, [pc, #8]	@ (800a940 <stdio_exit_handler+0xc>)
 800a936:	4903      	ldr	r1, [pc, #12]	@ (800a944 <stdio_exit_handler+0x10>)
 800a938:	4803      	ldr	r0, [pc, #12]	@ (800a948 <stdio_exit_handler+0x14>)
 800a93a:	f000 b869 	b.w	800aa10 <_fwalk_sglue>
 800a93e:	bf00      	nop
 800a940:	20000010 	.word	0x20000010
 800a944:	0800c69d 	.word	0x0800c69d
 800a948:	20000020 	.word	0x20000020

0800a94c <cleanup_stdio>:
 800a94c:	6841      	ldr	r1, [r0, #4]
 800a94e:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <cleanup_stdio+0x34>)
 800a950:	4299      	cmp	r1, r3
 800a952:	b510      	push	{r4, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	d001      	beq.n	800a95c <cleanup_stdio+0x10>
 800a958:	f001 fea0 	bl	800c69c <_fflush_r>
 800a95c:	68a1      	ldr	r1, [r4, #8]
 800a95e:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <cleanup_stdio+0x38>)
 800a960:	4299      	cmp	r1, r3
 800a962:	d002      	beq.n	800a96a <cleanup_stdio+0x1e>
 800a964:	4620      	mov	r0, r4
 800a966:	f001 fe99 	bl	800c69c <_fflush_r>
 800a96a:	68e1      	ldr	r1, [r4, #12]
 800a96c:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <cleanup_stdio+0x3c>)
 800a96e:	4299      	cmp	r1, r3
 800a970:	d004      	beq.n	800a97c <cleanup_stdio+0x30>
 800a972:	4620      	mov	r0, r4
 800a974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a978:	f001 be90 	b.w	800c69c <_fflush_r>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	bf00      	nop
 800a980:	20004b14 	.word	0x20004b14
 800a984:	20004b7c 	.word	0x20004b7c
 800a988:	20004be4 	.word	0x20004be4

0800a98c <global_stdio_init.part.0>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <global_stdio_init.part.0+0x30>)
 800a990:	4c0b      	ldr	r4, [pc, #44]	@ (800a9c0 <global_stdio_init.part.0+0x34>)
 800a992:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c4 <global_stdio_init.part.0+0x38>)
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	4620      	mov	r0, r4
 800a998:	2200      	movs	r2, #0
 800a99a:	2104      	movs	r1, #4
 800a99c:	f7ff ff94 	bl	800a8c8 <std>
 800a9a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	2109      	movs	r1, #9
 800a9a8:	f7ff ff8e 	bl	800a8c8 <std>
 800a9ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b6:	2112      	movs	r1, #18
 800a9b8:	f7ff bf86 	b.w	800a8c8 <std>
 800a9bc:	20004c4c 	.word	0x20004c4c
 800a9c0:	20004b14 	.word	0x20004b14
 800a9c4:	0800a935 	.word	0x0800a935

0800a9c8 <__sfp_lock_acquire>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	@ (800a9d0 <__sfp_lock_acquire+0x8>)
 800a9ca:	f000 b9aa 	b.w	800ad22 <__retarget_lock_acquire_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20004c55 	.word	0x20004c55

0800a9d4 <__sfp_lock_release>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__sfp_lock_release+0x8>)
 800a9d6:	f000 b9a5 	b.w	800ad24 <__retarget_lock_release_recursive>
 800a9da:	bf00      	nop
 800a9dc:	20004c55 	.word	0x20004c55

0800a9e0 <__sinit>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	f7ff fff0 	bl	800a9c8 <__sfp_lock_acquire>
 800a9e8:	6a23      	ldr	r3, [r4, #32]
 800a9ea:	b11b      	cbz	r3, 800a9f4 <__sinit+0x14>
 800a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f0:	f7ff bff0 	b.w	800a9d4 <__sfp_lock_release>
 800a9f4:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <__sinit+0x28>)
 800a9f6:	6223      	str	r3, [r4, #32]
 800a9f8:	4b04      	ldr	r3, [pc, #16]	@ (800aa0c <__sinit+0x2c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1f5      	bne.n	800a9ec <__sinit+0xc>
 800aa00:	f7ff ffc4 	bl	800a98c <global_stdio_init.part.0>
 800aa04:	e7f2      	b.n	800a9ec <__sinit+0xc>
 800aa06:	bf00      	nop
 800aa08:	0800a94d 	.word	0x0800a94d
 800aa0c:	20004c4c 	.word	0x20004c4c

0800aa10 <_fwalk_sglue>:
 800aa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa14:	4607      	mov	r7, r0
 800aa16:	4688      	mov	r8, r1
 800aa18:	4614      	mov	r4, r2
 800aa1a:	2600      	movs	r6, #0
 800aa1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa20:	f1b9 0901 	subs.w	r9, r9, #1
 800aa24:	d505      	bpl.n	800aa32 <_fwalk_sglue+0x22>
 800aa26:	6824      	ldr	r4, [r4, #0]
 800aa28:	2c00      	cmp	r4, #0
 800aa2a:	d1f7      	bne.n	800aa1c <_fwalk_sglue+0xc>
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d907      	bls.n	800aa48 <_fwalk_sglue+0x38>
 800aa38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	d003      	beq.n	800aa48 <_fwalk_sglue+0x38>
 800aa40:	4629      	mov	r1, r5
 800aa42:	4638      	mov	r0, r7
 800aa44:	47c0      	blx	r8
 800aa46:	4306      	orrs	r6, r0
 800aa48:	3568      	adds	r5, #104	@ 0x68
 800aa4a:	e7e9      	b.n	800aa20 <_fwalk_sglue+0x10>

0800aa4c <sniprintf>:
 800aa4c:	b40c      	push	{r2, r3}
 800aa4e:	b530      	push	{r4, r5, lr}
 800aa50:	4b17      	ldr	r3, [pc, #92]	@ (800aab0 <sniprintf+0x64>)
 800aa52:	1e0c      	subs	r4, r1, #0
 800aa54:	681d      	ldr	r5, [r3, #0]
 800aa56:	b09d      	sub	sp, #116	@ 0x74
 800aa58:	da08      	bge.n	800aa6c <sniprintf+0x20>
 800aa5a:	238b      	movs	r3, #139	@ 0x8b
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa62:	b01d      	add	sp, #116	@ 0x74
 800aa64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa68:	b002      	add	sp, #8
 800aa6a:	4770      	bx	lr
 800aa6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa74:	bf14      	ite	ne
 800aa76:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa7a:	4623      	moveq	r3, r4
 800aa7c:	9304      	str	r3, [sp, #16]
 800aa7e:	9307      	str	r3, [sp, #28]
 800aa80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa84:	9002      	str	r0, [sp, #8]
 800aa86:	9006      	str	r0, [sp, #24]
 800aa88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa8e:	ab21      	add	r3, sp, #132	@ 0x84
 800aa90:	a902      	add	r1, sp, #8
 800aa92:	4628      	mov	r0, r5
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	f001 fc81 	bl	800c39c <_svfiprintf_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	bfbc      	itt	lt
 800aa9e:	238b      	movlt	r3, #139	@ 0x8b
 800aaa0:	602b      	strlt	r3, [r5, #0]
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	d0dd      	beq.n	800aa62 <sniprintf+0x16>
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	e7d9      	b.n	800aa62 <sniprintf+0x16>
 800aaae:	bf00      	nop
 800aab0:	2000001c 	.word	0x2000001c

0800aab4 <siprintf>:
 800aab4:	b40e      	push	{r1, r2, r3}
 800aab6:	b500      	push	{lr}
 800aab8:	b09c      	sub	sp, #112	@ 0x70
 800aaba:	ab1d      	add	r3, sp, #116	@ 0x74
 800aabc:	9002      	str	r0, [sp, #8]
 800aabe:	9006      	str	r0, [sp, #24]
 800aac0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aac4:	4809      	ldr	r0, [pc, #36]	@ (800aaec <siprintf+0x38>)
 800aac6:	9107      	str	r1, [sp, #28]
 800aac8:	9104      	str	r1, [sp, #16]
 800aaca:	4909      	ldr	r1, [pc, #36]	@ (800aaf0 <siprintf+0x3c>)
 800aacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad0:	9105      	str	r1, [sp, #20]
 800aad2:	6800      	ldr	r0, [r0, #0]
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	a902      	add	r1, sp, #8
 800aad8:	f001 fc60 	bl	800c39c <_svfiprintf_r>
 800aadc:	9b02      	ldr	r3, [sp, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	b01c      	add	sp, #112	@ 0x70
 800aae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aae8:	b003      	add	sp, #12
 800aaea:	4770      	bx	lr
 800aaec:	2000001c 	.word	0x2000001c
 800aaf0:	ffff0208 	.word	0xffff0208

0800aaf4 <__sread>:
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafc:	f000 f8c2 	bl	800ac84 <_read_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	bfab      	itete	ge
 800ab04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab06:	89a3      	ldrhlt	r3, [r4, #12]
 800ab08:	181b      	addge	r3, r3, r0
 800ab0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab0e:	bfac      	ite	ge
 800ab10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab12:	81a3      	strhlt	r3, [r4, #12]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <__swrite>:
 800ab16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1a:	461f      	mov	r7, r3
 800ab1c:	898b      	ldrh	r3, [r1, #12]
 800ab1e:	05db      	lsls	r3, r3, #23
 800ab20:	4605      	mov	r5, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	4616      	mov	r6, r2
 800ab26:	d505      	bpl.n	800ab34 <__swrite+0x1e>
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f000 f896 	bl	800ac60 <_lseek_r>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	4632      	mov	r2, r6
 800ab42:	463b      	mov	r3, r7
 800ab44:	4628      	mov	r0, r5
 800ab46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4a:	f000 b8ad 	b.w	800aca8 <_write_r>

0800ab4e <__sseek>:
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	460c      	mov	r4, r1
 800ab52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab56:	f000 f883 	bl	800ac60 <_lseek_r>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	bf15      	itete	ne
 800ab60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab6a:	81a3      	strheq	r3, [r4, #12]
 800ab6c:	bf18      	it	ne
 800ab6e:	81a3      	strhne	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__sclose>:
 800ab72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab76:	f000 b80d 	b.w	800ab94 <_close_r>

0800ab7a <memset>:
 800ab7a:	4402      	add	r2, r0
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d100      	bne.n	800ab84 <memset+0xa>
 800ab82:	4770      	bx	lr
 800ab84:	f803 1b01 	strb.w	r1, [r3], #1
 800ab88:	e7f9      	b.n	800ab7e <memset+0x4>
	...

0800ab8c <_localeconv_r>:
 800ab8c:	4800      	ldr	r0, [pc, #0]	@ (800ab90 <_localeconv_r+0x4>)
 800ab8e:	4770      	bx	lr
 800ab90:	2000015c 	.word	0x2000015c

0800ab94 <_close_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d06      	ldr	r5, [pc, #24]	@ (800abb0 <_close_r+0x1c>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f7 fe3a 	bl	8002818 <_close>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_close_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_close_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20004c50 	.word	0x20004c50

0800abb4 <_reclaim_reent>:
 800abb4:	4b29      	ldr	r3, [pc, #164]	@ (800ac5c <_reclaim_reent+0xa8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4283      	cmp	r3, r0
 800abba:	b570      	push	{r4, r5, r6, lr}
 800abbc:	4604      	mov	r4, r0
 800abbe:	d04b      	beq.n	800ac58 <_reclaim_reent+0xa4>
 800abc0:	69c3      	ldr	r3, [r0, #28]
 800abc2:	b1ab      	cbz	r3, 800abf0 <_reclaim_reent+0x3c>
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	b16b      	cbz	r3, 800abe4 <_reclaim_reent+0x30>
 800abc8:	2500      	movs	r5, #0
 800abca:	69e3      	ldr	r3, [r4, #28]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	5959      	ldr	r1, [r3, r5]
 800abd0:	2900      	cmp	r1, #0
 800abd2:	d13b      	bne.n	800ac4c <_reclaim_reent+0x98>
 800abd4:	3504      	adds	r5, #4
 800abd6:	2d80      	cmp	r5, #128	@ 0x80
 800abd8:	d1f7      	bne.n	800abca <_reclaim_reent+0x16>
 800abda:	69e3      	ldr	r3, [r4, #28]
 800abdc:	4620      	mov	r0, r4
 800abde:	68d9      	ldr	r1, [r3, #12]
 800abe0:	f000 fefe 	bl	800b9e0 <_free_r>
 800abe4:	69e3      	ldr	r3, [r4, #28]
 800abe6:	6819      	ldr	r1, [r3, #0]
 800abe8:	b111      	cbz	r1, 800abf0 <_reclaim_reent+0x3c>
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fef8 	bl	800b9e0 <_free_r>
 800abf0:	6961      	ldr	r1, [r4, #20]
 800abf2:	b111      	cbz	r1, 800abfa <_reclaim_reent+0x46>
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fef3 	bl	800b9e0 <_free_r>
 800abfa:	69e1      	ldr	r1, [r4, #28]
 800abfc:	b111      	cbz	r1, 800ac04 <_reclaim_reent+0x50>
 800abfe:	4620      	mov	r0, r4
 800ac00:	f000 feee 	bl	800b9e0 <_free_r>
 800ac04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac06:	b111      	cbz	r1, 800ac0e <_reclaim_reent+0x5a>
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fee9 	bl	800b9e0 <_free_r>
 800ac0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac10:	b111      	cbz	r1, 800ac18 <_reclaim_reent+0x64>
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fee4 	bl	800b9e0 <_free_r>
 800ac18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ac1a:	b111      	cbz	r1, 800ac22 <_reclaim_reent+0x6e>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fedf 	bl	800b9e0 <_free_r>
 800ac22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac24:	b111      	cbz	r1, 800ac2c <_reclaim_reent+0x78>
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 feda 	bl	800b9e0 <_free_r>
 800ac2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac2e:	b111      	cbz	r1, 800ac36 <_reclaim_reent+0x82>
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fed5 	bl	800b9e0 <_free_r>
 800ac36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac38:	b111      	cbz	r1, 800ac40 <_reclaim_reent+0x8c>
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 fed0 	bl	800b9e0 <_free_r>
 800ac40:	6a23      	ldr	r3, [r4, #32]
 800ac42:	b14b      	cbz	r3, 800ac58 <_reclaim_reent+0xa4>
 800ac44:	4620      	mov	r0, r4
 800ac46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac4a:	4718      	bx	r3
 800ac4c:	680e      	ldr	r6, [r1, #0]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fec6 	bl	800b9e0 <_free_r>
 800ac54:	4631      	mov	r1, r6
 800ac56:	e7bb      	b.n	800abd0 <_reclaim_reent+0x1c>
 800ac58:	bd70      	pop	{r4, r5, r6, pc}
 800ac5a:	bf00      	nop
 800ac5c:	2000001c 	.word	0x2000001c

0800ac60 <_lseek_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4d07      	ldr	r5, [pc, #28]	@ (800ac80 <_lseek_r+0x20>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	4608      	mov	r0, r1
 800ac68:	4611      	mov	r1, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f7f7 fdf9 	bl	8002866 <_lseek>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_lseek_r+0x1e>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_lseek_r+0x1e>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	20004c50 	.word	0x20004c50

0800ac84 <_read_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d07      	ldr	r5, [pc, #28]	@ (800aca4 <_read_r+0x20>)
 800ac88:	4604      	mov	r4, r0
 800ac8a:	4608      	mov	r0, r1
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	2200      	movs	r2, #0
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f7 fd87 	bl	80027a6 <_read>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_read_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_read_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20004c50 	.word	0x20004c50

0800aca8 <_write_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	@ (800acc8 <_write_r+0x20>)
 800acac:	4604      	mov	r4, r0
 800acae:	4608      	mov	r0, r1
 800acb0:	4611      	mov	r1, r2
 800acb2:	2200      	movs	r2, #0
 800acb4:	602a      	str	r2, [r5, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f7f7 fd92 	bl	80027e0 <_write>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_write_r+0x1e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_write_r+0x1e>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20004c50 	.word	0x20004c50

0800accc <__errno>:
 800accc:	4b01      	ldr	r3, [pc, #4]	@ (800acd4 <__errno+0x8>)
 800acce:	6818      	ldr	r0, [r3, #0]
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	2000001c 	.word	0x2000001c

0800acd8 <__libc_init_array>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	4d0d      	ldr	r5, [pc, #52]	@ (800ad10 <__libc_init_array+0x38>)
 800acdc:	4c0d      	ldr	r4, [pc, #52]	@ (800ad14 <__libc_init_array+0x3c>)
 800acde:	1b64      	subs	r4, r4, r5
 800ace0:	10a4      	asrs	r4, r4, #2
 800ace2:	2600      	movs	r6, #0
 800ace4:	42a6      	cmp	r6, r4
 800ace6:	d109      	bne.n	800acfc <__libc_init_array+0x24>
 800ace8:	4d0b      	ldr	r5, [pc, #44]	@ (800ad18 <__libc_init_array+0x40>)
 800acea:	4c0c      	ldr	r4, [pc, #48]	@ (800ad1c <__libc_init_array+0x44>)
 800acec:	f002 fa66 	bl	800d1bc <_init>
 800acf0:	1b64      	subs	r4, r4, r5
 800acf2:	10a4      	asrs	r4, r4, #2
 800acf4:	2600      	movs	r6, #0
 800acf6:	42a6      	cmp	r6, r4
 800acf8:	d105      	bne.n	800ad06 <__libc_init_array+0x2e>
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad00:	4798      	blx	r3
 800ad02:	3601      	adds	r6, #1
 800ad04:	e7ee      	b.n	800ace4 <__libc_init_array+0xc>
 800ad06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad0a:	4798      	blx	r3
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	e7f2      	b.n	800acf6 <__libc_init_array+0x1e>
 800ad10:	0800e5c0 	.word	0x0800e5c0
 800ad14:	0800e5c0 	.word	0x0800e5c0
 800ad18:	0800e5c0 	.word	0x0800e5c0
 800ad1c:	0800e5c4 	.word	0x0800e5c4

0800ad20 <__retarget_lock_init_recursive>:
 800ad20:	4770      	bx	lr

0800ad22 <__retarget_lock_acquire_recursive>:
 800ad22:	4770      	bx	lr

0800ad24 <__retarget_lock_release_recursive>:
 800ad24:	4770      	bx	lr

0800ad26 <memcpy>:
 800ad26:	440a      	add	r2, r1
 800ad28:	4291      	cmp	r1, r2
 800ad2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad2e:	d100      	bne.n	800ad32 <memcpy+0xc>
 800ad30:	4770      	bx	lr
 800ad32:	b510      	push	{r4, lr}
 800ad34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad3c:	4291      	cmp	r1, r2
 800ad3e:	d1f9      	bne.n	800ad34 <memcpy+0xe>
 800ad40:	bd10      	pop	{r4, pc}

0800ad42 <quorem>:
 800ad42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad46:	6903      	ldr	r3, [r0, #16]
 800ad48:	690c      	ldr	r4, [r1, #16]
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	db7e      	blt.n	800ae4e <quorem+0x10c>
 800ad50:	3c01      	subs	r4, #1
 800ad52:	f101 0814 	add.w	r8, r1, #20
 800ad56:	00a3      	lsls	r3, r4, #2
 800ad58:	f100 0514 	add.w	r5, r0, #20
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad78:	d32e      	bcc.n	800add8 <quorem+0x96>
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	46c4      	mov	ip, r8
 800ad80:	46ae      	mov	lr, r5
 800ad82:	46d3      	mov	fp, sl
 800ad84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad88:	b298      	uxth	r0, r3
 800ad8a:	fb06 a000 	mla	r0, r6, r0, sl
 800ad8e:	0c02      	lsrs	r2, r0, #16
 800ad90:	0c1b      	lsrs	r3, r3, #16
 800ad92:	fb06 2303 	mla	r3, r6, r3, r2
 800ad96:	f8de 2000 	ldr.w	r2, [lr]
 800ad9a:	b280      	uxth	r0, r0
 800ad9c:	b292      	uxth	r2, r2
 800ad9e:	1a12      	subs	r2, r2, r0
 800ada0:	445a      	add	r2, fp
 800ada2:	f8de 0000 	ldr.w	r0, [lr]
 800ada6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adaa:	b29b      	uxth	r3, r3
 800adac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800adb4:	b292      	uxth	r2, r2
 800adb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800adba:	45e1      	cmp	r9, ip
 800adbc:	f84e 2b04 	str.w	r2, [lr], #4
 800adc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800adc4:	d2de      	bcs.n	800ad84 <quorem+0x42>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	58eb      	ldr	r3, [r5, r3]
 800adca:	b92b      	cbnz	r3, 800add8 <quorem+0x96>
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	3b04      	subs	r3, #4
 800add0:	429d      	cmp	r5, r3
 800add2:	461a      	mov	r2, r3
 800add4:	d32f      	bcc.n	800ae36 <quorem+0xf4>
 800add6:	613c      	str	r4, [r7, #16]
 800add8:	4638      	mov	r0, r7
 800adda:	f001 f97b 	bl	800c0d4 <__mcmp>
 800adde:	2800      	cmp	r0, #0
 800ade0:	db25      	blt.n	800ae2e <quorem+0xec>
 800ade2:	4629      	mov	r1, r5
 800ade4:	2000      	movs	r0, #0
 800ade6:	f858 2b04 	ldr.w	r2, [r8], #4
 800adea:	f8d1 c000 	ldr.w	ip, [r1]
 800adee:	fa1f fe82 	uxth.w	lr, r2
 800adf2:	fa1f f38c 	uxth.w	r3, ip
 800adf6:	eba3 030e 	sub.w	r3, r3, lr
 800adfa:	4403      	add	r3, r0
 800adfc:	0c12      	lsrs	r2, r2, #16
 800adfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae0c:	45c1      	cmp	r9, r8
 800ae0e:	f841 3b04 	str.w	r3, [r1], #4
 800ae12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae16:	d2e6      	bcs.n	800ade6 <quorem+0xa4>
 800ae18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae20:	b922      	cbnz	r2, 800ae2c <quorem+0xea>
 800ae22:	3b04      	subs	r3, #4
 800ae24:	429d      	cmp	r5, r3
 800ae26:	461a      	mov	r2, r3
 800ae28:	d30b      	bcc.n	800ae42 <quorem+0x100>
 800ae2a:	613c      	str	r4, [r7, #16]
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	4630      	mov	r0, r6
 800ae30:	b003      	add	sp, #12
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	3b04      	subs	r3, #4
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d1cb      	bne.n	800add6 <quorem+0x94>
 800ae3e:	3c01      	subs	r4, #1
 800ae40:	e7c6      	b.n	800add0 <quorem+0x8e>
 800ae42:	6812      	ldr	r2, [r2, #0]
 800ae44:	3b04      	subs	r3, #4
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	d1ef      	bne.n	800ae2a <quorem+0xe8>
 800ae4a:	3c01      	subs	r4, #1
 800ae4c:	e7ea      	b.n	800ae24 <quorem+0xe2>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7ee      	b.n	800ae30 <quorem+0xee>
 800ae52:	0000      	movs	r0, r0
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <_dtoa_r>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	69c7      	ldr	r7, [r0, #28]
 800ae5e:	b099      	sub	sp, #100	@ 0x64
 800ae60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae64:	ec55 4b10 	vmov	r4, r5, d0
 800ae68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae6c:	4683      	mov	fp, r0
 800ae6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae72:	b97f      	cbnz	r7, 800ae94 <_dtoa_r+0x3c>
 800ae74:	2010      	movs	r0, #16
 800ae76:	f000 fdfd 	bl	800ba74 <malloc>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae80:	b920      	cbnz	r0, 800ae8c <_dtoa_r+0x34>
 800ae82:	4ba7      	ldr	r3, [pc, #668]	@ (800b120 <_dtoa_r+0x2c8>)
 800ae84:	21ef      	movs	r1, #239	@ 0xef
 800ae86:	48a7      	ldr	r0, [pc, #668]	@ (800b124 <_dtoa_r+0x2cc>)
 800ae88:	f001 fc5a 	bl	800c740 <__assert_func>
 800ae8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae90:	6007      	str	r7, [r0, #0]
 800ae92:	60c7      	str	r7, [r0, #12]
 800ae94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	b159      	cbz	r1, 800aeb4 <_dtoa_r+0x5c>
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	604a      	str	r2, [r1, #4]
 800aea0:	2301      	movs	r3, #1
 800aea2:	4093      	lsls	r3, r2
 800aea4:	608b      	str	r3, [r1, #8]
 800aea6:	4658      	mov	r0, fp
 800aea8:	f000 feda 	bl	800bc60 <_Bfree>
 800aeac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	1e2b      	subs	r3, r5, #0
 800aeb6:	bfb9      	ittee	lt
 800aeb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aebc:	9303      	strlt	r3, [sp, #12]
 800aebe:	2300      	movge	r3, #0
 800aec0:	6033      	strge	r3, [r6, #0]
 800aec2:	9f03      	ldr	r7, [sp, #12]
 800aec4:	4b98      	ldr	r3, [pc, #608]	@ (800b128 <_dtoa_r+0x2d0>)
 800aec6:	bfbc      	itt	lt
 800aec8:	2201      	movlt	r2, #1
 800aeca:	6032      	strlt	r2, [r6, #0]
 800aecc:	43bb      	bics	r3, r7
 800aece:	d112      	bne.n	800aef6 <_dtoa_r+0x9e>
 800aed0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aed2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aedc:	4323      	orrs	r3, r4
 800aede:	f000 854d 	beq.w	800b97c <_dtoa_r+0xb24>
 800aee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aee4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b13c <_dtoa_r+0x2e4>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 854f 	beq.w	800b98c <_dtoa_r+0xb34>
 800aeee:	f10a 0303 	add.w	r3, sl, #3
 800aef2:	f000 bd49 	b.w	800b988 <_dtoa_r+0xb30>
 800aef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aefa:	2200      	movs	r2, #0
 800aefc:	ec51 0b17 	vmov	r0, r1, d7
 800af00:	2300      	movs	r3, #0
 800af02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af06:	f7f5 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af0a:	4680      	mov	r8, r0
 800af0c:	b158      	cbz	r0, 800af26 <_dtoa_r+0xce>
 800af0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af10:	2301      	movs	r3, #1
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af16:	b113      	cbz	r3, 800af1e <_dtoa_r+0xc6>
 800af18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af1a:	4b84      	ldr	r3, [pc, #528]	@ (800b12c <_dtoa_r+0x2d4>)
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b140 <_dtoa_r+0x2e8>
 800af22:	f000 bd33 	b.w	800b98c <_dtoa_r+0xb34>
 800af26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af2a:	aa16      	add	r2, sp, #88	@ 0x58
 800af2c:	a917      	add	r1, sp, #92	@ 0x5c
 800af2e:	4658      	mov	r0, fp
 800af30:	f001 f980 	bl	800c234 <__d2b>
 800af34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af38:	4681      	mov	r9, r0
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d077      	beq.n	800b02e <_dtoa_r+0x1d6>
 800af3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af58:	4619      	mov	r1, r3
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b74      	ldr	r3, [pc, #464]	@ (800b130 <_dtoa_r+0x2d8>)
 800af5e:	f7f5 f993 	bl	8000288 <__aeabi_dsub>
 800af62:	a369      	add	r3, pc, #420	@ (adr r3, 800b108 <_dtoa_r+0x2b0>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f7f5 fb46 	bl	80005f8 <__aeabi_dmul>
 800af6c:	a368      	add	r3, pc, #416	@ (adr r3, 800b110 <_dtoa_r+0x2b8>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 f98b 	bl	800028c <__adddf3>
 800af76:	4604      	mov	r4, r0
 800af78:	4630      	mov	r0, r6
 800af7a:	460d      	mov	r5, r1
 800af7c:	f7f5 fad2 	bl	8000524 <__aeabi_i2d>
 800af80:	a365      	add	r3, pc, #404	@ (adr r3, 800b118 <_dtoa_r+0x2c0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 fb37 	bl	80005f8 <__aeabi_dmul>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 f97b 	bl	800028c <__adddf3>
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	f7f5 fddd 	bl	8000b58 <__aeabi_d2iz>
 800af9e:	2200      	movs	r2, #0
 800afa0:	4607      	mov	r7, r0
 800afa2:	2300      	movs	r3, #0
 800afa4:	4620      	mov	r0, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7f5 fd98 	bl	8000adc <__aeabi_dcmplt>
 800afac:	b140      	cbz	r0, 800afc0 <_dtoa_r+0x168>
 800afae:	4638      	mov	r0, r7
 800afb0:	f7f5 fab8 	bl	8000524 <__aeabi_i2d>
 800afb4:	4622      	mov	r2, r4
 800afb6:	462b      	mov	r3, r5
 800afb8:	f7f5 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800afbc:	b900      	cbnz	r0, 800afc0 <_dtoa_r+0x168>
 800afbe:	3f01      	subs	r7, #1
 800afc0:	2f16      	cmp	r7, #22
 800afc2:	d851      	bhi.n	800b068 <_dtoa_r+0x210>
 800afc4:	4b5b      	ldr	r3, [pc, #364]	@ (800b134 <_dtoa_r+0x2dc>)
 800afc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afd2:	f7f5 fd83 	bl	8000adc <__aeabi_dcmplt>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d048      	beq.n	800b06c <_dtoa_r+0x214>
 800afda:	3f01      	subs	r7, #1
 800afdc:	2300      	movs	r3, #0
 800afde:	9312      	str	r3, [sp, #72]	@ 0x48
 800afe0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afe2:	1b9b      	subs	r3, r3, r6
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	bf44      	itt	mi
 800afe8:	f1c3 0801 	rsbmi	r8, r3, #1
 800afec:	2300      	movmi	r3, #0
 800afee:	9208      	str	r2, [sp, #32]
 800aff0:	bf54      	ite	pl
 800aff2:	f04f 0800 	movpl.w	r8, #0
 800aff6:	9308      	strmi	r3, [sp, #32]
 800aff8:	2f00      	cmp	r7, #0
 800affa:	db39      	blt.n	800b070 <_dtoa_r+0x218>
 800affc:	9b08      	ldr	r3, [sp, #32]
 800affe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b000:	443b      	add	r3, r7
 800b002:	9308      	str	r3, [sp, #32]
 800b004:	2300      	movs	r3, #0
 800b006:	930a      	str	r3, [sp, #40]	@ 0x28
 800b008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d864      	bhi.n	800b0d8 <_dtoa_r+0x280>
 800b00e:	2b05      	cmp	r3, #5
 800b010:	bfc4      	itt	gt
 800b012:	3b04      	subgt	r3, #4
 800b014:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	f1a3 0302 	sub.w	r3, r3, #2
 800b01c:	bfcc      	ite	gt
 800b01e:	2400      	movgt	r4, #0
 800b020:	2401      	movle	r4, #1
 800b022:	2b03      	cmp	r3, #3
 800b024:	d863      	bhi.n	800b0ee <_dtoa_r+0x296>
 800b026:	e8df f003 	tbb	[pc, r3]
 800b02a:	372a      	.short	0x372a
 800b02c:	5535      	.short	0x5535
 800b02e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b032:	441e      	add	r6, r3
 800b034:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b038:	2b20      	cmp	r3, #32
 800b03a:	bfc1      	itttt	gt
 800b03c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b040:	409f      	lslgt	r7, r3
 800b042:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b046:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b04a:	bfd6      	itet	le
 800b04c:	f1c3 0320 	rsble	r3, r3, #32
 800b050:	ea47 0003 	orrgt.w	r0, r7, r3
 800b054:	fa04 f003 	lslle.w	r0, r4, r3
 800b058:	f7f5 fa54 	bl	8000504 <__aeabi_ui2d>
 800b05c:	2201      	movs	r2, #1
 800b05e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b062:	3e01      	subs	r6, #1
 800b064:	9214      	str	r2, [sp, #80]	@ 0x50
 800b066:	e777      	b.n	800af58 <_dtoa_r+0x100>
 800b068:	2301      	movs	r3, #1
 800b06a:	e7b8      	b.n	800afde <_dtoa_r+0x186>
 800b06c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b06e:	e7b7      	b.n	800afe0 <_dtoa_r+0x188>
 800b070:	427b      	negs	r3, r7
 800b072:	930a      	str	r3, [sp, #40]	@ 0x28
 800b074:	2300      	movs	r3, #0
 800b076:	eba8 0807 	sub.w	r8, r8, r7
 800b07a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b07c:	e7c4      	b.n	800b008 <_dtoa_r+0x1b0>
 800b07e:	2300      	movs	r3, #0
 800b080:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b084:	2b00      	cmp	r3, #0
 800b086:	dc35      	bgt.n	800b0f4 <_dtoa_r+0x29c>
 800b088:	2301      	movs	r3, #1
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	9307      	str	r3, [sp, #28]
 800b08e:	461a      	mov	r2, r3
 800b090:	920e      	str	r2, [sp, #56]	@ 0x38
 800b092:	e00b      	b.n	800b0ac <_dtoa_r+0x254>
 800b094:	2301      	movs	r3, #1
 800b096:	e7f3      	b.n	800b080 <_dtoa_r+0x228>
 800b098:	2300      	movs	r3, #0
 800b09a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09e:	18fb      	adds	r3, r7, r3
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	bfb8      	it	lt
 800b0aa:	2301      	movlt	r3, #1
 800b0ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	f102 0514 	add.w	r5, r2, #20
 800b0b8:	429d      	cmp	r5, r3
 800b0ba:	d91f      	bls.n	800b0fc <_dtoa_r+0x2a4>
 800b0bc:	6041      	str	r1, [r0, #4]
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fd8e 	bl	800bbe0 <_Balloc>
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d13c      	bne.n	800b144 <_dtoa_r+0x2ec>
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b138 <_dtoa_r+0x2e0>)
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0d2:	e6d8      	b.n	800ae86 <_dtoa_r+0x2e>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e7e0      	b.n	800b09a <_dtoa_r+0x242>
 800b0d8:	2401      	movs	r4, #1
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	9307      	str	r3, [sp, #28]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2312      	movs	r3, #18
 800b0ec:	e7d0      	b.n	800b090 <_dtoa_r+0x238>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0f2:	e7f5      	b.n	800b0e0 <_dtoa_r+0x288>
 800b0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	9307      	str	r3, [sp, #28]
 800b0fa:	e7d7      	b.n	800b0ac <_dtoa_r+0x254>
 800b0fc:	3101      	adds	r1, #1
 800b0fe:	0052      	lsls	r2, r2, #1
 800b100:	e7d8      	b.n	800b0b4 <_dtoa_r+0x25c>
 800b102:	bf00      	nop
 800b104:	f3af 8000 	nop.w
 800b108:	636f4361 	.word	0x636f4361
 800b10c:	3fd287a7 	.word	0x3fd287a7
 800b110:	8b60c8b3 	.word	0x8b60c8b3
 800b114:	3fc68a28 	.word	0x3fc68a28
 800b118:	509f79fb 	.word	0x509f79fb
 800b11c:	3fd34413 	.word	0x3fd34413
 800b120:	0800e285 	.word	0x0800e285
 800b124:	0800e29c 	.word	0x0800e29c
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	0800e255 	.word	0x0800e255
 800b130:	3ff80000 	.word	0x3ff80000
 800b134:	0800e398 	.word	0x0800e398
 800b138:	0800e2f4 	.word	0x0800e2f4
 800b13c:	0800e281 	.word	0x0800e281
 800b140:	0800e254 	.word	0x0800e254
 800b144:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b148:	6018      	str	r0, [r3, #0]
 800b14a:	9b07      	ldr	r3, [sp, #28]
 800b14c:	2b0e      	cmp	r3, #14
 800b14e:	f200 80a4 	bhi.w	800b29a <_dtoa_r+0x442>
 800b152:	2c00      	cmp	r4, #0
 800b154:	f000 80a1 	beq.w	800b29a <_dtoa_r+0x442>
 800b158:	2f00      	cmp	r7, #0
 800b15a:	dd33      	ble.n	800b1c4 <_dtoa_r+0x36c>
 800b15c:	4bad      	ldr	r3, [pc, #692]	@ (800b414 <_dtoa_r+0x5bc>)
 800b15e:	f007 020f 	and.w	r2, r7, #15
 800b162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b166:	ed93 7b00 	vldr	d7, [r3]
 800b16a:	05f8      	lsls	r0, r7, #23
 800b16c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b170:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b174:	d516      	bpl.n	800b1a4 <_dtoa_r+0x34c>
 800b176:	4ba8      	ldr	r3, [pc, #672]	@ (800b418 <_dtoa_r+0x5c0>)
 800b178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b17c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b180:	f7f5 fb64 	bl	800084c <__aeabi_ddiv>
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	f004 040f 	and.w	r4, r4, #15
 800b18c:	2603      	movs	r6, #3
 800b18e:	4da2      	ldr	r5, [pc, #648]	@ (800b418 <_dtoa_r+0x5c0>)
 800b190:	b954      	cbnz	r4, 800b1a8 <_dtoa_r+0x350>
 800b192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b19a:	f7f5 fb57 	bl	800084c <__aeabi_ddiv>
 800b19e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a2:	e028      	b.n	800b1f6 <_dtoa_r+0x39e>
 800b1a4:	2602      	movs	r6, #2
 800b1a6:	e7f2      	b.n	800b18e <_dtoa_r+0x336>
 800b1a8:	07e1      	lsls	r1, r4, #31
 800b1aa:	d508      	bpl.n	800b1be <_dtoa_r+0x366>
 800b1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1b4:	f7f5 fa20 	bl	80005f8 <__aeabi_dmul>
 800b1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1bc:	3601      	adds	r6, #1
 800b1be:	1064      	asrs	r4, r4, #1
 800b1c0:	3508      	adds	r5, #8
 800b1c2:	e7e5      	b.n	800b190 <_dtoa_r+0x338>
 800b1c4:	f000 80d2 	beq.w	800b36c <_dtoa_r+0x514>
 800b1c8:	427c      	negs	r4, r7
 800b1ca:	4b92      	ldr	r3, [pc, #584]	@ (800b414 <_dtoa_r+0x5bc>)
 800b1cc:	4d92      	ldr	r5, [pc, #584]	@ (800b418 <_dtoa_r+0x5c0>)
 800b1ce:	f004 020f 	and.w	r2, r4, #15
 800b1d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1de:	f7f5 fa0b 	bl	80005f8 <__aeabi_dmul>
 800b1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1e6:	1124      	asrs	r4, r4, #4
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2602      	movs	r6, #2
 800b1ec:	2c00      	cmp	r4, #0
 800b1ee:	f040 80b2 	bne.w	800b356 <_dtoa_r+0x4fe>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1d3      	bne.n	800b19e <_dtoa_r+0x346>
 800b1f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80b7 	beq.w	800b370 <_dtoa_r+0x518>
 800b202:	4b86      	ldr	r3, [pc, #536]	@ (800b41c <_dtoa_r+0x5c4>)
 800b204:	2200      	movs	r2, #0
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 fc67 	bl	8000adc <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f000 80ae 	beq.w	800b370 <_dtoa_r+0x518>
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 80aa 	beq.w	800b370 <_dtoa_r+0x518>
 800b21c:	9b00      	ldr	r3, [sp, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd37      	ble.n	800b292 <_dtoa_r+0x43a>
 800b222:	1e7b      	subs	r3, r7, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	4620      	mov	r0, r4
 800b228:	4b7d      	ldr	r3, [pc, #500]	@ (800b420 <_dtoa_r+0x5c8>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	4629      	mov	r1, r5
 800b22e:	f7f5 f9e3 	bl	80005f8 <__aeabi_dmul>
 800b232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b236:	9c00      	ldr	r4, [sp, #0]
 800b238:	3601      	adds	r6, #1
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7f5 f972 	bl	8000524 <__aeabi_i2d>
 800b240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b244:	f7f5 f9d8 	bl	80005f8 <__aeabi_dmul>
 800b248:	4b76      	ldr	r3, [pc, #472]	@ (800b424 <_dtoa_r+0x5cc>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	f7f5 f81e 	bl	800028c <__adddf3>
 800b250:	4605      	mov	r5, r0
 800b252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b256:	2c00      	cmp	r4, #0
 800b258:	f040 808d 	bne.w	800b376 <_dtoa_r+0x51e>
 800b25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b260:	4b71      	ldr	r3, [pc, #452]	@ (800b428 <_dtoa_r+0x5d0>)
 800b262:	2200      	movs	r2, #0
 800b264:	f7f5 f810 	bl	8000288 <__aeabi_dsub>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b270:	462a      	mov	r2, r5
 800b272:	4633      	mov	r3, r6
 800b274:	f7f5 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 800b278:	2800      	cmp	r0, #0
 800b27a:	f040 828b 	bne.w	800b794 <_dtoa_r+0x93c>
 800b27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b282:	462a      	mov	r2, r5
 800b284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b288:	f7f5 fc28 	bl	8000adc <__aeabi_dcmplt>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f040 8128 	bne.w	800b4e2 <_dtoa_r+0x68a>
 800b292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b29a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f2c0 815a 	blt.w	800b556 <_dtoa_r+0x6fe>
 800b2a2:	2f0e      	cmp	r7, #14
 800b2a4:	f300 8157 	bgt.w	800b556 <_dtoa_r+0x6fe>
 800b2a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b414 <_dtoa_r+0x5bc>)
 800b2aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2ae:	ed93 7b00 	vldr	d7, [r3]
 800b2b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	ed8d 7b00 	vstr	d7, [sp]
 800b2ba:	da03      	bge.n	800b2c4 <_dtoa_r+0x46c>
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f340 8101 	ble.w	800b4c6 <_dtoa_r+0x66e>
 800b2c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2c8:	4656      	mov	r6, sl
 800b2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 fabb 	bl	800084c <__aeabi_ddiv>
 800b2d6:	f7f5 fc3f 	bl	8000b58 <__aeabi_d2iz>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	f7f5 f922 	bl	8000524 <__aeabi_i2d>
 800b2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2f4:	f7f4 ffc8 	bl	8000288 <__aeabi_dsub>
 800b2f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b2fc:	9d07      	ldr	r5, [sp, #28]
 800b2fe:	eba6 040a 	sub.w	r4, r6, sl
 800b302:	42a5      	cmp	r5, r4
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	f040 8117 	bne.w	800b53a <_dtoa_r+0x6e2>
 800b30c:	f7f4 ffbe 	bl	800028c <__adddf3>
 800b310:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b314:	4604      	mov	r4, r0
 800b316:	460d      	mov	r5, r1
 800b318:	f7f5 fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f040 80f9 	bne.w	800b514 <_dtoa_r+0x6bc>
 800b322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	f7f5 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b32e:	b118      	cbz	r0, 800b338 <_dtoa_r+0x4e0>
 800b330:	f018 0f01 	tst.w	r8, #1
 800b334:	f040 80ee 	bne.w	800b514 <_dtoa_r+0x6bc>
 800b338:	4649      	mov	r1, r9
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 fc90 	bl	800bc60 <_Bfree>
 800b340:	2300      	movs	r3, #0
 800b342:	7033      	strb	r3, [r6, #0]
 800b344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b346:	3701      	adds	r7, #1
 800b348:	601f      	str	r7, [r3, #0]
 800b34a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 831d 	beq.w	800b98c <_dtoa_r+0xb34>
 800b352:	601e      	str	r6, [r3, #0]
 800b354:	e31a      	b.n	800b98c <_dtoa_r+0xb34>
 800b356:	07e2      	lsls	r2, r4, #31
 800b358:	d505      	bpl.n	800b366 <_dtoa_r+0x50e>
 800b35a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	3601      	adds	r6, #1
 800b364:	2301      	movs	r3, #1
 800b366:	1064      	asrs	r4, r4, #1
 800b368:	3508      	adds	r5, #8
 800b36a:	e73f      	b.n	800b1ec <_dtoa_r+0x394>
 800b36c:	2602      	movs	r6, #2
 800b36e:	e742      	b.n	800b1f6 <_dtoa_r+0x39e>
 800b370:	9c07      	ldr	r4, [sp, #28]
 800b372:	9704      	str	r7, [sp, #16]
 800b374:	e761      	b.n	800b23a <_dtoa_r+0x3e2>
 800b376:	4b27      	ldr	r3, [pc, #156]	@ (800b414 <_dtoa_r+0x5bc>)
 800b378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b37a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b37e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b382:	4454      	add	r4, sl
 800b384:	2900      	cmp	r1, #0
 800b386:	d053      	beq.n	800b430 <_dtoa_r+0x5d8>
 800b388:	4928      	ldr	r1, [pc, #160]	@ (800b42c <_dtoa_r+0x5d4>)
 800b38a:	2000      	movs	r0, #0
 800b38c:	f7f5 fa5e 	bl	800084c <__aeabi_ddiv>
 800b390:	4633      	mov	r3, r6
 800b392:	462a      	mov	r2, r5
 800b394:	f7f4 ff78 	bl	8000288 <__aeabi_dsub>
 800b398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b39c:	4656      	mov	r6, sl
 800b39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3a2:	f7f5 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	f7f5 f8bc 	bl	8000524 <__aeabi_i2d>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	3530      	adds	r5, #48	@ 0x30
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b3c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3ca:	f7f5 fb87 	bl	8000adc <__aeabi_dcmplt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d171      	bne.n	800b4b6 <_dtoa_r+0x65e>
 800b3d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3d6:	4911      	ldr	r1, [pc, #68]	@ (800b41c <_dtoa_r+0x5c4>)
 800b3d8:	2000      	movs	r0, #0
 800b3da:	f7f4 ff55 	bl	8000288 <__aeabi_dsub>
 800b3de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3e2:	f7f5 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f040 8095 	bne.w	800b516 <_dtoa_r+0x6be>
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	f43f af50 	beq.w	800b292 <_dtoa_r+0x43a>
 800b3f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <_dtoa_r+0x5c8>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7f5 f8fd 	bl	80005f8 <__aeabi_dmul>
 800b3fe:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <_dtoa_r+0x5c8>)
 800b400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b404:	2200      	movs	r2, #0
 800b406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40a:	f7f5 f8f5 	bl	80005f8 <__aeabi_dmul>
 800b40e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b412:	e7c4      	b.n	800b39e <_dtoa_r+0x546>
 800b414:	0800e398 	.word	0x0800e398
 800b418:	0800e370 	.word	0x0800e370
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	40240000 	.word	0x40240000
 800b424:	401c0000 	.word	0x401c0000
 800b428:	40140000 	.word	0x40140000
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b43c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b43e:	4656      	mov	r6, sl
 800b440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b444:	f7f5 fb88 	bl	8000b58 <__aeabi_d2iz>
 800b448:	4605      	mov	r5, r0
 800b44a:	f7f5 f86b 	bl	8000524 <__aeabi_i2d>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b456:	f7f4 ff17 	bl	8000288 <__aeabi_dsub>
 800b45a:	3530      	adds	r5, #48	@ 0x30
 800b45c:	f806 5b01 	strb.w	r5, [r6], #1
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	42a6      	cmp	r6, r4
 800b466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	d124      	bne.n	800b4ba <_dtoa_r+0x662>
 800b470:	4bac      	ldr	r3, [pc, #688]	@ (800b724 <_dtoa_r+0x8cc>)
 800b472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b476:	f7f4 ff09 	bl	800028c <__adddf3>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	f7f5 fb49 	bl	8000b18 <__aeabi_dcmpgt>
 800b486:	2800      	cmp	r0, #0
 800b488:	d145      	bne.n	800b516 <_dtoa_r+0x6be>
 800b48a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b48e:	49a5      	ldr	r1, [pc, #660]	@ (800b724 <_dtoa_r+0x8cc>)
 800b490:	2000      	movs	r0, #0
 800b492:	f7f4 fef9 	bl	8000288 <__aeabi_dsub>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49e:	f7f5 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f43f aef5 	beq.w	800b292 <_dtoa_r+0x43a>
 800b4a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b4aa:	1e73      	subs	r3, r6, #1
 800b4ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4b2:	2b30      	cmp	r3, #48	@ 0x30
 800b4b4:	d0f8      	beq.n	800b4a8 <_dtoa_r+0x650>
 800b4b6:	9f04      	ldr	r7, [sp, #16]
 800b4b8:	e73e      	b.n	800b338 <_dtoa_r+0x4e0>
 800b4ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b728 <_dtoa_r+0x8d0>)
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c4:	e7bc      	b.n	800b440 <_dtoa_r+0x5e8>
 800b4c6:	d10c      	bne.n	800b4e2 <_dtoa_r+0x68a>
 800b4c8:	4b98      	ldr	r3, [pc, #608]	@ (800b72c <_dtoa_r+0x8d4>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d0:	f7f5 f892 	bl	80005f8 <__aeabi_dmul>
 800b4d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d8:	f7f5 fb14 	bl	8000b04 <__aeabi_dcmpge>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f000 8157 	beq.w	800b790 <_dtoa_r+0x938>
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	4625      	mov	r5, r4
 800b4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e8:	43db      	mvns	r3, r3
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	4656      	mov	r6, sl
 800b4ee:	2700      	movs	r7, #0
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fbb4 	bl	800bc60 <_Bfree>
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	d0dc      	beq.n	800b4b6 <_dtoa_r+0x65e>
 800b4fc:	b12f      	cbz	r7, 800b50a <_dtoa_r+0x6b2>
 800b4fe:	42af      	cmp	r7, r5
 800b500:	d003      	beq.n	800b50a <_dtoa_r+0x6b2>
 800b502:	4639      	mov	r1, r7
 800b504:	4658      	mov	r0, fp
 800b506:	f000 fbab 	bl	800bc60 <_Bfree>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4658      	mov	r0, fp
 800b50e:	f000 fba7 	bl	800bc60 <_Bfree>
 800b512:	e7d0      	b.n	800b4b6 <_dtoa_r+0x65e>
 800b514:	9704      	str	r7, [sp, #16]
 800b516:	4633      	mov	r3, r6
 800b518:	461e      	mov	r6, r3
 800b51a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51e:	2a39      	cmp	r2, #57	@ 0x39
 800b520:	d107      	bne.n	800b532 <_dtoa_r+0x6da>
 800b522:	459a      	cmp	sl, r3
 800b524:	d1f8      	bne.n	800b518 <_dtoa_r+0x6c0>
 800b526:	9a04      	ldr	r2, [sp, #16]
 800b528:	3201      	adds	r2, #1
 800b52a:	9204      	str	r2, [sp, #16]
 800b52c:	2230      	movs	r2, #48	@ 0x30
 800b52e:	f88a 2000 	strb.w	r2, [sl]
 800b532:	781a      	ldrb	r2, [r3, #0]
 800b534:	3201      	adds	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	e7bd      	b.n	800b4b6 <_dtoa_r+0x65e>
 800b53a:	4b7b      	ldr	r3, [pc, #492]	@ (800b728 <_dtoa_r+0x8d0>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	2200      	movs	r2, #0
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	f7f5 fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f aebb 	beq.w	800b2ca <_dtoa_r+0x472>
 800b554:	e6f0      	b.n	800b338 <_dtoa_r+0x4e0>
 800b556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b558:	2a00      	cmp	r2, #0
 800b55a:	f000 80db 	beq.w	800b714 <_dtoa_r+0x8bc>
 800b55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b560:	2a01      	cmp	r2, #1
 800b562:	f300 80bf 	bgt.w	800b6e4 <_dtoa_r+0x88c>
 800b566:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b568:	2a00      	cmp	r2, #0
 800b56a:	f000 80b7 	beq.w	800b6dc <_dtoa_r+0x884>
 800b56e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b574:	4646      	mov	r6, r8
 800b576:	9a08      	ldr	r2, [sp, #32]
 800b578:	2101      	movs	r1, #1
 800b57a:	441a      	add	r2, r3
 800b57c:	4658      	mov	r0, fp
 800b57e:	4498      	add	r8, r3
 800b580:	9208      	str	r2, [sp, #32]
 800b582:	f000 fc21 	bl	800bdc8 <__i2b>
 800b586:	4605      	mov	r5, r0
 800b588:	b15e      	cbz	r6, 800b5a2 <_dtoa_r+0x74a>
 800b58a:	9b08      	ldr	r3, [sp, #32]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dd08      	ble.n	800b5a2 <_dtoa_r+0x74a>
 800b590:	42b3      	cmp	r3, r6
 800b592:	9a08      	ldr	r2, [sp, #32]
 800b594:	bfa8      	it	ge
 800b596:	4633      	movge	r3, r6
 800b598:	eba8 0803 	sub.w	r8, r8, r3
 800b59c:	1af6      	subs	r6, r6, r3
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	9308      	str	r3, [sp, #32]
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5a4:	b1f3      	cbz	r3, 800b5e4 <_dtoa_r+0x78c>
 800b5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 80b7 	beq.w	800b71c <_dtoa_r+0x8c4>
 800b5ae:	b18c      	cbz	r4, 800b5d4 <_dtoa_r+0x77c>
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	4658      	mov	r0, fp
 800b5b6:	f000 fcc7 	bl	800bf48 <__pow5mult>
 800b5ba:	464a      	mov	r2, r9
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4658      	mov	r0, fp
 800b5c2:	f000 fc17 	bl	800bdf4 <__multiply>
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	9004      	str	r0, [sp, #16]
 800b5ca:	4658      	mov	r0, fp
 800b5cc:	f000 fb48 	bl	800bc60 <_Bfree>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	4699      	mov	r9, r3
 800b5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d6:	1b1a      	subs	r2, r3, r4
 800b5d8:	d004      	beq.n	800b5e4 <_dtoa_r+0x78c>
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fcb3 	bl	800bf48 <__pow5mult>
 800b5e2:	4681      	mov	r9, r0
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f000 fbee 	bl	800bdc8 <__i2b>
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 81cf 	beq.w	800b994 <_dtoa_r+0xb3c>
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	4658      	mov	r0, fp
 800b5fc:	f000 fca4 	bl	800bf48 <__pow5mult>
 800b600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b602:	2b01      	cmp	r3, #1
 800b604:	4604      	mov	r4, r0
 800b606:	f300 8095 	bgt.w	800b734 <_dtoa_r+0x8dc>
 800b60a:	9b02      	ldr	r3, [sp, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f040 8087 	bne.w	800b720 <_dtoa_r+0x8c8>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f040 8089 	bne.w	800b730 <_dtoa_r+0x8d8>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b624:	0d1b      	lsrs	r3, r3, #20
 800b626:	051b      	lsls	r3, r3, #20
 800b628:	b12b      	cbz	r3, 800b636 <_dtoa_r+0x7de>
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	3301      	adds	r3, #1
 800b62e:	9308      	str	r3, [sp, #32]
 800b630:	f108 0801 	add.w	r8, r8, #1
 800b634:	2301      	movs	r3, #1
 800b636:	930a      	str	r3, [sp, #40]	@ 0x28
 800b638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 81b0 	beq.w	800b9a0 <_dtoa_r+0xb48>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b646:	6918      	ldr	r0, [r3, #16]
 800b648:	f000 fb72 	bl	800bd30 <__hi0bits>
 800b64c:	f1c0 0020 	rsb	r0, r0, #32
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	4418      	add	r0, r3
 800b654:	f010 001f 	ands.w	r0, r0, #31
 800b658:	d077      	beq.n	800b74a <_dtoa_r+0x8f2>
 800b65a:	f1c0 0320 	rsb	r3, r0, #32
 800b65e:	2b04      	cmp	r3, #4
 800b660:	dd6b      	ble.n	800b73a <_dtoa_r+0x8e2>
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	f1c0 001c 	rsb	r0, r0, #28
 800b668:	4403      	add	r3, r0
 800b66a:	4480      	add	r8, r0
 800b66c:	4406      	add	r6, r0
 800b66e:	9308      	str	r3, [sp, #32]
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	dd05      	ble.n	800b682 <_dtoa_r+0x82a>
 800b676:	4649      	mov	r1, r9
 800b678:	4642      	mov	r2, r8
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 fcbe 	bl	800bffc <__lshift>
 800b680:	4681      	mov	r9, r0
 800b682:	9b08      	ldr	r3, [sp, #32]
 800b684:	2b00      	cmp	r3, #0
 800b686:	dd05      	ble.n	800b694 <_dtoa_r+0x83c>
 800b688:	4621      	mov	r1, r4
 800b68a:	461a      	mov	r2, r3
 800b68c:	4658      	mov	r0, fp
 800b68e:	f000 fcb5 	bl	800bffc <__lshift>
 800b692:	4604      	mov	r4, r0
 800b694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b696:	2b00      	cmp	r3, #0
 800b698:	d059      	beq.n	800b74e <_dtoa_r+0x8f6>
 800b69a:	4621      	mov	r1, r4
 800b69c:	4648      	mov	r0, r9
 800b69e:	f000 fd19 	bl	800c0d4 <__mcmp>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	da53      	bge.n	800b74e <_dtoa_r+0x8f6>
 800b6a6:	1e7b      	subs	r3, r7, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	4658      	mov	r0, fp
 800b6b2:	f000 faf7 	bl	800bca4 <__multadd>
 800b6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6b8:	4681      	mov	r9, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 8172 	beq.w	800b9a4 <_dtoa_r+0xb4c>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	220a      	movs	r2, #10
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f000 faec 	bl	800bca4 <__multadd>
 800b6cc:	9b00      	ldr	r3, [sp, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	dc67      	bgt.n	800b7a4 <_dtoa_r+0x94c>
 800b6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dc41      	bgt.n	800b75e <_dtoa_r+0x906>
 800b6da:	e063      	b.n	800b7a4 <_dtoa_r+0x94c>
 800b6dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b6de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6e2:	e746      	b.n	800b572 <_dtoa_r+0x71a>
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	1e5c      	subs	r4, r3, #1
 800b6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	bfbf      	itttt	lt
 800b6ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6f4:	1ae3      	sublt	r3, r4, r3
 800b6f6:	bfb4      	ite	lt
 800b6f8:	18d2      	addlt	r2, r2, r3
 800b6fa:	1b1c      	subge	r4, r3, r4
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	bfbc      	itt	lt
 800b700:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b702:	2400      	movlt	r4, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb5      	itete	lt
 800b708:	eba8 0603 	sublt.w	r6, r8, r3
 800b70c:	9b07      	ldrge	r3, [sp, #28]
 800b70e:	2300      	movlt	r3, #0
 800b710:	4646      	movge	r6, r8
 800b712:	e730      	b.n	800b576 <_dtoa_r+0x71e>
 800b714:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b716:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b718:	4646      	mov	r6, r8
 800b71a:	e735      	b.n	800b588 <_dtoa_r+0x730>
 800b71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b71e:	e75c      	b.n	800b5da <_dtoa_r+0x782>
 800b720:	2300      	movs	r3, #0
 800b722:	e788      	b.n	800b636 <_dtoa_r+0x7de>
 800b724:	3fe00000 	.word	0x3fe00000
 800b728:	40240000 	.word	0x40240000
 800b72c:	40140000 	.word	0x40140000
 800b730:	9b02      	ldr	r3, [sp, #8]
 800b732:	e780      	b.n	800b636 <_dtoa_r+0x7de>
 800b734:	2300      	movs	r3, #0
 800b736:	930a      	str	r3, [sp, #40]	@ 0x28
 800b738:	e782      	b.n	800b640 <_dtoa_r+0x7e8>
 800b73a:	d099      	beq.n	800b670 <_dtoa_r+0x818>
 800b73c:	9a08      	ldr	r2, [sp, #32]
 800b73e:	331c      	adds	r3, #28
 800b740:	441a      	add	r2, r3
 800b742:	4498      	add	r8, r3
 800b744:	441e      	add	r6, r3
 800b746:	9208      	str	r2, [sp, #32]
 800b748:	e792      	b.n	800b670 <_dtoa_r+0x818>
 800b74a:	4603      	mov	r3, r0
 800b74c:	e7f6      	b.n	800b73c <_dtoa_r+0x8e4>
 800b74e:	9b07      	ldr	r3, [sp, #28]
 800b750:	9704      	str	r7, [sp, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc20      	bgt.n	800b798 <_dtoa_r+0x940>
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	dd1e      	ble.n	800b79c <_dtoa_r+0x944>
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f47f aec0 	bne.w	800b4e6 <_dtoa_r+0x68e>
 800b766:	4621      	mov	r1, r4
 800b768:	2205      	movs	r2, #5
 800b76a:	4658      	mov	r0, fp
 800b76c:	f000 fa9a 	bl	800bca4 <__multadd>
 800b770:	4601      	mov	r1, r0
 800b772:	4604      	mov	r4, r0
 800b774:	4648      	mov	r0, r9
 800b776:	f000 fcad 	bl	800c0d4 <__mcmp>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f77f aeb3 	ble.w	800b4e6 <_dtoa_r+0x68e>
 800b780:	4656      	mov	r6, sl
 800b782:	2331      	movs	r3, #49	@ 0x31
 800b784:	f806 3b01 	strb.w	r3, [r6], #1
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	3301      	adds	r3, #1
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	e6ae      	b.n	800b4ee <_dtoa_r+0x696>
 800b790:	9c07      	ldr	r4, [sp, #28]
 800b792:	9704      	str	r7, [sp, #16]
 800b794:	4625      	mov	r5, r4
 800b796:	e7f3      	b.n	800b780 <_dtoa_r+0x928>
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 8104 	beq.w	800b9ac <_dtoa_r+0xb54>
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	dd05      	ble.n	800b7b4 <_dtoa_r+0x95c>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4658      	mov	r0, fp
 800b7ae:	f000 fc25 	bl	800bffc <__lshift>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d05a      	beq.n	800b870 <_dtoa_r+0xa18>
 800b7ba:	6869      	ldr	r1, [r5, #4]
 800b7bc:	4658      	mov	r0, fp
 800b7be:	f000 fa0f 	bl	800bbe0 <_Balloc>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	b928      	cbnz	r0, 800b7d2 <_dtoa_r+0x97a>
 800b7c6:	4b84      	ldr	r3, [pc, #528]	@ (800b9d8 <_dtoa_r+0xb80>)
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7ce:	f7ff bb5a 	b.w	800ae86 <_dtoa_r+0x2e>
 800b7d2:	692a      	ldr	r2, [r5, #16]
 800b7d4:	3202      	adds	r2, #2
 800b7d6:	0092      	lsls	r2, r2, #2
 800b7d8:	f105 010c 	add.w	r1, r5, #12
 800b7dc:	300c      	adds	r0, #12
 800b7de:	f7ff faa2 	bl	800ad26 <memcpy>
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f000 fc08 	bl	800bffc <__lshift>
 800b7ec:	f10a 0301 	add.w	r3, sl, #1
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	4453      	add	r3, sl
 800b7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	462f      	mov	r7, r5
 800b800:	930a      	str	r3, [sp, #40]	@ 0x28
 800b802:	4605      	mov	r5, r0
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	4621      	mov	r1, r4
 800b808:	3b01      	subs	r3, #1
 800b80a:	4648      	mov	r0, r9
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	f7ff fa98 	bl	800ad42 <quorem>
 800b812:	4639      	mov	r1, r7
 800b814:	9002      	str	r0, [sp, #8]
 800b816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b81a:	4648      	mov	r0, r9
 800b81c:	f000 fc5a 	bl	800c0d4 <__mcmp>
 800b820:	462a      	mov	r2, r5
 800b822:	9008      	str	r0, [sp, #32]
 800b824:	4621      	mov	r1, r4
 800b826:	4658      	mov	r0, fp
 800b828:	f000 fc70 	bl	800c10c <__mdiff>
 800b82c:	68c2      	ldr	r2, [r0, #12]
 800b82e:	4606      	mov	r6, r0
 800b830:	bb02      	cbnz	r2, 800b874 <_dtoa_r+0xa1c>
 800b832:	4601      	mov	r1, r0
 800b834:	4648      	mov	r0, r9
 800b836:	f000 fc4d 	bl	800c0d4 <__mcmp>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4631      	mov	r1, r6
 800b83e:	4658      	mov	r0, fp
 800b840:	920e      	str	r2, [sp, #56]	@ 0x38
 800b842:	f000 fa0d 	bl	800bc60 <_Bfree>
 800b846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b84a:	9e07      	ldr	r6, [sp, #28]
 800b84c:	ea43 0102 	orr.w	r1, r3, r2
 800b850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b852:	4319      	orrs	r1, r3
 800b854:	d110      	bne.n	800b878 <_dtoa_r+0xa20>
 800b856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b85a:	d029      	beq.n	800b8b0 <_dtoa_r+0xa58>
 800b85c:	9b08      	ldr	r3, [sp, #32]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dd02      	ble.n	800b868 <_dtoa_r+0xa10>
 800b862:	9b02      	ldr	r3, [sp, #8]
 800b864:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b868:	9b00      	ldr	r3, [sp, #0]
 800b86a:	f883 8000 	strb.w	r8, [r3]
 800b86e:	e63f      	b.n	800b4f0 <_dtoa_r+0x698>
 800b870:	4628      	mov	r0, r5
 800b872:	e7bb      	b.n	800b7ec <_dtoa_r+0x994>
 800b874:	2201      	movs	r2, #1
 800b876:	e7e1      	b.n	800b83c <_dtoa_r+0x9e4>
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	db04      	blt.n	800b888 <_dtoa_r+0xa30>
 800b87e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b880:	430b      	orrs	r3, r1
 800b882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b884:	430b      	orrs	r3, r1
 800b886:	d120      	bne.n	800b8ca <_dtoa_r+0xa72>
 800b888:	2a00      	cmp	r2, #0
 800b88a:	dded      	ble.n	800b868 <_dtoa_r+0xa10>
 800b88c:	4649      	mov	r1, r9
 800b88e:	2201      	movs	r2, #1
 800b890:	4658      	mov	r0, fp
 800b892:	f000 fbb3 	bl	800bffc <__lshift>
 800b896:	4621      	mov	r1, r4
 800b898:	4681      	mov	r9, r0
 800b89a:	f000 fc1b 	bl	800c0d4 <__mcmp>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	dc03      	bgt.n	800b8aa <_dtoa_r+0xa52>
 800b8a2:	d1e1      	bne.n	800b868 <_dtoa_r+0xa10>
 800b8a4:	f018 0f01 	tst.w	r8, #1
 800b8a8:	d0de      	beq.n	800b868 <_dtoa_r+0xa10>
 800b8aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8ae:	d1d8      	bne.n	800b862 <_dtoa_r+0xa0a>
 800b8b0:	9a00      	ldr	r2, [sp, #0]
 800b8b2:	2339      	movs	r3, #57	@ 0x39
 800b8b4:	7013      	strb	r3, [r2, #0]
 800b8b6:	4633      	mov	r3, r6
 800b8b8:	461e      	mov	r6, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8c0:	2a39      	cmp	r2, #57	@ 0x39
 800b8c2:	d052      	beq.n	800b96a <_dtoa_r+0xb12>
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e612      	b.n	800b4f0 <_dtoa_r+0x698>
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	dd07      	ble.n	800b8de <_dtoa_r+0xa86>
 800b8ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8d2:	d0ed      	beq.n	800b8b0 <_dtoa_r+0xa58>
 800b8d4:	9a00      	ldr	r2, [sp, #0]
 800b8d6:	f108 0301 	add.w	r3, r8, #1
 800b8da:	7013      	strb	r3, [r2, #0]
 800b8dc:	e608      	b.n	800b4f0 <_dtoa_r+0x698>
 800b8de:	9b07      	ldr	r3, [sp, #28]
 800b8e0:	9a07      	ldr	r2, [sp, #28]
 800b8e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d028      	beq.n	800b93e <_dtoa_r+0xae6>
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	220a      	movs	r2, #10
 800b8f2:	4658      	mov	r0, fp
 800b8f4:	f000 f9d6 	bl	800bca4 <__multadd>
 800b8f8:	42af      	cmp	r7, r5
 800b8fa:	4681      	mov	r9, r0
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	f04f 020a 	mov.w	r2, #10
 800b904:	4639      	mov	r1, r7
 800b906:	4658      	mov	r0, fp
 800b908:	d107      	bne.n	800b91a <_dtoa_r+0xac2>
 800b90a:	f000 f9cb 	bl	800bca4 <__multadd>
 800b90e:	4607      	mov	r7, r0
 800b910:	4605      	mov	r5, r0
 800b912:	9b07      	ldr	r3, [sp, #28]
 800b914:	3301      	adds	r3, #1
 800b916:	9307      	str	r3, [sp, #28]
 800b918:	e774      	b.n	800b804 <_dtoa_r+0x9ac>
 800b91a:	f000 f9c3 	bl	800bca4 <__multadd>
 800b91e:	4629      	mov	r1, r5
 800b920:	4607      	mov	r7, r0
 800b922:	2300      	movs	r3, #0
 800b924:	220a      	movs	r2, #10
 800b926:	4658      	mov	r0, fp
 800b928:	f000 f9bc 	bl	800bca4 <__multadd>
 800b92c:	4605      	mov	r5, r0
 800b92e:	e7f0      	b.n	800b912 <_dtoa_r+0xaba>
 800b930:	9b00      	ldr	r3, [sp, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfcc      	ite	gt
 800b936:	461e      	movgt	r6, r3
 800b938:	2601      	movle	r6, #1
 800b93a:	4456      	add	r6, sl
 800b93c:	2700      	movs	r7, #0
 800b93e:	4649      	mov	r1, r9
 800b940:	2201      	movs	r2, #1
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fb5a 	bl	800bffc <__lshift>
 800b948:	4621      	mov	r1, r4
 800b94a:	4681      	mov	r9, r0
 800b94c:	f000 fbc2 	bl	800c0d4 <__mcmp>
 800b950:	2800      	cmp	r0, #0
 800b952:	dcb0      	bgt.n	800b8b6 <_dtoa_r+0xa5e>
 800b954:	d102      	bne.n	800b95c <_dtoa_r+0xb04>
 800b956:	f018 0f01 	tst.w	r8, #1
 800b95a:	d1ac      	bne.n	800b8b6 <_dtoa_r+0xa5e>
 800b95c:	4633      	mov	r3, r6
 800b95e:	461e      	mov	r6, r3
 800b960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b964:	2a30      	cmp	r2, #48	@ 0x30
 800b966:	d0fa      	beq.n	800b95e <_dtoa_r+0xb06>
 800b968:	e5c2      	b.n	800b4f0 <_dtoa_r+0x698>
 800b96a:	459a      	cmp	sl, r3
 800b96c:	d1a4      	bne.n	800b8b8 <_dtoa_r+0xa60>
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	2331      	movs	r3, #49	@ 0x31
 800b976:	f88a 3000 	strb.w	r3, [sl]
 800b97a:	e5b9      	b.n	800b4f0 <_dtoa_r+0x698>
 800b97c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b97e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b9dc <_dtoa_r+0xb84>
 800b982:	b11b      	cbz	r3, 800b98c <_dtoa_r+0xb34>
 800b984:	f10a 0308 	add.w	r3, sl, #8
 800b988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	4650      	mov	r0, sl
 800b98e:	b019      	add	sp, #100	@ 0x64
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b996:	2b01      	cmp	r3, #1
 800b998:	f77f ae37 	ble.w	800b60a <_dtoa_r+0x7b2>
 800b99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	e655      	b.n	800b650 <_dtoa_r+0x7f8>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f77f aed6 	ble.w	800b758 <_dtoa_r+0x900>
 800b9ac:	4656      	mov	r6, sl
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4648      	mov	r0, r9
 800b9b2:	f7ff f9c6 	bl	800ad42 <quorem>
 800b9b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	eba6 020a 	sub.w	r2, r6, sl
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	ddb3      	ble.n	800b930 <_dtoa_r+0xad8>
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	f000 f968 	bl	800bca4 <__multadd>
 800b9d4:	4681      	mov	r9, r0
 800b9d6:	e7ea      	b.n	800b9ae <_dtoa_r+0xb56>
 800b9d8:	0800e2f4 	.word	0x0800e2f4
 800b9dc:	0800e278 	.word	0x0800e278

0800b9e0 <_free_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d041      	beq.n	800ba6c <_free_r+0x8c>
 800b9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ec:	1f0c      	subs	r4, r1, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfb8      	it	lt
 800b9f2:	18e4      	addlt	r4, r4, r3
 800b9f4:	f000 f8e8 	bl	800bbc8 <__malloc_lock>
 800b9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba70 <_free_r+0x90>)
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	b933      	cbnz	r3, 800ba0c <_free_r+0x2c>
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6014      	str	r4, [r2, #0]
 800ba02:	4628      	mov	r0, r5
 800ba04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba08:	f000 b8e4 	b.w	800bbd4 <__malloc_unlock>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d908      	bls.n	800ba22 <_free_r+0x42>
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	1821      	adds	r1, r4, r0
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf01      	itttt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	1809      	addeq	r1, r1, r0
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	e7ed      	b.n	800b9fe <_free_r+0x1e>
 800ba22:	461a      	mov	r2, r3
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b10b      	cbz	r3, 800ba2c <_free_r+0x4c>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x42>
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	1850      	adds	r0, r2, r1
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x6c>
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	4401      	add	r1, r0
 800ba38:	1850      	adds	r0, r2, r1
 800ba3a:	4283      	cmp	r3, r0
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	d1e0      	bne.n	800ba02 <_free_r+0x22>
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	4408      	add	r0, r1
 800ba48:	6010      	str	r0, [r2, #0]
 800ba4a:	e7da      	b.n	800ba02 <_free_r+0x22>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x74>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	e7d6      	b.n	800ba02 <_free_r+0x22>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1809      	addeq	r1, r1, r0
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	6054      	str	r4, [r2, #4]
 800ba6a:	e7ca      	b.n	800ba02 <_free_r+0x22>
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	20004c5c 	.word	0x20004c5c

0800ba74 <malloc>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	@ (800ba80 <malloc+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f000 b825 	b.w	800bac8 <_malloc_r>
 800ba7e:	bf00      	nop
 800ba80:	2000001c 	.word	0x2000001c

0800ba84 <sbrk_aligned>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4e0f      	ldr	r6, [pc, #60]	@ (800bac4 <sbrk_aligned+0x40>)
 800ba88:	460c      	mov	r4, r1
 800ba8a:	6831      	ldr	r1, [r6, #0]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	b911      	cbnz	r1, 800ba96 <sbrk_aligned+0x12>
 800ba90:	f000 fe46 	bl	800c720 <_sbrk_r>
 800ba94:	6030      	str	r0, [r6, #0]
 800ba96:	4621      	mov	r1, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 fe41 	bl	800c720 <_sbrk_r>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	d103      	bne.n	800baaa <sbrk_aligned+0x26>
 800baa2:	f04f 34ff 	mov.w	r4, #4294967295
 800baa6:	4620      	mov	r0, r4
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	1cc4      	adds	r4, r0, #3
 800baac:	f024 0403 	bic.w	r4, r4, #3
 800bab0:	42a0      	cmp	r0, r4
 800bab2:	d0f8      	beq.n	800baa6 <sbrk_aligned+0x22>
 800bab4:	1a21      	subs	r1, r4, r0
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 fe32 	bl	800c720 <_sbrk_r>
 800babc:	3001      	adds	r0, #1
 800babe:	d1f2      	bne.n	800baa6 <sbrk_aligned+0x22>
 800bac0:	e7ef      	b.n	800baa2 <sbrk_aligned+0x1e>
 800bac2:	bf00      	nop
 800bac4:	20004c58 	.word	0x20004c58

0800bac8 <_malloc_r>:
 800bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bacc:	1ccd      	adds	r5, r1, #3
 800bace:	f025 0503 	bic.w	r5, r5, #3
 800bad2:	3508      	adds	r5, #8
 800bad4:	2d0c      	cmp	r5, #12
 800bad6:	bf38      	it	cc
 800bad8:	250c      	movcc	r5, #12
 800bada:	2d00      	cmp	r5, #0
 800badc:	4606      	mov	r6, r0
 800bade:	db01      	blt.n	800bae4 <_malloc_r+0x1c>
 800bae0:	42a9      	cmp	r1, r5
 800bae2:	d904      	bls.n	800baee <_malloc_r+0x26>
 800bae4:	230c      	movs	r3, #12
 800bae6:	6033      	str	r3, [r6, #0]
 800bae8:	2000      	movs	r0, #0
 800baea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbc4 <_malloc_r+0xfc>
 800baf2:	f000 f869 	bl	800bbc8 <__malloc_lock>
 800baf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bafa:	461c      	mov	r4, r3
 800bafc:	bb44      	cbnz	r4, 800bb50 <_malloc_r+0x88>
 800bafe:	4629      	mov	r1, r5
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7ff ffbf 	bl	800ba84 <sbrk_aligned>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	4604      	mov	r4, r0
 800bb0a:	d158      	bne.n	800bbbe <_malloc_r+0xf6>
 800bb0c:	f8d8 4000 	ldr.w	r4, [r8]
 800bb10:	4627      	mov	r7, r4
 800bb12:	2f00      	cmp	r7, #0
 800bb14:	d143      	bne.n	800bb9e <_malloc_r+0xd6>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	d04b      	beq.n	800bbb2 <_malloc_r+0xea>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	4630      	mov	r0, r6
 800bb20:	eb04 0903 	add.w	r9, r4, r3
 800bb24:	f000 fdfc 	bl	800c720 <_sbrk_r>
 800bb28:	4581      	cmp	r9, r0
 800bb2a:	d142      	bne.n	800bbb2 <_malloc_r+0xea>
 800bb2c:	6821      	ldr	r1, [r4, #0]
 800bb2e:	1a6d      	subs	r5, r5, r1
 800bb30:	4629      	mov	r1, r5
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7ff ffa6 	bl	800ba84 <sbrk_aligned>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d03a      	beq.n	800bbb2 <_malloc_r+0xea>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	442b      	add	r3, r5
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	f8d8 3000 	ldr.w	r3, [r8]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	bb62      	cbnz	r2, 800bba4 <_malloc_r+0xdc>
 800bb4a:	f8c8 7000 	str.w	r7, [r8]
 800bb4e:	e00f      	b.n	800bb70 <_malloc_r+0xa8>
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	1b52      	subs	r2, r2, r5
 800bb54:	d420      	bmi.n	800bb98 <_malloc_r+0xd0>
 800bb56:	2a0b      	cmp	r2, #11
 800bb58:	d917      	bls.n	800bb8a <_malloc_r+0xc2>
 800bb5a:	1961      	adds	r1, r4, r5
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	6025      	str	r5, [r4, #0]
 800bb60:	bf18      	it	ne
 800bb62:	6059      	strne	r1, [r3, #4]
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	bf08      	it	eq
 800bb68:	f8c8 1000 	streq.w	r1, [r8]
 800bb6c:	5162      	str	r2, [r4, r5]
 800bb6e:	604b      	str	r3, [r1, #4]
 800bb70:	4630      	mov	r0, r6
 800bb72:	f000 f82f 	bl	800bbd4 <__malloc_unlock>
 800bb76:	f104 000b 	add.w	r0, r4, #11
 800bb7a:	1d23      	adds	r3, r4, #4
 800bb7c:	f020 0007 	bic.w	r0, r0, #7
 800bb80:	1ac2      	subs	r2, r0, r3
 800bb82:	bf1c      	itt	ne
 800bb84:	1a1b      	subne	r3, r3, r0
 800bb86:	50a3      	strne	r3, [r4, r2]
 800bb88:	e7af      	b.n	800baea <_malloc_r+0x22>
 800bb8a:	6862      	ldr	r2, [r4, #4]
 800bb8c:	42a3      	cmp	r3, r4
 800bb8e:	bf0c      	ite	eq
 800bb90:	f8c8 2000 	streq.w	r2, [r8]
 800bb94:	605a      	strne	r2, [r3, #4]
 800bb96:	e7eb      	b.n	800bb70 <_malloc_r+0xa8>
 800bb98:	4623      	mov	r3, r4
 800bb9a:	6864      	ldr	r4, [r4, #4]
 800bb9c:	e7ae      	b.n	800bafc <_malloc_r+0x34>
 800bb9e:	463c      	mov	r4, r7
 800bba0:	687f      	ldr	r7, [r7, #4]
 800bba2:	e7b6      	b.n	800bb12 <_malloc_r+0x4a>
 800bba4:	461a      	mov	r2, r3
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	d1fb      	bne.n	800bba4 <_malloc_r+0xdc>
 800bbac:	2300      	movs	r3, #0
 800bbae:	6053      	str	r3, [r2, #4]
 800bbb0:	e7de      	b.n	800bb70 <_malloc_r+0xa8>
 800bbb2:	230c      	movs	r3, #12
 800bbb4:	6033      	str	r3, [r6, #0]
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f000 f80c 	bl	800bbd4 <__malloc_unlock>
 800bbbc:	e794      	b.n	800bae8 <_malloc_r+0x20>
 800bbbe:	6005      	str	r5, [r0, #0]
 800bbc0:	e7d6      	b.n	800bb70 <_malloc_r+0xa8>
 800bbc2:	bf00      	nop
 800bbc4:	20004c5c 	.word	0x20004c5c

0800bbc8 <__malloc_lock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	@ (800bbd0 <__malloc_lock+0x8>)
 800bbca:	f7ff b8aa 	b.w	800ad22 <__retarget_lock_acquire_recursive>
 800bbce:	bf00      	nop
 800bbd0:	20004c54 	.word	0x20004c54

0800bbd4 <__malloc_unlock>:
 800bbd4:	4801      	ldr	r0, [pc, #4]	@ (800bbdc <__malloc_unlock+0x8>)
 800bbd6:	f7ff b8a5 	b.w	800ad24 <__retarget_lock_release_recursive>
 800bbda:	bf00      	nop
 800bbdc:	20004c54 	.word	0x20004c54

0800bbe0 <_Balloc>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	69c6      	ldr	r6, [r0, #28]
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	b976      	cbnz	r6, 800bc08 <_Balloc+0x28>
 800bbea:	2010      	movs	r0, #16
 800bbec:	f7ff ff42 	bl	800ba74 <malloc>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	61e0      	str	r0, [r4, #28]
 800bbf4:	b920      	cbnz	r0, 800bc00 <_Balloc+0x20>
 800bbf6:	4b18      	ldr	r3, [pc, #96]	@ (800bc58 <_Balloc+0x78>)
 800bbf8:	4818      	ldr	r0, [pc, #96]	@ (800bc5c <_Balloc+0x7c>)
 800bbfa:	216b      	movs	r1, #107	@ 0x6b
 800bbfc:	f000 fda0 	bl	800c740 <__assert_func>
 800bc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc04:	6006      	str	r6, [r0, #0]
 800bc06:	60c6      	str	r6, [r0, #12]
 800bc08:	69e6      	ldr	r6, [r4, #28]
 800bc0a:	68f3      	ldr	r3, [r6, #12]
 800bc0c:	b183      	cbz	r3, 800bc30 <_Balloc+0x50>
 800bc0e:	69e3      	ldr	r3, [r4, #28]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc16:	b9b8      	cbnz	r0, 800bc48 <_Balloc+0x68>
 800bc18:	2101      	movs	r1, #1
 800bc1a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc1e:	1d72      	adds	r2, r6, #5
 800bc20:	0092      	lsls	r2, r2, #2
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 fdaa 	bl	800c77c <_calloc_r>
 800bc28:	b160      	cbz	r0, 800bc44 <_Balloc+0x64>
 800bc2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc2e:	e00e      	b.n	800bc4e <_Balloc+0x6e>
 800bc30:	2221      	movs	r2, #33	@ 0x21
 800bc32:	2104      	movs	r1, #4
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 fda1 	bl	800c77c <_calloc_r>
 800bc3a:	69e3      	ldr	r3, [r4, #28]
 800bc3c:	60f0      	str	r0, [r6, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e4      	bne.n	800bc0e <_Balloc+0x2e>
 800bc44:	2000      	movs	r0, #0
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	6802      	ldr	r2, [r0, #0]
 800bc4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc54:	e7f7      	b.n	800bc46 <_Balloc+0x66>
 800bc56:	bf00      	nop
 800bc58:	0800e285 	.word	0x0800e285
 800bc5c:	0800e305 	.word	0x0800e305

0800bc60 <_Bfree>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	69c6      	ldr	r6, [r0, #28]
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	b976      	cbnz	r6, 800bc88 <_Bfree+0x28>
 800bc6a:	2010      	movs	r0, #16
 800bc6c:	f7ff ff02 	bl	800ba74 <malloc>
 800bc70:	4602      	mov	r2, r0
 800bc72:	61e8      	str	r0, [r5, #28]
 800bc74:	b920      	cbnz	r0, 800bc80 <_Bfree+0x20>
 800bc76:	4b09      	ldr	r3, [pc, #36]	@ (800bc9c <_Bfree+0x3c>)
 800bc78:	4809      	ldr	r0, [pc, #36]	@ (800bca0 <_Bfree+0x40>)
 800bc7a:	218f      	movs	r1, #143	@ 0x8f
 800bc7c:	f000 fd60 	bl	800c740 <__assert_func>
 800bc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc84:	6006      	str	r6, [r0, #0]
 800bc86:	60c6      	str	r6, [r0, #12]
 800bc88:	b13c      	cbz	r4, 800bc9a <_Bfree+0x3a>
 800bc8a:	69eb      	ldr	r3, [r5, #28]
 800bc8c:	6862      	ldr	r2, [r4, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc94:	6021      	str	r1, [r4, #0]
 800bc96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	0800e285 	.word	0x0800e285
 800bca0:	0800e305 	.word	0x0800e305

0800bca4 <__multadd>:
 800bca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca8:	690d      	ldr	r5, [r1, #16]
 800bcaa:	4607      	mov	r7, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	461e      	mov	r6, r3
 800bcb0:	f101 0c14 	add.w	ip, r1, #20
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bcba:	b299      	uxth	r1, r3
 800bcbc:	fb02 6101 	mla	r1, r2, r1, r6
 800bcc0:	0c1e      	lsrs	r6, r3, #16
 800bcc2:	0c0b      	lsrs	r3, r1, #16
 800bcc4:	fb02 3306 	mla	r3, r2, r6, r3
 800bcc8:	b289      	uxth	r1, r1
 800bcca:	3001      	adds	r0, #1
 800bccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcd0:	4285      	cmp	r5, r0
 800bcd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcda:	dcec      	bgt.n	800bcb6 <__multadd+0x12>
 800bcdc:	b30e      	cbz	r6, 800bd22 <__multadd+0x7e>
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	dc19      	bgt.n	800bd18 <__multadd+0x74>
 800bce4:	6861      	ldr	r1, [r4, #4]
 800bce6:	4638      	mov	r0, r7
 800bce8:	3101      	adds	r1, #1
 800bcea:	f7ff ff79 	bl	800bbe0 <_Balloc>
 800bcee:	4680      	mov	r8, r0
 800bcf0:	b928      	cbnz	r0, 800bcfe <__multadd+0x5a>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd28 <__multadd+0x84>)
 800bcf6:	480d      	ldr	r0, [pc, #52]	@ (800bd2c <__multadd+0x88>)
 800bcf8:	21ba      	movs	r1, #186	@ 0xba
 800bcfa:	f000 fd21 	bl	800c740 <__assert_func>
 800bcfe:	6922      	ldr	r2, [r4, #16]
 800bd00:	3202      	adds	r2, #2
 800bd02:	f104 010c 	add.w	r1, r4, #12
 800bd06:	0092      	lsls	r2, r2, #2
 800bd08:	300c      	adds	r0, #12
 800bd0a:	f7ff f80c 	bl	800ad26 <memcpy>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff ffa5 	bl	800bc60 <_Bfree>
 800bd16:	4644      	mov	r4, r8
 800bd18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	615e      	str	r6, [r3, #20]
 800bd20:	6125      	str	r5, [r4, #16]
 800bd22:	4620      	mov	r0, r4
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	0800e2f4 	.word	0x0800e2f4
 800bd2c:	0800e305 	.word	0x0800e305

0800bd30 <__hi0bits>:
 800bd30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd34:	4603      	mov	r3, r0
 800bd36:	bf36      	itet	cc
 800bd38:	0403      	lslcc	r3, r0, #16
 800bd3a:	2000      	movcs	r0, #0
 800bd3c:	2010      	movcc	r0, #16
 800bd3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd42:	bf3c      	itt	cc
 800bd44:	021b      	lslcc	r3, r3, #8
 800bd46:	3008      	addcc	r0, #8
 800bd48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd4c:	bf3c      	itt	cc
 800bd4e:	011b      	lslcc	r3, r3, #4
 800bd50:	3004      	addcc	r0, #4
 800bd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd56:	bf3c      	itt	cc
 800bd58:	009b      	lslcc	r3, r3, #2
 800bd5a:	3002      	addcc	r0, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	db05      	blt.n	800bd6c <__hi0bits+0x3c>
 800bd60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd64:	f100 0001 	add.w	r0, r0, #1
 800bd68:	bf08      	it	eq
 800bd6a:	2020      	moveq	r0, #32
 800bd6c:	4770      	bx	lr

0800bd6e <__lo0bits>:
 800bd6e:	6803      	ldr	r3, [r0, #0]
 800bd70:	4602      	mov	r2, r0
 800bd72:	f013 0007 	ands.w	r0, r3, #7
 800bd76:	d00b      	beq.n	800bd90 <__lo0bits+0x22>
 800bd78:	07d9      	lsls	r1, r3, #31
 800bd7a:	d421      	bmi.n	800bdc0 <__lo0bits+0x52>
 800bd7c:	0798      	lsls	r0, r3, #30
 800bd7e:	bf49      	itett	mi
 800bd80:	085b      	lsrmi	r3, r3, #1
 800bd82:	089b      	lsrpl	r3, r3, #2
 800bd84:	2001      	movmi	r0, #1
 800bd86:	6013      	strmi	r3, [r2, #0]
 800bd88:	bf5c      	itt	pl
 800bd8a:	6013      	strpl	r3, [r2, #0]
 800bd8c:	2002      	movpl	r0, #2
 800bd8e:	4770      	bx	lr
 800bd90:	b299      	uxth	r1, r3
 800bd92:	b909      	cbnz	r1, 800bd98 <__lo0bits+0x2a>
 800bd94:	0c1b      	lsrs	r3, r3, #16
 800bd96:	2010      	movs	r0, #16
 800bd98:	b2d9      	uxtb	r1, r3
 800bd9a:	b909      	cbnz	r1, 800bda0 <__lo0bits+0x32>
 800bd9c:	3008      	adds	r0, #8
 800bd9e:	0a1b      	lsrs	r3, r3, #8
 800bda0:	0719      	lsls	r1, r3, #28
 800bda2:	bf04      	itt	eq
 800bda4:	091b      	lsreq	r3, r3, #4
 800bda6:	3004      	addeq	r0, #4
 800bda8:	0799      	lsls	r1, r3, #30
 800bdaa:	bf04      	itt	eq
 800bdac:	089b      	lsreq	r3, r3, #2
 800bdae:	3002      	addeq	r0, #2
 800bdb0:	07d9      	lsls	r1, r3, #31
 800bdb2:	d403      	bmi.n	800bdbc <__lo0bits+0x4e>
 800bdb4:	085b      	lsrs	r3, r3, #1
 800bdb6:	f100 0001 	add.w	r0, r0, #1
 800bdba:	d003      	beq.n	800bdc4 <__lo0bits+0x56>
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	4770      	bx	lr
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	4770      	bx	lr
 800bdc4:	2020      	movs	r0, #32
 800bdc6:	4770      	bx	lr

0800bdc8 <__i2b>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	460c      	mov	r4, r1
 800bdcc:	2101      	movs	r1, #1
 800bdce:	f7ff ff07 	bl	800bbe0 <_Balloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	b928      	cbnz	r0, 800bde2 <__i2b+0x1a>
 800bdd6:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <__i2b+0x24>)
 800bdd8:	4805      	ldr	r0, [pc, #20]	@ (800bdf0 <__i2b+0x28>)
 800bdda:	f240 1145 	movw	r1, #325	@ 0x145
 800bdde:	f000 fcaf 	bl	800c740 <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	6144      	str	r4, [r0, #20]
 800bde6:	6103      	str	r3, [r0, #16]
 800bde8:	bd10      	pop	{r4, pc}
 800bdea:	bf00      	nop
 800bdec:	0800e2f4 	.word	0x0800e2f4
 800bdf0:	0800e305 	.word	0x0800e305

0800bdf4 <__multiply>:
 800bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	690a      	ldr	r2, [r1, #16]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	bfa8      	it	ge
 800be02:	4623      	movge	r3, r4
 800be04:	460f      	mov	r7, r1
 800be06:	bfa4      	itt	ge
 800be08:	460c      	movge	r4, r1
 800be0a:	461f      	movge	r7, r3
 800be0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be14:	68a3      	ldr	r3, [r4, #8]
 800be16:	6861      	ldr	r1, [r4, #4]
 800be18:	eb0a 0609 	add.w	r6, sl, r9
 800be1c:	42b3      	cmp	r3, r6
 800be1e:	b085      	sub	sp, #20
 800be20:	bfb8      	it	lt
 800be22:	3101      	addlt	r1, #1
 800be24:	f7ff fedc 	bl	800bbe0 <_Balloc>
 800be28:	b930      	cbnz	r0, 800be38 <__multiply+0x44>
 800be2a:	4602      	mov	r2, r0
 800be2c:	4b44      	ldr	r3, [pc, #272]	@ (800bf40 <__multiply+0x14c>)
 800be2e:	4845      	ldr	r0, [pc, #276]	@ (800bf44 <__multiply+0x150>)
 800be30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be34:	f000 fc84 	bl	800c740 <__assert_func>
 800be38:	f100 0514 	add.w	r5, r0, #20
 800be3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be40:	462b      	mov	r3, r5
 800be42:	2200      	movs	r2, #0
 800be44:	4543      	cmp	r3, r8
 800be46:	d321      	bcc.n	800be8c <__multiply+0x98>
 800be48:	f107 0114 	add.w	r1, r7, #20
 800be4c:	f104 0214 	add.w	r2, r4, #20
 800be50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be58:	9302      	str	r3, [sp, #8]
 800be5a:	1b13      	subs	r3, r2, r4
 800be5c:	3b15      	subs	r3, #21
 800be5e:	f023 0303 	bic.w	r3, r3, #3
 800be62:	3304      	adds	r3, #4
 800be64:	f104 0715 	add.w	r7, r4, #21
 800be68:	42ba      	cmp	r2, r7
 800be6a:	bf38      	it	cc
 800be6c:	2304      	movcc	r3, #4
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	9b02      	ldr	r3, [sp, #8]
 800be72:	9103      	str	r1, [sp, #12]
 800be74:	428b      	cmp	r3, r1
 800be76:	d80c      	bhi.n	800be92 <__multiply+0x9e>
 800be78:	2e00      	cmp	r6, #0
 800be7a:	dd03      	ble.n	800be84 <__multiply+0x90>
 800be7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be80:	2b00      	cmp	r3, #0
 800be82:	d05b      	beq.n	800bf3c <__multiply+0x148>
 800be84:	6106      	str	r6, [r0, #16]
 800be86:	b005      	add	sp, #20
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	f843 2b04 	str.w	r2, [r3], #4
 800be90:	e7d8      	b.n	800be44 <__multiply+0x50>
 800be92:	f8b1 a000 	ldrh.w	sl, [r1]
 800be96:	f1ba 0f00 	cmp.w	sl, #0
 800be9a:	d024      	beq.n	800bee6 <__multiply+0xf2>
 800be9c:	f104 0e14 	add.w	lr, r4, #20
 800bea0:	46a9      	mov	r9, r5
 800bea2:	f04f 0c00 	mov.w	ip, #0
 800bea6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800beaa:	f8d9 3000 	ldr.w	r3, [r9]
 800beae:	fa1f fb87 	uxth.w	fp, r7
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800beb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bebc:	f8d9 7000 	ldr.w	r7, [r9]
 800bec0:	4463      	add	r3, ip
 800bec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bec6:	fb0a c70b 	mla	r7, sl, fp, ip
 800beca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bece:	b29b      	uxth	r3, r3
 800bed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bed4:	4572      	cmp	r2, lr
 800bed6:	f849 3b04 	str.w	r3, [r9], #4
 800beda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bede:	d8e2      	bhi.n	800bea6 <__multiply+0xb2>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	f845 c003 	str.w	ip, [r5, r3]
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800beec:	3104      	adds	r1, #4
 800beee:	f1b9 0f00 	cmp.w	r9, #0
 800bef2:	d021      	beq.n	800bf38 <__multiply+0x144>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	f104 0c14 	add.w	ip, r4, #20
 800befa:	46ae      	mov	lr, r5
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	f8bc b000 	ldrh.w	fp, [ip]
 800bf04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf08:	fb09 770b 	mla	r7, r9, fp, r7
 800bf0c:	4457      	add	r7, sl
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf14:	f84e 3b04 	str.w	r3, [lr], #4
 800bf18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf20:	f8be 3000 	ldrh.w	r3, [lr]
 800bf24:	fb09 330a 	mla	r3, r9, sl, r3
 800bf28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf2c:	4562      	cmp	r2, ip
 800bf2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf32:	d8e5      	bhi.n	800bf00 <__multiply+0x10c>
 800bf34:	9f01      	ldr	r7, [sp, #4]
 800bf36:	51eb      	str	r3, [r5, r7]
 800bf38:	3504      	adds	r5, #4
 800bf3a:	e799      	b.n	800be70 <__multiply+0x7c>
 800bf3c:	3e01      	subs	r6, #1
 800bf3e:	e79b      	b.n	800be78 <__multiply+0x84>
 800bf40:	0800e2f4 	.word	0x0800e2f4
 800bf44:	0800e305 	.word	0x0800e305

0800bf48 <__pow5mult>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	4615      	mov	r5, r2
 800bf4e:	f012 0203 	ands.w	r2, r2, #3
 800bf52:	4607      	mov	r7, r0
 800bf54:	460e      	mov	r6, r1
 800bf56:	d007      	beq.n	800bf68 <__pow5mult+0x20>
 800bf58:	4c25      	ldr	r4, [pc, #148]	@ (800bff0 <__pow5mult+0xa8>)
 800bf5a:	3a01      	subs	r2, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf62:	f7ff fe9f 	bl	800bca4 <__multadd>
 800bf66:	4606      	mov	r6, r0
 800bf68:	10ad      	asrs	r5, r5, #2
 800bf6a:	d03d      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bf6c:	69fc      	ldr	r4, [r7, #28]
 800bf6e:	b97c      	cbnz	r4, 800bf90 <__pow5mult+0x48>
 800bf70:	2010      	movs	r0, #16
 800bf72:	f7ff fd7f 	bl	800ba74 <malloc>
 800bf76:	4602      	mov	r2, r0
 800bf78:	61f8      	str	r0, [r7, #28]
 800bf7a:	b928      	cbnz	r0, 800bf88 <__pow5mult+0x40>
 800bf7c:	4b1d      	ldr	r3, [pc, #116]	@ (800bff4 <__pow5mult+0xac>)
 800bf7e:	481e      	ldr	r0, [pc, #120]	@ (800bff8 <__pow5mult+0xb0>)
 800bf80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf84:	f000 fbdc 	bl	800c740 <__assert_func>
 800bf88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf8c:	6004      	str	r4, [r0, #0]
 800bf8e:	60c4      	str	r4, [r0, #12]
 800bf90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf98:	b94c      	cbnz	r4, 800bfae <__pow5mult+0x66>
 800bf9a:	f240 2171 	movw	r1, #625	@ 0x271
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f7ff ff12 	bl	800bdc8 <__i2b>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfaa:	4604      	mov	r4, r0
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 0900 	mov.w	r9, #0
 800bfb2:	07eb      	lsls	r3, r5, #31
 800bfb4:	d50a      	bpl.n	800bfcc <__pow5mult+0x84>
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff ff1a 	bl	800bdf4 <__multiply>
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f7ff fe4b 	bl	800bc60 <_Bfree>
 800bfca:	4646      	mov	r6, r8
 800bfcc:	106d      	asrs	r5, r5, #1
 800bfce:	d00b      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	b938      	cbnz	r0, 800bfe4 <__pow5mult+0x9c>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ff0b 	bl	800bdf4 <__multiply>
 800bfde:	6020      	str	r0, [r4, #0]
 800bfe0:	f8c0 9000 	str.w	r9, [r0]
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e7e4      	b.n	800bfb2 <__pow5mult+0x6a>
 800bfe8:	4630      	mov	r0, r6
 800bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfee:	bf00      	nop
 800bff0:	0800e360 	.word	0x0800e360
 800bff4:	0800e285 	.word	0x0800e285
 800bff8:	0800e305 	.word	0x0800e305

0800bffc <__lshift>:
 800bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	460c      	mov	r4, r1
 800c002:	6849      	ldr	r1, [r1, #4]
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	4607      	mov	r7, r0
 800c00e:	4691      	mov	r9, r2
 800c010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c014:	f108 0601 	add.w	r6, r8, #1
 800c018:	42b3      	cmp	r3, r6
 800c01a:	db0b      	blt.n	800c034 <__lshift+0x38>
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff fddf 	bl	800bbe0 <_Balloc>
 800c022:	4605      	mov	r5, r0
 800c024:	b948      	cbnz	r0, 800c03a <__lshift+0x3e>
 800c026:	4602      	mov	r2, r0
 800c028:	4b28      	ldr	r3, [pc, #160]	@ (800c0cc <__lshift+0xd0>)
 800c02a:	4829      	ldr	r0, [pc, #164]	@ (800c0d0 <__lshift+0xd4>)
 800c02c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c030:	f000 fb86 	bl	800c740 <__assert_func>
 800c034:	3101      	adds	r1, #1
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	e7ee      	b.n	800c018 <__lshift+0x1c>
 800c03a:	2300      	movs	r3, #0
 800c03c:	f100 0114 	add.w	r1, r0, #20
 800c040:	f100 0210 	add.w	r2, r0, #16
 800c044:	4618      	mov	r0, r3
 800c046:	4553      	cmp	r3, sl
 800c048:	db33      	blt.n	800c0b2 <__lshift+0xb6>
 800c04a:	6920      	ldr	r0, [r4, #16]
 800c04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c050:	f104 0314 	add.w	r3, r4, #20
 800c054:	f019 091f 	ands.w	r9, r9, #31
 800c058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c060:	d02b      	beq.n	800c0ba <__lshift+0xbe>
 800c062:	f1c9 0e20 	rsb	lr, r9, #32
 800c066:	468a      	mov	sl, r1
 800c068:	2200      	movs	r2, #0
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	fa00 f009 	lsl.w	r0, r0, r9
 800c070:	4310      	orrs	r0, r2
 800c072:	f84a 0b04 	str.w	r0, [sl], #4
 800c076:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07a:	459c      	cmp	ip, r3
 800c07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c080:	d8f3      	bhi.n	800c06a <__lshift+0x6e>
 800c082:	ebac 0304 	sub.w	r3, ip, r4
 800c086:	3b15      	subs	r3, #21
 800c088:	f023 0303 	bic.w	r3, r3, #3
 800c08c:	3304      	adds	r3, #4
 800c08e:	f104 0015 	add.w	r0, r4, #21
 800c092:	4584      	cmp	ip, r0
 800c094:	bf38      	it	cc
 800c096:	2304      	movcc	r3, #4
 800c098:	50ca      	str	r2, [r1, r3]
 800c09a:	b10a      	cbz	r2, 800c0a0 <__lshift+0xa4>
 800c09c:	f108 0602 	add.w	r6, r8, #2
 800c0a0:	3e01      	subs	r6, #1
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	612e      	str	r6, [r5, #16]
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	f7ff fdda 	bl	800bc60 <_Bfree>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	e7c5      	b.n	800c046 <__lshift+0x4a>
 800c0ba:	3904      	subs	r1, #4
 800c0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0c4:	459c      	cmp	ip, r3
 800c0c6:	d8f9      	bhi.n	800c0bc <__lshift+0xc0>
 800c0c8:	e7ea      	b.n	800c0a0 <__lshift+0xa4>
 800c0ca:	bf00      	nop
 800c0cc:	0800e2f4 	.word	0x0800e2f4
 800c0d0:	0800e305 	.word	0x0800e305

0800c0d4 <__mcmp>:
 800c0d4:	690a      	ldr	r2, [r1, #16]
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	6900      	ldr	r0, [r0, #16]
 800c0da:	1a80      	subs	r0, r0, r2
 800c0dc:	b530      	push	{r4, r5, lr}
 800c0de:	d10e      	bne.n	800c0fe <__mcmp+0x2a>
 800c0e0:	3314      	adds	r3, #20
 800c0e2:	3114      	adds	r1, #20
 800c0e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0f4:	4295      	cmp	r5, r2
 800c0f6:	d003      	beq.n	800c100 <__mcmp+0x2c>
 800c0f8:	d205      	bcs.n	800c106 <__mcmp+0x32>
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fe:	bd30      	pop	{r4, r5, pc}
 800c100:	42a3      	cmp	r3, r4
 800c102:	d3f3      	bcc.n	800c0ec <__mcmp+0x18>
 800c104:	e7fb      	b.n	800c0fe <__mcmp+0x2a>
 800c106:	2001      	movs	r0, #1
 800c108:	e7f9      	b.n	800c0fe <__mcmp+0x2a>
	...

0800c10c <__mdiff>:
 800c10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4689      	mov	r9, r1
 800c112:	4606      	mov	r6, r0
 800c114:	4611      	mov	r1, r2
 800c116:	4648      	mov	r0, r9
 800c118:	4614      	mov	r4, r2
 800c11a:	f7ff ffdb 	bl	800c0d4 <__mcmp>
 800c11e:	1e05      	subs	r5, r0, #0
 800c120:	d112      	bne.n	800c148 <__mdiff+0x3c>
 800c122:	4629      	mov	r1, r5
 800c124:	4630      	mov	r0, r6
 800c126:	f7ff fd5b 	bl	800bbe0 <_Balloc>
 800c12a:	4602      	mov	r2, r0
 800c12c:	b928      	cbnz	r0, 800c13a <__mdiff+0x2e>
 800c12e:	4b3f      	ldr	r3, [pc, #252]	@ (800c22c <__mdiff+0x120>)
 800c130:	f240 2137 	movw	r1, #567	@ 0x237
 800c134:	483e      	ldr	r0, [pc, #248]	@ (800c230 <__mdiff+0x124>)
 800c136:	f000 fb03 	bl	800c740 <__assert_func>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c140:	4610      	mov	r0, r2
 800c142:	b003      	add	sp, #12
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	bfbc      	itt	lt
 800c14a:	464b      	movlt	r3, r9
 800c14c:	46a1      	movlt	r9, r4
 800c14e:	4630      	mov	r0, r6
 800c150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c154:	bfba      	itte	lt
 800c156:	461c      	movlt	r4, r3
 800c158:	2501      	movlt	r5, #1
 800c15a:	2500      	movge	r5, #0
 800c15c:	f7ff fd40 	bl	800bbe0 <_Balloc>
 800c160:	4602      	mov	r2, r0
 800c162:	b918      	cbnz	r0, 800c16c <__mdiff+0x60>
 800c164:	4b31      	ldr	r3, [pc, #196]	@ (800c22c <__mdiff+0x120>)
 800c166:	f240 2145 	movw	r1, #581	@ 0x245
 800c16a:	e7e3      	b.n	800c134 <__mdiff+0x28>
 800c16c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c170:	6926      	ldr	r6, [r4, #16]
 800c172:	60c5      	str	r5, [r0, #12]
 800c174:	f109 0310 	add.w	r3, r9, #16
 800c178:	f109 0514 	add.w	r5, r9, #20
 800c17c:	f104 0e14 	add.w	lr, r4, #20
 800c180:	f100 0b14 	add.w	fp, r0, #20
 800c184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	46d9      	mov	r9, fp
 800c190:	f04f 0c00 	mov.w	ip, #0
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c19a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	fa1f f38a 	uxth.w	r3, sl
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	b283      	uxth	r3, r0
 800c1a8:	1acb      	subs	r3, r1, r3
 800c1aa:	0c00      	lsrs	r0, r0, #16
 800c1ac:	4463      	add	r3, ip
 800c1ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1bc:	4576      	cmp	r6, lr
 800c1be:	f849 3b04 	str.w	r3, [r9], #4
 800c1c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1c6:	d8e5      	bhi.n	800c194 <__mdiff+0x88>
 800c1c8:	1b33      	subs	r3, r6, r4
 800c1ca:	3b15      	subs	r3, #21
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	3415      	adds	r4, #21
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	42a6      	cmp	r6, r4
 800c1d6:	bf38      	it	cc
 800c1d8:	2304      	movcc	r3, #4
 800c1da:	441d      	add	r5, r3
 800c1dc:	445b      	add	r3, fp
 800c1de:	461e      	mov	r6, r3
 800c1e0:	462c      	mov	r4, r5
 800c1e2:	4544      	cmp	r4, r8
 800c1e4:	d30e      	bcc.n	800c204 <__mdiff+0xf8>
 800c1e6:	f108 0103 	add.w	r1, r8, #3
 800c1ea:	1b49      	subs	r1, r1, r5
 800c1ec:	f021 0103 	bic.w	r1, r1, #3
 800c1f0:	3d03      	subs	r5, #3
 800c1f2:	45a8      	cmp	r8, r5
 800c1f4:	bf38      	it	cc
 800c1f6:	2100      	movcc	r1, #0
 800c1f8:	440b      	add	r3, r1
 800c1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1fe:	b191      	cbz	r1, 800c226 <__mdiff+0x11a>
 800c200:	6117      	str	r7, [r2, #16]
 800c202:	e79d      	b.n	800c140 <__mdiff+0x34>
 800c204:	f854 1b04 	ldr.w	r1, [r4], #4
 800c208:	46e6      	mov	lr, ip
 800c20a:	0c08      	lsrs	r0, r1, #16
 800c20c:	fa1c fc81 	uxtah	ip, ip, r1
 800c210:	4471      	add	r1, lr
 800c212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c216:	b289      	uxth	r1, r1
 800c218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c21c:	f846 1b04 	str.w	r1, [r6], #4
 800c220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c224:	e7dd      	b.n	800c1e2 <__mdiff+0xd6>
 800c226:	3f01      	subs	r7, #1
 800c228:	e7e7      	b.n	800c1fa <__mdiff+0xee>
 800c22a:	bf00      	nop
 800c22c:	0800e2f4 	.word	0x0800e2f4
 800c230:	0800e305 	.word	0x0800e305

0800c234 <__d2b>:
 800c234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c238:	460f      	mov	r7, r1
 800c23a:	2101      	movs	r1, #1
 800c23c:	ec59 8b10 	vmov	r8, r9, d0
 800c240:	4616      	mov	r6, r2
 800c242:	f7ff fccd 	bl	800bbe0 <_Balloc>
 800c246:	4604      	mov	r4, r0
 800c248:	b930      	cbnz	r0, 800c258 <__d2b+0x24>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4b23      	ldr	r3, [pc, #140]	@ (800c2dc <__d2b+0xa8>)
 800c24e:	4824      	ldr	r0, [pc, #144]	@ (800c2e0 <__d2b+0xac>)
 800c250:	f240 310f 	movw	r1, #783	@ 0x30f
 800c254:	f000 fa74 	bl	800c740 <__assert_func>
 800c258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c25c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c260:	b10d      	cbz	r5, 800c266 <__d2b+0x32>
 800c262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f1b8 0300 	subs.w	r3, r8, #0
 800c26c:	d023      	beq.n	800c2b6 <__d2b+0x82>
 800c26e:	4668      	mov	r0, sp
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	f7ff fd7c 	bl	800bd6e <__lo0bits>
 800c276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c27a:	b1d0      	cbz	r0, 800c2b2 <__d2b+0x7e>
 800c27c:	f1c0 0320 	rsb	r3, r0, #32
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	430b      	orrs	r3, r1
 800c286:	40c2      	lsrs	r2, r0
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	61a3      	str	r3, [r4, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	bf0c      	ite	eq
 800c294:	2201      	moveq	r2, #1
 800c296:	2202      	movne	r2, #2
 800c298:	6122      	str	r2, [r4, #16]
 800c29a:	b1a5      	cbz	r5, 800c2c6 <__d2b+0x92>
 800c29c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2a0:	4405      	add	r5, r0
 800c2a2:	603d      	str	r5, [r7, #0]
 800c2a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	6161      	str	r1, [r4, #20]
 800c2b4:	e7ea      	b.n	800c28c <__d2b+0x58>
 800c2b6:	a801      	add	r0, sp, #4
 800c2b8:	f7ff fd59 	bl	800bd6e <__lo0bits>
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	6163      	str	r3, [r4, #20]
 800c2c0:	3020      	adds	r0, #32
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	e7e8      	b.n	800c298 <__d2b+0x64>
 800c2c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2ce:	6038      	str	r0, [r7, #0]
 800c2d0:	6918      	ldr	r0, [r3, #16]
 800c2d2:	f7ff fd2d 	bl	800bd30 <__hi0bits>
 800c2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2da:	e7e5      	b.n	800c2a8 <__d2b+0x74>
 800c2dc:	0800e2f4 	.word	0x0800e2f4
 800c2e0:	0800e305 	.word	0x0800e305

0800c2e4 <__ssputs_r>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	688e      	ldr	r6, [r1, #8]
 800c2ea:	461f      	mov	r7, r3
 800c2ec:	42be      	cmp	r6, r7
 800c2ee:	680b      	ldr	r3, [r1, #0]
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	4690      	mov	r8, r2
 800c2f6:	d82d      	bhi.n	800c354 <__ssputs_r+0x70>
 800c2f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c300:	d026      	beq.n	800c350 <__ssputs_r+0x6c>
 800c302:	6965      	ldr	r5, [r4, #20]
 800c304:	6909      	ldr	r1, [r1, #16]
 800c306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c30a:	eba3 0901 	sub.w	r9, r3, r1
 800c30e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c312:	1c7b      	adds	r3, r7, #1
 800c314:	444b      	add	r3, r9
 800c316:	106d      	asrs	r5, r5, #1
 800c318:	429d      	cmp	r5, r3
 800c31a:	bf38      	it	cc
 800c31c:	461d      	movcc	r5, r3
 800c31e:	0553      	lsls	r3, r2, #21
 800c320:	d527      	bpl.n	800c372 <__ssputs_r+0x8e>
 800c322:	4629      	mov	r1, r5
 800c324:	f7ff fbd0 	bl	800bac8 <_malloc_r>
 800c328:	4606      	mov	r6, r0
 800c32a:	b360      	cbz	r0, 800c386 <__ssputs_r+0xa2>
 800c32c:	6921      	ldr	r1, [r4, #16]
 800c32e:	464a      	mov	r2, r9
 800c330:	f7fe fcf9 	bl	800ad26 <memcpy>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	6126      	str	r6, [r4, #16]
 800c342:	6165      	str	r5, [r4, #20]
 800c344:	444e      	add	r6, r9
 800c346:	eba5 0509 	sub.w	r5, r5, r9
 800c34a:	6026      	str	r6, [r4, #0]
 800c34c:	60a5      	str	r5, [r4, #8]
 800c34e:	463e      	mov	r6, r7
 800c350:	42be      	cmp	r6, r7
 800c352:	d900      	bls.n	800c356 <__ssputs_r+0x72>
 800c354:	463e      	mov	r6, r7
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	4632      	mov	r2, r6
 800c35a:	4641      	mov	r1, r8
 800c35c:	f000 f9c6 	bl	800c6ec <memmove>
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	1b9b      	subs	r3, r3, r6
 800c364:	60a3      	str	r3, [r4, #8]
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	4433      	add	r3, r6
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	2000      	movs	r0, #0
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	462a      	mov	r2, r5
 800c374:	f000 fa28 	bl	800c7c8 <_realloc_r>
 800c378:	4606      	mov	r6, r0
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d1e0      	bne.n	800c340 <__ssputs_r+0x5c>
 800c37e:	6921      	ldr	r1, [r4, #16]
 800c380:	4650      	mov	r0, sl
 800c382:	f7ff fb2d 	bl	800b9e0 <_free_r>
 800c386:	230c      	movs	r3, #12
 800c388:	f8ca 3000 	str.w	r3, [sl]
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e7e9      	b.n	800c36e <__ssputs_r+0x8a>
	...

0800c39c <_svfiprintf_r>:
 800c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	4698      	mov	r8, r3
 800c3a2:	898b      	ldrh	r3, [r1, #12]
 800c3a4:	061b      	lsls	r3, r3, #24
 800c3a6:	b09d      	sub	sp, #116	@ 0x74
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	d510      	bpl.n	800c3d2 <_svfiprintf_r+0x36>
 800c3b0:	690b      	ldr	r3, [r1, #16]
 800c3b2:	b973      	cbnz	r3, 800c3d2 <_svfiprintf_r+0x36>
 800c3b4:	2140      	movs	r1, #64	@ 0x40
 800c3b6:	f7ff fb87 	bl	800bac8 <_malloc_r>
 800c3ba:	6028      	str	r0, [r5, #0]
 800c3bc:	6128      	str	r0, [r5, #16]
 800c3be:	b930      	cbnz	r0, 800c3ce <_svfiprintf_r+0x32>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	b01d      	add	sp, #116	@ 0x74
 800c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	2340      	movs	r3, #64	@ 0x40
 800c3d0:	616b      	str	r3, [r5, #20]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	2320      	movs	r3, #32
 800c3d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3e0:	2330      	movs	r3, #48	@ 0x30
 800c3e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c580 <_svfiprintf_r+0x1e4>
 800c3e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3ea:	f04f 0901 	mov.w	r9, #1
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f6:	b10a      	cbz	r2, 800c3fc <_svfiprintf_r+0x60>
 800c3f8:	2a25      	cmp	r2, #37	@ 0x25
 800c3fa:	d1f9      	bne.n	800c3f0 <_svfiprintf_r+0x54>
 800c3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c400:	d00b      	beq.n	800c41a <_svfiprintf_r+0x7e>
 800c402:	465b      	mov	r3, fp
 800c404:	4622      	mov	r2, r4
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ff6b 	bl	800c2e4 <__ssputs_r>
 800c40e:	3001      	adds	r0, #1
 800c410:	f000 80a7 	beq.w	800c562 <_svfiprintf_r+0x1c6>
 800c414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c416:	445a      	add	r2, fp
 800c418:	9209      	str	r2, [sp, #36]	@ 0x24
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 809f 	beq.w	800c562 <_svfiprintf_r+0x1c6>
 800c424:	2300      	movs	r3, #0
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42e:	f10a 0a01 	add.w	sl, sl, #1
 800c432:	9304      	str	r3, [sp, #16]
 800c434:	9307      	str	r3, [sp, #28]
 800c436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c43a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c43c:	4654      	mov	r4, sl
 800c43e:	2205      	movs	r2, #5
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	484e      	ldr	r0, [pc, #312]	@ (800c580 <_svfiprintf_r+0x1e4>)
 800c446:	f7f3 fec3 	bl	80001d0 <memchr>
 800c44a:	9a04      	ldr	r2, [sp, #16]
 800c44c:	b9d8      	cbnz	r0, 800c486 <_svfiprintf_r+0xea>
 800c44e:	06d0      	lsls	r0, r2, #27
 800c450:	bf44      	itt	mi
 800c452:	2320      	movmi	r3, #32
 800c454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c458:	0711      	lsls	r1, r2, #28
 800c45a:	bf44      	itt	mi
 800c45c:	232b      	movmi	r3, #43	@ 0x2b
 800c45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b2a      	cmp	r3, #42	@ 0x2a
 800c468:	d015      	beq.n	800c496 <_svfiprintf_r+0xfa>
 800c46a:	9a07      	ldr	r2, [sp, #28]
 800c46c:	4654      	mov	r4, sl
 800c46e:	2000      	movs	r0, #0
 800c470:	f04f 0c0a 	mov.w	ip, #10
 800c474:	4621      	mov	r1, r4
 800c476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c47a:	3b30      	subs	r3, #48	@ 0x30
 800c47c:	2b09      	cmp	r3, #9
 800c47e:	d94b      	bls.n	800c518 <_svfiprintf_r+0x17c>
 800c480:	b1b0      	cbz	r0, 800c4b0 <_svfiprintf_r+0x114>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e014      	b.n	800c4b0 <_svfiprintf_r+0x114>
 800c486:	eba0 0308 	sub.w	r3, r0, r8
 800c48a:	fa09 f303 	lsl.w	r3, r9, r3
 800c48e:	4313      	orrs	r3, r2
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	46a2      	mov	sl, r4
 800c494:	e7d2      	b.n	800c43c <_svfiprintf_r+0xa0>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	1d19      	adds	r1, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9103      	str	r1, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfbb      	ittet	lt
 800c4a2:	425b      	neglt	r3, r3
 800c4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a8:	9307      	strge	r3, [sp, #28]
 800c4aa:	9307      	strlt	r3, [sp, #28]
 800c4ac:	bfb8      	it	lt
 800c4ae:	9204      	strlt	r2, [sp, #16]
 800c4b0:	7823      	ldrb	r3, [r4, #0]
 800c4b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4b4:	d10a      	bne.n	800c4cc <_svfiprintf_r+0x130>
 800c4b6:	7863      	ldrb	r3, [r4, #1]
 800c4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ba:	d132      	bne.n	800c522 <_svfiprintf_r+0x186>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	9203      	str	r2, [sp, #12]
 800c4c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4c8:	3402      	adds	r4, #2
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c590 <_svfiprintf_r+0x1f4>
 800c4d0:	7821      	ldrb	r1, [r4, #0]
 800c4d2:	2203      	movs	r2, #3
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f7f3 fe7b 	bl	80001d0 <memchr>
 800c4da:	b138      	cbz	r0, 800c4ec <_svfiprintf_r+0x150>
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	eba0 000a 	sub.w	r0, r0, sl
 800c4e2:	2240      	movs	r2, #64	@ 0x40
 800c4e4:	4082      	lsls	r2, r0
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	3401      	adds	r4, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f0:	4824      	ldr	r0, [pc, #144]	@ (800c584 <_svfiprintf_r+0x1e8>)
 800c4f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4f6:	2206      	movs	r2, #6
 800c4f8:	f7f3 fe6a 	bl	80001d0 <memchr>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d036      	beq.n	800c56e <_svfiprintf_r+0x1d2>
 800c500:	4b21      	ldr	r3, [pc, #132]	@ (800c588 <_svfiprintf_r+0x1ec>)
 800c502:	bb1b      	cbnz	r3, 800c54c <_svfiprintf_r+0x1b0>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	3307      	adds	r3, #7
 800c508:	f023 0307 	bic.w	r3, r3, #7
 800c50c:	3308      	adds	r3, #8
 800c50e:	9303      	str	r3, [sp, #12]
 800c510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c512:	4433      	add	r3, r6
 800c514:	9309      	str	r3, [sp, #36]	@ 0x24
 800c516:	e76a      	b.n	800c3ee <_svfiprintf_r+0x52>
 800c518:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51c:	460c      	mov	r4, r1
 800c51e:	2001      	movs	r0, #1
 800c520:	e7a8      	b.n	800c474 <_svfiprintf_r+0xd8>
 800c522:	2300      	movs	r3, #0
 800c524:	3401      	adds	r4, #1
 800c526:	9305      	str	r3, [sp, #20]
 800c528:	4619      	mov	r1, r3
 800c52a:	f04f 0c0a 	mov.w	ip, #10
 800c52e:	4620      	mov	r0, r4
 800c530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c534:	3a30      	subs	r2, #48	@ 0x30
 800c536:	2a09      	cmp	r2, #9
 800c538:	d903      	bls.n	800c542 <_svfiprintf_r+0x1a6>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0c6      	beq.n	800c4cc <_svfiprintf_r+0x130>
 800c53e:	9105      	str	r1, [sp, #20]
 800c540:	e7c4      	b.n	800c4cc <_svfiprintf_r+0x130>
 800c542:	fb0c 2101 	mla	r1, ip, r1, r2
 800c546:	4604      	mov	r4, r0
 800c548:	2301      	movs	r3, #1
 800c54a:	e7f0      	b.n	800c52e <_svfiprintf_r+0x192>
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	462a      	mov	r2, r5
 800c552:	4b0e      	ldr	r3, [pc, #56]	@ (800c58c <_svfiprintf_r+0x1f0>)
 800c554:	a904      	add	r1, sp, #16
 800c556:	4638      	mov	r0, r7
 800c558:	f7fd fdfe 	bl	800a158 <_printf_float>
 800c55c:	1c42      	adds	r2, r0, #1
 800c55e:	4606      	mov	r6, r0
 800c560:	d1d6      	bne.n	800c510 <_svfiprintf_r+0x174>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	065b      	lsls	r3, r3, #25
 800c566:	f53f af2d 	bmi.w	800c3c4 <_svfiprintf_r+0x28>
 800c56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c56c:	e72c      	b.n	800c3c8 <_svfiprintf_r+0x2c>
 800c56e:	ab03      	add	r3, sp, #12
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	462a      	mov	r2, r5
 800c574:	4b05      	ldr	r3, [pc, #20]	@ (800c58c <_svfiprintf_r+0x1f0>)
 800c576:	a904      	add	r1, sp, #16
 800c578:	4638      	mov	r0, r7
 800c57a:	f7fe f885 	bl	800a688 <_printf_i>
 800c57e:	e7ed      	b.n	800c55c <_svfiprintf_r+0x1c0>
 800c580:	0800e460 	.word	0x0800e460
 800c584:	0800e46a 	.word	0x0800e46a
 800c588:	0800a159 	.word	0x0800a159
 800c58c:	0800c2e5 	.word	0x0800c2e5
 800c590:	0800e466 	.word	0x0800e466

0800c594 <__sflush_r>:
 800c594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59c:	0716      	lsls	r6, r2, #28
 800c59e:	4605      	mov	r5, r0
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	d454      	bmi.n	800c64e <__sflush_r+0xba>
 800c5a4:	684b      	ldr	r3, [r1, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dc02      	bgt.n	800c5b0 <__sflush_r+0x1c>
 800c5aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd48      	ble.n	800c642 <__sflush_r+0xae>
 800c5b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5b2:	2e00      	cmp	r6, #0
 800c5b4:	d045      	beq.n	800c642 <__sflush_r+0xae>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c5bc:	682f      	ldr	r7, [r5, #0]
 800c5be:	6a21      	ldr	r1, [r4, #32]
 800c5c0:	602b      	str	r3, [r5, #0]
 800c5c2:	d030      	beq.n	800c626 <__sflush_r+0x92>
 800c5c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	0759      	lsls	r1, r3, #29
 800c5ca:	d505      	bpl.n	800c5d8 <__sflush_r+0x44>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5d2:	b10b      	cbz	r3, 800c5d8 <__sflush_r+0x44>
 800c5d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5d6:	1ad2      	subs	r2, r2, r3
 800c5d8:	2300      	movs	r3, #0
 800c5da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5dc:	6a21      	ldr	r1, [r4, #32]
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b0      	blx	r6
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	d106      	bne.n	800c5f6 <__sflush_r+0x62>
 800c5e8:	6829      	ldr	r1, [r5, #0]
 800c5ea:	291d      	cmp	r1, #29
 800c5ec:	d82b      	bhi.n	800c646 <__sflush_r+0xb2>
 800c5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c698 <__sflush_r+0x104>)
 800c5f0:	410a      	asrs	r2, r1
 800c5f2:	07d6      	lsls	r6, r2, #31
 800c5f4:	d427      	bmi.n	800c646 <__sflush_r+0xb2>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	6062      	str	r2, [r4, #4]
 800c5fa:	04d9      	lsls	r1, r3, #19
 800c5fc:	6922      	ldr	r2, [r4, #16]
 800c5fe:	6022      	str	r2, [r4, #0]
 800c600:	d504      	bpl.n	800c60c <__sflush_r+0x78>
 800c602:	1c42      	adds	r2, r0, #1
 800c604:	d101      	bne.n	800c60a <__sflush_r+0x76>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	b903      	cbnz	r3, 800c60c <__sflush_r+0x78>
 800c60a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c60e:	602f      	str	r7, [r5, #0]
 800c610:	b1b9      	cbz	r1, 800c642 <__sflush_r+0xae>
 800c612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c616:	4299      	cmp	r1, r3
 800c618:	d002      	beq.n	800c620 <__sflush_r+0x8c>
 800c61a:	4628      	mov	r0, r5
 800c61c:	f7ff f9e0 	bl	800b9e0 <_free_r>
 800c620:	2300      	movs	r3, #0
 800c622:	6363      	str	r3, [r4, #52]	@ 0x34
 800c624:	e00d      	b.n	800c642 <__sflush_r+0xae>
 800c626:	2301      	movs	r3, #1
 800c628:	4628      	mov	r0, r5
 800c62a:	47b0      	blx	r6
 800c62c:	4602      	mov	r2, r0
 800c62e:	1c50      	adds	r0, r2, #1
 800c630:	d1c9      	bne.n	800c5c6 <__sflush_r+0x32>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0c6      	beq.n	800c5c6 <__sflush_r+0x32>
 800c638:	2b1d      	cmp	r3, #29
 800c63a:	d001      	beq.n	800c640 <__sflush_r+0xac>
 800c63c:	2b16      	cmp	r3, #22
 800c63e:	d11e      	bne.n	800c67e <__sflush_r+0xea>
 800c640:	602f      	str	r7, [r5, #0]
 800c642:	2000      	movs	r0, #0
 800c644:	e022      	b.n	800c68c <__sflush_r+0xf8>
 800c646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c64a:	b21b      	sxth	r3, r3
 800c64c:	e01b      	b.n	800c686 <__sflush_r+0xf2>
 800c64e:	690f      	ldr	r7, [r1, #16]
 800c650:	2f00      	cmp	r7, #0
 800c652:	d0f6      	beq.n	800c642 <__sflush_r+0xae>
 800c654:	0793      	lsls	r3, r2, #30
 800c656:	680e      	ldr	r6, [r1, #0]
 800c658:	bf08      	it	eq
 800c65a:	694b      	ldreq	r3, [r1, #20]
 800c65c:	600f      	str	r7, [r1, #0]
 800c65e:	bf18      	it	ne
 800c660:	2300      	movne	r3, #0
 800c662:	eba6 0807 	sub.w	r8, r6, r7
 800c666:	608b      	str	r3, [r1, #8]
 800c668:	f1b8 0f00 	cmp.w	r8, #0
 800c66c:	dde9      	ble.n	800c642 <__sflush_r+0xae>
 800c66e:	6a21      	ldr	r1, [r4, #32]
 800c670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c672:	4643      	mov	r3, r8
 800c674:	463a      	mov	r2, r7
 800c676:	4628      	mov	r0, r5
 800c678:	47b0      	blx	r6
 800c67a:	2800      	cmp	r0, #0
 800c67c:	dc08      	bgt.n	800c690 <__sflush_r+0xfc>
 800c67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c686:	81a3      	strh	r3, [r4, #12]
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c690:	4407      	add	r7, r0
 800c692:	eba8 0800 	sub.w	r8, r8, r0
 800c696:	e7e7      	b.n	800c668 <__sflush_r+0xd4>
 800c698:	dfbffffe 	.word	0xdfbffffe

0800c69c <_fflush_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	690b      	ldr	r3, [r1, #16]
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	b913      	cbnz	r3, 800c6ac <_fflush_r+0x10>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	b118      	cbz	r0, 800c6b6 <_fflush_r+0x1a>
 800c6ae:	6a03      	ldr	r3, [r0, #32]
 800c6b0:	b90b      	cbnz	r3, 800c6b6 <_fflush_r+0x1a>
 800c6b2:	f7fe f995 	bl	800a9e0 <__sinit>
 800c6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0f3      	beq.n	800c6a6 <_fflush_r+0xa>
 800c6be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c6c0:	07d0      	lsls	r0, r2, #31
 800c6c2:	d404      	bmi.n	800c6ce <_fflush_r+0x32>
 800c6c4:	0599      	lsls	r1, r3, #22
 800c6c6:	d402      	bmi.n	800c6ce <_fflush_r+0x32>
 800c6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6ca:	f7fe fb2a 	bl	800ad22 <__retarget_lock_acquire_recursive>
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f7ff ff5f 	bl	800c594 <__sflush_r>
 800c6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6d8:	07da      	lsls	r2, r3, #31
 800c6da:	4605      	mov	r5, r0
 800c6dc:	d4e4      	bmi.n	800c6a8 <_fflush_r+0xc>
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	059b      	lsls	r3, r3, #22
 800c6e2:	d4e1      	bmi.n	800c6a8 <_fflush_r+0xc>
 800c6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6e6:	f7fe fb1d 	bl	800ad24 <__retarget_lock_release_recursive>
 800c6ea:	e7dd      	b.n	800c6a8 <_fflush_r+0xc>

0800c6ec <memmove>:
 800c6ec:	4288      	cmp	r0, r1
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	eb01 0402 	add.w	r4, r1, r2
 800c6f4:	d902      	bls.n	800c6fc <memmove+0x10>
 800c6f6:	4284      	cmp	r4, r0
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	d807      	bhi.n	800c70c <memmove+0x20>
 800c6fc:	1e43      	subs	r3, r0, #1
 800c6fe:	42a1      	cmp	r1, r4
 800c700:	d008      	beq.n	800c714 <memmove+0x28>
 800c702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c70a:	e7f8      	b.n	800c6fe <memmove+0x12>
 800c70c:	4402      	add	r2, r0
 800c70e:	4601      	mov	r1, r0
 800c710:	428a      	cmp	r2, r1
 800c712:	d100      	bne.n	800c716 <memmove+0x2a>
 800c714:	bd10      	pop	{r4, pc}
 800c716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c71e:	e7f7      	b.n	800c710 <memmove+0x24>

0800c720 <_sbrk_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	@ (800c73c <_sbrk_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f6 f8a8 	bl	8002880 <_sbrk>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_sbrk_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_sbrk_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20004c50 	.word	0x20004c50

0800c740 <__assert_func>:
 800c740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c742:	4614      	mov	r4, r2
 800c744:	461a      	mov	r2, r3
 800c746:	4b09      	ldr	r3, [pc, #36]	@ (800c76c <__assert_func+0x2c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4605      	mov	r5, r0
 800c74c:	68d8      	ldr	r0, [r3, #12]
 800c74e:	b954      	cbnz	r4, 800c766 <__assert_func+0x26>
 800c750:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <__assert_func+0x30>)
 800c752:	461c      	mov	r4, r3
 800c754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c758:	9100      	str	r1, [sp, #0]
 800c75a:	462b      	mov	r3, r5
 800c75c:	4905      	ldr	r1, [pc, #20]	@ (800c774 <__assert_func+0x34>)
 800c75e:	f000 f86f 	bl	800c840 <fiprintf>
 800c762:	f000 f87f 	bl	800c864 <abort>
 800c766:	4b04      	ldr	r3, [pc, #16]	@ (800c778 <__assert_func+0x38>)
 800c768:	e7f4      	b.n	800c754 <__assert_func+0x14>
 800c76a:	bf00      	nop
 800c76c:	2000001c 	.word	0x2000001c
 800c770:	0800e4b6 	.word	0x0800e4b6
 800c774:	0800e488 	.word	0x0800e488
 800c778:	0800e47b 	.word	0x0800e47b

0800c77c <_calloc_r>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	fba1 5402 	umull	r5, r4, r1, r2
 800c782:	b93c      	cbnz	r4, 800c794 <_calloc_r+0x18>
 800c784:	4629      	mov	r1, r5
 800c786:	f7ff f99f 	bl	800bac8 <_malloc_r>
 800c78a:	4606      	mov	r6, r0
 800c78c:	b928      	cbnz	r0, 800c79a <_calloc_r+0x1e>
 800c78e:	2600      	movs	r6, #0
 800c790:	4630      	mov	r0, r6
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	220c      	movs	r2, #12
 800c796:	6002      	str	r2, [r0, #0]
 800c798:	e7f9      	b.n	800c78e <_calloc_r+0x12>
 800c79a:	462a      	mov	r2, r5
 800c79c:	4621      	mov	r1, r4
 800c79e:	f7fe f9ec 	bl	800ab7a <memset>
 800c7a2:	e7f5      	b.n	800c790 <_calloc_r+0x14>

0800c7a4 <__ascii_mbtowc>:
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	b901      	cbnz	r1, 800c7aa <__ascii_mbtowc+0x6>
 800c7a8:	a901      	add	r1, sp, #4
 800c7aa:	b142      	cbz	r2, 800c7be <__ascii_mbtowc+0x1a>
 800c7ac:	b14b      	cbz	r3, 800c7c2 <__ascii_mbtowc+0x1e>
 800c7ae:	7813      	ldrb	r3, [r2, #0]
 800c7b0:	600b      	str	r3, [r1, #0]
 800c7b2:	7812      	ldrb	r2, [r2, #0]
 800c7b4:	1e10      	subs	r0, r2, #0
 800c7b6:	bf18      	it	ne
 800c7b8:	2001      	movne	r0, #1
 800c7ba:	b002      	add	sp, #8
 800c7bc:	4770      	bx	lr
 800c7be:	4610      	mov	r0, r2
 800c7c0:	e7fb      	b.n	800c7ba <__ascii_mbtowc+0x16>
 800c7c2:	f06f 0001 	mvn.w	r0, #1
 800c7c6:	e7f8      	b.n	800c7ba <__ascii_mbtowc+0x16>

0800c7c8 <_realloc_r>:
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	4680      	mov	r8, r0
 800c7ce:	4615      	mov	r5, r2
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	b921      	cbnz	r1, 800c7de <_realloc_r+0x16>
 800c7d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d8:	4611      	mov	r1, r2
 800c7da:	f7ff b975 	b.w	800bac8 <_malloc_r>
 800c7de:	b92a      	cbnz	r2, 800c7ec <_realloc_r+0x24>
 800c7e0:	f7ff f8fe 	bl	800b9e0 <_free_r>
 800c7e4:	2400      	movs	r4, #0
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ec:	f000 f841 	bl	800c872 <_malloc_usable_size_r>
 800c7f0:	4285      	cmp	r5, r0
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	d802      	bhi.n	800c7fc <_realloc_r+0x34>
 800c7f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7fa:	d8f4      	bhi.n	800c7e6 <_realloc_r+0x1e>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4640      	mov	r0, r8
 800c800:	f7ff f962 	bl	800bac8 <_malloc_r>
 800c804:	4607      	mov	r7, r0
 800c806:	2800      	cmp	r0, #0
 800c808:	d0ec      	beq.n	800c7e4 <_realloc_r+0x1c>
 800c80a:	42b5      	cmp	r5, r6
 800c80c:	462a      	mov	r2, r5
 800c80e:	4621      	mov	r1, r4
 800c810:	bf28      	it	cs
 800c812:	4632      	movcs	r2, r6
 800c814:	f7fe fa87 	bl	800ad26 <memcpy>
 800c818:	4621      	mov	r1, r4
 800c81a:	4640      	mov	r0, r8
 800c81c:	f7ff f8e0 	bl	800b9e0 <_free_r>
 800c820:	463c      	mov	r4, r7
 800c822:	e7e0      	b.n	800c7e6 <_realloc_r+0x1e>

0800c824 <__ascii_wctomb>:
 800c824:	4603      	mov	r3, r0
 800c826:	4608      	mov	r0, r1
 800c828:	b141      	cbz	r1, 800c83c <__ascii_wctomb+0x18>
 800c82a:	2aff      	cmp	r2, #255	@ 0xff
 800c82c:	d904      	bls.n	800c838 <__ascii_wctomb+0x14>
 800c82e:	228a      	movs	r2, #138	@ 0x8a
 800c830:	601a      	str	r2, [r3, #0]
 800c832:	f04f 30ff 	mov.w	r0, #4294967295
 800c836:	4770      	bx	lr
 800c838:	700a      	strb	r2, [r1, #0]
 800c83a:	2001      	movs	r0, #1
 800c83c:	4770      	bx	lr
	...

0800c840 <fiprintf>:
 800c840:	b40e      	push	{r1, r2, r3}
 800c842:	b503      	push	{r0, r1, lr}
 800c844:	4601      	mov	r1, r0
 800c846:	ab03      	add	r3, sp, #12
 800c848:	4805      	ldr	r0, [pc, #20]	@ (800c860 <fiprintf+0x20>)
 800c84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c84e:	6800      	ldr	r0, [r0, #0]
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	f000 f83f 	bl	800c8d4 <_vfiprintf_r>
 800c856:	b002      	add	sp, #8
 800c858:	f85d eb04 	ldr.w	lr, [sp], #4
 800c85c:	b003      	add	sp, #12
 800c85e:	4770      	bx	lr
 800c860:	2000001c 	.word	0x2000001c

0800c864 <abort>:
 800c864:	b508      	push	{r3, lr}
 800c866:	2006      	movs	r0, #6
 800c868:	f000 fa08 	bl	800cc7c <raise>
 800c86c:	2001      	movs	r0, #1
 800c86e:	f7f5 ff8f 	bl	8002790 <_exit>

0800c872 <_malloc_usable_size_r>:
 800c872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c876:	1f18      	subs	r0, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bfbc      	itt	lt
 800c87c:	580b      	ldrlt	r3, [r1, r0]
 800c87e:	18c0      	addlt	r0, r0, r3
 800c880:	4770      	bx	lr

0800c882 <__sfputc_r>:
 800c882:	6893      	ldr	r3, [r2, #8]
 800c884:	3b01      	subs	r3, #1
 800c886:	2b00      	cmp	r3, #0
 800c888:	b410      	push	{r4}
 800c88a:	6093      	str	r3, [r2, #8]
 800c88c:	da08      	bge.n	800c8a0 <__sfputc_r+0x1e>
 800c88e:	6994      	ldr	r4, [r2, #24]
 800c890:	42a3      	cmp	r3, r4
 800c892:	db01      	blt.n	800c898 <__sfputc_r+0x16>
 800c894:	290a      	cmp	r1, #10
 800c896:	d103      	bne.n	800c8a0 <__sfputc_r+0x1e>
 800c898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c89c:	f000 b932 	b.w	800cb04 <__swbuf_r>
 800c8a0:	6813      	ldr	r3, [r2, #0]
 800c8a2:	1c58      	adds	r0, r3, #1
 800c8a4:	6010      	str	r0, [r2, #0]
 800c8a6:	7019      	strb	r1, [r3, #0]
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <__sfputs_r>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	460f      	mov	r7, r1
 800c8b6:	4614      	mov	r4, r2
 800c8b8:	18d5      	adds	r5, r2, r3
 800c8ba:	42ac      	cmp	r4, r5
 800c8bc:	d101      	bne.n	800c8c2 <__sfputs_r+0x12>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	e007      	b.n	800c8d2 <__sfputs_r+0x22>
 800c8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c6:	463a      	mov	r2, r7
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f7ff ffda 	bl	800c882 <__sfputc_r>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	d1f3      	bne.n	800c8ba <__sfputs_r+0xa>
 800c8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8d4 <_vfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	460d      	mov	r5, r1
 800c8da:	b09d      	sub	sp, #116	@ 0x74
 800c8dc:	4614      	mov	r4, r2
 800c8de:	4698      	mov	r8, r3
 800c8e0:	4606      	mov	r6, r0
 800c8e2:	b118      	cbz	r0, 800c8ec <_vfiprintf_r+0x18>
 800c8e4:	6a03      	ldr	r3, [r0, #32]
 800c8e6:	b90b      	cbnz	r3, 800c8ec <_vfiprintf_r+0x18>
 800c8e8:	f7fe f87a 	bl	800a9e0 <__sinit>
 800c8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8ee:	07d9      	lsls	r1, r3, #31
 800c8f0:	d405      	bmi.n	800c8fe <_vfiprintf_r+0x2a>
 800c8f2:	89ab      	ldrh	r3, [r5, #12]
 800c8f4:	059a      	lsls	r2, r3, #22
 800c8f6:	d402      	bmi.n	800c8fe <_vfiprintf_r+0x2a>
 800c8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8fa:	f7fe fa12 	bl	800ad22 <__retarget_lock_acquire_recursive>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	071b      	lsls	r3, r3, #28
 800c902:	d501      	bpl.n	800c908 <_vfiprintf_r+0x34>
 800c904:	692b      	ldr	r3, [r5, #16]
 800c906:	b99b      	cbnz	r3, 800c930 <_vfiprintf_r+0x5c>
 800c908:	4629      	mov	r1, r5
 800c90a:	4630      	mov	r0, r6
 800c90c:	f000 f938 	bl	800cb80 <__swsetup_r>
 800c910:	b170      	cbz	r0, 800c930 <_vfiprintf_r+0x5c>
 800c912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c914:	07dc      	lsls	r4, r3, #31
 800c916:	d504      	bpl.n	800c922 <_vfiprintf_r+0x4e>
 800c918:	f04f 30ff 	mov.w	r0, #4294967295
 800c91c:	b01d      	add	sp, #116	@ 0x74
 800c91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c922:	89ab      	ldrh	r3, [r5, #12]
 800c924:	0598      	lsls	r0, r3, #22
 800c926:	d4f7      	bmi.n	800c918 <_vfiprintf_r+0x44>
 800c928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c92a:	f7fe f9fb 	bl	800ad24 <__retarget_lock_release_recursive>
 800c92e:	e7f3      	b.n	800c918 <_vfiprintf_r+0x44>
 800c930:	2300      	movs	r3, #0
 800c932:	9309      	str	r3, [sp, #36]	@ 0x24
 800c934:	2320      	movs	r3, #32
 800c936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c93e:	2330      	movs	r3, #48	@ 0x30
 800c940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800caf0 <_vfiprintf_r+0x21c>
 800c944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c948:	f04f 0901 	mov.w	r9, #1
 800c94c:	4623      	mov	r3, r4
 800c94e:	469a      	mov	sl, r3
 800c950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c954:	b10a      	cbz	r2, 800c95a <_vfiprintf_r+0x86>
 800c956:	2a25      	cmp	r2, #37	@ 0x25
 800c958:	d1f9      	bne.n	800c94e <_vfiprintf_r+0x7a>
 800c95a:	ebba 0b04 	subs.w	fp, sl, r4
 800c95e:	d00b      	beq.n	800c978 <_vfiprintf_r+0xa4>
 800c960:	465b      	mov	r3, fp
 800c962:	4622      	mov	r2, r4
 800c964:	4629      	mov	r1, r5
 800c966:	4630      	mov	r0, r6
 800c968:	f7ff ffa2 	bl	800c8b0 <__sfputs_r>
 800c96c:	3001      	adds	r0, #1
 800c96e:	f000 80a7 	beq.w	800cac0 <_vfiprintf_r+0x1ec>
 800c972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c974:	445a      	add	r2, fp
 800c976:	9209      	str	r2, [sp, #36]	@ 0x24
 800c978:	f89a 3000 	ldrb.w	r3, [sl]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 809f 	beq.w	800cac0 <_vfiprintf_r+0x1ec>
 800c982:	2300      	movs	r3, #0
 800c984:	f04f 32ff 	mov.w	r2, #4294967295
 800c988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c98c:	f10a 0a01 	add.w	sl, sl, #1
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	9307      	str	r3, [sp, #28]
 800c994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c998:	931a      	str	r3, [sp, #104]	@ 0x68
 800c99a:	4654      	mov	r4, sl
 800c99c:	2205      	movs	r2, #5
 800c99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a2:	4853      	ldr	r0, [pc, #332]	@ (800caf0 <_vfiprintf_r+0x21c>)
 800c9a4:	f7f3 fc14 	bl	80001d0 <memchr>
 800c9a8:	9a04      	ldr	r2, [sp, #16]
 800c9aa:	b9d8      	cbnz	r0, 800c9e4 <_vfiprintf_r+0x110>
 800c9ac:	06d1      	lsls	r1, r2, #27
 800c9ae:	bf44      	itt	mi
 800c9b0:	2320      	movmi	r3, #32
 800c9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9b6:	0713      	lsls	r3, r2, #28
 800c9b8:	bf44      	itt	mi
 800c9ba:	232b      	movmi	r3, #43	@ 0x2b
 800c9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9c6:	d015      	beq.n	800c9f4 <_vfiprintf_r+0x120>
 800c9c8:	9a07      	ldr	r2, [sp, #28]
 800c9ca:	4654      	mov	r4, sl
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f04f 0c0a 	mov.w	ip, #10
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9d8:	3b30      	subs	r3, #48	@ 0x30
 800c9da:	2b09      	cmp	r3, #9
 800c9dc:	d94b      	bls.n	800ca76 <_vfiprintf_r+0x1a2>
 800c9de:	b1b0      	cbz	r0, 800ca0e <_vfiprintf_r+0x13a>
 800c9e0:	9207      	str	r2, [sp, #28]
 800c9e2:	e014      	b.n	800ca0e <_vfiprintf_r+0x13a>
 800c9e4:	eba0 0308 	sub.w	r3, r0, r8
 800c9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	46a2      	mov	sl, r4
 800c9f2:	e7d2      	b.n	800c99a <_vfiprintf_r+0xc6>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	1d19      	adds	r1, r3, #4
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	9103      	str	r1, [sp, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bfbb      	ittet	lt
 800ca00:	425b      	neglt	r3, r3
 800ca02:	f042 0202 	orrlt.w	r2, r2, #2
 800ca06:	9307      	strge	r3, [sp, #28]
 800ca08:	9307      	strlt	r3, [sp, #28]
 800ca0a:	bfb8      	it	lt
 800ca0c:	9204      	strlt	r2, [sp, #16]
 800ca0e:	7823      	ldrb	r3, [r4, #0]
 800ca10:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca12:	d10a      	bne.n	800ca2a <_vfiprintf_r+0x156>
 800ca14:	7863      	ldrb	r3, [r4, #1]
 800ca16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca18:	d132      	bne.n	800ca80 <_vfiprintf_r+0x1ac>
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	1d1a      	adds	r2, r3, #4
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	9203      	str	r2, [sp, #12]
 800ca22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca26:	3402      	adds	r4, #2
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb00 <_vfiprintf_r+0x22c>
 800ca2e:	7821      	ldrb	r1, [r4, #0]
 800ca30:	2203      	movs	r2, #3
 800ca32:	4650      	mov	r0, sl
 800ca34:	f7f3 fbcc 	bl	80001d0 <memchr>
 800ca38:	b138      	cbz	r0, 800ca4a <_vfiprintf_r+0x176>
 800ca3a:	9b04      	ldr	r3, [sp, #16]
 800ca3c:	eba0 000a 	sub.w	r0, r0, sl
 800ca40:	2240      	movs	r2, #64	@ 0x40
 800ca42:	4082      	lsls	r2, r0
 800ca44:	4313      	orrs	r3, r2
 800ca46:	3401      	adds	r4, #1
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	4829      	ldr	r0, [pc, #164]	@ (800caf4 <_vfiprintf_r+0x220>)
 800ca50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca54:	2206      	movs	r2, #6
 800ca56:	f7f3 fbbb 	bl	80001d0 <memchr>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d03f      	beq.n	800cade <_vfiprintf_r+0x20a>
 800ca5e:	4b26      	ldr	r3, [pc, #152]	@ (800caf8 <_vfiprintf_r+0x224>)
 800ca60:	bb1b      	cbnz	r3, 800caaa <_vfiprintf_r+0x1d6>
 800ca62:	9b03      	ldr	r3, [sp, #12]
 800ca64:	3307      	adds	r3, #7
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	9303      	str	r3, [sp, #12]
 800ca6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca70:	443b      	add	r3, r7
 800ca72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca74:	e76a      	b.n	800c94c <_vfiprintf_r+0x78>
 800ca76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	2001      	movs	r0, #1
 800ca7e:	e7a8      	b.n	800c9d2 <_vfiprintf_r+0xfe>
 800ca80:	2300      	movs	r3, #0
 800ca82:	3401      	adds	r4, #1
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	4619      	mov	r1, r3
 800ca88:	f04f 0c0a 	mov.w	ip, #10
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca92:	3a30      	subs	r2, #48	@ 0x30
 800ca94:	2a09      	cmp	r2, #9
 800ca96:	d903      	bls.n	800caa0 <_vfiprintf_r+0x1cc>
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d0c6      	beq.n	800ca2a <_vfiprintf_r+0x156>
 800ca9c:	9105      	str	r1, [sp, #20]
 800ca9e:	e7c4      	b.n	800ca2a <_vfiprintf_r+0x156>
 800caa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800caa4:	4604      	mov	r4, r0
 800caa6:	2301      	movs	r3, #1
 800caa8:	e7f0      	b.n	800ca8c <_vfiprintf_r+0x1b8>
 800caaa:	ab03      	add	r3, sp, #12
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	462a      	mov	r2, r5
 800cab0:	4b12      	ldr	r3, [pc, #72]	@ (800cafc <_vfiprintf_r+0x228>)
 800cab2:	a904      	add	r1, sp, #16
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7fd fb4f 	bl	800a158 <_printf_float>
 800caba:	4607      	mov	r7, r0
 800cabc:	1c78      	adds	r0, r7, #1
 800cabe:	d1d6      	bne.n	800ca6e <_vfiprintf_r+0x19a>
 800cac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cac2:	07d9      	lsls	r1, r3, #31
 800cac4:	d405      	bmi.n	800cad2 <_vfiprintf_r+0x1fe>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	059a      	lsls	r2, r3, #22
 800caca:	d402      	bmi.n	800cad2 <_vfiprintf_r+0x1fe>
 800cacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cace:	f7fe f929 	bl	800ad24 <__retarget_lock_release_recursive>
 800cad2:	89ab      	ldrh	r3, [r5, #12]
 800cad4:	065b      	lsls	r3, r3, #25
 800cad6:	f53f af1f 	bmi.w	800c918 <_vfiprintf_r+0x44>
 800cada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cadc:	e71e      	b.n	800c91c <_vfiprintf_r+0x48>
 800cade:	ab03      	add	r3, sp, #12
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	462a      	mov	r2, r5
 800cae4:	4b05      	ldr	r3, [pc, #20]	@ (800cafc <_vfiprintf_r+0x228>)
 800cae6:	a904      	add	r1, sp, #16
 800cae8:	4630      	mov	r0, r6
 800caea:	f7fd fdcd 	bl	800a688 <_printf_i>
 800caee:	e7e4      	b.n	800caba <_vfiprintf_r+0x1e6>
 800caf0:	0800e460 	.word	0x0800e460
 800caf4:	0800e46a 	.word	0x0800e46a
 800caf8:	0800a159 	.word	0x0800a159
 800cafc:	0800c8b1 	.word	0x0800c8b1
 800cb00:	0800e466 	.word	0x0800e466

0800cb04 <__swbuf_r>:
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb06:	460e      	mov	r6, r1
 800cb08:	4614      	mov	r4, r2
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	b118      	cbz	r0, 800cb16 <__swbuf_r+0x12>
 800cb0e:	6a03      	ldr	r3, [r0, #32]
 800cb10:	b90b      	cbnz	r3, 800cb16 <__swbuf_r+0x12>
 800cb12:	f7fd ff65 	bl	800a9e0 <__sinit>
 800cb16:	69a3      	ldr	r3, [r4, #24]
 800cb18:	60a3      	str	r3, [r4, #8]
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	071a      	lsls	r2, r3, #28
 800cb1e:	d501      	bpl.n	800cb24 <__swbuf_r+0x20>
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	b943      	cbnz	r3, 800cb36 <__swbuf_r+0x32>
 800cb24:	4621      	mov	r1, r4
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 f82a 	bl	800cb80 <__swsetup_r>
 800cb2c:	b118      	cbz	r0, 800cb36 <__swbuf_r+0x32>
 800cb2e:	f04f 37ff 	mov.w	r7, #4294967295
 800cb32:	4638      	mov	r0, r7
 800cb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	6922      	ldr	r2, [r4, #16]
 800cb3a:	1a98      	subs	r0, r3, r2
 800cb3c:	6963      	ldr	r3, [r4, #20]
 800cb3e:	b2f6      	uxtb	r6, r6
 800cb40:	4283      	cmp	r3, r0
 800cb42:	4637      	mov	r7, r6
 800cb44:	dc05      	bgt.n	800cb52 <__swbuf_r+0x4e>
 800cb46:	4621      	mov	r1, r4
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f7ff fda7 	bl	800c69c <_fflush_r>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1ed      	bne.n	800cb2e <__swbuf_r+0x2a>
 800cb52:	68a3      	ldr	r3, [r4, #8]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	60a3      	str	r3, [r4, #8]
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	6022      	str	r2, [r4, #0]
 800cb5e:	701e      	strb	r6, [r3, #0]
 800cb60:	6962      	ldr	r2, [r4, #20]
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d004      	beq.n	800cb72 <__swbuf_r+0x6e>
 800cb68:	89a3      	ldrh	r3, [r4, #12]
 800cb6a:	07db      	lsls	r3, r3, #31
 800cb6c:	d5e1      	bpl.n	800cb32 <__swbuf_r+0x2e>
 800cb6e:	2e0a      	cmp	r6, #10
 800cb70:	d1df      	bne.n	800cb32 <__swbuf_r+0x2e>
 800cb72:	4621      	mov	r1, r4
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7ff fd91 	bl	800c69c <_fflush_r>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d0d9      	beq.n	800cb32 <__swbuf_r+0x2e>
 800cb7e:	e7d6      	b.n	800cb2e <__swbuf_r+0x2a>

0800cb80 <__swsetup_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	4b29      	ldr	r3, [pc, #164]	@ (800cc28 <__swsetup_r+0xa8>)
 800cb84:	4605      	mov	r5, r0
 800cb86:	6818      	ldr	r0, [r3, #0]
 800cb88:	460c      	mov	r4, r1
 800cb8a:	b118      	cbz	r0, 800cb94 <__swsetup_r+0x14>
 800cb8c:	6a03      	ldr	r3, [r0, #32]
 800cb8e:	b90b      	cbnz	r3, 800cb94 <__swsetup_r+0x14>
 800cb90:	f7fd ff26 	bl	800a9e0 <__sinit>
 800cb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb98:	0719      	lsls	r1, r3, #28
 800cb9a:	d422      	bmi.n	800cbe2 <__swsetup_r+0x62>
 800cb9c:	06da      	lsls	r2, r3, #27
 800cb9e:	d407      	bmi.n	800cbb0 <__swsetup_r+0x30>
 800cba0:	2209      	movs	r2, #9
 800cba2:	602a      	str	r2, [r5, #0]
 800cba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cbae:	e033      	b.n	800cc18 <__swsetup_r+0x98>
 800cbb0:	0758      	lsls	r0, r3, #29
 800cbb2:	d512      	bpl.n	800cbda <__swsetup_r+0x5a>
 800cbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbb6:	b141      	cbz	r1, 800cbca <__swsetup_r+0x4a>
 800cbb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbbc:	4299      	cmp	r1, r3
 800cbbe:	d002      	beq.n	800cbc6 <__swsetup_r+0x46>
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f7fe ff0d 	bl	800b9e0 <_free_r>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6063      	str	r3, [r4, #4]
 800cbd6:	6923      	ldr	r3, [r4, #16]
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	f043 0308 	orr.w	r3, r3, #8
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	b94b      	cbnz	r3, 800cbfa <__swsetup_r+0x7a>
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cbec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbf0:	d003      	beq.n	800cbfa <__swsetup_r+0x7a>
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	f000 f883 	bl	800cd00 <__smakebuf_r>
 800cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfe:	f013 0201 	ands.w	r2, r3, #1
 800cc02:	d00a      	beq.n	800cc1a <__swsetup_r+0x9a>
 800cc04:	2200      	movs	r2, #0
 800cc06:	60a2      	str	r2, [r4, #8]
 800cc08:	6962      	ldr	r2, [r4, #20]
 800cc0a:	4252      	negs	r2, r2
 800cc0c:	61a2      	str	r2, [r4, #24]
 800cc0e:	6922      	ldr	r2, [r4, #16]
 800cc10:	b942      	cbnz	r2, 800cc24 <__swsetup_r+0xa4>
 800cc12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc16:	d1c5      	bne.n	800cba4 <__swsetup_r+0x24>
 800cc18:	bd38      	pop	{r3, r4, r5, pc}
 800cc1a:	0799      	lsls	r1, r3, #30
 800cc1c:	bf58      	it	pl
 800cc1e:	6962      	ldrpl	r2, [r4, #20]
 800cc20:	60a2      	str	r2, [r4, #8]
 800cc22:	e7f4      	b.n	800cc0e <__swsetup_r+0x8e>
 800cc24:	2000      	movs	r0, #0
 800cc26:	e7f7      	b.n	800cc18 <__swsetup_r+0x98>
 800cc28:	2000001c 	.word	0x2000001c

0800cc2c <_raise_r>:
 800cc2c:	291f      	cmp	r1, #31
 800cc2e:	b538      	push	{r3, r4, r5, lr}
 800cc30:	4605      	mov	r5, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	d904      	bls.n	800cc40 <_raise_r+0x14>
 800cc36:	2316      	movs	r3, #22
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc42:	b112      	cbz	r2, 800cc4a <_raise_r+0x1e>
 800cc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc48:	b94b      	cbnz	r3, 800cc5e <_raise_r+0x32>
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 f830 	bl	800ccb0 <_getpid_r>
 800cc50:	4622      	mov	r2, r4
 800cc52:	4601      	mov	r1, r0
 800cc54:	4628      	mov	r0, r5
 800cc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc5a:	f000 b817 	b.w	800cc8c <_kill_r>
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d00a      	beq.n	800cc78 <_raise_r+0x4c>
 800cc62:	1c59      	adds	r1, r3, #1
 800cc64:	d103      	bne.n	800cc6e <_raise_r+0x42>
 800cc66:	2316      	movs	r3, #22
 800cc68:	6003      	str	r3, [r0, #0]
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	e7e7      	b.n	800cc3e <_raise_r+0x12>
 800cc6e:	2100      	movs	r1, #0
 800cc70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc74:	4620      	mov	r0, r4
 800cc76:	4798      	blx	r3
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e7e0      	b.n	800cc3e <_raise_r+0x12>

0800cc7c <raise>:
 800cc7c:	4b02      	ldr	r3, [pc, #8]	@ (800cc88 <raise+0xc>)
 800cc7e:	4601      	mov	r1, r0
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	f7ff bfd3 	b.w	800cc2c <_raise_r>
 800cc86:	bf00      	nop
 800cc88:	2000001c 	.word	0x2000001c

0800cc8c <_kill_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	@ (800ccac <_kill_r+0x20>)
 800cc90:	2300      	movs	r3, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	f7f5 fd69 	bl	8002770 <_kill>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	d102      	bne.n	800cca8 <_kill_r+0x1c>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b103      	cbz	r3, 800cca8 <_kill_r+0x1c>
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	bd38      	pop	{r3, r4, r5, pc}
 800ccaa:	bf00      	nop
 800ccac:	20004c50 	.word	0x20004c50

0800ccb0 <_getpid_r>:
 800ccb0:	f7f5 bd56 	b.w	8002760 <_getpid>

0800ccb4 <__swhatbuf_r>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	b096      	sub	sp, #88	@ 0x58
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	461e      	mov	r6, r3
 800ccc4:	da0d      	bge.n	800cce2 <__swhatbuf_r+0x2e>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cccc:	f04f 0100 	mov.w	r1, #0
 800ccd0:	bf14      	ite	ne
 800ccd2:	2340      	movne	r3, #64	@ 0x40
 800ccd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ccd8:	2000      	movs	r0, #0
 800ccda:	6031      	str	r1, [r6, #0]
 800ccdc:	602b      	str	r3, [r5, #0]
 800ccde:	b016      	add	sp, #88	@ 0x58
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	466a      	mov	r2, sp
 800cce4:	f000 f848 	bl	800cd78 <_fstat_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	dbec      	blt.n	800ccc6 <__swhatbuf_r+0x12>
 800ccec:	9901      	ldr	r1, [sp, #4]
 800ccee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccf6:	4259      	negs	r1, r3
 800ccf8:	4159      	adcs	r1, r3
 800ccfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccfe:	e7eb      	b.n	800ccd8 <__swhatbuf_r+0x24>

0800cd00 <__smakebuf_r>:
 800cd00:	898b      	ldrh	r3, [r1, #12]
 800cd02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd04:	079d      	lsls	r5, r3, #30
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	d507      	bpl.n	800cd1c <__smakebuf_r+0x1c>
 800cd0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	2301      	movs	r3, #1
 800cd16:	6163      	str	r3, [r4, #20]
 800cd18:	b003      	add	sp, #12
 800cd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd1c:	ab01      	add	r3, sp, #4
 800cd1e:	466a      	mov	r2, sp
 800cd20:	f7ff ffc8 	bl	800ccb4 <__swhatbuf_r>
 800cd24:	9f00      	ldr	r7, [sp, #0]
 800cd26:	4605      	mov	r5, r0
 800cd28:	4639      	mov	r1, r7
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7fe fecc 	bl	800bac8 <_malloc_r>
 800cd30:	b948      	cbnz	r0, 800cd46 <__smakebuf_r+0x46>
 800cd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd36:	059a      	lsls	r2, r3, #22
 800cd38:	d4ee      	bmi.n	800cd18 <__smakebuf_r+0x18>
 800cd3a:	f023 0303 	bic.w	r3, r3, #3
 800cd3e:	f043 0302 	orr.w	r3, r3, #2
 800cd42:	81a3      	strh	r3, [r4, #12]
 800cd44:	e7e2      	b.n	800cd0c <__smakebuf_r+0xc>
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	6020      	str	r0, [r4, #0]
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd56:	b15b      	cbz	r3, 800cd70 <__smakebuf_r+0x70>
 800cd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 f81d 	bl	800cd9c <_isatty_r>
 800cd62:	b128      	cbz	r0, 800cd70 <__smakebuf_r+0x70>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	431d      	orrs	r5, r3
 800cd74:	81a5      	strh	r5, [r4, #12]
 800cd76:	e7cf      	b.n	800cd18 <__smakebuf_r+0x18>

0800cd78 <_fstat_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d07      	ldr	r5, [pc, #28]	@ (800cd98 <_fstat_r+0x20>)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4604      	mov	r4, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	4611      	mov	r1, r2
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	f7f5 fd53 	bl	8002830 <_fstat>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	d102      	bne.n	800cd94 <_fstat_r+0x1c>
 800cd8e:	682b      	ldr	r3, [r5, #0]
 800cd90:	b103      	cbz	r3, 800cd94 <_fstat_r+0x1c>
 800cd92:	6023      	str	r3, [r4, #0]
 800cd94:	bd38      	pop	{r3, r4, r5, pc}
 800cd96:	bf00      	nop
 800cd98:	20004c50 	.word	0x20004c50

0800cd9c <_isatty_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d06      	ldr	r5, [pc, #24]	@ (800cdb8 <_isatty_r+0x1c>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	602b      	str	r3, [r5, #0]
 800cda8:	f7f5 fd52 	bl	8002850 <_isatty>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_isatty_r+0x1a>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_isatty_r+0x1a>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20004c50 	.word	0x20004c50
 800cdbc:	00000000 	.word	0x00000000

0800cdc0 <log>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	ed2d 8b02 	vpush	{d8}
 800cdc6:	ec55 4b10 	vmov	r4, r5, d0
 800cdca:	f000 f841 	bl	800ce50 <__ieee754_log>
 800cdce:	4622      	mov	r2, r4
 800cdd0:	462b      	mov	r3, r5
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	eeb0 8a40 	vmov.f32	s16, s0
 800cdda:	eef0 8a60 	vmov.f32	s17, s1
 800cdde:	f7f3 fea5 	bl	8000b2c <__aeabi_dcmpun>
 800cde2:	b998      	cbnz	r0, 800ce0c <log+0x4c>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	4620      	mov	r0, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7f3 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800cdf0:	b960      	cbnz	r0, 800ce0c <log+0x4c>
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7f3 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdfe:	b160      	cbz	r0, 800ce1a <log+0x5a>
 800ce00:	f7fd ff64 	bl	800accc <__errno>
 800ce04:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800ce30 <log+0x70>
 800ce08:	2322      	movs	r3, #34	@ 0x22
 800ce0a:	6003      	str	r3, [r0, #0]
 800ce0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ce10:	eef0 0a68 	vmov.f32	s1, s17
 800ce14:	ecbd 8b02 	vpop	{d8}
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	f7fd ff57 	bl	800accc <__errno>
 800ce1e:	ecbd 8b02 	vpop	{d8}
 800ce22:	2321      	movs	r3, #33	@ 0x21
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce2a:	4803      	ldr	r0, [pc, #12]	@ (800ce38 <log+0x78>)
 800ce2c:	f000 b808 	b.w	800ce40 <nan>
 800ce30:	00000000 	.word	0x00000000
 800ce34:	fff00000 	.word	0xfff00000
 800ce38:	0800e4b6 	.word	0x0800e4b6
 800ce3c:	00000000 	.word	0x00000000

0800ce40 <nan>:
 800ce40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce48 <nan+0x8>
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	00000000 	.word	0x00000000
 800ce4c:	7ff80000 	.word	0x7ff80000

0800ce50 <__ieee754_log>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	ec51 0b10 	vmov	r0, r1, d0
 800ce58:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800ce5c:	b087      	sub	sp, #28
 800ce5e:	460d      	mov	r5, r1
 800ce60:	da26      	bge.n	800ceb0 <__ieee754_log+0x60>
 800ce62:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce66:	4303      	orrs	r3, r0
 800ce68:	4602      	mov	r2, r0
 800ce6a:	d10a      	bne.n	800ce82 <__ieee754_log+0x32>
 800ce6c:	49ce      	ldr	r1, [pc, #824]	@ (800d1a8 <__ieee754_log+0x358>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	2300      	movs	r3, #0
 800ce72:	2000      	movs	r0, #0
 800ce74:	f7f3 fcea 	bl	800084c <__aeabi_ddiv>
 800ce78:	ec41 0b10 	vmov	d0, r0, r1
 800ce7c:	b007      	add	sp, #28
 800ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce82:	2900      	cmp	r1, #0
 800ce84:	da05      	bge.n	800ce92 <__ieee754_log+0x42>
 800ce86:	460b      	mov	r3, r1
 800ce88:	f7f3 f9fe 	bl	8000288 <__aeabi_dsub>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e7f0      	b.n	800ce74 <__ieee754_log+0x24>
 800ce92:	4bc6      	ldr	r3, [pc, #792]	@ (800d1ac <__ieee754_log+0x35c>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	f7f3 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ce9a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800ce9e:	460d      	mov	r5, r1
 800cea0:	4ac3      	ldr	r2, [pc, #780]	@ (800d1b0 <__ieee754_log+0x360>)
 800cea2:	4295      	cmp	r5, r2
 800cea4:	dd06      	ble.n	800ceb4 <__ieee754_log+0x64>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	f7f3 f9ef 	bl	800028c <__adddf3>
 800ceae:	e7e3      	b.n	800ce78 <__ieee754_log+0x28>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e7f5      	b.n	800cea0 <__ieee754_log+0x50>
 800ceb4:	152c      	asrs	r4, r5, #20
 800ceb6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800ceba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cebe:	441c      	add	r4, r3
 800cec0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800cec4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800cec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cecc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800ced0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800ced4:	ea42 0105 	orr.w	r1, r2, r5
 800ced8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cedc:	2200      	movs	r2, #0
 800cede:	4bb5      	ldr	r3, [pc, #724]	@ (800d1b4 <__ieee754_log+0x364>)
 800cee0:	f7f3 f9d2 	bl	8000288 <__aeabi_dsub>
 800cee4:	1cab      	adds	r3, r5, #2
 800cee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	4682      	mov	sl, r0
 800ceee:	468b      	mov	fp, r1
 800cef0:	f04f 0200 	mov.w	r2, #0
 800cef4:	dc53      	bgt.n	800cf9e <__ieee754_log+0x14e>
 800cef6:	2300      	movs	r3, #0
 800cef8:	f7f3 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cefc:	b1d0      	cbz	r0, 800cf34 <__ieee754_log+0xe4>
 800cefe:	2c00      	cmp	r4, #0
 800cf00:	f000 8120 	beq.w	800d144 <__ieee754_log+0x2f4>
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7f3 fb0d 	bl	8000524 <__aeabi_i2d>
 800cf0a:	a391      	add	r3, pc, #580	@ (adr r3, 800d150 <__ieee754_log+0x300>)
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	4606      	mov	r6, r0
 800cf12:	460f      	mov	r7, r1
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	a38f      	add	r3, pc, #572	@ (adr r3, 800d158 <__ieee754_log+0x308>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	4604      	mov	r4, r0
 800cf20:	460d      	mov	r5, r1
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	f7f3 fb67 	bl	80005f8 <__aeabi_dmul>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	e7ba      	b.n	800ceaa <__ieee754_log+0x5a>
 800cf34:	a38a      	add	r3, pc, #552	@ (adr r3, 800d160 <__ieee754_log+0x310>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	4659      	mov	r1, fp
 800cf3e:	f7f3 fb5b 	bl	80005f8 <__aeabi_dmul>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	2000      	movs	r0, #0
 800cf48:	499b      	ldr	r1, [pc, #620]	@ (800d1b8 <__ieee754_log+0x368>)
 800cf4a:	f7f3 f99d 	bl	8000288 <__aeabi_dsub>
 800cf4e:	4652      	mov	r2, sl
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	465b      	mov	r3, fp
 800cf56:	4650      	mov	r0, sl
 800cf58:	4659      	mov	r1, fp
 800cf5a:	f7f3 fb4d 	bl	80005f8 <__aeabi_dmul>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7f3 fb47 	bl	80005f8 <__aeabi_dmul>
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	b914      	cbnz	r4, 800cf76 <__ieee754_log+0x126>
 800cf70:	4632      	mov	r2, r6
 800cf72:	463b      	mov	r3, r7
 800cf74:	e0a0      	b.n	800d0b8 <__ieee754_log+0x268>
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7f3 fad4 	bl	8000524 <__aeabi_i2d>
 800cf7c:	a374      	add	r3, pc, #464	@ (adr r3, 800d150 <__ieee754_log+0x300>)
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	4680      	mov	r8, r0
 800cf84:	4689      	mov	r9, r1
 800cf86:	f7f3 fb37 	bl	80005f8 <__aeabi_dmul>
 800cf8a:	a373      	add	r3, pc, #460	@ (adr r3, 800d158 <__ieee754_log+0x308>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	4640      	mov	r0, r8
 800cf96:	4649      	mov	r1, r9
 800cf98:	f7f3 fb2e 	bl	80005f8 <__aeabi_dmul>
 800cf9c:	e0a5      	b.n	800d0ea <__ieee754_log+0x29a>
 800cf9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cfa2:	f7f3 f973 	bl	800028c <__adddf3>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4650      	mov	r0, sl
 800cfac:	4659      	mov	r1, fp
 800cfae:	f7f3 fc4d 	bl	800084c <__aeabi_ddiv>
 800cfb2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7f3 fab4 	bl	8000524 <__aeabi_i2d>
 800cfbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f7f3 fb16 	bl	80005f8 <__aeabi_dmul>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfd4:	f7f3 fb10 	bl	80005f8 <__aeabi_dmul>
 800cfd8:	a363      	add	r3, pc, #396	@ (adr r3, 800d168 <__ieee754_log+0x318>)
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	4680      	mov	r8, r0
 800cfe0:	4689      	mov	r9, r1
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	a362      	add	r3, pc, #392	@ (adr r3, 800d170 <__ieee754_log+0x320>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	f7f3 f94e 	bl	800028c <__adddf3>
 800cff0:	4642      	mov	r2, r8
 800cff2:	464b      	mov	r3, r9
 800cff4:	f7f3 fb00 	bl	80005f8 <__aeabi_dmul>
 800cff8:	a35f      	add	r3, pc, #380	@ (adr r3, 800d178 <__ieee754_log+0x328>)
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f7f3 f945 	bl	800028c <__adddf3>
 800d002:	4642      	mov	r2, r8
 800d004:	464b      	mov	r3, r9
 800d006:	f7f3 faf7 	bl	80005f8 <__aeabi_dmul>
 800d00a:	a35d      	add	r3, pc, #372	@ (adr r3, 800d180 <__ieee754_log+0x330>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f7f3 f93c 	bl	800028c <__adddf3>
 800d014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d018:	f7f3 faee 	bl	80005f8 <__aeabi_dmul>
 800d01c:	a35a      	add	r3, pc, #360	@ (adr r3, 800d188 <__ieee754_log+0x338>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 fae5 	bl	80005f8 <__aeabi_dmul>
 800d02e:	a358      	add	r3, pc, #352	@ (adr r3, 800d190 <__ieee754_log+0x340>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 f92a 	bl	800028c <__adddf3>
 800d038:	4642      	mov	r2, r8
 800d03a:	464b      	mov	r3, r9
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	a355      	add	r3, pc, #340	@ (adr r3, 800d198 <__ieee754_log+0x348>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f7f3 f921 	bl	800028c <__adddf3>
 800d04a:	4642      	mov	r2, r8
 800d04c:	464b      	mov	r3, r9
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800d05e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d062:	f7f3 f913 	bl	800028c <__adddf3>
 800d066:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800d06a:	3551      	adds	r5, #81	@ 0x51
 800d06c:	4335      	orrs	r5, r6
 800d06e:	2d00      	cmp	r5, #0
 800d070:	4680      	mov	r8, r0
 800d072:	4689      	mov	r9, r1
 800d074:	dd48      	ble.n	800d108 <__ieee754_log+0x2b8>
 800d076:	4b50      	ldr	r3, [pc, #320]	@ (800d1b8 <__ieee754_log+0x368>)
 800d078:	2200      	movs	r2, #0
 800d07a:	4650      	mov	r0, sl
 800d07c:	4659      	mov	r1, fp
 800d07e:	f7f3 fabb 	bl	80005f8 <__aeabi_dmul>
 800d082:	4652      	mov	r2, sl
 800d084:	465b      	mov	r3, fp
 800d086:	f7f3 fab7 	bl	80005f8 <__aeabi_dmul>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4606      	mov	r6, r0
 800d090:	460f      	mov	r7, r1
 800d092:	4640      	mov	r0, r8
 800d094:	4649      	mov	r1, r9
 800d096:	f7f3 f8f9 	bl	800028c <__adddf3>
 800d09a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d09e:	f7f3 faab 	bl	80005f8 <__aeabi_dmul>
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	4689      	mov	r9, r1
 800d0a6:	b964      	cbnz	r4, 800d0c2 <__ieee754_log+0x272>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	f7f3 f8ea 	bl	8000288 <__aeabi_dsub>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4650      	mov	r0, sl
 800d0ba:	4659      	mov	r1, fp
 800d0bc:	f7f3 f8e4 	bl	8000288 <__aeabi_dsub>
 800d0c0:	e6da      	b.n	800ce78 <__ieee754_log+0x28>
 800d0c2:	a323      	add	r3, pc, #140	@ (adr r3, 800d150 <__ieee754_log+0x300>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0cc:	f7f3 fa94 	bl	80005f8 <__aeabi_dmul>
 800d0d0:	a321      	add	r3, pc, #132	@ (adr r3, 800d158 <__ieee754_log+0x308>)
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	460d      	mov	r5, r1
 800d0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0de:	f7f3 fa8b 	bl	80005f8 <__aeabi_dmul>
 800d0e2:	4642      	mov	r2, r8
 800d0e4:	464b      	mov	r3, r9
 800d0e6:	f7f3 f8d1 	bl	800028c <__adddf3>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 f8c9 	bl	8000288 <__aeabi_dsub>
 800d0f6:	4652      	mov	r2, sl
 800d0f8:	465b      	mov	r3, fp
 800d0fa:	f7f3 f8c5 	bl	8000288 <__aeabi_dsub>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4620      	mov	r0, r4
 800d104:	4629      	mov	r1, r5
 800d106:	e7d9      	b.n	800d0bc <__ieee754_log+0x26c>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4650      	mov	r0, sl
 800d10e:	4659      	mov	r1, fp
 800d110:	f7f3 f8ba 	bl	8000288 <__aeabi_dsub>
 800d114:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d118:	f7f3 fa6e 	bl	80005f8 <__aeabi_dmul>
 800d11c:	4606      	mov	r6, r0
 800d11e:	460f      	mov	r7, r1
 800d120:	2c00      	cmp	r4, #0
 800d122:	f43f af25 	beq.w	800cf70 <__ieee754_log+0x120>
 800d126:	a30a      	add	r3, pc, #40	@ (adr r3, 800d150 <__ieee754_log+0x300>)
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d130:	f7f3 fa62 	bl	80005f8 <__aeabi_dmul>
 800d134:	a308      	add	r3, pc, #32	@ (adr r3, 800d158 <__ieee754_log+0x308>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d142:	e729      	b.n	800cf98 <__ieee754_log+0x148>
 800d144:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800d1a0 <__ieee754_log+0x350>
 800d148:	e698      	b.n	800ce7c <__ieee754_log+0x2c>
 800d14a:	bf00      	nop
 800d14c:	f3af 8000 	nop.w
 800d150:	fee00000 	.word	0xfee00000
 800d154:	3fe62e42 	.word	0x3fe62e42
 800d158:	35793c76 	.word	0x35793c76
 800d15c:	3dea39ef 	.word	0x3dea39ef
 800d160:	55555555 	.word	0x55555555
 800d164:	3fd55555 	.word	0x3fd55555
 800d168:	df3e5244 	.word	0xdf3e5244
 800d16c:	3fc2f112 	.word	0x3fc2f112
 800d170:	96cb03de 	.word	0x96cb03de
 800d174:	3fc74664 	.word	0x3fc74664
 800d178:	94229359 	.word	0x94229359
 800d17c:	3fd24924 	.word	0x3fd24924
 800d180:	55555593 	.word	0x55555593
 800d184:	3fe55555 	.word	0x3fe55555
 800d188:	d078c69f 	.word	0xd078c69f
 800d18c:	3fc39a09 	.word	0x3fc39a09
 800d190:	1d8e78af 	.word	0x1d8e78af
 800d194:	3fcc71c5 	.word	0x3fcc71c5
 800d198:	9997fa04 	.word	0x9997fa04
 800d19c:	3fd99999 	.word	0x3fd99999
	...
 800d1a8:	c3500000 	.word	0xc3500000
 800d1ac:	43500000 	.word	0x43500000
 800d1b0:	7fefffff 	.word	0x7fefffff
 800d1b4:	3ff00000 	.word	0x3ff00000
 800d1b8:	3fe00000 	.word	0x3fe00000

0800d1bc <_init>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	bf00      	nop
 800d1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1c2:	bc08      	pop	{r3}
 800d1c4:	469e      	mov	lr, r3
 800d1c6:	4770      	bx	lr

0800d1c8 <_fini>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	bf00      	nop
 800d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ce:	bc08      	pop	{r3}
 800d1d0:	469e      	mov	lr, r3
 800d1d2:	4770      	bx	lr
